// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type GetSessionResponseContent struct {
	// The ID of the session
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the user which can be used when interacting with other APIs.
	UserID           *string                `json:"user_id,omitempty" url:"user_id,omitempty"`
	CreatedAt        *SessionDate           `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt        *SessionDate           `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	AuthenticatedAt  *SessionDate           `json:"authenticated_at,omitempty" url:"authenticated_at,omitempty"`
	IdleExpiresAt    *SessionDate           `json:"idle_expires_at,omitempty" url:"idle_expires_at,omitempty"`
	ExpiresAt        *SessionDate           `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	LastInteractedAt *SessionDate           `json:"last_interacted_at,omitempty" url:"last_interacted_at,omitempty"`
	Device           *SessionDeviceMetadata `json:"device,omitempty" url:"device,omitempty"`
	// List of client details for the session
	Clients        []*SessionClientMetadata      `json:"clients,omitempty" url:"clients,omitempty"`
	Authentication *SessionAuthenticationSignals `json:"authentication,omitempty" url:"authentication,omitempty"`
	Cookie         *SessionCookieMetadata        `json:"cookie,omitempty" url:"cookie,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetSessionResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetSessionResponseContent) GetUserID() *string {
	if g == nil {
		return nil
	}
	return g.UserID
}

func (g *GetSessionResponseContent) GetCreatedAt() *SessionDate {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetSessionResponseContent) GetUpdatedAt() *SessionDate {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetSessionResponseContent) GetAuthenticatedAt() *SessionDate {
	if g == nil {
		return nil
	}
	return g.AuthenticatedAt
}

func (g *GetSessionResponseContent) GetIdleExpiresAt() *SessionDate {
	if g == nil {
		return nil
	}
	return g.IdleExpiresAt
}

func (g *GetSessionResponseContent) GetExpiresAt() *SessionDate {
	if g == nil {
		return nil
	}
	return g.ExpiresAt
}

func (g *GetSessionResponseContent) GetLastInteractedAt() *SessionDate {
	if g == nil {
		return nil
	}
	return g.LastInteractedAt
}

func (g *GetSessionResponseContent) GetDevice() *SessionDeviceMetadata {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetSessionResponseContent) GetClients() []*SessionClientMetadata {
	if g == nil {
		return nil
	}
	return g.Clients
}

func (g *GetSessionResponseContent) GetAuthentication() *SessionAuthenticationSignals {
	if g == nil {
		return nil
	}
	return g.Authentication
}

func (g *GetSessionResponseContent) GetCookie() *SessionCookieMetadata {
	if g == nil {
		return nil
	}
	return g.Cookie
}

func (g *GetSessionResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetSessionResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetSessionResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetSessionResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSessionResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetSessionResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetSessionResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Code generated by Fern. DO NOT EDIT.

package usersimports

import (
	context "context"
	fmt "fmt"
	http "net/http"

	management "github.com/auth0/go-auth0/v2/management"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	jobs "github.com/auth0/go-auth0/v2/management/jobs"
	option "github.com/auth0/go-auth0/v2/management/option"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) Create(
	ctx context.Context,
	request *jobs.CreateImportUsersRequestContent,
	opts ...option.RequestOption,
) (*core.Response[*management.CreateImportUsersResponseContent], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := baseURL + "/jobs/users-imports"
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &management.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &management.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &management.ForbiddenError{
				APIError: apiError,
			}
		},
		413: func(apiError *core.APIError) error {
			return &management.ContentTooLargeError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &management.TooManyRequestsError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &management.InternalServerError{
				APIError: apiError,
			}
		},
	}
	writer := internal.NewMultipartWriter()
	if err := writer.WriteFile("users", request.Users); err != nil {
		return nil, err
	}
	if err := writer.WriteField("connection_id", request.ConnectionID); err != nil {
		return nil, err
	}
	if request.Upsert != nil {
		if err := writer.WriteField("upsert", fmt.Sprintf("%v", *request.Upsert)); err != nil {
			return nil, err
		}
	}
	if request.ExternalID != nil {
		if err := writer.WriteField("external_id", *request.ExternalID); err != nil {
			return nil, err
		}
	}
	if request.SendCompletionEmail != nil {
		if err := writer.WriteField("send_completion_email", fmt.Sprintf("%v", *request.SendCompletionEmail)); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.ContentType())

	var response *management.CreateImportUsersResponseContent
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*management.CreateImportUsersResponseContent]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

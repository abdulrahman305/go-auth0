// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

// Custom color settings.
type BrandingColors struct {
	// Accent color.
	Primary        *string                 `json:"primary,omitempty" url:"primary,omitempty"`
	PageBackground *BrandingPageBackground `json:"page_background,omitempty" url:"page_background,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingColors) GetPrimary() *string {
	if b == nil {
		return nil
	}
	return b.Primary
}

func (b *BrandingColors) GetPageBackground() *BrandingPageBackground {
	if b == nil {
		return nil
	}
	return b.PageBackground
}

func (b *BrandingColors) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingColors) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingColors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingColors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingColors) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Custom font settings.
type BrandingFont struct {
	// URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.
	URL *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingFont) GetURL() *string {
	if b == nil {
		return nil
	}
	return b.URL
}

func (b *BrandingFont) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingFont) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingFont
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingFont(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingFont) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Page Background Color or Gradient.
// Property contains either <code>null</code> to unset, a solid color as a string value <code>#FFFFFF</code>, or a gradient as an object.
//
// <pre><code>
//
//	{
//	  type: 'linear-gradient',
//	  start: '#FFFFFF',
//	  end: '#000000',
//	  angle_deg: 35
//	}
//
// </code></pre>
type BrandingPageBackground struct {
	StringOptional           *string
	StringUnknownMapOptional map[string]interface{}

	typ string
}

func (b *BrandingPageBackground) GetStringOptional() *string {
	if b == nil {
		return nil
	}
	return b.StringOptional
}

func (b *BrandingPageBackground) GetStringUnknownMapOptional() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.StringUnknownMapOptional
}

func (b *BrandingPageBackground) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		b.typ = "StringOptional"
		b.StringOptional = valueStringOptional
		return nil
	}
	var valueStringUnknownMapOptional map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMapOptional); err == nil {
		b.typ = "StringUnknownMapOptional"
		b.StringUnknownMapOptional = valueStringUnknownMapOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BrandingPageBackground) MarshalJSON() ([]byte, error) {
	if b.typ == "StringOptional" || b.StringOptional != nil {
		return json.Marshal(b.StringOptional)
	}
	if b.typ == "StringUnknownMapOptional" || b.StringUnknownMapOptional != nil {
		return json.Marshal(b.StringUnknownMapOptional)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BrandingPageBackgroundVisitor interface {
	VisitStringOptional(*string) error
	VisitStringUnknownMapOptional(map[string]interface{}) error
}

func (b *BrandingPageBackground) Accept(visitor BrandingPageBackgroundVisitor) error {
	if b.typ == "StringOptional" || b.StringOptional != nil {
		return visitor.VisitStringOptional(b.StringOptional)
	}
	if b.typ == "StringUnknownMapOptional" || b.StringUnknownMapOptional != nil {
		return visitor.VisitStringUnknownMapOptional(b.StringUnknownMapOptional)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

type GetBrandingResponseContent struct {
	Colors *BrandingColors `json:"colors,omitempty" url:"colors,omitempty"`
	// URL for the favicon. Must use HTTPS.
	FaviconURL *string `json:"favicon_url,omitempty" url:"favicon_url,omitempty"`
	// URL for the logo. Must use HTTPS.
	LogoURL *string       `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Font    *BrandingFont `json:"font,omitempty" url:"font,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetBrandingResponseContent) GetColors() *BrandingColors {
	if g == nil {
		return nil
	}
	return g.Colors
}

func (g *GetBrandingResponseContent) GetFaviconURL() *string {
	if g == nil {
		return nil
	}
	return g.FaviconURL
}

func (g *GetBrandingResponseContent) GetLogoURL() *string {
	if g == nil {
		return nil
	}
	return g.LogoURL
}

func (g *GetBrandingResponseContent) GetFont() *BrandingFont {
	if g == nil {
		return nil
	}
	return g.Font
}

func (g *GetBrandingResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetBrandingResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetBrandingResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetBrandingResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBrandingResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetBrandingResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetBrandingResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Custom color settings.
type UpdateBrandingColors struct {
	// Accent color.
	Primary        *string                       `json:"primary,omitempty" url:"primary,omitempty"`
	PageBackground *UpdateBrandingPageBackground `json:"page_background,omitempty" url:"page_background,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBrandingColors) GetPrimary() *string {
	if u == nil {
		return nil
	}
	return u.Primary
}

func (u *UpdateBrandingColors) GetPageBackground() *UpdateBrandingPageBackground {
	if u == nil {
		return nil
	}
	return u.PageBackground
}

func (u *UpdateBrandingColors) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBrandingColors) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBrandingColors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateBrandingColors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBrandingColors) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Custom font settings.
type UpdateBrandingFont struct {
	// URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.
	URL *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBrandingFont) GetURL() *string {
	if u == nil {
		return nil
	}
	return u.URL
}

func (u *UpdateBrandingFont) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBrandingFont) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBrandingFont
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateBrandingFont(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBrandingFont) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Page Background Color or Gradient.
// Property contains either <code>null</code> to unset, a solid color as a string value <code>#FFFFFF</code>, or a gradient as an object.
//
// <pre><code>
//
//	{
//	  type: 'linear-gradient',
//	  start: '#FFFFFF',
//	  end: '#000000',
//	  angle_deg: 35
//	}
//
// </code></pre>
type UpdateBrandingPageBackground struct {
	StringOptional           *string
	StringUnknownMapOptional map[string]interface{}

	typ string
}

func (u *UpdateBrandingPageBackground) GetStringOptional() *string {
	if u == nil {
		return nil
	}
	return u.StringOptional
}

func (u *UpdateBrandingPageBackground) GetStringUnknownMapOptional() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.StringUnknownMapOptional
}

func (u *UpdateBrandingPageBackground) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		u.typ = "StringOptional"
		u.StringOptional = valueStringOptional
		return nil
	}
	var valueStringUnknownMapOptional map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMapOptional); err == nil {
		u.typ = "StringUnknownMapOptional"
		u.StringUnknownMapOptional = valueStringUnknownMapOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateBrandingPageBackground) MarshalJSON() ([]byte, error) {
	if u.typ == "StringOptional" || u.StringOptional != nil {
		return json.Marshal(u.StringOptional)
	}
	if u.typ == "StringUnknownMapOptional" || u.StringUnknownMapOptional != nil {
		return json.Marshal(u.StringUnknownMapOptional)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateBrandingPageBackgroundVisitor interface {
	VisitStringOptional(*string) error
	VisitStringUnknownMapOptional(map[string]interface{}) error
}

func (u *UpdateBrandingPageBackground) Accept(visitor UpdateBrandingPageBackgroundVisitor) error {
	if u.typ == "StringOptional" || u.StringOptional != nil {
		return visitor.VisitStringOptional(u.StringOptional)
	}
	if u.typ == "StringUnknownMapOptional" || u.StringUnknownMapOptional != nil {
		return visitor.VisitStringUnknownMapOptional(u.StringUnknownMapOptional)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateBrandingResponseContent struct {
	Colors *BrandingColors `json:"colors,omitempty" url:"colors,omitempty"`
	// URL for the favicon. Must use HTTPS.
	FaviconURL *string `json:"favicon_url,omitempty" url:"favicon_url,omitempty"`
	// URL for the logo. Must use HTTPS.
	LogoURL *string       `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Font    *BrandingFont `json:"font,omitempty" url:"font,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateBrandingResponseContent) GetColors() *BrandingColors {
	if u == nil {
		return nil
	}
	return u.Colors
}

func (u *UpdateBrandingResponseContent) GetFaviconURL() *string {
	if u == nil {
		return nil
	}
	return u.FaviconURL
}

func (u *UpdateBrandingResponseContent) GetLogoURL() *string {
	if u == nil {
		return nil
	}
	return u.LogoURL
}

func (u *UpdateBrandingResponseContent) GetFont() *BrandingFont {
	if u == nil {
		return nil
	}
	return u.Font
}

func (u *UpdateBrandingResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateBrandingResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateBrandingResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateBrandingResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBrandingResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateBrandingResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UpdateBrandingResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateBrandingRequestContent struct {
	Colors *UpdateBrandingColors `json:"colors,omitempty" url:"-"`
	// URL for the favicon. Must use HTTPS.
	FaviconURL *string `json:"favicon_url,omitempty" url:"-"`
	// URL for the logo. Must use HTTPS.
	LogoURL *string             `json:"logo_url,omitempty" url:"-"`
	Font    *UpdateBrandingFont `json:"font,omitempty" url:"-"`
}

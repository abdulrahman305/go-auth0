// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateClientGrantRequestContent struct {
	// ID of the client.
	ClientID string `json:"client_id" url:"-"`
	// The audience (API identifier) of this client grant
	Audience          string                            `json:"audience" url:"-"`
	OrganizationUsage *ClientGrantOrganizationUsageEnum `json:"organization_usage,omitempty" url:"-"`
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"-"`
	// Scopes allowed for this client grant.
	Scope       []string                    `json:"scope,omitempty" url:"-"`
	SubjectType *ClientGrantSubjectTypeEnum `json:"subject_type,omitempty" url:"-"`
	// Types of authorization_details allowed for this client grant. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href= "https://www.okta.com/legal/"> Master Subscription Agreement.</a>
	AuthorizationDetailsTypes []string `json:"authorization_details_types,omitempty" url:"-"`
}

type ListClientGrantsRequestParameters struct {
	// Optional Id from which to start selection.
	From *string `json:"-" url:"from,omitempty"`
	// Number of results per page. Defaults to 50.
	Take *int `json:"-" url:"take,omitempty"`
	// Optional filter on audience.
	Audience *string `json:"-" url:"audience,omitempty"`
	// Optional filter on client_id.
	ClientID *string `json:"-" url:"client_id,omitempty"`
	// Optional filter on allow_any_organization.
	AllowAnyOrganization *ClientGrantAllowAnyOrganizationEnum `json:"-" url:"allow_any_organization,omitempty"`
	// The type of application access the client grant allows. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href="https://www.okta.com/legal/"> Master Subscription Agreement.</a>
	SubjectType *ClientGrantSubjectTypeEnum `json:"-" url:"subject_type,omitempty"`
}

// Optional filter on allow_any_organization.
type ClientGrantAllowAnyOrganizationEnum = bool

// Controls how organizations may be used with this grant
type ClientGrantOrganizationNullableUsageEnum = *string

// Defines whether organizations can be used with client credentials exchanges for this grant.
type ClientGrantOrganizationUsageEnum string

const (
	ClientGrantOrganizationUsageEnumDeny    ClientGrantOrganizationUsageEnum = "deny"
	ClientGrantOrganizationUsageEnumAllow   ClientGrantOrganizationUsageEnum = "allow"
	ClientGrantOrganizationUsageEnumRequire ClientGrantOrganizationUsageEnum = "require"
)

func NewClientGrantOrganizationUsageEnumFromString(s string) (ClientGrantOrganizationUsageEnum, error) {
	switch s {
	case "deny":
		return ClientGrantOrganizationUsageEnumDeny, nil
	case "allow":
		return ClientGrantOrganizationUsageEnumAllow, nil
	case "require":
		return ClientGrantOrganizationUsageEnumRequire, nil
	}
	var t ClientGrantOrganizationUsageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientGrantOrganizationUsageEnum) Ptr() *ClientGrantOrganizationUsageEnum {
	return &c
}

type ClientGrantResponseContent struct {
	// ID of the client grant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the client.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The audience (API identifier) of this client grant.
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scopes allowed for this client grant.
	Scope             []string                          `json:"scope,omitempty" url:"scope,omitempty"`
	OrganizationUsage *ClientGrantOrganizationUsageEnum `json:"organization_usage,omitempty" url:"organization_usage,omitempty"`
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"allow_any_organization,omitempty"`
	// If enabled, this grant is a special grant created by Auth0. It cannot be modified or deleted directly.
	IsSystem    *bool                       `json:"is_system,omitempty" url:"is_system,omitempty"`
	SubjectType *ClientGrantSubjectTypeEnum `json:"subject_type,omitempty" url:"subject_type,omitempty"`
	// Types of authorization_details allowed for this client grant. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href= "https://www.okta.com/legal/"> Master Subscription Agreement.</a>
	AuthorizationDetailsTypes []string `json:"authorization_details_types,omitempty" url:"authorization_details_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientGrantResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ClientGrantResponseContent) GetClientID() *string {
	if c == nil {
		return nil
	}
	return c.ClientID
}

func (c *ClientGrantResponseContent) GetAudience() *string {
	if c == nil {
		return nil
	}
	return c.Audience
}

func (c *ClientGrantResponseContent) GetScope() []string {
	if c == nil {
		return nil
	}
	return c.Scope
}

func (c *ClientGrantResponseContent) GetOrganizationUsage() *ClientGrantOrganizationUsageEnum {
	if c == nil {
		return nil
	}
	return c.OrganizationUsage
}

func (c *ClientGrantResponseContent) GetAllowAnyOrganization() *bool {
	if c == nil {
		return nil
	}
	return c.AllowAnyOrganization
}

func (c *ClientGrantResponseContent) GetIsSystem() *bool {
	if c == nil {
		return nil
	}
	return c.IsSystem
}

func (c *ClientGrantResponseContent) GetSubjectType() *ClientGrantSubjectTypeEnum {
	if c == nil {
		return nil
	}
	return c.SubjectType
}

func (c *ClientGrantResponseContent) GetAuthorizationDetailsTypes() []string {
	if c == nil {
		return nil
	}
	return c.AuthorizationDetailsTypes
}

func (c *ClientGrantResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientGrantResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientGrantResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientGrantResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientGrantResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The type of application access the client grant allows. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href="https://www.okta.com/legal/"> Master Subscription Agreement.</a>
type ClientGrantSubjectTypeEnum string

const (
	ClientGrantSubjectTypeEnumClient ClientGrantSubjectTypeEnum = "client"
	ClientGrantSubjectTypeEnumUser   ClientGrantSubjectTypeEnum = "user"
)

func NewClientGrantSubjectTypeEnumFromString(s string) (ClientGrantSubjectTypeEnum, error) {
	switch s {
	case "client":
		return ClientGrantSubjectTypeEnumClient, nil
	case "user":
		return ClientGrantSubjectTypeEnumUser, nil
	}
	var t ClientGrantSubjectTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientGrantSubjectTypeEnum) Ptr() *ClientGrantSubjectTypeEnum {
	return &c
}

type CreateClientGrantResponseContent struct {
	// ID of the client grant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the client.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The audience (API identifier) of this client grant.
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scopes allowed for this client grant.
	Scope             []string                          `json:"scope,omitempty" url:"scope,omitempty"`
	OrganizationUsage *ClientGrantOrganizationUsageEnum `json:"organization_usage,omitempty" url:"organization_usage,omitempty"`
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"allow_any_organization,omitempty"`
	// If enabled, this grant is a special grant created by Auth0. It cannot be modified or deleted directly.
	IsSystem    *bool                       `json:"is_system,omitempty" url:"is_system,omitempty"`
	SubjectType *ClientGrantSubjectTypeEnum `json:"subject_type,omitempty" url:"subject_type,omitempty"`
	// Types of authorization_details allowed for this client grant. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href= "https://www.okta.com/legal/"> Master Subscription Agreement.</a>
	AuthorizationDetailsTypes []string `json:"authorization_details_types,omitempty" url:"authorization_details_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateClientGrantResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateClientGrantResponseContent) GetClientID() *string {
	if c == nil {
		return nil
	}
	return c.ClientID
}

func (c *CreateClientGrantResponseContent) GetAudience() *string {
	if c == nil {
		return nil
	}
	return c.Audience
}

func (c *CreateClientGrantResponseContent) GetScope() []string {
	if c == nil {
		return nil
	}
	return c.Scope
}

func (c *CreateClientGrantResponseContent) GetOrganizationUsage() *ClientGrantOrganizationUsageEnum {
	if c == nil {
		return nil
	}
	return c.OrganizationUsage
}

func (c *CreateClientGrantResponseContent) GetAllowAnyOrganization() *bool {
	if c == nil {
		return nil
	}
	return c.AllowAnyOrganization
}

func (c *CreateClientGrantResponseContent) GetIsSystem() *bool {
	if c == nil {
		return nil
	}
	return c.IsSystem
}

func (c *CreateClientGrantResponseContent) GetSubjectType() *ClientGrantSubjectTypeEnum {
	if c == nil {
		return nil
	}
	return c.SubjectType
}

func (c *CreateClientGrantResponseContent) GetAuthorizationDetailsTypes() []string {
	if c == nil {
		return nil
	}
	return c.AuthorizationDetailsTypes
}

func (c *CreateClientGrantResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateClientGrantResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateClientGrantResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateClientGrantResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateClientGrantResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListClientGrantPaginatedResponseContent struct {
	// Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours.
	Next         *string                       `json:"next,omitempty" url:"next,omitempty"`
	ClientGrants []*ClientGrantResponseContent `json:"client_grants,omitempty" url:"client_grants,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListClientGrantPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListClientGrantPaginatedResponseContent) GetClientGrants() []*ClientGrantResponseContent {
	if l == nil {
		return nil
	}
	return l.ClientGrants
}

func (l *ListClientGrantPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListClientGrantPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListClientGrantPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListClientGrantPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListClientGrantPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateClientGrantResponseContent struct {
	// ID of the client grant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the client.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The audience (API identifier) of this client grant.
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scopes allowed for this client grant.
	Scope             []string                          `json:"scope,omitempty" url:"scope,omitempty"`
	OrganizationUsage *ClientGrantOrganizationUsageEnum `json:"organization_usage,omitempty" url:"organization_usage,omitempty"`
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"allow_any_organization,omitempty"`
	// If enabled, this grant is a special grant created by Auth0. It cannot be modified or deleted directly.
	IsSystem    *bool                       `json:"is_system,omitempty" url:"is_system,omitempty"`
	SubjectType *ClientGrantSubjectTypeEnum `json:"subject_type,omitempty" url:"subject_type,omitempty"`
	// Types of authorization_details allowed for this client grant. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href= "https://www.okta.com/legal/"> Master Subscription Agreement.</a>
	AuthorizationDetailsTypes []string `json:"authorization_details_types,omitempty" url:"authorization_details_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateClientGrantResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateClientGrantResponseContent) GetClientID() *string {
	if u == nil {
		return nil
	}
	return u.ClientID
}

func (u *UpdateClientGrantResponseContent) GetAudience() *string {
	if u == nil {
		return nil
	}
	return u.Audience
}

func (u *UpdateClientGrantResponseContent) GetScope() []string {
	if u == nil {
		return nil
	}
	return u.Scope
}

func (u *UpdateClientGrantResponseContent) GetOrganizationUsage() *ClientGrantOrganizationUsageEnum {
	if u == nil {
		return nil
	}
	return u.OrganizationUsage
}

func (u *UpdateClientGrantResponseContent) GetAllowAnyOrganization() *bool {
	if u == nil {
		return nil
	}
	return u.AllowAnyOrganization
}

func (u *UpdateClientGrantResponseContent) GetIsSystem() *bool {
	if u == nil {
		return nil
	}
	return u.IsSystem
}

func (u *UpdateClientGrantResponseContent) GetSubjectType() *ClientGrantSubjectTypeEnum {
	if u == nil {
		return nil
	}
	return u.SubjectType
}

func (u *UpdateClientGrantResponseContent) GetAuthorizationDetailsTypes() []string {
	if u == nil {
		return nil
	}
	return u.AuthorizationDetailsTypes
}

func (u *UpdateClientGrantResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateClientGrantResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateClientGrantResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateClientGrantResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateClientGrantResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateClientGrantRequestContent struct {
	// Scopes allowed for this client grant.
	Scope             []string                                  `json:"scope,omitempty" url:"-"`
	OrganizationUsage *ClientGrantOrganizationNullableUsageEnum `json:"organization_usage,omitempty" url:"-"`
	// Controls allowing any organization to be used with this grant
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"-"`
	// Types of authorization_details allowed for this client grant. Use of this field is subject to the applicable Free Trial terms in Okta’s <a href= "https://www.okta.com/legal/"> Master Subscription Agreement.</a>
	AuthorizationDetailsTypes []string `json:"authorization_details_types,omitempty" url:"-"`
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	time "time"
)

type CreateSelfServiceProfileRequestContent struct {
	// The name of the self-service Profile.
	Name string `json:"name" url:"-"`
	// The description of the self-service Profile.
	Description *string                               `json:"description,omitempty" url:"-"`
	Branding    *SelfServiceProfileBrandingProperties `json:"branding,omitempty" url:"-"`
	// List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]
	AllowedStrategies []SelfServiceProfileAllowedStrategyEnum `json:"allowed_strategies,omitempty" url:"-"`
	// List of attributes to be mapped that will be shown to the user during the SS-SSO flow.
	UserAttributes []*SelfServiceProfileUserAttribute `json:"user_attributes,omitempty" url:"-"`
}

type ListSelfServiceProfilesRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page. Defaults to 50.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
}

type CreateSelfServiceProfileResponseContent struct {
	// The unique ID of the self-service Profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the self-service Profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The description of the self-service Profile.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// List of attributes to be mapped that will be shown to the user during the SS-SSO flow.
	UserAttributes []*SelfServiceProfileUserAttribute `json:"user_attributes,omitempty" url:"user_attributes,omitempty"`
	// The time when this self-service Profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this self-service Profile was updated.
	UpdatedAt *time.Time                            `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	Branding  *SelfServiceProfileBrandingProperties `json:"branding,omitempty" url:"branding,omitempty"`
	// List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]
	AllowedStrategies []SelfServiceProfileAllowedStrategyEnum `json:"allowed_strategies,omitempty" url:"allowed_strategies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateSelfServiceProfileResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateSelfServiceProfileResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateSelfServiceProfileResponseContent) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateSelfServiceProfileResponseContent) GetUserAttributes() []*SelfServiceProfileUserAttribute {
	if c == nil {
		return nil
	}
	return c.UserAttributes
}

func (c *CreateSelfServiceProfileResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateSelfServiceProfileResponseContent) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CreateSelfServiceProfileResponseContent) GetBranding() *SelfServiceProfileBrandingProperties {
	if c == nil {
		return nil
	}
	return c.Branding
}

func (c *CreateSelfServiceProfileResponseContent) GetAllowedStrategies() []SelfServiceProfileAllowedStrategyEnum {
	if c == nil {
		return nil
	}
	return c.AllowedStrategies
}

func (c *CreateSelfServiceProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSelfServiceProfileResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateSelfServiceProfileResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateSelfServiceProfileResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSelfServiceProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateSelfServiceProfileResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateSelfServiceProfileResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetSelfServiceProfileResponseContent struct {
	// The unique ID of the self-service Profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the self-service Profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The description of the self-service Profile.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// List of attributes to be mapped that will be shown to the user during the SS-SSO flow.
	UserAttributes []*SelfServiceProfileUserAttribute `json:"user_attributes,omitempty" url:"user_attributes,omitempty"`
	// The time when this self-service Profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this self-service Profile was updated.
	UpdatedAt *time.Time                            `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	Branding  *SelfServiceProfileBrandingProperties `json:"branding,omitempty" url:"branding,omitempty"`
	// List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]
	AllowedStrategies []SelfServiceProfileAllowedStrategyEnum `json:"allowed_strategies,omitempty" url:"allowed_strategies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSelfServiceProfileResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetSelfServiceProfileResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetSelfServiceProfileResponseContent) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *GetSelfServiceProfileResponseContent) GetUserAttributes() []*SelfServiceProfileUserAttribute {
	if g == nil {
		return nil
	}
	return g.UserAttributes
}

func (g *GetSelfServiceProfileResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetSelfServiceProfileResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetSelfServiceProfileResponseContent) GetBranding() *SelfServiceProfileBrandingProperties {
	if g == nil {
		return nil
	}
	return g.Branding
}

func (g *GetSelfServiceProfileResponseContent) GetAllowedStrategies() []SelfServiceProfileAllowedStrategyEnum {
	if g == nil {
		return nil
	}
	return g.AllowedStrategies
}

func (g *GetSelfServiceProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSelfServiceProfileResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetSelfServiceProfileResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetSelfServiceProfileResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSelfServiceProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetSelfServiceProfileResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetSelfServiceProfileResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListSelfServiceProfilesPaginatedResponseContent struct {
	Start               *float64              `json:"start,omitempty" url:"start,omitempty"`
	Limit               *float64              `json:"limit,omitempty" url:"limit,omitempty"`
	Total               *float64              `json:"total,omitempty" url:"total,omitempty"`
	SelfServiceProfiles []*SelfServiceProfile `json:"self_service_profiles,omitempty" url:"self_service_profiles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) GetSelfServiceProfiles() []*SelfServiceProfile {
	if l == nil {
		return nil
	}
	return l.SelfServiceProfiles
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSelfServiceProfilesPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSelfServiceProfilesPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSelfServiceProfilesPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type SelfServiceProfile struct {
	// The unique ID of the self-service Profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the self-service Profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The description of the self-service Profile.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// List of attributes to be mapped that will be shown to the user during the SS-SSO flow.
	UserAttributes []*SelfServiceProfileUserAttribute `json:"user_attributes,omitempty" url:"user_attributes,omitempty"`
	// The time when this self-service Profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this self-service Profile was updated.
	UpdatedAt *time.Time                            `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	Branding  *SelfServiceProfileBrandingProperties `json:"branding,omitempty" url:"branding,omitempty"`
	// List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]
	AllowedStrategies []SelfServiceProfileAllowedStrategyEnum `json:"allowed_strategies,omitempty" url:"allowed_strategies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfile) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SelfServiceProfile) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SelfServiceProfile) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SelfServiceProfile) GetUserAttributes() []*SelfServiceProfileUserAttribute {
	if s == nil {
		return nil
	}
	return s.UserAttributes
}

func (s *SelfServiceProfile) GetCreatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SelfServiceProfile) GetUpdatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SelfServiceProfile) GetBranding() *SelfServiceProfileBrandingProperties {
	if s == nil {
		return nil
	}
	return s.Branding
}

func (s *SelfServiceProfile) GetAllowedStrategies() []SelfServiceProfileAllowedStrategyEnum {
	if s == nil {
		return nil
	}
	return s.AllowedStrategies
}

func (s *SelfServiceProfile) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfile) UnmarshalJSON(data []byte) error {
	type embed SelfServiceProfile
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SelfServiceProfile(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	s.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfile) MarshalJSON() ([]byte, error) {
	type embed SelfServiceProfile
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*s),
		CreatedAt: internal.NewOptionalDateTime(s.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(s.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SelfServiceProfile) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SelfServiceProfileAllowedStrategyEnum string

const (
	SelfServiceProfileAllowedStrategyEnumOidc          SelfServiceProfileAllowedStrategyEnum = "oidc"
	SelfServiceProfileAllowedStrategyEnumSamlp         SelfServiceProfileAllowedStrategyEnum = "samlp"
	SelfServiceProfileAllowedStrategyEnumWaad          SelfServiceProfileAllowedStrategyEnum = "waad"
	SelfServiceProfileAllowedStrategyEnumGoogleApps    SelfServiceProfileAllowedStrategyEnum = "google-apps"
	SelfServiceProfileAllowedStrategyEnumAdfs          SelfServiceProfileAllowedStrategyEnum = "adfs"
	SelfServiceProfileAllowedStrategyEnumOkta          SelfServiceProfileAllowedStrategyEnum = "okta"
	SelfServiceProfileAllowedStrategyEnumKeycloakSamlp SelfServiceProfileAllowedStrategyEnum = "keycloak-samlp"
	SelfServiceProfileAllowedStrategyEnumPingfederate  SelfServiceProfileAllowedStrategyEnum = "pingfederate"
)

func NewSelfServiceProfileAllowedStrategyEnumFromString(s string) (SelfServiceProfileAllowedStrategyEnum, error) {
	switch s {
	case "oidc":
		return SelfServiceProfileAllowedStrategyEnumOidc, nil
	case "samlp":
		return SelfServiceProfileAllowedStrategyEnumSamlp, nil
	case "waad":
		return SelfServiceProfileAllowedStrategyEnumWaad, nil
	case "google-apps":
		return SelfServiceProfileAllowedStrategyEnumGoogleApps, nil
	case "adfs":
		return SelfServiceProfileAllowedStrategyEnumAdfs, nil
	case "okta":
		return SelfServiceProfileAllowedStrategyEnumOkta, nil
	case "keycloak-samlp":
		return SelfServiceProfileAllowedStrategyEnumKeycloakSamlp, nil
	case "pingfederate":
		return SelfServiceProfileAllowedStrategyEnumPingfederate, nil
	}
	var t SelfServiceProfileAllowedStrategyEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelfServiceProfileAllowedStrategyEnum) Ptr() *SelfServiceProfileAllowedStrategyEnum {
	return &s
}

type SelfServiceProfileBranding = *SelfServiceProfileBrandingProperties

type SelfServiceProfileBrandingColors struct {
	Primary string `json:"primary" url:"primary"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SelfServiceProfileBrandingColors) GetPrimary() string {
	if s == nil {
		return ""
	}
	return s.Primary
}

func (s *SelfServiceProfileBrandingColors) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SelfServiceProfileBrandingColors) UnmarshalJSON(data []byte) error {
	type embed SelfServiceProfileBrandingColors
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SelfServiceProfileBrandingColors(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileBrandingColors) MarshalJSON() ([]byte, error) {
	type embed SelfServiceProfileBrandingColors
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SelfServiceProfileBrandingColors) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SelfServiceProfileBrandingProperties struct {
	LogoURL *string                           `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Colors  *SelfServiceProfileBrandingColors `json:"colors,omitempty" url:"colors,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SelfServiceProfileBrandingProperties) GetLogoURL() *string {
	if s == nil {
		return nil
	}
	return s.LogoURL
}

func (s *SelfServiceProfileBrandingProperties) GetColors() *SelfServiceProfileBrandingColors {
	if s == nil {
		return nil
	}
	return s.Colors
}

func (s *SelfServiceProfileBrandingProperties) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SelfServiceProfileBrandingProperties) UnmarshalJSON(data []byte) error {
	type embed SelfServiceProfileBrandingProperties
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SelfServiceProfileBrandingProperties(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileBrandingProperties) MarshalJSON() ([]byte, error) {
	type embed SelfServiceProfileBrandingProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SelfServiceProfileBrandingProperties) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The description of the self-service Profile.
type SelfServiceProfileDescription = *string

type SelfServiceProfileUserAttribute struct {
	// Identifier of this attribute.
	Name string `json:"name" url:"name"`
	// Description of this attribute.
	Description string `json:"description" url:"description"`
	// Determines if this attribute is required
	IsOptional bool `json:"is_optional" url:"is_optional"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileUserAttribute) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SelfServiceProfileUserAttribute) GetDescription() string {
	if s == nil {
		return ""
	}
	return s.Description
}

func (s *SelfServiceProfileUserAttribute) GetIsOptional() bool {
	if s == nil {
		return false
	}
	return s.IsOptional
}

func (s *SelfServiceProfileUserAttribute) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileUserAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileUserAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileUserAttribute(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileUserAttribute) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// List of attributes to be mapped that will be shown to the user during the SS-SSO flow.
type SelfServiceProfileUserAttributes = []*SelfServiceProfileUserAttribute

type UpdateSelfServiceProfileResponseContent struct {
	// The unique ID of the self-service Profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the self-service Profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The description of the self-service Profile.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// List of attributes to be mapped that will be shown to the user during the SS-SSO flow.
	UserAttributes []*SelfServiceProfileUserAttribute `json:"user_attributes,omitempty" url:"user_attributes,omitempty"`
	// The time when this self-service Profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this self-service Profile was updated.
	UpdatedAt *time.Time                            `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	Branding  *SelfServiceProfileBrandingProperties `json:"branding,omitempty" url:"branding,omitempty"`
	// List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]
	AllowedStrategies []SelfServiceProfileAllowedStrategyEnum `json:"allowed_strategies,omitempty" url:"allowed_strategies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateSelfServiceProfileResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateSelfServiceProfileResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateSelfServiceProfileResponseContent) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateSelfServiceProfileResponseContent) GetUserAttributes() []*SelfServiceProfileUserAttribute {
	if u == nil {
		return nil
	}
	return u.UserAttributes
}

func (u *UpdateSelfServiceProfileResponseContent) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateSelfServiceProfileResponseContent) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UpdateSelfServiceProfileResponseContent) GetBranding() *SelfServiceProfileBrandingProperties {
	if u == nil {
		return nil
	}
	return u.Branding
}

func (u *UpdateSelfServiceProfileResponseContent) GetAllowedStrategies() []SelfServiceProfileAllowedStrategyEnum {
	if u == nil {
		return nil
	}
	return u.AllowedStrategies
}

func (u *UpdateSelfServiceProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateSelfServiceProfileResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateSelfServiceProfileResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateSelfServiceProfileResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSelfServiceProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateSelfServiceProfileResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewOptionalDateTime(u.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpdateSelfServiceProfileResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateSelfServiceProfileRequestContent struct {
	// The name of the self-service Profile.
	Name        *string                        `json:"name,omitempty" url:"-"`
	Description *SelfServiceProfileDescription `json:"description,omitempty" url:"-"`
	Branding    *SelfServiceProfileBranding    `json:"branding,omitempty" url:"-"`
	// List of IdP strategies that will be shown to users during the Self-Service SSO flow. Possible values: [`oidc`, `samlp`, `waad`, `google-apps`, `adfs`, `okta`, `keycloak-samlp`, `pingfederate`]
	AllowedStrategies []SelfServiceProfileAllowedStrategyEnum `json:"allowed_strategies,omitempty" url:"-"`
	UserAttributes    *SelfServiceProfileUserAttributes       `json:"user_attributes,omitempty" url:"-"`
}

// Code generated by Fern. DO NOT EDIT.

package clients

import (
	json "encoding/json"
	management "github.com/auth0/go-auth0/v2/management"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	time "time"
)

type PostClientCredentialRequestContent struct {
	CredentialType management.ClientCredentialTypeEnum `json:"credential_type" url:"-"`
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" url:"-"`
	// Subject Distinguished Name. Mutually exclusive with `pem` property. Applies to `cert_subject_dn` credential type.
	SubjectDn *string `json:"subject_dn,omitempty" url:"-"`
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	Pem *string                                      `json:"pem,omitempty" url:"-"`
	Alg *management.PublicKeyCredentialAlgorithmEnum `json:"alg,omitempty" url:"-"`
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. Applies to `public_key` credential type.
	ParseExpiryFromCert *bool `json:"parse_expiry_from_cert,omitempty" url:"-"`
	// The ISO 8601 formatted date representing the expiration of the credential. If not specified (not recommended), the credential never expires. Applies to `public_key` credential type.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"-"`
}

func (p *PostClientCredentialRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler PostClientCredentialRequestContent
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*p = PostClientCredentialRequestContent(body)
	return nil
}

func (p *PostClientCredentialRequestContent) MarshalJSON() ([]byte, error) {
	type embed PostClientCredentialRequestContent
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*p),
		ExpiresAt: internal.NewOptionalDateTime(p.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

type PatchClientCredentialRequestContent struct {
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"-"`
}

func (p *PatchClientCredentialRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchClientCredentialRequestContent
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*p = PatchClientCredentialRequestContent(body)
	return nil
}

func (p *PatchClientCredentialRequestContent) MarshalJSON() ([]byte, error) {
	type embed PatchClientCredentialRequestContent
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*p),
		ExpiresAt: internal.NewOptionalDateTime(p.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

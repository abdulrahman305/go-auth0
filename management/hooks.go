// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateHookRequestContent struct {
	// Name of this hook.
	Name string `json:"name" url:"-"`
	// Code to be executed when this hook runs.
	Script string `json:"script" url:"-"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled      *bool             `json:"enabled,omitempty" url:"-"`
	Dependencies *HookDependencies `json:"dependencies,omitempty" url:"-"`
	TriggerID    HookTriggerIDEnum `json:"triggerId" url:"-"`
}

type GetHookRequestParameters struct {
	// Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
}

type ListHooksRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Optional filter on whether a hook is enabled (true) or disabled (false).
	Enabled *bool `json:"-" url:"enabled,omitempty"`
	// Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Retrieves hooks that match the trigger
	TriggerID *HookTriggerIDEnum `json:"-" url:"triggerId,omitempty"`
}

type CreateHookResponseContent struct {
	// Trigger ID
	TriggerID *string `json:"triggerId,omitempty" url:"triggerId,omitempty"`
	// ID of this hook.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of this hook.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this hook runs.
	Script       *string           `json:"script,omitempty" url:"script,omitempty"`
	Dependencies *HookDependencies `json:"dependencies,omitempty" url:"dependencies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateHookResponseContent) GetTriggerID() *string {
	if c == nil {
		return nil
	}
	return c.TriggerID
}

func (c *CreateHookResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateHookResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateHookResponseContent) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CreateHookResponseContent) GetScript() *string {
	if c == nil {
		return nil
	}
	return c.Script
}

func (c *CreateHookResponseContent) GetDependencies() *HookDependencies {
	if c == nil {
		return nil
	}
	return c.Dependencies
}

func (c *CreateHookResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateHookResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateHookResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateHookResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateHookResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetHookResponseContent struct {
	// Trigger ID
	TriggerID *string `json:"triggerId,omitempty" url:"triggerId,omitempty"`
	// ID of this hook.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of this hook.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this hook runs.
	Script       *string           `json:"script,omitempty" url:"script,omitempty"`
	Dependencies *HookDependencies `json:"dependencies,omitempty" url:"dependencies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetHookResponseContent) GetTriggerID() *string {
	if g == nil {
		return nil
	}
	return g.TriggerID
}

func (g *GetHookResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetHookResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetHookResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetHookResponseContent) GetScript() *string {
	if g == nil {
		return nil
	}
	return g.Script
}

func (g *GetHookResponseContent) GetDependencies() *HookDependencies {
	if g == nil {
		return nil
	}
	return g.Dependencies
}

func (g *GetHookResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetHookResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetHookResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetHookResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetHookResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Hook struct {
	// Trigger ID
	TriggerID *string `json:"triggerId,omitempty" url:"triggerId,omitempty"`
	// ID of this hook.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of this hook.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this hook runs.
	Script       *string           `json:"script,omitempty" url:"script,omitempty"`
	Dependencies *HookDependencies `json:"dependencies,omitempty" url:"dependencies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *Hook) GetTriggerID() *string {
	if h == nil {
		return nil
	}
	return h.TriggerID
}

func (h *Hook) GetID() *string {
	if h == nil {
		return nil
	}
	return h.ID
}

func (h *Hook) GetName() *string {
	if h == nil {
		return nil
	}
	return h.Name
}

func (h *Hook) GetEnabled() *bool {
	if h == nil {
		return nil
	}
	return h.Enabled
}

func (h *Hook) GetScript() *string {
	if h == nil {
		return nil
	}
	return h.Script
}

func (h *Hook) GetDependencies() *HookDependencies {
	if h == nil {
		return nil
	}
	return h.Dependencies
}

func (h *Hook) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *Hook) UnmarshalJSON(data []byte) error {
	type unmarshaler Hook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = Hook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *Hook) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Dependencies of this hook used by webtask server.
type HookDependencies = map[string]interface{}

type HookTriggerIDEnum string

const (
	HookTriggerIDEnumCredentialsExchange  HookTriggerIDEnum = "credentials-exchange"
	HookTriggerIDEnumPreUserRegistration  HookTriggerIDEnum = "pre-user-registration"
	HookTriggerIDEnumPostUserRegistration HookTriggerIDEnum = "post-user-registration"
	HookTriggerIDEnumPostChangePassword   HookTriggerIDEnum = "post-change-password"
	HookTriggerIDEnumSendPhoneMessage     HookTriggerIDEnum = "send-phone-message"
)

func NewHookTriggerIDEnumFromString(s string) (HookTriggerIDEnum, error) {
	switch s {
	case "credentials-exchange":
		return HookTriggerIDEnumCredentialsExchange, nil
	case "pre-user-registration":
		return HookTriggerIDEnumPreUserRegistration, nil
	case "post-user-registration":
		return HookTriggerIDEnumPostUserRegistration, nil
	case "post-change-password":
		return HookTriggerIDEnumPostChangePassword, nil
	case "send-phone-message":
		return HookTriggerIDEnumSendPhoneMessage, nil
	}
	var t HookTriggerIDEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HookTriggerIDEnum) Ptr() *HookTriggerIDEnum {
	return &h
}

type ListHooksOffsetPaginatedResponseContent struct {
	Start *float64 `json:"start,omitempty" url:"start,omitempty"`
	Limit *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	Hooks []*Hook  `json:"hooks,omitempty" url:"hooks,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListHooksOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListHooksOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListHooksOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListHooksOffsetPaginatedResponseContent) GetHooks() []*Hook {
	if l == nil {
		return nil
	}
	return l.Hooks
}

func (l *ListHooksOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListHooksOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListHooksOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListHooksOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListHooksOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateHookResponseContent struct {
	// Trigger ID
	TriggerID *string `json:"triggerId,omitempty" url:"triggerId,omitempty"`
	// ID of this hook.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of this hook.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this hook runs.
	Script       *string           `json:"script,omitempty" url:"script,omitempty"`
	Dependencies *HookDependencies `json:"dependencies,omitempty" url:"dependencies,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateHookResponseContent) GetTriggerID() *string {
	if u == nil {
		return nil
	}
	return u.TriggerID
}

func (u *UpdateHookResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateHookResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateHookResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateHookResponseContent) GetScript() *string {
	if u == nil {
		return nil
	}
	return u.Script
}

func (u *UpdateHookResponseContent) GetDependencies() *HookDependencies {
	if u == nil {
		return nil
	}
	return u.Dependencies
}

func (u *UpdateHookResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateHookResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateHookResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateHookResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateHookResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateHookRequestContent struct {
	// Name of this hook.
	Name *string `json:"name,omitempty" url:"-"`
	// Code to be executed when this hook runs.
	Script *string `json:"script,omitempty" url:"-"`
	// Whether this hook will be executed (true) or ignored (false).
	Enabled      *bool             `json:"enabled,omitempty" url:"-"`
	Dependencies *HookDependencies `json:"dependencies,omitempty" url:"-"`
}

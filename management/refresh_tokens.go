// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type GetRefreshTokenResponseContent struct {
	// The ID of the refresh token
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the user which can be used when interacting with other APIs.
	UserID        *string             `json:"user_id,omitempty" url:"user_id,omitempty"`
	CreatedAt     *RefreshTokenDate   `json:"created_at,omitempty" url:"created_at,omitempty"`
	IdleExpiresAt *RefreshTokenDate   `json:"idle_expires_at,omitempty" url:"idle_expires_at,omitempty"`
	ExpiresAt     *RefreshTokenDate   `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Device        *RefreshTokenDevice `json:"device,omitempty" url:"device,omitempty"`
	// ID of the client application granted with this refresh token
	ClientID  *string                `json:"client_id,omitempty" url:"client_id,omitempty"`
	SessionID *RefreshTokenSessionID `json:"session_id,omitempty" url:"session_id,omitempty"`
	// True if the token is a rotating refresh token
	Rotating *bool `json:"rotating,omitempty" url:"rotating,omitempty"`
	// A list of the resource server IDs associated to this refresh-token and their granted scopes
	ResourceServers []*RefreshTokenResourceServer `json:"resource_servers,omitempty" url:"resource_servers,omitempty"`
	LastExchangedAt *RefreshTokenDate             `json:"last_exchanged_at,omitempty" url:"last_exchanged_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetRefreshTokenResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetRefreshTokenResponseContent) GetUserID() *string {
	if g == nil {
		return nil
	}
	return g.UserID
}

func (g *GetRefreshTokenResponseContent) GetCreatedAt() *RefreshTokenDate {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetRefreshTokenResponseContent) GetIdleExpiresAt() *RefreshTokenDate {
	if g == nil {
		return nil
	}
	return g.IdleExpiresAt
}

func (g *GetRefreshTokenResponseContent) GetExpiresAt() *RefreshTokenDate {
	if g == nil {
		return nil
	}
	return g.ExpiresAt
}

func (g *GetRefreshTokenResponseContent) GetDevice() *RefreshTokenDevice {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetRefreshTokenResponseContent) GetClientID() *string {
	if g == nil {
		return nil
	}
	return g.ClientID
}

func (g *GetRefreshTokenResponseContent) GetSessionID() *RefreshTokenSessionID {
	if g == nil {
		return nil
	}
	return g.SessionID
}

func (g *GetRefreshTokenResponseContent) GetRotating() *bool {
	if g == nil {
		return nil
	}
	return g.Rotating
}

func (g *GetRefreshTokenResponseContent) GetResourceServers() []*RefreshTokenResourceServer {
	if g == nil {
		return nil
	}
	return g.ResourceServers
}

func (g *GetRefreshTokenResponseContent) GetLastExchangedAt() *RefreshTokenDate {
	if g == nil {
		return nil
	}
	return g.LastExchangedAt
}

func (g *GetRefreshTokenResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetRefreshTokenResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetRefreshTokenResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetRefreshTokenResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetRefreshTokenResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetRefreshTokenResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetRefreshTokenResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

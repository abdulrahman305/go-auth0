// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreatePublicKeyDeviceCredentialRequestContent struct {
	// Name for this device easily recognized by owner.
	DeviceName string                            `json:"device_name" url:"-"`
	Type       DeviceCredentialPublicKeyTypeEnum `json:"type,omitempty" url:"-"`
	// Base64 encoded string containing the credential.
	Value string `json:"value" url:"-"`
	// Unique identifier for the device. Recommend using <a href="http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID">Android_ID</a> on Android and <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor">identifierForVendor</a>.
	DeviceID string `json:"device_id" url:"-"`
	// client_id of the client (application) this credential is for.
	ClientID *string `json:"client_id,omitempty" url:"-"`
}

type ListDeviceCredentialsRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page.  There is a maximum of 1000 results allowed from this endpoint.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
	// user_id of the devices to retrieve.
	UserID *string `json:"-" url:"user_id,omitempty"`
	// client_id of the devices to retrieve.
	ClientID *string `json:"-" url:"client_id,omitempty"`
	// Type of credentials to retrieve. Must be `public_key`, `refresh_token` or `rotating_refresh_token`. The property will default to `refresh_token` when paging is requested
	Type *DeviceCredentialTypeEnum `json:"-" url:"type,omitempty"`
}

type CreatePublicKeyDeviceCredentialResponseContent struct {
	// The credential's identifier
	ID string `json:"id" url:"id"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreatePublicKeyDeviceCredentialResponseContent) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreatePublicKeyDeviceCredentialResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreatePublicKeyDeviceCredentialResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreatePublicKeyDeviceCredentialResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreatePublicKeyDeviceCredentialResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePublicKeyDeviceCredentialResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreatePublicKeyDeviceCredentialResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreatePublicKeyDeviceCredentialResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeviceCredential struct {
	// ID of this device.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// User agent for this device
	DeviceName *string `json:"device_name,omitempty" url:"device_name,omitempty"`
	// Unique identifier for the device. NOTE: This field is generally not populated for refresh_tokens and rotating_refresh_tokens
	DeviceID *string                   `json:"device_id,omitempty" url:"device_id,omitempty"`
	Type     *DeviceCredentialTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// user_id this credential is associated with.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// client_id of the client (application) this credential is for.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeviceCredential) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DeviceCredential) GetDeviceName() *string {
	if d == nil {
		return nil
	}
	return d.DeviceName
}

func (d *DeviceCredential) GetDeviceID() *string {
	if d == nil {
		return nil
	}
	return d.DeviceID
}

func (d *DeviceCredential) GetType() *DeviceCredentialTypeEnum {
	if d == nil {
		return nil
	}
	return d.Type
}

func (d *DeviceCredential) GetUserID() *string {
	if d == nil {
		return nil
	}
	return d.UserID
}

func (d *DeviceCredential) GetClientID() *string {
	if d == nil {
		return nil
	}
	return d.ClientID
}

func (d *DeviceCredential) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeviceCredential) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceCredential
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceCredential(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceCredential) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Type of credential. Must be `public_key`.
type DeviceCredentialPublicKeyTypeEnum = string

// Type of credentials to retrieve. Must be `public_key`, `refresh_token` or `rotating_refresh_token`. The property will default to `refresh_token` when paging is requested
type DeviceCredentialTypeEnum string

const (
	DeviceCredentialTypeEnumPublicKey            DeviceCredentialTypeEnum = "public_key"
	DeviceCredentialTypeEnumRefreshToken         DeviceCredentialTypeEnum = "refresh_token"
	DeviceCredentialTypeEnumRotatingRefreshToken DeviceCredentialTypeEnum = "rotating_refresh_token"
)

func NewDeviceCredentialTypeEnumFromString(s string) (DeviceCredentialTypeEnum, error) {
	switch s {
	case "public_key":
		return DeviceCredentialTypeEnumPublicKey, nil
	case "refresh_token":
		return DeviceCredentialTypeEnumRefreshToken, nil
	case "rotating_refresh_token":
		return DeviceCredentialTypeEnumRotatingRefreshToken, nil
	}
	var t DeviceCredentialTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceCredentialTypeEnum) Ptr() *DeviceCredentialTypeEnum {
	return &d
}

type ListDeviceCredentialsOffsetPaginatedResponseContent struct {
	Start             *float64            `json:"start,omitempty" url:"start,omitempty"`
	Limit             *float64            `json:"limit,omitempty" url:"limit,omitempty"`
	Total             *float64            `json:"total,omitempty" url:"total,omitempty"`
	DeviceCredentials []*DeviceCredential `json:"device_credentials,omitempty" url:"device_credentials,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) GetDeviceCredentials() []*DeviceCredential {
	if l == nil {
		return nil
	}
	return l.DeviceCredentials
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDeviceCredentialsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDeviceCredentialsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDeviceCredentialsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type DeleteUserGrantByUserIDRequestParameters struct {
	// user_id of the grant to delete.
	UserID string `json:"-" url:"user_id"`
}

type ListUserGrantsRequestParameters struct {
	// Number of results per page.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// user_id of the grants to retrieve.
	UserID *string `json:"-" url:"user_id,omitempty"`
	// client_id of the grants to retrieve.
	ClientID *string `json:"-" url:"client_id,omitempty"`
	// audience of the grants to retrieve.
	Audience *string `json:"-" url:"audience,omitempty"`
}

type ListUserGrantsOffsetPaginatedResponseContent struct {
	Start  *float64     `json:"start,omitempty" url:"start,omitempty"`
	Limit  *float64     `json:"limit,omitempty" url:"limit,omitempty"`
	Total  *float64     `json:"total,omitempty" url:"total,omitempty"`
	Grants []*UserGrant `json:"grants,omitempty" url:"grants,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) GetGrants() []*UserGrant {
	if l == nil {
		return nil
	}
	return l.Grants
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserGrantsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserGrantsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserGrantsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UserGrant struct {
	// ID of the grant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the client.
	ClientID *string `json:"clientID,omitempty" url:"clientID,omitempty"`
	// ID of the user.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Audience of the grant.
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scopes included in this grant.
	Scope []string `json:"scope,omitempty" url:"scope,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserGrant) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UserGrant) GetClientID() *string {
	if u == nil {
		return nil
	}
	return u.ClientID
}

func (u *UserGrant) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *UserGrant) GetAudience() *string {
	if u == nil {
		return nil
	}
	return u.Audience
}

func (u *UserGrant) GetScope() []string {
	if u == nil {
		return nil
	}
	return u.Scope
}

func (u *UserGrant) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserGrant) UnmarshalJSON(data []byte) error {
	type unmarshaler UserGrant
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserGrant(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserGrant) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

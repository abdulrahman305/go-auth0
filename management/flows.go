// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	big "math/big"
	time "time"
)

var (
	createFlowResponseContentFieldId         = big.NewInt(1 << 0)
	createFlowResponseContentFieldName       = big.NewInt(1 << 1)
	createFlowResponseContentFieldActions    = big.NewInt(1 << 2)
	createFlowResponseContentFieldCreatedAt  = big.NewInt(1 << 3)
	createFlowResponseContentFieldUpdatedAt  = big.NewInt(1 << 4)
	createFlowResponseContentFieldExecutedAt = big.NewInt(1 << 5)
)

type CreateFlowResponseContent struct {
	Id         string        `json:"id" url:"id"`
	Name       string        `json:"name" url:"name"`
	Actions    []*FlowAction `json:"actions,omitempty" url:"actions,omitempty"`
	CreatedAt  time.Time     `json:"created_at" url:"created_at"`
	UpdatedAt  time.Time     `json:"updated_at" url:"updated_at"`
	ExecutedAt *string       `json:"executed_at,omitempty" url:"executed_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateFlowResponseContent) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CreateFlowResponseContent) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateFlowResponseContent) GetActions() []*FlowAction {
	if c == nil || c.Actions == nil {
		return nil
	}
	return c.Actions
}

func (c *CreateFlowResponseContent) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreateFlowResponseContent) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreateFlowResponseContent) GetExecutedAt() string {
	if c == nil || c.ExecutedAt == nil {
		return ""
	}
	return *c.ExecutedAt
}

func (c *CreateFlowResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateFlowResponseContent) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateFlowResponseContent) SetId(id string) {
	c.Id = id
	c.require(createFlowResponseContentFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateFlowResponseContent) SetName(name string) {
	c.Name = name
	c.require(createFlowResponseContentFieldName)
}

// SetActions sets the Actions field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateFlowResponseContent) SetActions(actions []*FlowAction) {
	c.Actions = actions
	c.require(createFlowResponseContentFieldActions)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateFlowResponseContent) SetCreatedAt(createdAt time.Time) {
	c.CreatedAt = createdAt
	c.require(createFlowResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateFlowResponseContent) SetUpdatedAt(updatedAt time.Time) {
	c.UpdatedAt = updatedAt
	c.require(createFlowResponseContentFieldUpdatedAt)
}

// SetExecutedAt sets the ExecutedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateFlowResponseContent) SetExecutedAt(executedAt *string) {
	c.ExecutedAt = executedAt
	c.require(createFlowResponseContentFieldExecutedAt)
}

func (c *CreateFlowResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateFlowResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateFlowResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFlowResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateFlowResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CreateFlowResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type FlowAction struct {
	FlowActionActivecampaign *FlowActionActivecampaign
	FlowActionAirtable       *FlowActionAirtable
	FlowActionAuth0          *FlowActionAuth0
	FlowActionBigquery       FlowActionBigquery
	FlowActionClearbit       *FlowActionClearbit
	FlowActionEmail          FlowActionEmail
	FlowActionFlow           *FlowActionFlow
	FlowActionGoogleSheets   FlowActionGoogleSheets
	FlowActionHttp           FlowActionHttp
	FlowActionHubspot        *FlowActionHubspot
	FlowActionJson           *FlowActionJson
	FlowActionJwt            *FlowActionJwt
	FlowActionMailchimp      FlowActionMailchimp
	FlowActionMailjet        FlowActionMailjet
	FlowActionOtp            *FlowActionOtp
	FlowActionPipedrive      *FlowActionPipedrive
	FlowActionSalesforce     *FlowActionSalesforce
	FlowActionSendgrid       FlowActionSendgrid
	FlowActionSlack          FlowActionSlack
	FlowActionStripe         *FlowActionStripe
	FlowActionTelegram       FlowActionTelegram
	FlowActionTwilio         *FlowActionTwilio
	FlowActionWhatsapp       FlowActionWhatsapp
	FlowActionXml            *FlowActionXml
	FlowActionZapier         FlowActionZapier

	typ string
}

func (f *FlowAction) GetFlowActionActivecampaign() *FlowActionActivecampaign {
	if f == nil {
		return nil
	}
	return f.FlowActionActivecampaign
}

func (f *FlowAction) GetFlowActionAirtable() *FlowActionAirtable {
	if f == nil {
		return nil
	}
	return f.FlowActionAirtable
}

func (f *FlowAction) GetFlowActionAuth0() *FlowActionAuth0 {
	if f == nil {
		return nil
	}
	return f.FlowActionAuth0
}

func (f *FlowAction) GetFlowActionBigquery() FlowActionBigquery {
	if f == nil {
		return nil
	}
	return f.FlowActionBigquery
}

func (f *FlowAction) GetFlowActionClearbit() *FlowActionClearbit {
	if f == nil {
		return nil
	}
	return f.FlowActionClearbit
}

func (f *FlowAction) GetFlowActionEmail() FlowActionEmail {
	if f == nil {
		return nil
	}
	return f.FlowActionEmail
}

func (f *FlowAction) GetFlowActionFlow() *FlowActionFlow {
	if f == nil {
		return nil
	}
	return f.FlowActionFlow
}

func (f *FlowAction) GetFlowActionGoogleSheets() FlowActionGoogleSheets {
	if f == nil {
		return nil
	}
	return f.FlowActionGoogleSheets
}

func (f *FlowAction) GetFlowActionHttp() FlowActionHttp {
	if f == nil {
		return nil
	}
	return f.FlowActionHttp
}

func (f *FlowAction) GetFlowActionHubspot() *FlowActionHubspot {
	if f == nil {
		return nil
	}
	return f.FlowActionHubspot
}

func (f *FlowAction) GetFlowActionJson() *FlowActionJson {
	if f == nil {
		return nil
	}
	return f.FlowActionJson
}

func (f *FlowAction) GetFlowActionJwt() *FlowActionJwt {
	if f == nil {
		return nil
	}
	return f.FlowActionJwt
}

func (f *FlowAction) GetFlowActionMailchimp() FlowActionMailchimp {
	if f == nil {
		return nil
	}
	return f.FlowActionMailchimp
}

func (f *FlowAction) GetFlowActionMailjet() FlowActionMailjet {
	if f == nil {
		return nil
	}
	return f.FlowActionMailjet
}

func (f *FlowAction) GetFlowActionOtp() *FlowActionOtp {
	if f == nil {
		return nil
	}
	return f.FlowActionOtp
}

func (f *FlowAction) GetFlowActionPipedrive() *FlowActionPipedrive {
	if f == nil {
		return nil
	}
	return f.FlowActionPipedrive
}

func (f *FlowAction) GetFlowActionSalesforce() *FlowActionSalesforce {
	if f == nil {
		return nil
	}
	return f.FlowActionSalesforce
}

func (f *FlowAction) GetFlowActionSendgrid() FlowActionSendgrid {
	if f == nil {
		return nil
	}
	return f.FlowActionSendgrid
}

func (f *FlowAction) GetFlowActionSlack() FlowActionSlack {
	if f == nil {
		return nil
	}
	return f.FlowActionSlack
}

func (f *FlowAction) GetFlowActionStripe() *FlowActionStripe {
	if f == nil {
		return nil
	}
	return f.FlowActionStripe
}

func (f *FlowAction) GetFlowActionTelegram() FlowActionTelegram {
	if f == nil {
		return nil
	}
	return f.FlowActionTelegram
}

func (f *FlowAction) GetFlowActionTwilio() *FlowActionTwilio {
	if f == nil {
		return nil
	}
	return f.FlowActionTwilio
}

func (f *FlowAction) GetFlowActionWhatsapp() FlowActionWhatsapp {
	if f == nil {
		return nil
	}
	return f.FlowActionWhatsapp
}

func (f *FlowAction) GetFlowActionXml() *FlowActionXml {
	if f == nil {
		return nil
	}
	return f.FlowActionXml
}

func (f *FlowAction) GetFlowActionZapier() FlowActionZapier {
	if f == nil {
		return nil
	}
	return f.FlowActionZapier
}

func (f *FlowAction) UnmarshalJSON(data []byte) error {
	valueFlowActionActivecampaign := new(FlowActionActivecampaign)
	if err := json.Unmarshal(data, &valueFlowActionActivecampaign); err == nil {
		f.typ = "FlowActionActivecampaign"
		f.FlowActionActivecampaign = valueFlowActionActivecampaign
		return nil
	}
	valueFlowActionAirtable := new(FlowActionAirtable)
	if err := json.Unmarshal(data, &valueFlowActionAirtable); err == nil {
		f.typ = "FlowActionAirtable"
		f.FlowActionAirtable = valueFlowActionAirtable
		return nil
	}
	valueFlowActionAuth0 := new(FlowActionAuth0)
	if err := json.Unmarshal(data, &valueFlowActionAuth0); err == nil {
		f.typ = "FlowActionAuth0"
		f.FlowActionAuth0 = valueFlowActionAuth0
		return nil
	}
	var valueFlowActionBigquery FlowActionBigquery
	if err := json.Unmarshal(data, &valueFlowActionBigquery); err == nil {
		f.typ = "FlowActionBigquery"
		f.FlowActionBigquery = valueFlowActionBigquery
		return nil
	}
	valueFlowActionClearbit := new(FlowActionClearbit)
	if err := json.Unmarshal(data, &valueFlowActionClearbit); err == nil {
		f.typ = "FlowActionClearbit"
		f.FlowActionClearbit = valueFlowActionClearbit
		return nil
	}
	var valueFlowActionEmail FlowActionEmail
	if err := json.Unmarshal(data, &valueFlowActionEmail); err == nil {
		f.typ = "FlowActionEmail"
		f.FlowActionEmail = valueFlowActionEmail
		return nil
	}
	valueFlowActionFlow := new(FlowActionFlow)
	if err := json.Unmarshal(data, &valueFlowActionFlow); err == nil {
		f.typ = "FlowActionFlow"
		f.FlowActionFlow = valueFlowActionFlow
		return nil
	}
	var valueFlowActionGoogleSheets FlowActionGoogleSheets
	if err := json.Unmarshal(data, &valueFlowActionGoogleSheets); err == nil {
		f.typ = "FlowActionGoogleSheets"
		f.FlowActionGoogleSheets = valueFlowActionGoogleSheets
		return nil
	}
	var valueFlowActionHttp FlowActionHttp
	if err := json.Unmarshal(data, &valueFlowActionHttp); err == nil {
		f.typ = "FlowActionHttp"
		f.FlowActionHttp = valueFlowActionHttp
		return nil
	}
	valueFlowActionHubspot := new(FlowActionHubspot)
	if err := json.Unmarshal(data, &valueFlowActionHubspot); err == nil {
		f.typ = "FlowActionHubspot"
		f.FlowActionHubspot = valueFlowActionHubspot
		return nil
	}
	valueFlowActionJson := new(FlowActionJson)
	if err := json.Unmarshal(data, &valueFlowActionJson); err == nil {
		f.typ = "FlowActionJson"
		f.FlowActionJson = valueFlowActionJson
		return nil
	}
	valueFlowActionJwt := new(FlowActionJwt)
	if err := json.Unmarshal(data, &valueFlowActionJwt); err == nil {
		f.typ = "FlowActionJwt"
		f.FlowActionJwt = valueFlowActionJwt
		return nil
	}
	var valueFlowActionMailchimp FlowActionMailchimp
	if err := json.Unmarshal(data, &valueFlowActionMailchimp); err == nil {
		f.typ = "FlowActionMailchimp"
		f.FlowActionMailchimp = valueFlowActionMailchimp
		return nil
	}
	var valueFlowActionMailjet FlowActionMailjet
	if err := json.Unmarshal(data, &valueFlowActionMailjet); err == nil {
		f.typ = "FlowActionMailjet"
		f.FlowActionMailjet = valueFlowActionMailjet
		return nil
	}
	valueFlowActionOtp := new(FlowActionOtp)
	if err := json.Unmarshal(data, &valueFlowActionOtp); err == nil {
		f.typ = "FlowActionOtp"
		f.FlowActionOtp = valueFlowActionOtp
		return nil
	}
	valueFlowActionPipedrive := new(FlowActionPipedrive)
	if err := json.Unmarshal(data, &valueFlowActionPipedrive); err == nil {
		f.typ = "FlowActionPipedrive"
		f.FlowActionPipedrive = valueFlowActionPipedrive
		return nil
	}
	valueFlowActionSalesforce := new(FlowActionSalesforce)
	if err := json.Unmarshal(data, &valueFlowActionSalesforce); err == nil {
		f.typ = "FlowActionSalesforce"
		f.FlowActionSalesforce = valueFlowActionSalesforce
		return nil
	}
	var valueFlowActionSendgrid FlowActionSendgrid
	if err := json.Unmarshal(data, &valueFlowActionSendgrid); err == nil {
		f.typ = "FlowActionSendgrid"
		f.FlowActionSendgrid = valueFlowActionSendgrid
		return nil
	}
	var valueFlowActionSlack FlowActionSlack
	if err := json.Unmarshal(data, &valueFlowActionSlack); err == nil {
		f.typ = "FlowActionSlack"
		f.FlowActionSlack = valueFlowActionSlack
		return nil
	}
	valueFlowActionStripe := new(FlowActionStripe)
	if err := json.Unmarshal(data, &valueFlowActionStripe); err == nil {
		f.typ = "FlowActionStripe"
		f.FlowActionStripe = valueFlowActionStripe
		return nil
	}
	var valueFlowActionTelegram FlowActionTelegram
	if err := json.Unmarshal(data, &valueFlowActionTelegram); err == nil {
		f.typ = "FlowActionTelegram"
		f.FlowActionTelegram = valueFlowActionTelegram
		return nil
	}
	valueFlowActionTwilio := new(FlowActionTwilio)
	if err := json.Unmarshal(data, &valueFlowActionTwilio); err == nil {
		f.typ = "FlowActionTwilio"
		f.FlowActionTwilio = valueFlowActionTwilio
		return nil
	}
	var valueFlowActionWhatsapp FlowActionWhatsapp
	if err := json.Unmarshal(data, &valueFlowActionWhatsapp); err == nil {
		f.typ = "FlowActionWhatsapp"
		f.FlowActionWhatsapp = valueFlowActionWhatsapp
		return nil
	}
	valueFlowActionXml := new(FlowActionXml)
	if err := json.Unmarshal(data, &valueFlowActionXml); err == nil {
		f.typ = "FlowActionXml"
		f.FlowActionXml = valueFlowActionXml
		return nil
	}
	var valueFlowActionZapier FlowActionZapier
	if err := json.Unmarshal(data, &valueFlowActionZapier); err == nil {
		f.typ = "FlowActionZapier"
		f.FlowActionZapier = valueFlowActionZapier
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowAction) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionActivecampaign" || f.FlowActionActivecampaign != nil {
		return json.Marshal(f.FlowActionActivecampaign)
	}
	if f.typ == "FlowActionAirtable" || f.FlowActionAirtable != nil {
		return json.Marshal(f.FlowActionAirtable)
	}
	if f.typ == "FlowActionAuth0" || f.FlowActionAuth0 != nil {
		return json.Marshal(f.FlowActionAuth0)
	}
	if f.typ == "FlowActionBigquery" || f.FlowActionBigquery != nil {
		return json.Marshal(f.FlowActionBigquery)
	}
	if f.typ == "FlowActionClearbit" || f.FlowActionClearbit != nil {
		return json.Marshal(f.FlowActionClearbit)
	}
	if f.typ == "FlowActionEmail" || f.FlowActionEmail != nil {
		return json.Marshal(f.FlowActionEmail)
	}
	if f.typ == "FlowActionFlow" || f.FlowActionFlow != nil {
		return json.Marshal(f.FlowActionFlow)
	}
	if f.typ == "FlowActionGoogleSheets" || f.FlowActionGoogleSheets != nil {
		return json.Marshal(f.FlowActionGoogleSheets)
	}
	if f.typ == "FlowActionHttp" || f.FlowActionHttp != nil {
		return json.Marshal(f.FlowActionHttp)
	}
	if f.typ == "FlowActionHubspot" || f.FlowActionHubspot != nil {
		return json.Marshal(f.FlowActionHubspot)
	}
	if f.typ == "FlowActionJson" || f.FlowActionJson != nil {
		return json.Marshal(f.FlowActionJson)
	}
	if f.typ == "FlowActionJwt" || f.FlowActionJwt != nil {
		return json.Marshal(f.FlowActionJwt)
	}
	if f.typ == "FlowActionMailchimp" || f.FlowActionMailchimp != nil {
		return json.Marshal(f.FlowActionMailchimp)
	}
	if f.typ == "FlowActionMailjet" || f.FlowActionMailjet != nil {
		return json.Marshal(f.FlowActionMailjet)
	}
	if f.typ == "FlowActionOtp" || f.FlowActionOtp != nil {
		return json.Marshal(f.FlowActionOtp)
	}
	if f.typ == "FlowActionPipedrive" || f.FlowActionPipedrive != nil {
		return json.Marshal(f.FlowActionPipedrive)
	}
	if f.typ == "FlowActionSalesforce" || f.FlowActionSalesforce != nil {
		return json.Marshal(f.FlowActionSalesforce)
	}
	if f.typ == "FlowActionSendgrid" || f.FlowActionSendgrid != nil {
		return json.Marshal(f.FlowActionSendgrid)
	}
	if f.typ == "FlowActionSlack" || f.FlowActionSlack != nil {
		return json.Marshal(f.FlowActionSlack)
	}
	if f.typ == "FlowActionStripe" || f.FlowActionStripe != nil {
		return json.Marshal(f.FlowActionStripe)
	}
	if f.typ == "FlowActionTelegram" || f.FlowActionTelegram != nil {
		return json.Marshal(f.FlowActionTelegram)
	}
	if f.typ == "FlowActionTwilio" || f.FlowActionTwilio != nil {
		return json.Marshal(f.FlowActionTwilio)
	}
	if f.typ == "FlowActionWhatsapp" || f.FlowActionWhatsapp != nil {
		return json.Marshal(f.FlowActionWhatsapp)
	}
	if f.typ == "FlowActionXml" || f.FlowActionXml != nil {
		return json.Marshal(f.FlowActionXml)
	}
	if f.typ == "FlowActionZapier" || f.FlowActionZapier != nil {
		return json.Marshal(f.FlowActionZapier)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionVisitor interface {
	VisitFlowActionActivecampaign(*FlowActionActivecampaign) error
	VisitFlowActionAirtable(*FlowActionAirtable) error
	VisitFlowActionAuth0(*FlowActionAuth0) error
	VisitFlowActionBigquery(FlowActionBigquery) error
	VisitFlowActionClearbit(*FlowActionClearbit) error
	VisitFlowActionEmail(FlowActionEmail) error
	VisitFlowActionFlow(*FlowActionFlow) error
	VisitFlowActionGoogleSheets(FlowActionGoogleSheets) error
	VisitFlowActionHttp(FlowActionHttp) error
	VisitFlowActionHubspot(*FlowActionHubspot) error
	VisitFlowActionJson(*FlowActionJson) error
	VisitFlowActionJwt(*FlowActionJwt) error
	VisitFlowActionMailchimp(FlowActionMailchimp) error
	VisitFlowActionMailjet(FlowActionMailjet) error
	VisitFlowActionOtp(*FlowActionOtp) error
	VisitFlowActionPipedrive(*FlowActionPipedrive) error
	VisitFlowActionSalesforce(*FlowActionSalesforce) error
	VisitFlowActionSendgrid(FlowActionSendgrid) error
	VisitFlowActionSlack(FlowActionSlack) error
	VisitFlowActionStripe(*FlowActionStripe) error
	VisitFlowActionTelegram(FlowActionTelegram) error
	VisitFlowActionTwilio(*FlowActionTwilio) error
	VisitFlowActionWhatsapp(FlowActionWhatsapp) error
	VisitFlowActionXml(*FlowActionXml) error
	VisitFlowActionZapier(FlowActionZapier) error
}

func (f *FlowAction) Accept(visitor FlowActionVisitor) error {
	if f.typ == "FlowActionActivecampaign" || f.FlowActionActivecampaign != nil {
		return visitor.VisitFlowActionActivecampaign(f.FlowActionActivecampaign)
	}
	if f.typ == "FlowActionAirtable" || f.FlowActionAirtable != nil {
		return visitor.VisitFlowActionAirtable(f.FlowActionAirtable)
	}
	if f.typ == "FlowActionAuth0" || f.FlowActionAuth0 != nil {
		return visitor.VisitFlowActionAuth0(f.FlowActionAuth0)
	}
	if f.typ == "FlowActionBigquery" || f.FlowActionBigquery != nil {
		return visitor.VisitFlowActionBigquery(f.FlowActionBigquery)
	}
	if f.typ == "FlowActionClearbit" || f.FlowActionClearbit != nil {
		return visitor.VisitFlowActionClearbit(f.FlowActionClearbit)
	}
	if f.typ == "FlowActionEmail" || f.FlowActionEmail != nil {
		return visitor.VisitFlowActionEmail(f.FlowActionEmail)
	}
	if f.typ == "FlowActionFlow" || f.FlowActionFlow != nil {
		return visitor.VisitFlowActionFlow(f.FlowActionFlow)
	}
	if f.typ == "FlowActionGoogleSheets" || f.FlowActionGoogleSheets != nil {
		return visitor.VisitFlowActionGoogleSheets(f.FlowActionGoogleSheets)
	}
	if f.typ == "FlowActionHttp" || f.FlowActionHttp != nil {
		return visitor.VisitFlowActionHttp(f.FlowActionHttp)
	}
	if f.typ == "FlowActionHubspot" || f.FlowActionHubspot != nil {
		return visitor.VisitFlowActionHubspot(f.FlowActionHubspot)
	}
	if f.typ == "FlowActionJson" || f.FlowActionJson != nil {
		return visitor.VisitFlowActionJson(f.FlowActionJson)
	}
	if f.typ == "FlowActionJwt" || f.FlowActionJwt != nil {
		return visitor.VisitFlowActionJwt(f.FlowActionJwt)
	}
	if f.typ == "FlowActionMailchimp" || f.FlowActionMailchimp != nil {
		return visitor.VisitFlowActionMailchimp(f.FlowActionMailchimp)
	}
	if f.typ == "FlowActionMailjet" || f.FlowActionMailjet != nil {
		return visitor.VisitFlowActionMailjet(f.FlowActionMailjet)
	}
	if f.typ == "FlowActionOtp" || f.FlowActionOtp != nil {
		return visitor.VisitFlowActionOtp(f.FlowActionOtp)
	}
	if f.typ == "FlowActionPipedrive" || f.FlowActionPipedrive != nil {
		return visitor.VisitFlowActionPipedrive(f.FlowActionPipedrive)
	}
	if f.typ == "FlowActionSalesforce" || f.FlowActionSalesforce != nil {
		return visitor.VisitFlowActionSalesforce(f.FlowActionSalesforce)
	}
	if f.typ == "FlowActionSendgrid" || f.FlowActionSendgrid != nil {
		return visitor.VisitFlowActionSendgrid(f.FlowActionSendgrid)
	}
	if f.typ == "FlowActionSlack" || f.FlowActionSlack != nil {
		return visitor.VisitFlowActionSlack(f.FlowActionSlack)
	}
	if f.typ == "FlowActionStripe" || f.FlowActionStripe != nil {
		return visitor.VisitFlowActionStripe(f.FlowActionStripe)
	}
	if f.typ == "FlowActionTelegram" || f.FlowActionTelegram != nil {
		return visitor.VisitFlowActionTelegram(f.FlowActionTelegram)
	}
	if f.typ == "FlowActionTwilio" || f.FlowActionTwilio != nil {
		return visitor.VisitFlowActionTwilio(f.FlowActionTwilio)
	}
	if f.typ == "FlowActionWhatsapp" || f.FlowActionWhatsapp != nil {
		return visitor.VisitFlowActionWhatsapp(f.FlowActionWhatsapp)
	}
	if f.typ == "FlowActionXml" || f.FlowActionXml != nil {
		return visitor.VisitFlowActionXml(f.FlowActionXml)
	}
	if f.typ == "FlowActionZapier" || f.FlowActionZapier != nil {
		return visitor.VisitFlowActionZapier(f.FlowActionZapier)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionActivecampaign struct {
	FlowActionActivecampaignListContacts  *FlowActionActivecampaignListContacts
	FlowActionActivecampaignUpsertContact *FlowActionActivecampaignUpsertContact

	typ string
}

func (f *FlowActionActivecampaign) GetFlowActionActivecampaignListContacts() *FlowActionActivecampaignListContacts {
	if f == nil {
		return nil
	}
	return f.FlowActionActivecampaignListContacts
}

func (f *FlowActionActivecampaign) GetFlowActionActivecampaignUpsertContact() *FlowActionActivecampaignUpsertContact {
	if f == nil {
		return nil
	}
	return f.FlowActionActivecampaignUpsertContact
}

func (f *FlowActionActivecampaign) UnmarshalJSON(data []byte) error {
	valueFlowActionActivecampaignListContacts := new(FlowActionActivecampaignListContacts)
	if err := json.Unmarshal(data, &valueFlowActionActivecampaignListContacts); err == nil {
		f.typ = "FlowActionActivecampaignListContacts"
		f.FlowActionActivecampaignListContacts = valueFlowActionActivecampaignListContacts
		return nil
	}
	valueFlowActionActivecampaignUpsertContact := new(FlowActionActivecampaignUpsertContact)
	if err := json.Unmarshal(data, &valueFlowActionActivecampaignUpsertContact); err == nil {
		f.typ = "FlowActionActivecampaignUpsertContact"
		f.FlowActionActivecampaignUpsertContact = valueFlowActionActivecampaignUpsertContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionActivecampaign) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionActivecampaignListContacts" || f.FlowActionActivecampaignListContacts != nil {
		return json.Marshal(f.FlowActionActivecampaignListContacts)
	}
	if f.typ == "FlowActionActivecampaignUpsertContact" || f.FlowActionActivecampaignUpsertContact != nil {
		return json.Marshal(f.FlowActionActivecampaignUpsertContact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionActivecampaignVisitor interface {
	VisitFlowActionActivecampaignListContacts(*FlowActionActivecampaignListContacts) error
	VisitFlowActionActivecampaignUpsertContact(*FlowActionActivecampaignUpsertContact) error
}

func (f *FlowActionActivecampaign) Accept(visitor FlowActionActivecampaignVisitor) error {
	if f.typ == "FlowActionActivecampaignListContacts" || f.FlowActionActivecampaignListContacts != nil {
		return visitor.VisitFlowActionActivecampaignListContacts(f.FlowActionActivecampaignListContacts)
	}
	if f.typ == "FlowActionActivecampaignUpsertContact" || f.FlowActionActivecampaignUpsertContact != nil {
		return visitor.VisitFlowActionActivecampaignUpsertContact(f.FlowActionActivecampaignUpsertContact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionActivecampaignListContactsFieldId           = big.NewInt(1 << 0)
	flowActionActivecampaignListContactsFieldAlias        = big.NewInt(1 << 1)
	flowActionActivecampaignListContactsFieldAllowFailure = big.NewInt(1 << 2)
	flowActionActivecampaignListContactsFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionActivecampaignListContactsFieldParams       = big.NewInt(1 << 4)
)

type FlowActionActivecampaignListContacts struct {
	Id           string                                      `json:"id" url:"id"`
	Alias        *string                                     `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                       `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                       `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionActivecampaignListContactsParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionActivecampaignListContacts) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionActivecampaignListContacts) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionActivecampaignListContacts) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionActivecampaignListContacts) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionActivecampaignListContacts) GetParams() *FlowActionActivecampaignListContactsParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionActivecampaignListContacts) Type() string {
	return f.type_
}

func (f *FlowActionActivecampaignListContacts) Action() string {
	return f.action
}

func (f *FlowActionActivecampaignListContacts) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionActivecampaignListContacts) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContacts) SetId(id string) {
	f.Id = id
	f.require(flowActionActivecampaignListContactsFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContacts) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionActivecampaignListContactsFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContacts) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionActivecampaignListContactsFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContacts) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionActivecampaignListContactsFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContacts) SetParams(params *FlowActionActivecampaignListContactsParams) {
	f.Params = params
	f.require(flowActionActivecampaignListContactsFieldParams)
}

func (f *FlowActionActivecampaignListContacts) UnmarshalJSON(data []byte) error {
	type embed FlowActionActivecampaignListContacts
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionActivecampaignListContacts(unmarshaler.embed)
	if unmarshaler.Type != "ACTIVECAMPAIGN" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ACTIVECAMPAIGN", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "LIST_CONTACTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "LIST_CONTACTS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionActivecampaignListContacts) MarshalJSON() ([]byte, error) {
	type embed FlowActionActivecampaignListContacts
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "ACTIVECAMPAIGN",
		Action: "LIST_CONTACTS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionActivecampaignListContacts) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionActivecampaignListContactsParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionActivecampaignListContactsParamsFieldEmail        = big.NewInt(1 << 1)
)

type FlowActionActivecampaignListContactsParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	Email        string `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionActivecampaignListContactsParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionActivecampaignListContactsParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionActivecampaignListContactsParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionActivecampaignListContactsParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContactsParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionActivecampaignListContactsParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignListContactsParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionActivecampaignListContactsParamsFieldEmail)
}

func (f *FlowActionActivecampaignListContactsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionActivecampaignListContactsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionActivecampaignListContactsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionActivecampaignListContactsParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionActivecampaignListContactsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionActivecampaignListContactsParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionActivecampaignUpsertContactFieldId           = big.NewInt(1 << 0)
	flowActionActivecampaignUpsertContactFieldAlias        = big.NewInt(1 << 1)
	flowActionActivecampaignUpsertContactFieldAllowFailure = big.NewInt(1 << 2)
	flowActionActivecampaignUpsertContactFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionActivecampaignUpsertContactFieldParams       = big.NewInt(1 << 4)
)

type FlowActionActivecampaignUpsertContact struct {
	Id           string                                       `json:"id" url:"id"`
	Alias        *string                                      `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                        `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                        `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionActivecampaignUpsertContactParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionActivecampaignUpsertContact) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionActivecampaignUpsertContact) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionActivecampaignUpsertContact) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionActivecampaignUpsertContact) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionActivecampaignUpsertContact) GetParams() *FlowActionActivecampaignUpsertContactParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionActivecampaignUpsertContact) Type() string {
	return f.type_
}

func (f *FlowActionActivecampaignUpsertContact) Action() string {
	return f.action
}

func (f *FlowActionActivecampaignUpsertContact) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionActivecampaignUpsertContact) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContact) SetId(id string) {
	f.Id = id
	f.require(flowActionActivecampaignUpsertContactFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContact) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionActivecampaignUpsertContactFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContact) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionActivecampaignUpsertContactFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContact) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionActivecampaignUpsertContactFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContact) SetParams(params *FlowActionActivecampaignUpsertContactParams) {
	f.Params = params
	f.require(flowActionActivecampaignUpsertContactFieldParams)
}

func (f *FlowActionActivecampaignUpsertContact) UnmarshalJSON(data []byte) error {
	type embed FlowActionActivecampaignUpsertContact
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionActivecampaignUpsertContact(unmarshaler.embed)
	if unmarshaler.Type != "ACTIVECAMPAIGN" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ACTIVECAMPAIGN", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPSERT_CONTACT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPSERT_CONTACT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionActivecampaignUpsertContact) MarshalJSON() ([]byte, error) {
	type embed FlowActionActivecampaignUpsertContact
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "ACTIVECAMPAIGN",
		Action: "UPSERT_CONTACT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionActivecampaignUpsertContact) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionActivecampaignUpsertContactParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionActivecampaignUpsertContactParamsFieldEmail        = big.NewInt(1 << 1)
	flowActionActivecampaignUpsertContactParamsFieldFirstName    = big.NewInt(1 << 2)
	flowActionActivecampaignUpsertContactParamsFieldLastName     = big.NewInt(1 << 3)
	flowActionActivecampaignUpsertContactParamsFieldPhone        = big.NewInt(1 << 4)
	flowActionActivecampaignUpsertContactParamsFieldCustomFields = big.NewInt(1 << 5)
)

type FlowActionActivecampaignUpsertContactParams struct {
	ConnectionId string                                                   `json:"connection_id" url:"connection_id"`
	Email        string                                                   `json:"email" url:"email"`
	FirstName    *string                                                  `json:"first_name,omitempty" url:"first_name,omitempty"`
	LastName     *string                                                  `json:"last_name,omitempty" url:"last_name,omitempty"`
	Phone        *string                                                  `json:"phone,omitempty" url:"phone,omitempty"`
	CustomFields *FlowActionActivecampaignUpsertContactParamsCustomFields `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionActivecampaignUpsertContactParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionActivecampaignUpsertContactParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionActivecampaignUpsertContactParams) GetFirstName() string {
	if f == nil || f.FirstName == nil {
		return ""
	}
	return *f.FirstName
}

func (f *FlowActionActivecampaignUpsertContactParams) GetLastName() string {
	if f == nil || f.LastName == nil {
		return ""
	}
	return *f.LastName
}

func (f *FlowActionActivecampaignUpsertContactParams) GetPhone() string {
	if f == nil || f.Phone == nil {
		return ""
	}
	return *f.Phone
}

func (f *FlowActionActivecampaignUpsertContactParams) GetCustomFields() FlowActionActivecampaignUpsertContactParamsCustomFields {
	if f == nil || f.CustomFields == nil {
		return nil
	}
	return *f.CustomFields
}

func (f *FlowActionActivecampaignUpsertContactParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionActivecampaignUpsertContactParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContactParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionActivecampaignUpsertContactParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContactParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionActivecampaignUpsertContactParamsFieldEmail)
}

// SetFirstName sets the FirstName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContactParams) SetFirstName(firstName *string) {
	f.FirstName = firstName
	f.require(flowActionActivecampaignUpsertContactParamsFieldFirstName)
}

// SetLastName sets the LastName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContactParams) SetLastName(lastName *string) {
	f.LastName = lastName
	f.require(flowActionActivecampaignUpsertContactParamsFieldLastName)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContactParams) SetPhone(phone *string) {
	f.Phone = phone
	f.require(flowActionActivecampaignUpsertContactParamsFieldPhone)
}

// SetCustomFields sets the CustomFields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionActivecampaignUpsertContactParams) SetCustomFields(customFields *FlowActionActivecampaignUpsertContactParamsCustomFields) {
	f.CustomFields = customFields
	f.require(flowActionActivecampaignUpsertContactParamsFieldCustomFields)
}

func (f *FlowActionActivecampaignUpsertContactParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionActivecampaignUpsertContactParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionActivecampaignUpsertContactParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionActivecampaignUpsertContactParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionActivecampaignUpsertContactParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionActivecampaignUpsertContactParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionActivecampaignUpsertContactParamsCustomFields = map[string]interface{}

type FlowActionAirtable struct {
	FlowActionAirtableCreateRecord *FlowActionAirtableCreateRecord
	FlowActionAirtableListRecords  *FlowActionAirtableListRecords
	FlowActionAirtableUpdateRecord *FlowActionAirtableUpdateRecord

	typ string
}

func (f *FlowActionAirtable) GetFlowActionAirtableCreateRecord() *FlowActionAirtableCreateRecord {
	if f == nil {
		return nil
	}
	return f.FlowActionAirtableCreateRecord
}

func (f *FlowActionAirtable) GetFlowActionAirtableListRecords() *FlowActionAirtableListRecords {
	if f == nil {
		return nil
	}
	return f.FlowActionAirtableListRecords
}

func (f *FlowActionAirtable) GetFlowActionAirtableUpdateRecord() *FlowActionAirtableUpdateRecord {
	if f == nil {
		return nil
	}
	return f.FlowActionAirtableUpdateRecord
}

func (f *FlowActionAirtable) UnmarshalJSON(data []byte) error {
	valueFlowActionAirtableCreateRecord := new(FlowActionAirtableCreateRecord)
	if err := json.Unmarshal(data, &valueFlowActionAirtableCreateRecord); err == nil {
		f.typ = "FlowActionAirtableCreateRecord"
		f.FlowActionAirtableCreateRecord = valueFlowActionAirtableCreateRecord
		return nil
	}
	valueFlowActionAirtableListRecords := new(FlowActionAirtableListRecords)
	if err := json.Unmarshal(data, &valueFlowActionAirtableListRecords); err == nil {
		f.typ = "FlowActionAirtableListRecords"
		f.FlowActionAirtableListRecords = valueFlowActionAirtableListRecords
		return nil
	}
	valueFlowActionAirtableUpdateRecord := new(FlowActionAirtableUpdateRecord)
	if err := json.Unmarshal(data, &valueFlowActionAirtableUpdateRecord); err == nil {
		f.typ = "FlowActionAirtableUpdateRecord"
		f.FlowActionAirtableUpdateRecord = valueFlowActionAirtableUpdateRecord
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionAirtable) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionAirtableCreateRecord" || f.FlowActionAirtableCreateRecord != nil {
		return json.Marshal(f.FlowActionAirtableCreateRecord)
	}
	if f.typ == "FlowActionAirtableListRecords" || f.FlowActionAirtableListRecords != nil {
		return json.Marshal(f.FlowActionAirtableListRecords)
	}
	if f.typ == "FlowActionAirtableUpdateRecord" || f.FlowActionAirtableUpdateRecord != nil {
		return json.Marshal(f.FlowActionAirtableUpdateRecord)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionAirtableVisitor interface {
	VisitFlowActionAirtableCreateRecord(*FlowActionAirtableCreateRecord) error
	VisitFlowActionAirtableListRecords(*FlowActionAirtableListRecords) error
	VisitFlowActionAirtableUpdateRecord(*FlowActionAirtableUpdateRecord) error
}

func (f *FlowActionAirtable) Accept(visitor FlowActionAirtableVisitor) error {
	if f.typ == "FlowActionAirtableCreateRecord" || f.FlowActionAirtableCreateRecord != nil {
		return visitor.VisitFlowActionAirtableCreateRecord(f.FlowActionAirtableCreateRecord)
	}
	if f.typ == "FlowActionAirtableListRecords" || f.FlowActionAirtableListRecords != nil {
		return visitor.VisitFlowActionAirtableListRecords(f.FlowActionAirtableListRecords)
	}
	if f.typ == "FlowActionAirtableUpdateRecord" || f.FlowActionAirtableUpdateRecord != nil {
		return visitor.VisitFlowActionAirtableUpdateRecord(f.FlowActionAirtableUpdateRecord)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionAirtableCreateRecordFieldId           = big.NewInt(1 << 0)
	flowActionAirtableCreateRecordFieldAlias        = big.NewInt(1 << 1)
	flowActionAirtableCreateRecordFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAirtableCreateRecordFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAirtableCreateRecordFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAirtableCreateRecord struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAirtableCreateRecordParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAirtableCreateRecord) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAirtableCreateRecord) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAirtableCreateRecord) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAirtableCreateRecord) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAirtableCreateRecord) GetParams() *FlowActionAirtableCreateRecordParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAirtableCreateRecord) Type() string {
	return f.type_
}

func (f *FlowActionAirtableCreateRecord) Action() string {
	return f.action
}

func (f *FlowActionAirtableCreateRecord) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAirtableCreateRecord) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecord) SetId(id string) {
	f.Id = id
	f.require(flowActionAirtableCreateRecordFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecord) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAirtableCreateRecordFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecord) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAirtableCreateRecordFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecord) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAirtableCreateRecordFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecord) SetParams(params *FlowActionAirtableCreateRecordParams) {
	f.Params = params
	f.require(flowActionAirtableCreateRecordFieldParams)
}

func (f *FlowActionAirtableCreateRecord) UnmarshalJSON(data []byte) error {
	type embed FlowActionAirtableCreateRecord
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAirtableCreateRecord(unmarshaler.embed)
	if unmarshaler.Type != "AIRTABLE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AIRTABLE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "CREATE_RECORD" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CREATE_RECORD", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAirtableCreateRecord) MarshalJSON() ([]byte, error) {
	type embed FlowActionAirtableCreateRecord
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AIRTABLE",
		Action: "CREATE_RECORD",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAirtableCreateRecord) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAirtableCreateRecordParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAirtableCreateRecordParamsFieldBaseId       = big.NewInt(1 << 1)
	flowActionAirtableCreateRecordParamsFieldTableName    = big.NewInt(1 << 2)
	flowActionAirtableCreateRecordParamsFieldFields       = big.NewInt(1 << 3)
)

type FlowActionAirtableCreateRecordParams struct {
	ConnectionId string                                      `json:"connection_id" url:"connection_id"`
	BaseId       string                                      `json:"base_id" url:"base_id"`
	TableName    string                                      `json:"table_name" url:"table_name"`
	Fields       *FlowActionAirtableCreateRecordParamsFields `json:"fields,omitempty" url:"fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAirtableCreateRecordParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAirtableCreateRecordParams) GetBaseId() string {
	if f == nil {
		return ""
	}
	return f.BaseId
}

func (f *FlowActionAirtableCreateRecordParams) GetTableName() string {
	if f == nil {
		return ""
	}
	return f.TableName
}

func (f *FlowActionAirtableCreateRecordParams) GetFields() FlowActionAirtableCreateRecordParamsFields {
	if f == nil || f.Fields == nil {
		return nil
	}
	return *f.Fields
}

func (f *FlowActionAirtableCreateRecordParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAirtableCreateRecordParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecordParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAirtableCreateRecordParamsFieldConnectionId)
}

// SetBaseId sets the BaseId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecordParams) SetBaseId(baseId string) {
	f.BaseId = baseId
	f.require(flowActionAirtableCreateRecordParamsFieldBaseId)
}

// SetTableName sets the TableName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecordParams) SetTableName(tableName string) {
	f.TableName = tableName
	f.require(flowActionAirtableCreateRecordParamsFieldTableName)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableCreateRecordParams) SetFields(fields *FlowActionAirtableCreateRecordParamsFields) {
	f.Fields = fields
	f.require(flowActionAirtableCreateRecordParamsFieldFields)
}

func (f *FlowActionAirtableCreateRecordParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAirtableCreateRecordParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAirtableCreateRecordParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAirtableCreateRecordParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAirtableCreateRecordParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAirtableCreateRecordParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionAirtableCreateRecordParamsFields = map[string]interface{}

var (
	flowActionAirtableListRecordsFieldId           = big.NewInt(1 << 0)
	flowActionAirtableListRecordsFieldAlias        = big.NewInt(1 << 1)
	flowActionAirtableListRecordsFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAirtableListRecordsFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAirtableListRecordsFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAirtableListRecords struct {
	Id           string                               `json:"id" url:"id"`
	Alias        *string                              `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAirtableListRecordsParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAirtableListRecords) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAirtableListRecords) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAirtableListRecords) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAirtableListRecords) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAirtableListRecords) GetParams() *FlowActionAirtableListRecordsParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAirtableListRecords) Type() string {
	return f.type_
}

func (f *FlowActionAirtableListRecords) Action() string {
	return f.action
}

func (f *FlowActionAirtableListRecords) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAirtableListRecords) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecords) SetId(id string) {
	f.Id = id
	f.require(flowActionAirtableListRecordsFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecords) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAirtableListRecordsFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecords) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAirtableListRecordsFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecords) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAirtableListRecordsFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecords) SetParams(params *FlowActionAirtableListRecordsParams) {
	f.Params = params
	f.require(flowActionAirtableListRecordsFieldParams)
}

func (f *FlowActionAirtableListRecords) UnmarshalJSON(data []byte) error {
	type embed FlowActionAirtableListRecords
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAirtableListRecords(unmarshaler.embed)
	if unmarshaler.Type != "AIRTABLE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AIRTABLE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "LIST_RECORDS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "LIST_RECORDS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAirtableListRecords) MarshalJSON() ([]byte, error) {
	type embed FlowActionAirtableListRecords
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AIRTABLE",
		Action: "LIST_RECORDS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAirtableListRecords) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAirtableListRecordsParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAirtableListRecordsParamsFieldBaseId       = big.NewInt(1 << 1)
	flowActionAirtableListRecordsParamsFieldTableName    = big.NewInt(1 << 2)
	flowActionAirtableListRecordsParamsFieldQuery        = big.NewInt(1 << 3)
	flowActionAirtableListRecordsParamsFieldView         = big.NewInt(1 << 4)
)

type FlowActionAirtableListRecordsParams struct {
	ConnectionId string  `json:"connection_id" url:"connection_id"`
	BaseId       string  `json:"base_id" url:"base_id"`
	TableName    string  `json:"table_name" url:"table_name"`
	Query        *string `json:"query,omitempty" url:"query,omitempty"`
	View         *string `json:"view,omitempty" url:"view,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAirtableListRecordsParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAirtableListRecordsParams) GetBaseId() string {
	if f == nil {
		return ""
	}
	return f.BaseId
}

func (f *FlowActionAirtableListRecordsParams) GetTableName() string {
	if f == nil {
		return ""
	}
	return f.TableName
}

func (f *FlowActionAirtableListRecordsParams) GetQuery() string {
	if f == nil || f.Query == nil {
		return ""
	}
	return *f.Query
}

func (f *FlowActionAirtableListRecordsParams) GetView() string {
	if f == nil || f.View == nil {
		return ""
	}
	return *f.View
}

func (f *FlowActionAirtableListRecordsParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAirtableListRecordsParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecordsParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAirtableListRecordsParamsFieldConnectionId)
}

// SetBaseId sets the BaseId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecordsParams) SetBaseId(baseId string) {
	f.BaseId = baseId
	f.require(flowActionAirtableListRecordsParamsFieldBaseId)
}

// SetTableName sets the TableName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecordsParams) SetTableName(tableName string) {
	f.TableName = tableName
	f.require(flowActionAirtableListRecordsParamsFieldTableName)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecordsParams) SetQuery(query *string) {
	f.Query = query
	f.require(flowActionAirtableListRecordsParamsFieldQuery)
}

// SetView sets the View field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableListRecordsParams) SetView(view *string) {
	f.View = view
	f.require(flowActionAirtableListRecordsParamsFieldView)
}

func (f *FlowActionAirtableListRecordsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAirtableListRecordsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAirtableListRecordsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAirtableListRecordsParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAirtableListRecordsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAirtableListRecordsParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAirtableUpdateRecordFieldId           = big.NewInt(1 << 0)
	flowActionAirtableUpdateRecordFieldAlias        = big.NewInt(1 << 1)
	flowActionAirtableUpdateRecordFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAirtableUpdateRecordFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAirtableUpdateRecordFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAirtableUpdateRecord struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAirtableUpdateRecordParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAirtableUpdateRecord) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAirtableUpdateRecord) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAirtableUpdateRecord) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAirtableUpdateRecord) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAirtableUpdateRecord) GetParams() *FlowActionAirtableUpdateRecordParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAirtableUpdateRecord) Type() string {
	return f.type_
}

func (f *FlowActionAirtableUpdateRecord) Action() string {
	return f.action
}

func (f *FlowActionAirtableUpdateRecord) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAirtableUpdateRecord) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecord) SetId(id string) {
	f.Id = id
	f.require(flowActionAirtableUpdateRecordFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecord) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAirtableUpdateRecordFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecord) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAirtableUpdateRecordFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecord) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAirtableUpdateRecordFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecord) SetParams(params *FlowActionAirtableUpdateRecordParams) {
	f.Params = params
	f.require(flowActionAirtableUpdateRecordFieldParams)
}

func (f *FlowActionAirtableUpdateRecord) UnmarshalJSON(data []byte) error {
	type embed FlowActionAirtableUpdateRecord
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAirtableUpdateRecord(unmarshaler.embed)
	if unmarshaler.Type != "AIRTABLE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AIRTABLE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPDATE_RECORD" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPDATE_RECORD", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAirtableUpdateRecord) MarshalJSON() ([]byte, error) {
	type embed FlowActionAirtableUpdateRecord
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AIRTABLE",
		Action: "UPDATE_RECORD",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAirtableUpdateRecord) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAirtableUpdateRecordParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAirtableUpdateRecordParamsFieldBaseId       = big.NewInt(1 << 1)
	flowActionAirtableUpdateRecordParamsFieldTableName    = big.NewInt(1 << 2)
	flowActionAirtableUpdateRecordParamsFieldRecordId     = big.NewInt(1 << 3)
	flowActionAirtableUpdateRecordParamsFieldFields       = big.NewInt(1 << 4)
)

type FlowActionAirtableUpdateRecordParams struct {
	ConnectionId string                                      `json:"connection_id" url:"connection_id"`
	BaseId       string                                      `json:"base_id" url:"base_id"`
	TableName    string                                      `json:"table_name" url:"table_name"`
	RecordId     string                                      `json:"record_id" url:"record_id"`
	Fields       *FlowActionAirtableUpdateRecordParamsFields `json:"fields,omitempty" url:"fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAirtableUpdateRecordParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAirtableUpdateRecordParams) GetBaseId() string {
	if f == nil {
		return ""
	}
	return f.BaseId
}

func (f *FlowActionAirtableUpdateRecordParams) GetTableName() string {
	if f == nil {
		return ""
	}
	return f.TableName
}

func (f *FlowActionAirtableUpdateRecordParams) GetRecordId() string {
	if f == nil {
		return ""
	}
	return f.RecordId
}

func (f *FlowActionAirtableUpdateRecordParams) GetFields() FlowActionAirtableUpdateRecordParamsFields {
	if f == nil || f.Fields == nil {
		return nil
	}
	return *f.Fields
}

func (f *FlowActionAirtableUpdateRecordParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAirtableUpdateRecordParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecordParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAirtableUpdateRecordParamsFieldConnectionId)
}

// SetBaseId sets the BaseId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecordParams) SetBaseId(baseId string) {
	f.BaseId = baseId
	f.require(flowActionAirtableUpdateRecordParamsFieldBaseId)
}

// SetTableName sets the TableName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecordParams) SetTableName(tableName string) {
	f.TableName = tableName
	f.require(flowActionAirtableUpdateRecordParamsFieldTableName)
}

// SetRecordId sets the RecordId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecordParams) SetRecordId(recordId string) {
	f.RecordId = recordId
	f.require(flowActionAirtableUpdateRecordParamsFieldRecordId)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAirtableUpdateRecordParams) SetFields(fields *FlowActionAirtableUpdateRecordParamsFields) {
	f.Fields = fields
	f.require(flowActionAirtableUpdateRecordParamsFieldFields)
}

func (f *FlowActionAirtableUpdateRecordParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAirtableUpdateRecordParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAirtableUpdateRecordParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAirtableUpdateRecordParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAirtableUpdateRecordParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAirtableUpdateRecordParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionAirtableUpdateRecordParamsFields = map[string]interface{}

type FlowActionAuth0 struct {
	FlowActionAuth0CreateUser  *FlowActionAuth0CreateUser
	FlowActionAuth0GetUser     *FlowActionAuth0GetUser
	FlowActionAuth0UpdateUser  *FlowActionAuth0UpdateUser
	FlowActionAuth0SendRequest *FlowActionAuth0SendRequest

	typ string
}

func (f *FlowActionAuth0) GetFlowActionAuth0CreateUser() *FlowActionAuth0CreateUser {
	if f == nil {
		return nil
	}
	return f.FlowActionAuth0CreateUser
}

func (f *FlowActionAuth0) GetFlowActionAuth0GetUser() *FlowActionAuth0GetUser {
	if f == nil {
		return nil
	}
	return f.FlowActionAuth0GetUser
}

func (f *FlowActionAuth0) GetFlowActionAuth0UpdateUser() *FlowActionAuth0UpdateUser {
	if f == nil {
		return nil
	}
	return f.FlowActionAuth0UpdateUser
}

func (f *FlowActionAuth0) GetFlowActionAuth0SendRequest() *FlowActionAuth0SendRequest {
	if f == nil {
		return nil
	}
	return f.FlowActionAuth0SendRequest
}

func (f *FlowActionAuth0) UnmarshalJSON(data []byte) error {
	valueFlowActionAuth0CreateUser := new(FlowActionAuth0CreateUser)
	if err := json.Unmarshal(data, &valueFlowActionAuth0CreateUser); err == nil {
		f.typ = "FlowActionAuth0CreateUser"
		f.FlowActionAuth0CreateUser = valueFlowActionAuth0CreateUser
		return nil
	}
	valueFlowActionAuth0GetUser := new(FlowActionAuth0GetUser)
	if err := json.Unmarshal(data, &valueFlowActionAuth0GetUser); err == nil {
		f.typ = "FlowActionAuth0GetUser"
		f.FlowActionAuth0GetUser = valueFlowActionAuth0GetUser
		return nil
	}
	valueFlowActionAuth0UpdateUser := new(FlowActionAuth0UpdateUser)
	if err := json.Unmarshal(data, &valueFlowActionAuth0UpdateUser); err == nil {
		f.typ = "FlowActionAuth0UpdateUser"
		f.FlowActionAuth0UpdateUser = valueFlowActionAuth0UpdateUser
		return nil
	}
	valueFlowActionAuth0SendRequest := new(FlowActionAuth0SendRequest)
	if err := json.Unmarshal(data, &valueFlowActionAuth0SendRequest); err == nil {
		f.typ = "FlowActionAuth0SendRequest"
		f.FlowActionAuth0SendRequest = valueFlowActionAuth0SendRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionAuth0) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionAuth0CreateUser" || f.FlowActionAuth0CreateUser != nil {
		return json.Marshal(f.FlowActionAuth0CreateUser)
	}
	if f.typ == "FlowActionAuth0GetUser" || f.FlowActionAuth0GetUser != nil {
		return json.Marshal(f.FlowActionAuth0GetUser)
	}
	if f.typ == "FlowActionAuth0UpdateUser" || f.FlowActionAuth0UpdateUser != nil {
		return json.Marshal(f.FlowActionAuth0UpdateUser)
	}
	if f.typ == "FlowActionAuth0SendRequest" || f.FlowActionAuth0SendRequest != nil {
		return json.Marshal(f.FlowActionAuth0SendRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionAuth0Visitor interface {
	VisitFlowActionAuth0CreateUser(*FlowActionAuth0CreateUser) error
	VisitFlowActionAuth0GetUser(*FlowActionAuth0GetUser) error
	VisitFlowActionAuth0UpdateUser(*FlowActionAuth0UpdateUser) error
	VisitFlowActionAuth0SendRequest(*FlowActionAuth0SendRequest) error
}

func (f *FlowActionAuth0) Accept(visitor FlowActionAuth0Visitor) error {
	if f.typ == "FlowActionAuth0CreateUser" || f.FlowActionAuth0CreateUser != nil {
		return visitor.VisitFlowActionAuth0CreateUser(f.FlowActionAuth0CreateUser)
	}
	if f.typ == "FlowActionAuth0GetUser" || f.FlowActionAuth0GetUser != nil {
		return visitor.VisitFlowActionAuth0GetUser(f.FlowActionAuth0GetUser)
	}
	if f.typ == "FlowActionAuth0UpdateUser" || f.FlowActionAuth0UpdateUser != nil {
		return visitor.VisitFlowActionAuth0UpdateUser(f.FlowActionAuth0UpdateUser)
	}
	if f.typ == "FlowActionAuth0SendRequest" || f.FlowActionAuth0SendRequest != nil {
		return visitor.VisitFlowActionAuth0SendRequest(f.FlowActionAuth0SendRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionAuth0CreateUserFieldId           = big.NewInt(1 << 0)
	flowActionAuth0CreateUserFieldAlias        = big.NewInt(1 << 1)
	flowActionAuth0CreateUserFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAuth0CreateUserFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAuth0CreateUserFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAuth0CreateUser struct {
	Id           string                           `json:"id" url:"id"`
	Alias        *string                          `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                            `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                            `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAuth0CreateUserParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0CreateUser) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAuth0CreateUser) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAuth0CreateUser) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAuth0CreateUser) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAuth0CreateUser) GetParams() *FlowActionAuth0CreateUserParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAuth0CreateUser) Type() string {
	return f.type_
}

func (f *FlowActionAuth0CreateUser) Action() string {
	return f.action
}

func (f *FlowActionAuth0CreateUser) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0CreateUser) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUser) SetId(id string) {
	f.Id = id
	f.require(flowActionAuth0CreateUserFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUser) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAuth0CreateUserFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUser) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAuth0CreateUserFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUser) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAuth0CreateUserFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUser) SetParams(params *FlowActionAuth0CreateUserParams) {
	f.Params = params
	f.require(flowActionAuth0CreateUserFieldParams)
}

func (f *FlowActionAuth0CreateUser) UnmarshalJSON(data []byte) error {
	type embed FlowActionAuth0CreateUser
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAuth0CreateUser(unmarshaler.embed)
	if unmarshaler.Type != "AUTH0" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AUTH0", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "CREATE_USER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CREATE_USER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0CreateUser) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0CreateUser
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AUTH0",
		Action: "CREATE_USER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0CreateUser) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAuth0CreateUserParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAuth0CreateUserParamsFieldPayload      = big.NewInt(1 << 1)
)

type FlowActionAuth0CreateUserParams struct {
	ConnectionId string                                 `json:"connection_id" url:"connection_id"`
	Payload      FlowActionAuth0CreateUserParamsPayload `json:"payload" url:"payload"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0CreateUserParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAuth0CreateUserParams) GetPayload() FlowActionAuth0CreateUserParamsPayload {
	if f == nil {
		return nil
	}
	return f.Payload
}

func (f *FlowActionAuth0CreateUserParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0CreateUserParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUserParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAuth0CreateUserParamsFieldConnectionId)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0CreateUserParams) SetPayload(payload FlowActionAuth0CreateUserParamsPayload) {
	f.Payload = payload
	f.require(flowActionAuth0CreateUserParamsFieldPayload)
}

func (f *FlowActionAuth0CreateUserParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAuth0CreateUserParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAuth0CreateUserParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0CreateUserParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0CreateUserParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0CreateUserParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionAuth0CreateUserParamsPayload = map[string]interface{}

var (
	flowActionAuth0GetUserFieldId           = big.NewInt(1 << 0)
	flowActionAuth0GetUserFieldAlias        = big.NewInt(1 << 1)
	flowActionAuth0GetUserFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAuth0GetUserFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAuth0GetUserFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAuth0GetUser struct {
	Id           string                        `json:"id" url:"id"`
	Alias        *string                       `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                         `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                         `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAuth0GetUserParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0GetUser) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAuth0GetUser) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAuth0GetUser) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAuth0GetUser) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAuth0GetUser) GetParams() *FlowActionAuth0GetUserParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAuth0GetUser) Type() string {
	return f.type_
}

func (f *FlowActionAuth0GetUser) Action() string {
	return f.action
}

func (f *FlowActionAuth0GetUser) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0GetUser) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUser) SetId(id string) {
	f.Id = id
	f.require(flowActionAuth0GetUserFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUser) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAuth0GetUserFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUser) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAuth0GetUserFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUser) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAuth0GetUserFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUser) SetParams(params *FlowActionAuth0GetUserParams) {
	f.Params = params
	f.require(flowActionAuth0GetUserFieldParams)
}

func (f *FlowActionAuth0GetUser) UnmarshalJSON(data []byte) error {
	type embed FlowActionAuth0GetUser
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAuth0GetUser(unmarshaler.embed)
	if unmarshaler.Type != "AUTH0" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AUTH0", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "GET_USER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "GET_USER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0GetUser) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0GetUser
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AUTH0",
		Action: "GET_USER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0GetUser) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAuth0GetUserParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAuth0GetUserParamsFieldUserId       = big.NewInt(1 << 1)
)

type FlowActionAuth0GetUserParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	UserId       string `json:"user_id" url:"user_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0GetUserParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAuth0GetUserParams) GetUserId() string {
	if f == nil {
		return ""
	}
	return f.UserId
}

func (f *FlowActionAuth0GetUserParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0GetUserParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUserParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAuth0GetUserParamsFieldConnectionId)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0GetUserParams) SetUserId(userId string) {
	f.UserId = userId
	f.require(flowActionAuth0GetUserParamsFieldUserId)
}

func (f *FlowActionAuth0GetUserParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAuth0GetUserParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAuth0GetUserParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0GetUserParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0GetUserParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0GetUserParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAuth0SendRequestFieldId           = big.NewInt(1 << 0)
	flowActionAuth0SendRequestFieldAlias        = big.NewInt(1 << 1)
	flowActionAuth0SendRequestFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAuth0SendRequestFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAuth0SendRequestFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAuth0SendRequest struct {
	Id           string                            `json:"id" url:"id"`
	Alias        *string                           `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                             `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                             `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAuth0SendRequestParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0SendRequest) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAuth0SendRequest) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAuth0SendRequest) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAuth0SendRequest) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAuth0SendRequest) GetParams() *FlowActionAuth0SendRequestParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAuth0SendRequest) Type() string {
	return f.type_
}

func (f *FlowActionAuth0SendRequest) Action() string {
	return f.action
}

func (f *FlowActionAuth0SendRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0SendRequest) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequest) SetId(id string) {
	f.Id = id
	f.require(flowActionAuth0SendRequestFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequest) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAuth0SendRequestFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequest) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAuth0SendRequestFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequest) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAuth0SendRequestFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequest) SetParams(params *FlowActionAuth0SendRequestParams) {
	f.Params = params
	f.require(flowActionAuth0SendRequestFieldParams)
}

func (f *FlowActionAuth0SendRequest) UnmarshalJSON(data []byte) error {
	type embed FlowActionAuth0SendRequest
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAuth0SendRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUTH0" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AUTH0", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_REQUEST" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_REQUEST", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0SendRequest) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0SendRequest
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AUTH0",
		Action: "SEND_REQUEST",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0SendRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAuth0SendRequestParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAuth0SendRequestParamsFieldPathname     = big.NewInt(1 << 1)
	flowActionAuth0SendRequestParamsFieldMethod       = big.NewInt(1 << 2)
	flowActionAuth0SendRequestParamsFieldHeaders      = big.NewInt(1 << 3)
	flowActionAuth0SendRequestParamsFieldParams       = big.NewInt(1 << 4)
	flowActionAuth0SendRequestParamsFieldPayload      = big.NewInt(1 << 5)
)

type FlowActionAuth0SendRequestParams struct {
	ConnectionId string                                       `json:"connection_id" url:"connection_id"`
	Pathname     string                                       `json:"pathname" url:"pathname"`
	Method       *FlowActionAuth0SendRequestParamsMethod      `json:"method,omitempty" url:"method,omitempty"`
	Headers      *FlowActionAuth0SendRequestParamsHeaders     `json:"headers,omitempty" url:"headers,omitempty"`
	Params       *FlowActionAuth0SendRequestParamsQueryParams `json:"params,omitempty" url:"params,omitempty"`
	Payload      *FlowActionAuth0SendRequestParamsPayload     `json:"payload,omitempty" url:"payload,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0SendRequestParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAuth0SendRequestParams) GetPathname() string {
	if f == nil {
		return ""
	}
	return f.Pathname
}

func (f *FlowActionAuth0SendRequestParams) GetMethod() FlowActionAuth0SendRequestParamsMethod {
	if f == nil || f.Method == nil {
		return ""
	}
	return *f.Method
}

func (f *FlowActionAuth0SendRequestParams) GetHeaders() FlowActionAuth0SendRequestParamsHeaders {
	if f == nil || f.Headers == nil {
		return nil
	}
	return *f.Headers
}

func (f *FlowActionAuth0SendRequestParams) GetParams() FlowActionAuth0SendRequestParamsQueryParams {
	if f == nil || f.Params == nil {
		return nil
	}
	return *f.Params
}

func (f *FlowActionAuth0SendRequestParams) GetPayload() FlowActionAuth0SendRequestParamsPayload {
	if f == nil || f.Payload == nil {
		return FlowActionAuth0SendRequestParamsPayload{}
	}
	return *f.Payload
}

func (f *FlowActionAuth0SendRequestParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0SendRequestParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequestParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAuth0SendRequestParamsFieldConnectionId)
}

// SetPathname sets the Pathname field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequestParams) SetPathname(pathname string) {
	f.Pathname = pathname
	f.require(flowActionAuth0SendRequestParamsFieldPathname)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequestParams) SetMethod(method *FlowActionAuth0SendRequestParamsMethod) {
	f.Method = method
	f.require(flowActionAuth0SendRequestParamsFieldMethod)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequestParams) SetHeaders(headers *FlowActionAuth0SendRequestParamsHeaders) {
	f.Headers = headers
	f.require(flowActionAuth0SendRequestParamsFieldHeaders)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequestParams) SetParams(params *FlowActionAuth0SendRequestParamsQueryParams) {
	f.Params = params
	f.require(flowActionAuth0SendRequestParamsFieldParams)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0SendRequestParams) SetPayload(payload *FlowActionAuth0SendRequestParamsPayload) {
	f.Payload = payload
	f.require(flowActionAuth0SendRequestParamsFieldPayload)
}

func (f *FlowActionAuth0SendRequestParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAuth0SendRequestParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAuth0SendRequestParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0SendRequestParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0SendRequestParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0SendRequestParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionAuth0SendRequestParamsHeaders = map[string]interface{}

type FlowActionAuth0SendRequestParamsMethod string

const (
	FlowActionAuth0SendRequestParamsMethodGet    FlowActionAuth0SendRequestParamsMethod = "GET"
	FlowActionAuth0SendRequestParamsMethodPost   FlowActionAuth0SendRequestParamsMethod = "POST"
	FlowActionAuth0SendRequestParamsMethodPut    FlowActionAuth0SendRequestParamsMethod = "PUT"
	FlowActionAuth0SendRequestParamsMethodPatch  FlowActionAuth0SendRequestParamsMethod = "PATCH"
	FlowActionAuth0SendRequestParamsMethodDelete FlowActionAuth0SendRequestParamsMethod = "DELETE"
)

func NewFlowActionAuth0SendRequestParamsMethodFromString(s string) (FlowActionAuth0SendRequestParamsMethod, error) {
	switch s {
	case "GET":
		return FlowActionAuth0SendRequestParamsMethodGet, nil
	case "POST":
		return FlowActionAuth0SendRequestParamsMethodPost, nil
	case "PUT":
		return FlowActionAuth0SendRequestParamsMethodPut, nil
	case "PATCH":
		return FlowActionAuth0SendRequestParamsMethodPatch, nil
	case "DELETE":
		return FlowActionAuth0SendRequestParamsMethodDelete, nil
	}
	var t FlowActionAuth0SendRequestParamsMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionAuth0SendRequestParamsMethod) Ptr() *FlowActionAuth0SendRequestParamsMethod {
	return &f
}

type FlowActionAuth0SendRequestParamsPayload struct {
	String                                        string
	UnknownList                                   []interface{}
	FlowActionAuth0SendRequestParamsPayloadObject FlowActionAuth0SendRequestParamsPayloadObject

	typ string
}

func (f *FlowActionAuth0SendRequestParamsPayload) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionAuth0SendRequestParamsPayload) GetUnknownList() []interface{} {
	if f == nil {
		return nil
	}
	return f.UnknownList
}

func (f *FlowActionAuth0SendRequestParamsPayload) GetFlowActionAuth0SendRequestParamsPayloadObject() FlowActionAuth0SendRequestParamsPayloadObject {
	if f == nil {
		return nil
	}
	return f.FlowActionAuth0SendRequestParamsPayloadObject
}

func (f *FlowActionAuth0SendRequestParamsPayload) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		f.typ = "UnknownList"
		f.UnknownList = valueUnknownList
		return nil
	}
	var valueFlowActionAuth0SendRequestParamsPayloadObject FlowActionAuth0SendRequestParamsPayloadObject
	if err := json.Unmarshal(data, &valueFlowActionAuth0SendRequestParamsPayloadObject); err == nil {
		f.typ = "FlowActionAuth0SendRequestParamsPayloadObject"
		f.FlowActionAuth0SendRequestParamsPayloadObject = valueFlowActionAuth0SendRequestParamsPayloadObject
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionAuth0SendRequestParamsPayload) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "UnknownList" || f.UnknownList != nil {
		return json.Marshal(f.UnknownList)
	}
	if f.typ == "FlowActionAuth0SendRequestParamsPayloadObject" || f.FlowActionAuth0SendRequestParamsPayloadObject != nil {
		return json.Marshal(f.FlowActionAuth0SendRequestParamsPayloadObject)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionAuth0SendRequestParamsPayloadVisitor interface {
	VisitString(string) error
	VisitUnknownList([]interface{}) error
	VisitFlowActionAuth0SendRequestParamsPayloadObject(FlowActionAuth0SendRequestParamsPayloadObject) error
}

func (f *FlowActionAuth0SendRequestParamsPayload) Accept(visitor FlowActionAuth0SendRequestParamsPayloadVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "UnknownList" || f.UnknownList != nil {
		return visitor.VisitUnknownList(f.UnknownList)
	}
	if f.typ == "FlowActionAuth0SendRequestParamsPayloadObject" || f.FlowActionAuth0SendRequestParamsPayloadObject != nil {
		return visitor.VisitFlowActionAuth0SendRequestParamsPayloadObject(f.FlowActionAuth0SendRequestParamsPayloadObject)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionAuth0SendRequestParamsPayloadObject = map[string]interface{}

type FlowActionAuth0SendRequestParamsQueryParams = map[string]*FlowActionAuth0SendRequestParamsQueryParamsValue

type FlowActionAuth0SendRequestParamsQueryParamsValue struct {
	Double float64
	String string

	typ string
}

func (f *FlowActionAuth0SendRequestParamsQueryParamsValue) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionAuth0SendRequestParamsQueryParamsValue) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionAuth0SendRequestParamsQueryParamsValue) UnmarshalJSON(data []byte) error {
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionAuth0SendRequestParamsQueryParamsValue) MarshalJSON() ([]byte, error) {
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionAuth0SendRequestParamsQueryParamsValueVisitor interface {
	VisitDouble(float64) error
	VisitString(string) error
}

func (f *FlowActionAuth0SendRequestParamsQueryParamsValue) Accept(visitor FlowActionAuth0SendRequestParamsQueryParamsValueVisitor) error {
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionAuth0UpdateUserFieldId           = big.NewInt(1 << 0)
	flowActionAuth0UpdateUserFieldAlias        = big.NewInt(1 << 1)
	flowActionAuth0UpdateUserFieldAllowFailure = big.NewInt(1 << 2)
	flowActionAuth0UpdateUserFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionAuth0UpdateUserFieldParams       = big.NewInt(1 << 4)
)

type FlowActionAuth0UpdateUser struct {
	Id           string                           `json:"id" url:"id"`
	Alias        *string                          `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                            `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                            `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionAuth0UpdateUserParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0UpdateUser) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionAuth0UpdateUser) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionAuth0UpdateUser) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionAuth0UpdateUser) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionAuth0UpdateUser) GetParams() *FlowActionAuth0UpdateUserParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionAuth0UpdateUser) Type() string {
	return f.type_
}

func (f *FlowActionAuth0UpdateUser) Action() string {
	return f.action
}

func (f *FlowActionAuth0UpdateUser) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0UpdateUser) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUser) SetId(id string) {
	f.Id = id
	f.require(flowActionAuth0UpdateUserFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUser) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionAuth0UpdateUserFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUser) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionAuth0UpdateUserFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUser) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionAuth0UpdateUserFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUser) SetParams(params *FlowActionAuth0UpdateUserParams) {
	f.Params = params
	f.require(flowActionAuth0UpdateUserFieldParams)
}

func (f *FlowActionAuth0UpdateUser) UnmarshalJSON(data []byte) error {
	type embed FlowActionAuth0UpdateUser
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionAuth0UpdateUser(unmarshaler.embed)
	if unmarshaler.Type != "AUTH0" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "AUTH0", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPDATE_USER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPDATE_USER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0UpdateUser) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0UpdateUser
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "AUTH0",
		Action: "UPDATE_USER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0UpdateUser) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionAuth0UpdateUserParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionAuth0UpdateUserParamsFieldUserId       = big.NewInt(1 << 1)
	flowActionAuth0UpdateUserParamsFieldChanges      = big.NewInt(1 << 2)
)

type FlowActionAuth0UpdateUserParams struct {
	ConnectionId string                                 `json:"connection_id" url:"connection_id"`
	UserId       string                                 `json:"user_id" url:"user_id"`
	Changes      FlowActionAuth0UpdateUserParamsChanges `json:"changes" url:"changes"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionAuth0UpdateUserParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionAuth0UpdateUserParams) GetUserId() string {
	if f == nil {
		return ""
	}
	return f.UserId
}

func (f *FlowActionAuth0UpdateUserParams) GetChanges() FlowActionAuth0UpdateUserParamsChanges {
	if f == nil {
		return nil
	}
	return f.Changes
}

func (f *FlowActionAuth0UpdateUserParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionAuth0UpdateUserParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUserParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionAuth0UpdateUserParamsFieldConnectionId)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUserParams) SetUserId(userId string) {
	f.UserId = userId
	f.require(flowActionAuth0UpdateUserParamsFieldUserId)
}

// SetChanges sets the Changes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionAuth0UpdateUserParams) SetChanges(changes FlowActionAuth0UpdateUserParamsChanges) {
	f.Changes = changes
	f.require(flowActionAuth0UpdateUserParamsFieldChanges)
}

func (f *FlowActionAuth0UpdateUserParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionAuth0UpdateUserParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionAuth0UpdateUserParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionAuth0UpdateUserParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionAuth0UpdateUserParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionAuth0UpdateUserParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionAuth0UpdateUserParamsChanges = map[string]interface{}

type FlowActionBigquery = *FlowActionBigqueryInsertRows

var (
	flowActionBigqueryInsertRowsFieldId           = big.NewInt(1 << 0)
	flowActionBigqueryInsertRowsFieldAlias        = big.NewInt(1 << 1)
	flowActionBigqueryInsertRowsFieldAllowFailure = big.NewInt(1 << 2)
	flowActionBigqueryInsertRowsFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionBigqueryInsertRowsFieldParams       = big.NewInt(1 << 4)
)

type FlowActionBigqueryInsertRows struct {
	Id           string                              `json:"id" url:"id"`
	Alias        *string                             `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                               `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                               `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionBigqueryInsertRowsParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionBigqueryInsertRows) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionBigqueryInsertRows) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionBigqueryInsertRows) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionBigqueryInsertRows) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionBigqueryInsertRows) GetParams() *FlowActionBigqueryInsertRowsParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionBigqueryInsertRows) Type() string {
	return f.type_
}

func (f *FlowActionBigqueryInsertRows) Action() string {
	return f.action
}

func (f *FlowActionBigqueryInsertRows) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionBigqueryInsertRows) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRows) SetId(id string) {
	f.Id = id
	f.require(flowActionBigqueryInsertRowsFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRows) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionBigqueryInsertRowsFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRows) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionBigqueryInsertRowsFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRows) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionBigqueryInsertRowsFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRows) SetParams(params *FlowActionBigqueryInsertRowsParams) {
	f.Params = params
	f.require(flowActionBigqueryInsertRowsFieldParams)
}

func (f *FlowActionBigqueryInsertRows) UnmarshalJSON(data []byte) error {
	type embed FlowActionBigqueryInsertRows
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionBigqueryInsertRows(unmarshaler.embed)
	if unmarshaler.Type != "BIGQUERY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "BIGQUERY", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "INSERT_ROWS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "INSERT_ROWS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionBigqueryInsertRows) MarshalJSON() ([]byte, error) {
	type embed FlowActionBigqueryInsertRows
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "BIGQUERY",
		Action: "INSERT_ROWS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionBigqueryInsertRows) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionBigqueryInsertRowsParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionBigqueryInsertRowsParamsFieldDatasetId    = big.NewInt(1 << 1)
	flowActionBigqueryInsertRowsParamsFieldTableId      = big.NewInt(1 << 2)
	flowActionBigqueryInsertRowsParamsFieldData         = big.NewInt(1 << 3)
)

type FlowActionBigqueryInsertRowsParams struct {
	ConnectionId string                                  `json:"connection_id" url:"connection_id"`
	DatasetId    string                                  `json:"dataset_id" url:"dataset_id"`
	TableId      string                                  `json:"table_id" url:"table_id"`
	Data         *FlowActionBigqueryInsertRowsParamsData `json:"data,omitempty" url:"data,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionBigqueryInsertRowsParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionBigqueryInsertRowsParams) GetDatasetId() string {
	if f == nil {
		return ""
	}
	return f.DatasetId
}

func (f *FlowActionBigqueryInsertRowsParams) GetTableId() string {
	if f == nil {
		return ""
	}
	return f.TableId
}

func (f *FlowActionBigqueryInsertRowsParams) GetData() FlowActionBigqueryInsertRowsParamsData {
	if f == nil || f.Data == nil {
		return nil
	}
	return *f.Data
}

func (f *FlowActionBigqueryInsertRowsParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionBigqueryInsertRowsParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRowsParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionBigqueryInsertRowsParamsFieldConnectionId)
}

// SetDatasetId sets the DatasetId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRowsParams) SetDatasetId(datasetId string) {
	f.DatasetId = datasetId
	f.require(flowActionBigqueryInsertRowsParamsFieldDatasetId)
}

// SetTableId sets the TableId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRowsParams) SetTableId(tableId string) {
	f.TableId = tableId
	f.require(flowActionBigqueryInsertRowsParamsFieldTableId)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionBigqueryInsertRowsParams) SetData(data *FlowActionBigqueryInsertRowsParamsData) {
	f.Data = data
	f.require(flowActionBigqueryInsertRowsParamsFieldData)
}

func (f *FlowActionBigqueryInsertRowsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionBigqueryInsertRowsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionBigqueryInsertRowsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionBigqueryInsertRowsParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionBigqueryInsertRowsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionBigqueryInsertRowsParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionBigqueryInsertRowsParamsData = map[string]interface{}

type FlowActionClearbit struct {
	FlowActionClearbitFindPerson  *FlowActionClearbitFindPerson
	FlowActionClearbitFindCompany *FlowActionClearbitFindCompany

	typ string
}

func (f *FlowActionClearbit) GetFlowActionClearbitFindPerson() *FlowActionClearbitFindPerson {
	if f == nil {
		return nil
	}
	return f.FlowActionClearbitFindPerson
}

func (f *FlowActionClearbit) GetFlowActionClearbitFindCompany() *FlowActionClearbitFindCompany {
	if f == nil {
		return nil
	}
	return f.FlowActionClearbitFindCompany
}

func (f *FlowActionClearbit) UnmarshalJSON(data []byte) error {
	valueFlowActionClearbitFindPerson := new(FlowActionClearbitFindPerson)
	if err := json.Unmarshal(data, &valueFlowActionClearbitFindPerson); err == nil {
		f.typ = "FlowActionClearbitFindPerson"
		f.FlowActionClearbitFindPerson = valueFlowActionClearbitFindPerson
		return nil
	}
	valueFlowActionClearbitFindCompany := new(FlowActionClearbitFindCompany)
	if err := json.Unmarshal(data, &valueFlowActionClearbitFindCompany); err == nil {
		f.typ = "FlowActionClearbitFindCompany"
		f.FlowActionClearbitFindCompany = valueFlowActionClearbitFindCompany
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionClearbit) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionClearbitFindPerson" || f.FlowActionClearbitFindPerson != nil {
		return json.Marshal(f.FlowActionClearbitFindPerson)
	}
	if f.typ == "FlowActionClearbitFindCompany" || f.FlowActionClearbitFindCompany != nil {
		return json.Marshal(f.FlowActionClearbitFindCompany)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionClearbitVisitor interface {
	VisitFlowActionClearbitFindPerson(*FlowActionClearbitFindPerson) error
	VisitFlowActionClearbitFindCompany(*FlowActionClearbitFindCompany) error
}

func (f *FlowActionClearbit) Accept(visitor FlowActionClearbitVisitor) error {
	if f.typ == "FlowActionClearbitFindPerson" || f.FlowActionClearbitFindPerson != nil {
		return visitor.VisitFlowActionClearbitFindPerson(f.FlowActionClearbitFindPerson)
	}
	if f.typ == "FlowActionClearbitFindCompany" || f.FlowActionClearbitFindCompany != nil {
		return visitor.VisitFlowActionClearbitFindCompany(f.FlowActionClearbitFindCompany)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionClearbitFindCompanyFieldId           = big.NewInt(1 << 0)
	flowActionClearbitFindCompanyFieldAlias        = big.NewInt(1 << 1)
	flowActionClearbitFindCompanyFieldAllowFailure = big.NewInt(1 << 2)
	flowActionClearbitFindCompanyFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionClearbitFindCompanyFieldParams       = big.NewInt(1 << 4)
)

type FlowActionClearbitFindCompany struct {
	Id           string                               `json:"id" url:"id"`
	Alias        *string                              `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionClearbitFindCompanyParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionClearbitFindCompany) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionClearbitFindCompany) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionClearbitFindCompany) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionClearbitFindCompany) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionClearbitFindCompany) GetParams() *FlowActionClearbitFindCompanyParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionClearbitFindCompany) Type() string {
	return f.type_
}

func (f *FlowActionClearbitFindCompany) Action() string {
	return f.action
}

func (f *FlowActionClearbitFindCompany) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionClearbitFindCompany) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompany) SetId(id string) {
	f.Id = id
	f.require(flowActionClearbitFindCompanyFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompany) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionClearbitFindCompanyFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompany) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionClearbitFindCompanyFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompany) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionClearbitFindCompanyFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompany) SetParams(params *FlowActionClearbitFindCompanyParams) {
	f.Params = params
	f.require(flowActionClearbitFindCompanyFieldParams)
}

func (f *FlowActionClearbitFindCompany) UnmarshalJSON(data []byte) error {
	type embed FlowActionClearbitFindCompany
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionClearbitFindCompany(unmarshaler.embed)
	if unmarshaler.Type != "CLEARBIT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CLEARBIT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "FIND_COMPANY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FIND_COMPANY", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionClearbitFindCompany) MarshalJSON() ([]byte, error) {
	type embed FlowActionClearbitFindCompany
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "CLEARBIT",
		Action: "FIND_COMPANY",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionClearbitFindCompany) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionClearbitFindCompanyParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionClearbitFindCompanyParamsFieldDomain       = big.NewInt(1 << 1)
)

type FlowActionClearbitFindCompanyParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	Domain       string `json:"domain" url:"domain"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionClearbitFindCompanyParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionClearbitFindCompanyParams) GetDomain() string {
	if f == nil {
		return ""
	}
	return f.Domain
}

func (f *FlowActionClearbitFindCompanyParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionClearbitFindCompanyParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompanyParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionClearbitFindCompanyParamsFieldConnectionId)
}

// SetDomain sets the Domain field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindCompanyParams) SetDomain(domain string) {
	f.Domain = domain
	f.require(flowActionClearbitFindCompanyParamsFieldDomain)
}

func (f *FlowActionClearbitFindCompanyParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionClearbitFindCompanyParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionClearbitFindCompanyParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionClearbitFindCompanyParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionClearbitFindCompanyParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionClearbitFindCompanyParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionClearbitFindPersonFieldId           = big.NewInt(1 << 0)
	flowActionClearbitFindPersonFieldAlias        = big.NewInt(1 << 1)
	flowActionClearbitFindPersonFieldAllowFailure = big.NewInt(1 << 2)
	flowActionClearbitFindPersonFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionClearbitFindPersonFieldParams       = big.NewInt(1 << 4)
)

type FlowActionClearbitFindPerson struct {
	Id           string                              `json:"id" url:"id"`
	Alias        *string                             `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                               `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                               `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionClearbitFindPersonParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionClearbitFindPerson) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionClearbitFindPerson) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionClearbitFindPerson) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionClearbitFindPerson) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionClearbitFindPerson) GetParams() *FlowActionClearbitFindPersonParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionClearbitFindPerson) Type() string {
	return f.type_
}

func (f *FlowActionClearbitFindPerson) Action() string {
	return f.action
}

func (f *FlowActionClearbitFindPerson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionClearbitFindPerson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPerson) SetId(id string) {
	f.Id = id
	f.require(flowActionClearbitFindPersonFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPerson) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionClearbitFindPersonFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPerson) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionClearbitFindPersonFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPerson) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionClearbitFindPersonFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPerson) SetParams(params *FlowActionClearbitFindPersonParams) {
	f.Params = params
	f.require(flowActionClearbitFindPersonFieldParams)
}

func (f *FlowActionClearbitFindPerson) UnmarshalJSON(data []byte) error {
	type embed FlowActionClearbitFindPerson
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionClearbitFindPerson(unmarshaler.embed)
	if unmarshaler.Type != "CLEARBIT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CLEARBIT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "FIND_PERSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FIND_PERSON", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionClearbitFindPerson) MarshalJSON() ([]byte, error) {
	type embed FlowActionClearbitFindPerson
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "CLEARBIT",
		Action: "FIND_PERSON",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionClearbitFindPerson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionClearbitFindPersonParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionClearbitFindPersonParamsFieldEmail        = big.NewInt(1 << 1)
)

type FlowActionClearbitFindPersonParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	Email        string `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionClearbitFindPersonParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionClearbitFindPersonParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionClearbitFindPersonParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionClearbitFindPersonParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPersonParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionClearbitFindPersonParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionClearbitFindPersonParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionClearbitFindPersonParamsFieldEmail)
}

func (f *FlowActionClearbitFindPersonParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionClearbitFindPersonParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionClearbitFindPersonParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionClearbitFindPersonParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionClearbitFindPersonParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionClearbitFindPersonParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionEmail = *FlowActionEmailVerifyEmail

var (
	flowActionEmailVerifyEmailFieldId           = big.NewInt(1 << 0)
	flowActionEmailVerifyEmailFieldAlias        = big.NewInt(1 << 1)
	flowActionEmailVerifyEmailFieldAllowFailure = big.NewInt(1 << 2)
	flowActionEmailVerifyEmailFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionEmailVerifyEmailFieldParams       = big.NewInt(1 << 4)
)

type FlowActionEmailVerifyEmail struct {
	Id           string                            `json:"id" url:"id"`
	Alias        *string                           `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                             `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                             `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionEmailVerifyEmailParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionEmailVerifyEmail) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionEmailVerifyEmail) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionEmailVerifyEmail) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionEmailVerifyEmail) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionEmailVerifyEmail) GetParams() *FlowActionEmailVerifyEmailParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionEmailVerifyEmail) Type() string {
	return f.type_
}

func (f *FlowActionEmailVerifyEmail) Action() string {
	return f.action
}

func (f *FlowActionEmailVerifyEmail) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionEmailVerifyEmail) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmail) SetId(id string) {
	f.Id = id
	f.require(flowActionEmailVerifyEmailFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmail) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionEmailVerifyEmailFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmail) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionEmailVerifyEmailFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmail) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionEmailVerifyEmailFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmail) SetParams(params *FlowActionEmailVerifyEmailParams) {
	f.Params = params
	f.require(flowActionEmailVerifyEmailFieldParams)
}

func (f *FlowActionEmailVerifyEmail) UnmarshalJSON(data []byte) error {
	type embed FlowActionEmailVerifyEmail
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionEmailVerifyEmail(unmarshaler.embed)
	if unmarshaler.Type != "EMAIL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "EMAIL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "VERIFY_EMAIL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "VERIFY_EMAIL", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionEmailVerifyEmail) MarshalJSON() ([]byte, error) {
	type embed FlowActionEmailVerifyEmail
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "EMAIL",
		Action: "VERIFY_EMAIL",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionEmailVerifyEmail) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionEmailVerifyEmailParamsFieldEmail = big.NewInt(1 << 0)
	flowActionEmailVerifyEmailParamsFieldRules = big.NewInt(1 << 1)
)

type FlowActionEmailVerifyEmailParams struct {
	Email string                                 `json:"email" url:"email"`
	Rules *FlowActionEmailVerifyEmailParamsRules `json:"rules,omitempty" url:"rules,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionEmailVerifyEmailParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionEmailVerifyEmailParams) GetRules() FlowActionEmailVerifyEmailParamsRules {
	if f == nil || f.Rules == nil {
		return FlowActionEmailVerifyEmailParamsRules{}
	}
	return *f.Rules
}

func (f *FlowActionEmailVerifyEmailParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionEmailVerifyEmailParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionEmailVerifyEmailParamsFieldEmail)
}

// SetRules sets the Rules field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParams) SetRules(rules *FlowActionEmailVerifyEmailParamsRules) {
	f.Rules = rules
	f.require(flowActionEmailVerifyEmailParamsFieldRules)
}

func (f *FlowActionEmailVerifyEmailParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionEmailVerifyEmailParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionEmailVerifyEmailParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionEmailVerifyEmailParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionEmailVerifyEmailParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionEmailVerifyEmailParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionEmailVerifyEmailParamsRulesFieldRequireMxRecord       = big.NewInt(1 << 0)
	flowActionEmailVerifyEmailParamsRulesFieldBlockAliases          = big.NewInt(1 << 1)
	flowActionEmailVerifyEmailParamsRulesFieldBlockFreeEmails       = big.NewInt(1 << 2)
	flowActionEmailVerifyEmailParamsRulesFieldBlockDisposableEmails = big.NewInt(1 << 3)
	flowActionEmailVerifyEmailParamsRulesFieldBlocklist             = big.NewInt(1 << 4)
	flowActionEmailVerifyEmailParamsRulesFieldAllowlist             = big.NewInt(1 << 5)
)

type FlowActionEmailVerifyEmailParamsRules struct {
	RequireMxRecord       *bool    `json:"require_mx_record,omitempty" url:"require_mx_record,omitempty"`
	BlockAliases          *bool    `json:"block_aliases,omitempty" url:"block_aliases,omitempty"`
	BlockFreeEmails       *bool    `json:"block_free_emails,omitempty" url:"block_free_emails,omitempty"`
	BlockDisposableEmails *bool    `json:"block_disposable_emails,omitempty" url:"block_disposable_emails,omitempty"`
	Blocklist             []string `json:"blocklist,omitempty" url:"blocklist,omitempty"`
	Allowlist             []string `json:"allowlist,omitempty" url:"allowlist,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetRequireMxRecord() bool {
	if f == nil || f.RequireMxRecord == nil {
		return false
	}
	return *f.RequireMxRecord
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetBlockAliases() bool {
	if f == nil || f.BlockAliases == nil {
		return false
	}
	return *f.BlockAliases
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetBlockFreeEmails() bool {
	if f == nil || f.BlockFreeEmails == nil {
		return false
	}
	return *f.BlockFreeEmails
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetBlockDisposableEmails() bool {
	if f == nil || f.BlockDisposableEmails == nil {
		return false
	}
	return *f.BlockDisposableEmails
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetBlocklist() []string {
	if f == nil || f.Blocklist == nil {
		return nil
	}
	return f.Blocklist
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetAllowlist() []string {
	if f == nil || f.Allowlist == nil {
		return nil
	}
	return f.Allowlist
}

func (f *FlowActionEmailVerifyEmailParamsRules) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionEmailVerifyEmailParamsRules) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetRequireMxRecord sets the RequireMxRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParamsRules) SetRequireMxRecord(requireMxRecord *bool) {
	f.RequireMxRecord = requireMxRecord
	f.require(flowActionEmailVerifyEmailParamsRulesFieldRequireMxRecord)
}

// SetBlockAliases sets the BlockAliases field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParamsRules) SetBlockAliases(blockAliases *bool) {
	f.BlockAliases = blockAliases
	f.require(flowActionEmailVerifyEmailParamsRulesFieldBlockAliases)
}

// SetBlockFreeEmails sets the BlockFreeEmails field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParamsRules) SetBlockFreeEmails(blockFreeEmails *bool) {
	f.BlockFreeEmails = blockFreeEmails
	f.require(flowActionEmailVerifyEmailParamsRulesFieldBlockFreeEmails)
}

// SetBlockDisposableEmails sets the BlockDisposableEmails field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParamsRules) SetBlockDisposableEmails(blockDisposableEmails *bool) {
	f.BlockDisposableEmails = blockDisposableEmails
	f.require(flowActionEmailVerifyEmailParamsRulesFieldBlockDisposableEmails)
}

// SetBlocklist sets the Blocklist field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParamsRules) SetBlocklist(blocklist []string) {
	f.Blocklist = blocklist
	f.require(flowActionEmailVerifyEmailParamsRulesFieldBlocklist)
}

// SetAllowlist sets the Allowlist field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionEmailVerifyEmailParamsRules) SetAllowlist(allowlist []string) {
	f.Allowlist = allowlist
	f.require(flowActionEmailVerifyEmailParamsRulesFieldAllowlist)
}

func (f *FlowActionEmailVerifyEmailParamsRules) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionEmailVerifyEmailParamsRules
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionEmailVerifyEmailParamsRules(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionEmailVerifyEmailParamsRules) MarshalJSON() ([]byte, error) {
	type embed FlowActionEmailVerifyEmailParamsRules
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionEmailVerifyEmailParamsRules) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionFlow struct {
	FlowActionFlowBooleanCondition *FlowActionFlowBooleanCondition
	FlowActionFlowDelayFlow        *FlowActionFlowDelayFlow
	FlowActionFlowDoNothing        *FlowActionFlowDoNothing
	FlowActionFlowErrorMessage     *FlowActionFlowErrorMessage
	FlowActionFlowMapValue         *FlowActionFlowMapValue
	FlowActionFlowReturnJson       *FlowActionFlowReturnJson
	FlowActionFlowStoreVars        *FlowActionFlowStoreVars

	typ string
}

func (f *FlowActionFlow) GetFlowActionFlowBooleanCondition() *FlowActionFlowBooleanCondition {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowBooleanCondition
}

func (f *FlowActionFlow) GetFlowActionFlowDelayFlow() *FlowActionFlowDelayFlow {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowDelayFlow
}

func (f *FlowActionFlow) GetFlowActionFlowDoNothing() *FlowActionFlowDoNothing {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowDoNothing
}

func (f *FlowActionFlow) GetFlowActionFlowErrorMessage() *FlowActionFlowErrorMessage {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowErrorMessage
}

func (f *FlowActionFlow) GetFlowActionFlowMapValue() *FlowActionFlowMapValue {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowMapValue
}

func (f *FlowActionFlow) GetFlowActionFlowReturnJson() *FlowActionFlowReturnJson {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowReturnJson
}

func (f *FlowActionFlow) GetFlowActionFlowStoreVars() *FlowActionFlowStoreVars {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowStoreVars
}

func (f *FlowActionFlow) UnmarshalJSON(data []byte) error {
	valueFlowActionFlowBooleanCondition := new(FlowActionFlowBooleanCondition)
	if err := json.Unmarshal(data, &valueFlowActionFlowBooleanCondition); err == nil {
		f.typ = "FlowActionFlowBooleanCondition"
		f.FlowActionFlowBooleanCondition = valueFlowActionFlowBooleanCondition
		return nil
	}
	valueFlowActionFlowDelayFlow := new(FlowActionFlowDelayFlow)
	if err := json.Unmarshal(data, &valueFlowActionFlowDelayFlow); err == nil {
		f.typ = "FlowActionFlowDelayFlow"
		f.FlowActionFlowDelayFlow = valueFlowActionFlowDelayFlow
		return nil
	}
	valueFlowActionFlowDoNothing := new(FlowActionFlowDoNothing)
	if err := json.Unmarshal(data, &valueFlowActionFlowDoNothing); err == nil {
		f.typ = "FlowActionFlowDoNothing"
		f.FlowActionFlowDoNothing = valueFlowActionFlowDoNothing
		return nil
	}
	valueFlowActionFlowErrorMessage := new(FlowActionFlowErrorMessage)
	if err := json.Unmarshal(data, &valueFlowActionFlowErrorMessage); err == nil {
		f.typ = "FlowActionFlowErrorMessage"
		f.FlowActionFlowErrorMessage = valueFlowActionFlowErrorMessage
		return nil
	}
	valueFlowActionFlowMapValue := new(FlowActionFlowMapValue)
	if err := json.Unmarshal(data, &valueFlowActionFlowMapValue); err == nil {
		f.typ = "FlowActionFlowMapValue"
		f.FlowActionFlowMapValue = valueFlowActionFlowMapValue
		return nil
	}
	valueFlowActionFlowReturnJson := new(FlowActionFlowReturnJson)
	if err := json.Unmarshal(data, &valueFlowActionFlowReturnJson); err == nil {
		f.typ = "FlowActionFlowReturnJson"
		f.FlowActionFlowReturnJson = valueFlowActionFlowReturnJson
		return nil
	}
	valueFlowActionFlowStoreVars := new(FlowActionFlowStoreVars)
	if err := json.Unmarshal(data, &valueFlowActionFlowStoreVars); err == nil {
		f.typ = "FlowActionFlowStoreVars"
		f.FlowActionFlowStoreVars = valueFlowActionFlowStoreVars
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionFlow) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionFlowBooleanCondition" || f.FlowActionFlowBooleanCondition != nil {
		return json.Marshal(f.FlowActionFlowBooleanCondition)
	}
	if f.typ == "FlowActionFlowDelayFlow" || f.FlowActionFlowDelayFlow != nil {
		return json.Marshal(f.FlowActionFlowDelayFlow)
	}
	if f.typ == "FlowActionFlowDoNothing" || f.FlowActionFlowDoNothing != nil {
		return json.Marshal(f.FlowActionFlowDoNothing)
	}
	if f.typ == "FlowActionFlowErrorMessage" || f.FlowActionFlowErrorMessage != nil {
		return json.Marshal(f.FlowActionFlowErrorMessage)
	}
	if f.typ == "FlowActionFlowMapValue" || f.FlowActionFlowMapValue != nil {
		return json.Marshal(f.FlowActionFlowMapValue)
	}
	if f.typ == "FlowActionFlowReturnJson" || f.FlowActionFlowReturnJson != nil {
		return json.Marshal(f.FlowActionFlowReturnJson)
	}
	if f.typ == "FlowActionFlowStoreVars" || f.FlowActionFlowStoreVars != nil {
		return json.Marshal(f.FlowActionFlowStoreVars)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowVisitor interface {
	VisitFlowActionFlowBooleanCondition(*FlowActionFlowBooleanCondition) error
	VisitFlowActionFlowDelayFlow(*FlowActionFlowDelayFlow) error
	VisitFlowActionFlowDoNothing(*FlowActionFlowDoNothing) error
	VisitFlowActionFlowErrorMessage(*FlowActionFlowErrorMessage) error
	VisitFlowActionFlowMapValue(*FlowActionFlowMapValue) error
	VisitFlowActionFlowReturnJson(*FlowActionFlowReturnJson) error
	VisitFlowActionFlowStoreVars(*FlowActionFlowStoreVars) error
}

func (f *FlowActionFlow) Accept(visitor FlowActionFlowVisitor) error {
	if f.typ == "FlowActionFlowBooleanCondition" || f.FlowActionFlowBooleanCondition != nil {
		return visitor.VisitFlowActionFlowBooleanCondition(f.FlowActionFlowBooleanCondition)
	}
	if f.typ == "FlowActionFlowDelayFlow" || f.FlowActionFlowDelayFlow != nil {
		return visitor.VisitFlowActionFlowDelayFlow(f.FlowActionFlowDelayFlow)
	}
	if f.typ == "FlowActionFlowDoNothing" || f.FlowActionFlowDoNothing != nil {
		return visitor.VisitFlowActionFlowDoNothing(f.FlowActionFlowDoNothing)
	}
	if f.typ == "FlowActionFlowErrorMessage" || f.FlowActionFlowErrorMessage != nil {
		return visitor.VisitFlowActionFlowErrorMessage(f.FlowActionFlowErrorMessage)
	}
	if f.typ == "FlowActionFlowMapValue" || f.FlowActionFlowMapValue != nil {
		return visitor.VisitFlowActionFlowMapValue(f.FlowActionFlowMapValue)
	}
	if f.typ == "FlowActionFlowReturnJson" || f.FlowActionFlowReturnJson != nil {
		return visitor.VisitFlowActionFlowReturnJson(f.FlowActionFlowReturnJson)
	}
	if f.typ == "FlowActionFlowStoreVars" || f.FlowActionFlowStoreVars != nil {
		return visitor.VisitFlowActionFlowStoreVars(f.FlowActionFlowStoreVars)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionFlowBooleanConditionFieldId           = big.NewInt(1 << 0)
	flowActionFlowBooleanConditionFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowBooleanConditionFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowBooleanConditionFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowBooleanConditionFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowBooleanCondition struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowBooleanConditionParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowBooleanCondition) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowBooleanCondition) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowBooleanCondition) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowBooleanCondition) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowBooleanCondition) GetParams() *FlowActionFlowBooleanConditionParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionFlowBooleanCondition) Type() string {
	return f.type_
}

func (f *FlowActionFlowBooleanCondition) Action() string {
	return f.action
}

func (f *FlowActionFlowBooleanCondition) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowBooleanCondition) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanCondition) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowBooleanConditionFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanCondition) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowBooleanConditionFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanCondition) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowBooleanConditionFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanCondition) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowBooleanConditionFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanCondition) SetParams(params *FlowActionFlowBooleanConditionParams) {
	f.Params = params
	f.require(flowActionFlowBooleanConditionFieldParams)
}

func (f *FlowActionFlowBooleanCondition) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowBooleanCondition
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowBooleanCondition(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "BOOLEAN_CONDITION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "BOOLEAN_CONDITION", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowBooleanCondition) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowBooleanCondition
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "BOOLEAN_CONDITION",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowBooleanCondition) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowBooleanConditionParamsFieldThen = big.NewInt(1 << 0)
	flowActionFlowBooleanConditionParamsFieldElse = big.NewInt(1 << 1)
)

type FlowActionFlowBooleanConditionParams struct {
	Then []*FlowAction `json:"then,omitempty" url:"then,omitempty"`
	Else []*FlowAction `json:"else,omitempty" url:"else,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowBooleanConditionParams) GetThen() []*FlowAction {
	if f == nil || f.Then == nil {
		return nil
	}
	return f.Then
}

func (f *FlowActionFlowBooleanConditionParams) GetElse() []*FlowAction {
	if f == nil || f.Else == nil {
		return nil
	}
	return f.Else
}

func (f *FlowActionFlowBooleanConditionParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowBooleanConditionParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetThen sets the Then field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanConditionParams) SetThen(then []*FlowAction) {
	f.Then = then
	f.require(flowActionFlowBooleanConditionParamsFieldThen)
}

// SetElse sets the Else field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowBooleanConditionParams) SetElse(else_ []*FlowAction) {
	f.Else = else_
	f.require(flowActionFlowBooleanConditionParamsFieldElse)
}

func (f *FlowActionFlowBooleanConditionParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowBooleanConditionParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowBooleanConditionParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowBooleanConditionParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowBooleanConditionParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowBooleanConditionParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowDelayFlowFieldId           = big.NewInt(1 << 0)
	flowActionFlowDelayFlowFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowDelayFlowFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowDelayFlowFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowDelayFlowFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowDelayFlow struct {
	Id           string                         `json:"id" url:"id"`
	Alias        *string                        `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                          `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                          `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowDelayFlowParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowDelayFlow) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowDelayFlow) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowDelayFlow) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowDelayFlow) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowDelayFlow) GetParams() *FlowActionFlowDelayFlowParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionFlowDelayFlow) Type() string {
	return f.type_
}

func (f *FlowActionFlowDelayFlow) Action() string {
	return f.action
}

func (f *FlowActionFlowDelayFlow) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowDelayFlow) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlow) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowDelayFlowFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlow) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowDelayFlowFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlow) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowDelayFlowFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlow) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowDelayFlowFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlow) SetParams(params *FlowActionFlowDelayFlowParams) {
	f.Params = params
	f.require(flowActionFlowDelayFlowFieldParams)
}

func (f *FlowActionFlowDelayFlow) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowDelayFlow
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowDelayFlow(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "DELAY_FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "DELAY_FLOW", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowDelayFlow) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowDelayFlow
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "DELAY_FLOW",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowDelayFlow) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowDelayFlowParamsFieldNumber = big.NewInt(1 << 0)
	flowActionFlowDelayFlowParamsFieldUnits  = big.NewInt(1 << 1)
)

type FlowActionFlowDelayFlowParams struct {
	Number *FlowActionFlowDelayFlowParamsNumber `json:"number" url:"number"`
	Units  *FlowActionFlowDelayFlowParamsUnits  `json:"units,omitempty" url:"units,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowDelayFlowParams) GetNumber() *FlowActionFlowDelayFlowParamsNumber {
	if f == nil {
		return nil
	}
	return f.Number
}

func (f *FlowActionFlowDelayFlowParams) GetUnits() FlowActionFlowDelayFlowParamsUnits {
	if f == nil || f.Units == nil {
		return ""
	}
	return *f.Units
}

func (f *FlowActionFlowDelayFlowParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowDelayFlowParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetNumber sets the Number field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlowParams) SetNumber(number *FlowActionFlowDelayFlowParamsNumber) {
	f.Number = number
	f.require(flowActionFlowDelayFlowParamsFieldNumber)
}

// SetUnits sets the Units field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDelayFlowParams) SetUnits(units *FlowActionFlowDelayFlowParamsUnits) {
	f.Units = units
	f.require(flowActionFlowDelayFlowParamsFieldUnits)
}

func (f *FlowActionFlowDelayFlowParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowDelayFlowParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowDelayFlowParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowDelayFlowParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowDelayFlowParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowDelayFlowParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionFlowDelayFlowParamsNumber struct {
	Integer int
	String  string

	typ string
}

func (f *FlowActionFlowDelayFlowParamsNumber) GetInteger() int {
	if f == nil {
		return 0
	}
	return f.Integer
}

func (f *FlowActionFlowDelayFlowParamsNumber) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionFlowDelayFlowParamsNumber) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		f.typ = "Integer"
		f.Integer = valueInteger
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionFlowDelayFlowParamsNumber) MarshalJSON() ([]byte, error) {
	if f.typ == "Integer" || f.Integer != 0 {
		return json.Marshal(f.Integer)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowDelayFlowParamsNumberVisitor interface {
	VisitInteger(int) error
	VisitString(string) error
}

func (f *FlowActionFlowDelayFlowParamsNumber) Accept(visitor FlowActionFlowDelayFlowParamsNumberVisitor) error {
	if f.typ == "Integer" || f.Integer != 0 {
		return visitor.VisitInteger(f.Integer)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowDelayFlowParamsUnits string

const (
	FlowActionFlowDelayFlowParamsUnitsSeconds FlowActionFlowDelayFlowParamsUnits = "SECONDS"
	FlowActionFlowDelayFlowParamsUnitsMinutes FlowActionFlowDelayFlowParamsUnits = "MINUTES"
	FlowActionFlowDelayFlowParamsUnitsHours   FlowActionFlowDelayFlowParamsUnits = "HOURS"
	FlowActionFlowDelayFlowParamsUnitsDays    FlowActionFlowDelayFlowParamsUnits = "DAYS"
)

func NewFlowActionFlowDelayFlowParamsUnitsFromString(s string) (FlowActionFlowDelayFlowParamsUnits, error) {
	switch s {
	case "SECONDS":
		return FlowActionFlowDelayFlowParamsUnitsSeconds, nil
	case "MINUTES":
		return FlowActionFlowDelayFlowParamsUnitsMinutes, nil
	case "HOURS":
		return FlowActionFlowDelayFlowParamsUnitsHours, nil
	case "DAYS":
		return FlowActionFlowDelayFlowParamsUnitsDays, nil
	}
	var t FlowActionFlowDelayFlowParamsUnits
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionFlowDelayFlowParamsUnits) Ptr() *FlowActionFlowDelayFlowParamsUnits {
	return &f
}

var (
	flowActionFlowDoNothingFieldId           = big.NewInt(1 << 0)
	flowActionFlowDoNothingFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowDoNothingFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowDoNothingFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowDoNothingFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowDoNothing struct {
	Id           string                         `json:"id" url:"id"`
	Alias        *string                        `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                          `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                          `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowDoNothingParams `json:"params,omitempty" url:"params,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowDoNothing) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowDoNothing) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowDoNothing) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowDoNothing) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowDoNothing) GetParams() FlowActionFlowDoNothingParams {
	if f == nil || f.Params == nil {
		return FlowActionFlowDoNothingParams{}
	}
	return *f.Params
}

func (f *FlowActionFlowDoNothing) Type() string {
	return f.type_
}

func (f *FlowActionFlowDoNothing) Action() string {
	return f.action
}

func (f *FlowActionFlowDoNothing) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowDoNothing) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDoNothing) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowDoNothingFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDoNothing) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowDoNothingFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDoNothing) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowDoNothingFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDoNothing) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowDoNothingFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowDoNothing) SetParams(params *FlowActionFlowDoNothingParams) {
	f.Params = params
	f.require(flowActionFlowDoNothingFieldParams)
}

func (f *FlowActionFlowDoNothing) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowDoNothing
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowDoNothing(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "DO_NOTHING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "DO_NOTHING", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowDoNothing) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowDoNothing
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "DO_NOTHING",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowDoNothing) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionFlowDoNothingParams struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowDoNothingParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowDoNothingParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

func (f *FlowActionFlowDoNothingParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowDoNothingParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowDoNothingParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowDoNothingParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowDoNothingParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowDoNothingParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowErrorMessageFieldId           = big.NewInt(1 << 0)
	flowActionFlowErrorMessageFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowErrorMessageFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowErrorMessageFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowErrorMessageFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowErrorMessage struct {
	Id           string                            `json:"id" url:"id"`
	Alias        *string                           `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                             `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                             `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowErrorMessageParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowErrorMessage) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowErrorMessage) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowErrorMessage) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowErrorMessage) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowErrorMessage) GetParams() *FlowActionFlowErrorMessageParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionFlowErrorMessage) Type() string {
	return f.type_
}

func (f *FlowActionFlowErrorMessage) Action() string {
	return f.action
}

func (f *FlowActionFlowErrorMessage) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowErrorMessage) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowErrorMessage) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowErrorMessageFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowErrorMessage) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowErrorMessageFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowErrorMessage) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowErrorMessageFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowErrorMessage) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowErrorMessageFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowErrorMessage) SetParams(params *FlowActionFlowErrorMessageParams) {
	f.Params = params
	f.require(flowActionFlowErrorMessageFieldParams)
}

func (f *FlowActionFlowErrorMessage) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowErrorMessage
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowErrorMessage(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ERROR_MESSAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ERROR_MESSAGE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowErrorMessage) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowErrorMessage
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "ERROR_MESSAGE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowErrorMessage) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowErrorMessageParamsFieldMessage = big.NewInt(1 << 0)
)

type FlowActionFlowErrorMessageParams struct {
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowErrorMessageParams) GetMessage() string {
	if f == nil {
		return ""
	}
	return f.Message
}

func (f *FlowActionFlowErrorMessageParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowErrorMessageParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowErrorMessageParams) SetMessage(message string) {
	f.Message = message
	f.require(flowActionFlowErrorMessageParamsFieldMessage)
}

func (f *FlowActionFlowErrorMessageParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowErrorMessageParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowErrorMessageParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowErrorMessageParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowErrorMessageParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowErrorMessageParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowMapValueFieldId           = big.NewInt(1 << 0)
	flowActionFlowMapValueFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowMapValueFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowMapValueFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowMapValueFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowMapValue struct {
	Id           string                        `json:"id" url:"id"`
	Alias        *string                       `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                         `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                         `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowMapValueParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowMapValue) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowMapValue) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowMapValue) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowMapValue) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowMapValue) GetParams() *FlowActionFlowMapValueParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionFlowMapValue) Type() string {
	return f.type_
}

func (f *FlowActionFlowMapValue) Action() string {
	return f.action
}

func (f *FlowActionFlowMapValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowMapValue) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValue) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowMapValueFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValue) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowMapValueFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValue) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowMapValueFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValue) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowMapValueFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValue) SetParams(params *FlowActionFlowMapValueParams) {
	f.Params = params
	f.require(flowActionFlowMapValueFieldParams)
}

func (f *FlowActionFlowMapValue) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowMapValue
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowMapValue(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "MAP_VALUE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "MAP_VALUE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowMapValue) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowMapValue
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "MAP_VALUE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowMapValue) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowMapValueParamsFieldInput    = big.NewInt(1 << 0)
	flowActionFlowMapValueParamsFieldCases    = big.NewInt(1 << 1)
	flowActionFlowMapValueParamsFieldFallback = big.NewInt(1 << 2)
)

type FlowActionFlowMapValueParams struct {
	Input    *FlowActionFlowMapValueParamsInput    `json:"input" url:"input"`
	Cases    *FlowActionFlowMapValueParamsCases    `json:"cases,omitempty" url:"cases,omitempty"`
	Fallback *FlowActionFlowMapValueParamsFallback `json:"fallback,omitempty" url:"fallback,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowMapValueParams) GetInput() *FlowActionFlowMapValueParamsInput {
	if f == nil {
		return nil
	}
	return f.Input
}

func (f *FlowActionFlowMapValueParams) GetCases() FlowActionFlowMapValueParamsCases {
	if f == nil || f.Cases == nil {
		return nil
	}
	return *f.Cases
}

func (f *FlowActionFlowMapValueParams) GetFallback() FlowActionFlowMapValueParamsFallback {
	if f == nil || f.Fallback == nil {
		return FlowActionFlowMapValueParamsFallback{}
	}
	return *f.Fallback
}

func (f *FlowActionFlowMapValueParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowMapValueParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetInput sets the Input field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValueParams) SetInput(input *FlowActionFlowMapValueParamsInput) {
	f.Input = input
	f.require(flowActionFlowMapValueParamsFieldInput)
}

// SetCases sets the Cases field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValueParams) SetCases(cases *FlowActionFlowMapValueParamsCases) {
	f.Cases = cases
	f.require(flowActionFlowMapValueParamsFieldCases)
}

// SetFallback sets the Fallback field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowMapValueParams) SetFallback(fallback *FlowActionFlowMapValueParamsFallback) {
	f.Fallback = fallback
	f.require(flowActionFlowMapValueParamsFieldFallback)
}

func (f *FlowActionFlowMapValueParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowMapValueParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowMapValueParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowMapValueParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowMapValueParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowMapValueParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionFlowMapValueParamsCases = map[string]interface{}

type FlowActionFlowMapValueParamsFallback struct {
	String                                     string
	Double                                     float64
	FlowActionFlowMapValueParamsFallbackObject FlowActionFlowMapValueParamsFallbackObject
	UnknownList                                []interface{}

	typ string
}

func (f *FlowActionFlowMapValueParamsFallback) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionFlowMapValueParamsFallback) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionFlowMapValueParamsFallback) GetFlowActionFlowMapValueParamsFallbackObject() FlowActionFlowMapValueParamsFallbackObject {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowMapValueParamsFallbackObject
}

func (f *FlowActionFlowMapValueParamsFallback) GetUnknownList() []interface{} {
	if f == nil {
		return nil
	}
	return f.UnknownList
}

func (f *FlowActionFlowMapValueParamsFallback) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	var valueFlowActionFlowMapValueParamsFallbackObject FlowActionFlowMapValueParamsFallbackObject
	if err := json.Unmarshal(data, &valueFlowActionFlowMapValueParamsFallbackObject); err == nil {
		f.typ = "FlowActionFlowMapValueParamsFallbackObject"
		f.FlowActionFlowMapValueParamsFallbackObject = valueFlowActionFlowMapValueParamsFallbackObject
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		f.typ = "UnknownList"
		f.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionFlowMapValueParamsFallback) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	if f.typ == "FlowActionFlowMapValueParamsFallbackObject" || f.FlowActionFlowMapValueParamsFallbackObject != nil {
		return json.Marshal(f.FlowActionFlowMapValueParamsFallbackObject)
	}
	if f.typ == "UnknownList" || f.UnknownList != nil {
		return json.Marshal(f.UnknownList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowMapValueParamsFallbackVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
	VisitFlowActionFlowMapValueParamsFallbackObject(FlowActionFlowMapValueParamsFallbackObject) error
	VisitUnknownList([]interface{}) error
}

func (f *FlowActionFlowMapValueParamsFallback) Accept(visitor FlowActionFlowMapValueParamsFallbackVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	if f.typ == "FlowActionFlowMapValueParamsFallbackObject" || f.FlowActionFlowMapValueParamsFallbackObject != nil {
		return visitor.VisitFlowActionFlowMapValueParamsFallbackObject(f.FlowActionFlowMapValueParamsFallbackObject)
	}
	if f.typ == "UnknownList" || f.UnknownList != nil {
		return visitor.VisitUnknownList(f.UnknownList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowMapValueParamsFallbackObject = map[string]interface{}

type FlowActionFlowMapValueParamsInput struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionFlowMapValueParamsInput) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionFlowMapValueParamsInput) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionFlowMapValueParamsInput) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionFlowMapValueParamsInput) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowMapValueParamsInputVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionFlowMapValueParamsInput) Accept(visitor FlowActionFlowMapValueParamsInputVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionFlowReturnJsonFieldId           = big.NewInt(1 << 0)
	flowActionFlowReturnJsonFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowReturnJsonFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowReturnJsonFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowReturnJsonFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowReturnJson struct {
	Id           string                          `json:"id" url:"id"`
	Alias        *string                         `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                           `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                           `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowReturnJsonParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowReturnJson) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowReturnJson) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowReturnJson) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowReturnJson) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowReturnJson) GetParams() *FlowActionFlowReturnJsonParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionFlowReturnJson) Type() string {
	return f.type_
}

func (f *FlowActionFlowReturnJson) Action() string {
	return f.action
}

func (f *FlowActionFlowReturnJson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowReturnJson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowReturnJson) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowReturnJsonFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowReturnJson) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowReturnJsonFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowReturnJson) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowReturnJsonFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowReturnJson) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowReturnJsonFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowReturnJson) SetParams(params *FlowActionFlowReturnJsonParams) {
	f.Params = params
	f.require(flowActionFlowReturnJsonFieldParams)
}

func (f *FlowActionFlowReturnJson) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowReturnJson
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowReturnJson(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "RETURN_JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "RETURN_JSON", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowReturnJson) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowReturnJson
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "RETURN_JSON",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowReturnJson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowReturnJsonParamsFieldPayload = big.NewInt(1 << 0)
)

type FlowActionFlowReturnJsonParams struct {
	Payload *FlowActionFlowReturnJsonParamsPayload `json:"payload" url:"payload"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowReturnJsonParams) GetPayload() *FlowActionFlowReturnJsonParamsPayload {
	if f == nil {
		return nil
	}
	return f.Payload
}

func (f *FlowActionFlowReturnJsonParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowReturnJsonParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowReturnJsonParams) SetPayload(payload *FlowActionFlowReturnJsonParamsPayload) {
	f.Payload = payload
	f.require(flowActionFlowReturnJsonParamsFieldPayload)
}

func (f *FlowActionFlowReturnJsonParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowReturnJsonParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowReturnJsonParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowReturnJsonParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowReturnJsonParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowReturnJsonParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionFlowReturnJsonParamsPayload struct {
	FlowActionFlowReturnJsonParamsPayloadObject FlowActionFlowReturnJsonParamsPayloadObject
	String                                      string

	typ string
}

func (f *FlowActionFlowReturnJsonParamsPayload) GetFlowActionFlowReturnJsonParamsPayloadObject() FlowActionFlowReturnJsonParamsPayloadObject {
	if f == nil {
		return nil
	}
	return f.FlowActionFlowReturnJsonParamsPayloadObject
}

func (f *FlowActionFlowReturnJsonParamsPayload) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionFlowReturnJsonParamsPayload) UnmarshalJSON(data []byte) error {
	var valueFlowActionFlowReturnJsonParamsPayloadObject FlowActionFlowReturnJsonParamsPayloadObject
	if err := json.Unmarshal(data, &valueFlowActionFlowReturnJsonParamsPayloadObject); err == nil {
		f.typ = "FlowActionFlowReturnJsonParamsPayloadObject"
		f.FlowActionFlowReturnJsonParamsPayloadObject = valueFlowActionFlowReturnJsonParamsPayloadObject
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionFlowReturnJsonParamsPayload) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionFlowReturnJsonParamsPayloadObject" || f.FlowActionFlowReturnJsonParamsPayloadObject != nil {
		return json.Marshal(f.FlowActionFlowReturnJsonParamsPayloadObject)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowReturnJsonParamsPayloadVisitor interface {
	VisitFlowActionFlowReturnJsonParamsPayloadObject(FlowActionFlowReturnJsonParamsPayloadObject) error
	VisitString(string) error
}

func (f *FlowActionFlowReturnJsonParamsPayload) Accept(visitor FlowActionFlowReturnJsonParamsPayloadVisitor) error {
	if f.typ == "FlowActionFlowReturnJsonParamsPayloadObject" || f.FlowActionFlowReturnJsonParamsPayloadObject != nil {
		return visitor.VisitFlowActionFlowReturnJsonParamsPayloadObject(f.FlowActionFlowReturnJsonParamsPayloadObject)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionFlowReturnJsonParamsPayloadObject = map[string]interface{}

var (
	flowActionFlowStoreVarsFieldId           = big.NewInt(1 << 0)
	flowActionFlowStoreVarsFieldAlias        = big.NewInt(1 << 1)
	flowActionFlowStoreVarsFieldAllowFailure = big.NewInt(1 << 2)
	flowActionFlowStoreVarsFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionFlowStoreVarsFieldParams       = big.NewInt(1 << 4)
)

type FlowActionFlowStoreVars struct {
	Id           string                         `json:"id" url:"id"`
	Alias        *string                        `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                          `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                          `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionFlowStoreVarsParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowStoreVars) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionFlowStoreVars) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionFlowStoreVars) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionFlowStoreVars) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionFlowStoreVars) GetParams() *FlowActionFlowStoreVarsParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionFlowStoreVars) Type() string {
	return f.type_
}

func (f *FlowActionFlowStoreVars) Action() string {
	return f.action
}

func (f *FlowActionFlowStoreVars) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowStoreVars) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowStoreVars) SetId(id string) {
	f.Id = id
	f.require(flowActionFlowStoreVarsFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowStoreVars) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionFlowStoreVarsFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowStoreVars) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionFlowStoreVarsFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowStoreVars) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionFlowStoreVarsFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowStoreVars) SetParams(params *FlowActionFlowStoreVarsParams) {
	f.Params = params
	f.require(flowActionFlowStoreVarsFieldParams)
}

func (f *FlowActionFlowStoreVars) UnmarshalJSON(data []byte) error {
	type embed FlowActionFlowStoreVars
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionFlowStoreVars(unmarshaler.embed)
	if unmarshaler.Type != "FLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FLOW", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "STORE_VARS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STORE_VARS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowStoreVars) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowStoreVars
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "FLOW",
		Action: "STORE_VARS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowStoreVars) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionFlowStoreVarsParamsFieldVars = big.NewInt(1 << 0)
)

type FlowActionFlowStoreVarsParams struct {
	Vars FlowActionFlowStoreVarsParamsVars `json:"vars" url:"vars"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionFlowStoreVarsParams) GetVars() FlowActionFlowStoreVarsParamsVars {
	if f == nil {
		return nil
	}
	return f.Vars
}

func (f *FlowActionFlowStoreVarsParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionFlowStoreVarsParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetVars sets the Vars field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionFlowStoreVarsParams) SetVars(vars FlowActionFlowStoreVarsParamsVars) {
	f.Vars = vars
	f.require(flowActionFlowStoreVarsParamsFieldVars)
}

func (f *FlowActionFlowStoreVarsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionFlowStoreVarsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionFlowStoreVarsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionFlowStoreVarsParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionFlowStoreVarsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionFlowStoreVarsParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionFlowStoreVarsParamsVars = map[string]interface{}

type FlowActionGoogleSheets = *FlowActionGoogleSheetsAddRow

var (
	flowActionGoogleSheetsAddRowFieldId           = big.NewInt(1 << 0)
	flowActionGoogleSheetsAddRowFieldAlias        = big.NewInt(1 << 1)
	flowActionGoogleSheetsAddRowFieldAllowFailure = big.NewInt(1 << 2)
	flowActionGoogleSheetsAddRowFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionGoogleSheetsAddRowFieldParams       = big.NewInt(1 << 4)
)

type FlowActionGoogleSheetsAddRow struct {
	Id           string                              `json:"id" url:"id"`
	Alias        *string                             `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                               `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                               `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionGoogleSheetsAddRowParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionGoogleSheetsAddRow) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionGoogleSheetsAddRow) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionGoogleSheetsAddRow) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionGoogleSheetsAddRow) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionGoogleSheetsAddRow) GetParams() *FlowActionGoogleSheetsAddRowParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionGoogleSheetsAddRow) Type() string {
	return f.type_
}

func (f *FlowActionGoogleSheetsAddRow) Action() string {
	return f.action
}

func (f *FlowActionGoogleSheetsAddRow) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionGoogleSheetsAddRow) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRow) SetId(id string) {
	f.Id = id
	f.require(flowActionGoogleSheetsAddRowFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRow) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionGoogleSheetsAddRowFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRow) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionGoogleSheetsAddRowFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRow) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionGoogleSheetsAddRowFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRow) SetParams(params *FlowActionGoogleSheetsAddRowParams) {
	f.Params = params
	f.require(flowActionGoogleSheetsAddRowFieldParams)
}

func (f *FlowActionGoogleSheetsAddRow) UnmarshalJSON(data []byte) error {
	type embed FlowActionGoogleSheetsAddRow
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionGoogleSheetsAddRow(unmarshaler.embed)
	if unmarshaler.Type != "GOOGLE_SHEETS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "GOOGLE_SHEETS", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ADD_ROW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ADD_ROW", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionGoogleSheetsAddRow) MarshalJSON() ([]byte, error) {
	type embed FlowActionGoogleSheetsAddRow
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "GOOGLE_SHEETS",
		Action: "ADD_ROW",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionGoogleSheetsAddRow) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionGoogleSheetsAddRowParamsFieldConnectionId  = big.NewInt(1 << 0)
	flowActionGoogleSheetsAddRowParamsFieldSpreadsheetId = big.NewInt(1 << 1)
	flowActionGoogleSheetsAddRowParamsFieldSheetId       = big.NewInt(1 << 2)
	flowActionGoogleSheetsAddRowParamsFieldValues        = big.NewInt(1 << 3)
)

type FlowActionGoogleSheetsAddRowParams struct {
	ConnectionId  string                                     `json:"connection_id" url:"connection_id"`
	SpreadsheetId string                                     `json:"spreadsheet_id" url:"spreadsheet_id"`
	SheetId       *FlowActionGoogleSheetsAddRowParamsSheetId `json:"sheet_id,omitempty" url:"sheet_id,omitempty"`
	Values        *FlowActionGoogleSheetsAddRowParamsValues  `json:"values,omitempty" url:"values,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionGoogleSheetsAddRowParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionGoogleSheetsAddRowParams) GetSpreadsheetId() string {
	if f == nil {
		return ""
	}
	return f.SpreadsheetId
}

func (f *FlowActionGoogleSheetsAddRowParams) GetSheetId() FlowActionGoogleSheetsAddRowParamsSheetId {
	if f == nil || f.SheetId == nil {
		return FlowActionGoogleSheetsAddRowParamsSheetId{}
	}
	return *f.SheetId
}

func (f *FlowActionGoogleSheetsAddRowParams) GetValues() FlowActionGoogleSheetsAddRowParamsValues {
	if f == nil || f.Values == nil {
		return nil
	}
	return *f.Values
}

func (f *FlowActionGoogleSheetsAddRowParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionGoogleSheetsAddRowParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRowParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionGoogleSheetsAddRowParamsFieldConnectionId)
}

// SetSpreadsheetId sets the SpreadsheetId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRowParams) SetSpreadsheetId(spreadsheetId string) {
	f.SpreadsheetId = spreadsheetId
	f.require(flowActionGoogleSheetsAddRowParamsFieldSpreadsheetId)
}

// SetSheetId sets the SheetId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRowParams) SetSheetId(sheetId *FlowActionGoogleSheetsAddRowParamsSheetId) {
	f.SheetId = sheetId
	f.require(flowActionGoogleSheetsAddRowParamsFieldSheetId)
}

// SetValues sets the Values field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionGoogleSheetsAddRowParams) SetValues(values *FlowActionGoogleSheetsAddRowParamsValues) {
	f.Values = values
	f.require(flowActionGoogleSheetsAddRowParamsFieldValues)
}

func (f *FlowActionGoogleSheetsAddRowParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionGoogleSheetsAddRowParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionGoogleSheetsAddRowParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionGoogleSheetsAddRowParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionGoogleSheetsAddRowParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionGoogleSheetsAddRowParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionGoogleSheetsAddRowParamsSheetId struct {
	Integer int
	String  string

	typ string
}

func (f *FlowActionGoogleSheetsAddRowParamsSheetId) GetInteger() int {
	if f == nil {
		return 0
	}
	return f.Integer
}

func (f *FlowActionGoogleSheetsAddRowParamsSheetId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionGoogleSheetsAddRowParamsSheetId) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		f.typ = "Integer"
		f.Integer = valueInteger
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionGoogleSheetsAddRowParamsSheetId) MarshalJSON() ([]byte, error) {
	if f.typ == "Integer" || f.Integer != 0 {
		return json.Marshal(f.Integer)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionGoogleSheetsAddRowParamsSheetIdVisitor interface {
	VisitInteger(int) error
	VisitString(string) error
}

func (f *FlowActionGoogleSheetsAddRowParamsSheetId) Accept(visitor FlowActionGoogleSheetsAddRowParamsSheetIdVisitor) error {
	if f.typ == "Integer" || f.Integer != 0 {
		return visitor.VisitInteger(f.Integer)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionGoogleSheetsAddRowParamsValues = []*string

type FlowActionHttp = *FlowActionHttpSendRequest

var (
	flowActionHttpSendRequestFieldId           = big.NewInt(1 << 0)
	flowActionHttpSendRequestFieldAlias        = big.NewInt(1 << 1)
	flowActionHttpSendRequestFieldAllowFailure = big.NewInt(1 << 2)
	flowActionHttpSendRequestFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionHttpSendRequestFieldParams       = big.NewInt(1 << 4)
)

type FlowActionHttpSendRequest struct {
	Id           string                           `json:"id" url:"id"`
	Alias        *string                          `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                            `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                            `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionHttpSendRequestParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHttpSendRequest) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionHttpSendRequest) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionHttpSendRequest) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionHttpSendRequest) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionHttpSendRequest) GetParams() *FlowActionHttpSendRequestParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionHttpSendRequest) Type() string {
	return f.type_
}

func (f *FlowActionHttpSendRequest) Action() string {
	return f.action
}

func (f *FlowActionHttpSendRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHttpSendRequest) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequest) SetId(id string) {
	f.Id = id
	f.require(flowActionHttpSendRequestFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequest) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionHttpSendRequestFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequest) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionHttpSendRequestFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequest) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionHttpSendRequestFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequest) SetParams(params *FlowActionHttpSendRequestParams) {
	f.Params = params
	f.require(flowActionHttpSendRequestFieldParams)
}

func (f *FlowActionHttpSendRequest) UnmarshalJSON(data []byte) error {
	type embed FlowActionHttpSendRequest
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionHttpSendRequest(unmarshaler.embed)
	if unmarshaler.Type != "HTTP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "HTTP", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_REQUEST" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_REQUEST", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHttpSendRequest) MarshalJSON() ([]byte, error) {
	type embed FlowActionHttpSendRequest
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "HTTP",
		Action: "SEND_REQUEST",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHttpSendRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHttpSendRequestParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionHttpSendRequestParamsFieldUrl          = big.NewInt(1 << 1)
	flowActionHttpSendRequestParamsFieldMethod       = big.NewInt(1 << 2)
	flowActionHttpSendRequestParamsFieldHeaders      = big.NewInt(1 << 3)
	flowActionHttpSendRequestParamsFieldBasic        = big.NewInt(1 << 4)
	flowActionHttpSendRequestParamsFieldParams       = big.NewInt(1 << 5)
	flowActionHttpSendRequestParamsFieldPayload      = big.NewInt(1 << 6)
	flowActionHttpSendRequestParamsFieldContentType  = big.NewInt(1 << 7)
)

type FlowActionHttpSendRequestParams struct {
	ConnectionId *string                                     `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	Url          string                                      `json:"url" url:"url"`
	Method       *FlowActionHttpSendRequestParamsMethod      `json:"method,omitempty" url:"method,omitempty"`
	Headers      *FlowActionHttpSendRequestParamsHeaders     `json:"headers,omitempty" url:"headers,omitempty"`
	Basic        *FlowActionHttpSendRequestParamsBasicAuth   `json:"basic,omitempty" url:"basic,omitempty"`
	Params       *FlowActionHttpSendRequestParamsQueryParams `json:"params,omitempty" url:"params,omitempty"`
	Payload      *FlowActionHttpSendRequestParamsPayload     `json:"payload,omitempty" url:"payload,omitempty"`
	ContentType  *FlowActionHttpSendRequestParamsContentType `json:"content_type,omitempty" url:"content_type,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHttpSendRequestParams) GetConnectionId() string {
	if f == nil || f.ConnectionId == nil {
		return ""
	}
	return *f.ConnectionId
}

func (f *FlowActionHttpSendRequestParams) GetUrl() string {
	if f == nil {
		return ""
	}
	return f.Url
}

func (f *FlowActionHttpSendRequestParams) GetMethod() FlowActionHttpSendRequestParamsMethod {
	if f == nil || f.Method == nil {
		return ""
	}
	return *f.Method
}

func (f *FlowActionHttpSendRequestParams) GetHeaders() FlowActionHttpSendRequestParamsHeaders {
	if f == nil || f.Headers == nil {
		return nil
	}
	return *f.Headers
}

func (f *FlowActionHttpSendRequestParams) GetBasic() FlowActionHttpSendRequestParamsBasicAuth {
	if f == nil || f.Basic == nil {
		return FlowActionHttpSendRequestParamsBasicAuth{}
	}
	return *f.Basic
}

func (f *FlowActionHttpSendRequestParams) GetParams() FlowActionHttpSendRequestParamsQueryParams {
	if f == nil || f.Params == nil {
		return nil
	}
	return *f.Params
}

func (f *FlowActionHttpSendRequestParams) GetPayload() FlowActionHttpSendRequestParamsPayload {
	if f == nil || f.Payload == nil {
		return FlowActionHttpSendRequestParamsPayload{}
	}
	return *f.Payload
}

func (f *FlowActionHttpSendRequestParams) GetContentType() FlowActionHttpSendRequestParamsContentType {
	if f == nil || f.ContentType == nil {
		return ""
	}
	return *f.ContentType
}

func (f *FlowActionHttpSendRequestParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHttpSendRequestParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetConnectionId(connectionId *string) {
	f.ConnectionId = connectionId
	f.require(flowActionHttpSendRequestParamsFieldConnectionId)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetUrl(url string) {
	f.Url = url
	f.require(flowActionHttpSendRequestParamsFieldUrl)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetMethod(method *FlowActionHttpSendRequestParamsMethod) {
	f.Method = method
	f.require(flowActionHttpSendRequestParamsFieldMethod)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetHeaders(headers *FlowActionHttpSendRequestParamsHeaders) {
	f.Headers = headers
	f.require(flowActionHttpSendRequestParamsFieldHeaders)
}

// SetBasic sets the Basic field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetBasic(basic *FlowActionHttpSendRequestParamsBasicAuth) {
	f.Basic = basic
	f.require(flowActionHttpSendRequestParamsFieldBasic)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetParams(params *FlowActionHttpSendRequestParamsQueryParams) {
	f.Params = params
	f.require(flowActionHttpSendRequestParamsFieldParams)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetPayload(payload *FlowActionHttpSendRequestParamsPayload) {
	f.Payload = payload
	f.require(flowActionHttpSendRequestParamsFieldPayload)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParams) SetContentType(contentType *FlowActionHttpSendRequestParamsContentType) {
	f.ContentType = contentType
	f.require(flowActionHttpSendRequestParamsFieldContentType)
}

func (f *FlowActionHttpSendRequestParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionHttpSendRequestParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionHttpSendRequestParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHttpSendRequestParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionHttpSendRequestParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHttpSendRequestParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHttpSendRequestParamsBasicAuthFieldUsername = big.NewInt(1 << 0)
	flowActionHttpSendRequestParamsBasicAuthFieldPassword = big.NewInt(1 << 1)
)

type FlowActionHttpSendRequestParamsBasicAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) GetUsername() string {
	if f == nil || f.Username == nil {
		return ""
	}
	return *f.Username
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) GetPassword() string {
	if f == nil || f.Password == nil {
		return ""
	}
	return *f.Password
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParamsBasicAuth) SetUsername(username *string) {
	f.Username = username
	f.require(flowActionHttpSendRequestParamsBasicAuthFieldUsername)
}

// SetPassword sets the Password field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHttpSendRequestParamsBasicAuth) SetPassword(password *string) {
	f.Password = password
	f.require(flowActionHttpSendRequestParamsBasicAuthFieldPassword)
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionHttpSendRequestParamsBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionHttpSendRequestParamsBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) MarshalJSON() ([]byte, error) {
	type embed FlowActionHttpSendRequestParamsBasicAuth
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHttpSendRequestParamsBasicAuth) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionHttpSendRequestParamsContentType string

const (
	FlowActionHttpSendRequestParamsContentTypeJson FlowActionHttpSendRequestParamsContentType = "JSON"
	FlowActionHttpSendRequestParamsContentTypeForm FlowActionHttpSendRequestParamsContentType = "FORM"
	FlowActionHttpSendRequestParamsContentTypeXml  FlowActionHttpSendRequestParamsContentType = "XML"
)

func NewFlowActionHttpSendRequestParamsContentTypeFromString(s string) (FlowActionHttpSendRequestParamsContentType, error) {
	switch s {
	case "JSON":
		return FlowActionHttpSendRequestParamsContentTypeJson, nil
	case "FORM":
		return FlowActionHttpSendRequestParamsContentTypeForm, nil
	case "XML":
		return FlowActionHttpSendRequestParamsContentTypeXml, nil
	}
	var t FlowActionHttpSendRequestParamsContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionHttpSendRequestParamsContentType) Ptr() *FlowActionHttpSendRequestParamsContentType {
	return &f
}

type FlowActionHttpSendRequestParamsHeaders = map[string]interface{}

type FlowActionHttpSendRequestParamsMethod string

const (
	FlowActionHttpSendRequestParamsMethodGet    FlowActionHttpSendRequestParamsMethod = "GET"
	FlowActionHttpSendRequestParamsMethodPost   FlowActionHttpSendRequestParamsMethod = "POST"
	FlowActionHttpSendRequestParamsMethodPut    FlowActionHttpSendRequestParamsMethod = "PUT"
	FlowActionHttpSendRequestParamsMethodPatch  FlowActionHttpSendRequestParamsMethod = "PATCH"
	FlowActionHttpSendRequestParamsMethodDelete FlowActionHttpSendRequestParamsMethod = "DELETE"
)

func NewFlowActionHttpSendRequestParamsMethodFromString(s string) (FlowActionHttpSendRequestParamsMethod, error) {
	switch s {
	case "GET":
		return FlowActionHttpSendRequestParamsMethodGet, nil
	case "POST":
		return FlowActionHttpSendRequestParamsMethodPost, nil
	case "PUT":
		return FlowActionHttpSendRequestParamsMethodPut, nil
	case "PATCH":
		return FlowActionHttpSendRequestParamsMethodPatch, nil
	case "DELETE":
		return FlowActionHttpSendRequestParamsMethodDelete, nil
	}
	var t FlowActionHttpSendRequestParamsMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionHttpSendRequestParamsMethod) Ptr() *FlowActionHttpSendRequestParamsMethod {
	return &f
}

type FlowActionHttpSendRequestParamsPayload struct {
	String                                       string
	UnknownList                                  []interface{}
	FlowActionHttpSendRequestParamsPayloadObject FlowActionHttpSendRequestParamsPayloadObject

	typ string
}

func (f *FlowActionHttpSendRequestParamsPayload) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionHttpSendRequestParamsPayload) GetUnknownList() []interface{} {
	if f == nil {
		return nil
	}
	return f.UnknownList
}

func (f *FlowActionHttpSendRequestParamsPayload) GetFlowActionHttpSendRequestParamsPayloadObject() FlowActionHttpSendRequestParamsPayloadObject {
	if f == nil {
		return nil
	}
	return f.FlowActionHttpSendRequestParamsPayloadObject
}

func (f *FlowActionHttpSendRequestParamsPayload) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		f.typ = "UnknownList"
		f.UnknownList = valueUnknownList
		return nil
	}
	var valueFlowActionHttpSendRequestParamsPayloadObject FlowActionHttpSendRequestParamsPayloadObject
	if err := json.Unmarshal(data, &valueFlowActionHttpSendRequestParamsPayloadObject); err == nil {
		f.typ = "FlowActionHttpSendRequestParamsPayloadObject"
		f.FlowActionHttpSendRequestParamsPayloadObject = valueFlowActionHttpSendRequestParamsPayloadObject
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionHttpSendRequestParamsPayload) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "UnknownList" || f.UnknownList != nil {
		return json.Marshal(f.UnknownList)
	}
	if f.typ == "FlowActionHttpSendRequestParamsPayloadObject" || f.FlowActionHttpSendRequestParamsPayloadObject != nil {
		return json.Marshal(f.FlowActionHttpSendRequestParamsPayloadObject)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionHttpSendRequestParamsPayloadVisitor interface {
	VisitString(string) error
	VisitUnknownList([]interface{}) error
	VisitFlowActionHttpSendRequestParamsPayloadObject(FlowActionHttpSendRequestParamsPayloadObject) error
}

func (f *FlowActionHttpSendRequestParamsPayload) Accept(visitor FlowActionHttpSendRequestParamsPayloadVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "UnknownList" || f.UnknownList != nil {
		return visitor.VisitUnknownList(f.UnknownList)
	}
	if f.typ == "FlowActionHttpSendRequestParamsPayloadObject" || f.FlowActionHttpSendRequestParamsPayloadObject != nil {
		return visitor.VisitFlowActionHttpSendRequestParamsPayloadObject(f.FlowActionHttpSendRequestParamsPayloadObject)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionHttpSendRequestParamsPayloadObject = map[string]interface{}

type FlowActionHttpSendRequestParamsQueryParams = map[string]*FlowActionHttpSendRequestParamsQueryParamsValue

type FlowActionHttpSendRequestParamsQueryParamsValue struct {
	Double float64
	String string

	typ string
}

func (f *FlowActionHttpSendRequestParamsQueryParamsValue) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionHttpSendRequestParamsQueryParamsValue) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionHttpSendRequestParamsQueryParamsValue) UnmarshalJSON(data []byte) error {
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionHttpSendRequestParamsQueryParamsValue) MarshalJSON() ([]byte, error) {
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionHttpSendRequestParamsQueryParamsValueVisitor interface {
	VisitDouble(float64) error
	VisitString(string) error
}

func (f *FlowActionHttpSendRequestParamsQueryParamsValue) Accept(visitor FlowActionHttpSendRequestParamsQueryParamsValueVisitor) error {
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionHubspot struct {
	FlowActionHubspotEnrollContact *FlowActionHubspotEnrollContact
	FlowActionHubspotGetContact    *FlowActionHubspotGetContact
	FlowActionHubspotUpsertContact *FlowActionHubspotUpsertContact

	typ string
}

func (f *FlowActionHubspot) GetFlowActionHubspotEnrollContact() *FlowActionHubspotEnrollContact {
	if f == nil {
		return nil
	}
	return f.FlowActionHubspotEnrollContact
}

func (f *FlowActionHubspot) GetFlowActionHubspotGetContact() *FlowActionHubspotGetContact {
	if f == nil {
		return nil
	}
	return f.FlowActionHubspotGetContact
}

func (f *FlowActionHubspot) GetFlowActionHubspotUpsertContact() *FlowActionHubspotUpsertContact {
	if f == nil {
		return nil
	}
	return f.FlowActionHubspotUpsertContact
}

func (f *FlowActionHubspot) UnmarshalJSON(data []byte) error {
	valueFlowActionHubspotEnrollContact := new(FlowActionHubspotEnrollContact)
	if err := json.Unmarshal(data, &valueFlowActionHubspotEnrollContact); err == nil {
		f.typ = "FlowActionHubspotEnrollContact"
		f.FlowActionHubspotEnrollContact = valueFlowActionHubspotEnrollContact
		return nil
	}
	valueFlowActionHubspotGetContact := new(FlowActionHubspotGetContact)
	if err := json.Unmarshal(data, &valueFlowActionHubspotGetContact); err == nil {
		f.typ = "FlowActionHubspotGetContact"
		f.FlowActionHubspotGetContact = valueFlowActionHubspotGetContact
		return nil
	}
	valueFlowActionHubspotUpsertContact := new(FlowActionHubspotUpsertContact)
	if err := json.Unmarshal(data, &valueFlowActionHubspotUpsertContact); err == nil {
		f.typ = "FlowActionHubspotUpsertContact"
		f.FlowActionHubspotUpsertContact = valueFlowActionHubspotUpsertContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionHubspot) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionHubspotEnrollContact" || f.FlowActionHubspotEnrollContact != nil {
		return json.Marshal(f.FlowActionHubspotEnrollContact)
	}
	if f.typ == "FlowActionHubspotGetContact" || f.FlowActionHubspotGetContact != nil {
		return json.Marshal(f.FlowActionHubspotGetContact)
	}
	if f.typ == "FlowActionHubspotUpsertContact" || f.FlowActionHubspotUpsertContact != nil {
		return json.Marshal(f.FlowActionHubspotUpsertContact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionHubspotVisitor interface {
	VisitFlowActionHubspotEnrollContact(*FlowActionHubspotEnrollContact) error
	VisitFlowActionHubspotGetContact(*FlowActionHubspotGetContact) error
	VisitFlowActionHubspotUpsertContact(*FlowActionHubspotUpsertContact) error
}

func (f *FlowActionHubspot) Accept(visitor FlowActionHubspotVisitor) error {
	if f.typ == "FlowActionHubspotEnrollContact" || f.FlowActionHubspotEnrollContact != nil {
		return visitor.VisitFlowActionHubspotEnrollContact(f.FlowActionHubspotEnrollContact)
	}
	if f.typ == "FlowActionHubspotGetContact" || f.FlowActionHubspotGetContact != nil {
		return visitor.VisitFlowActionHubspotGetContact(f.FlowActionHubspotGetContact)
	}
	if f.typ == "FlowActionHubspotUpsertContact" || f.FlowActionHubspotUpsertContact != nil {
		return visitor.VisitFlowActionHubspotUpsertContact(f.FlowActionHubspotUpsertContact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionHubspotEnrollContactFieldId           = big.NewInt(1 << 0)
	flowActionHubspotEnrollContactFieldAlias        = big.NewInt(1 << 1)
	flowActionHubspotEnrollContactFieldAllowFailure = big.NewInt(1 << 2)
	flowActionHubspotEnrollContactFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionHubspotEnrollContactFieldParams       = big.NewInt(1 << 4)
)

type FlowActionHubspotEnrollContact struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionHubspotEnrollContactParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHubspotEnrollContact) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionHubspotEnrollContact) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionHubspotEnrollContact) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionHubspotEnrollContact) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionHubspotEnrollContact) GetParams() *FlowActionHubspotEnrollContactParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionHubspotEnrollContact) Type() string {
	return f.type_
}

func (f *FlowActionHubspotEnrollContact) Action() string {
	return f.action
}

func (f *FlowActionHubspotEnrollContact) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHubspotEnrollContact) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContact) SetId(id string) {
	f.Id = id
	f.require(flowActionHubspotEnrollContactFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContact) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionHubspotEnrollContactFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContact) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionHubspotEnrollContactFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContact) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionHubspotEnrollContactFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContact) SetParams(params *FlowActionHubspotEnrollContactParams) {
	f.Params = params
	f.require(flowActionHubspotEnrollContactFieldParams)
}

func (f *FlowActionHubspotEnrollContact) UnmarshalJSON(data []byte) error {
	type embed FlowActionHubspotEnrollContact
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionHubspotEnrollContact(unmarshaler.embed)
	if unmarshaler.Type != "HUBSPOT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "HUBSPOT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ENROLL_CONTACT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ENROLL_CONTACT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotEnrollContact) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotEnrollContact
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "HUBSPOT",
		Action: "ENROLL_CONTACT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHubspotEnrollContact) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHubspotEnrollContactParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionHubspotEnrollContactParamsFieldEmail        = big.NewInt(1 << 1)
	flowActionHubspotEnrollContactParamsFieldWorkflowId   = big.NewInt(1 << 2)
)

type FlowActionHubspotEnrollContactParams struct {
	ConnectionId string                                          `json:"connection_id" url:"connection_id"`
	Email        string                                          `json:"email" url:"email"`
	WorkflowId   *FlowActionHubspotEnrollContactParamsWorkflowId `json:"workflow_id" url:"workflow_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHubspotEnrollContactParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionHubspotEnrollContactParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionHubspotEnrollContactParams) GetWorkflowId() *FlowActionHubspotEnrollContactParamsWorkflowId {
	if f == nil {
		return nil
	}
	return f.WorkflowId
}

func (f *FlowActionHubspotEnrollContactParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHubspotEnrollContactParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContactParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionHubspotEnrollContactParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContactParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionHubspotEnrollContactParamsFieldEmail)
}

// SetWorkflowId sets the WorkflowId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotEnrollContactParams) SetWorkflowId(workflowId *FlowActionHubspotEnrollContactParamsWorkflowId) {
	f.WorkflowId = workflowId
	f.require(flowActionHubspotEnrollContactParamsFieldWorkflowId)
}

func (f *FlowActionHubspotEnrollContactParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionHubspotEnrollContactParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionHubspotEnrollContactParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotEnrollContactParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotEnrollContactParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHubspotEnrollContactParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionHubspotEnrollContactParamsWorkflowId struct {
	String  string
	Integer int

	typ string
}

func (f *FlowActionHubspotEnrollContactParamsWorkflowId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionHubspotEnrollContactParamsWorkflowId) GetInteger() int {
	if f == nil {
		return 0
	}
	return f.Integer
}

func (f *FlowActionHubspotEnrollContactParamsWorkflowId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		f.typ = "Integer"
		f.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionHubspotEnrollContactParamsWorkflowId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Integer" || f.Integer != 0 {
		return json.Marshal(f.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionHubspotEnrollContactParamsWorkflowIdVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (f *FlowActionHubspotEnrollContactParamsWorkflowId) Accept(visitor FlowActionHubspotEnrollContactParamsWorkflowIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Integer" || f.Integer != 0 {
		return visitor.VisitInteger(f.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionHubspotGetContactFieldId           = big.NewInt(1 << 0)
	flowActionHubspotGetContactFieldAlias        = big.NewInt(1 << 1)
	flowActionHubspotGetContactFieldAllowFailure = big.NewInt(1 << 2)
	flowActionHubspotGetContactFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionHubspotGetContactFieldParams       = big.NewInt(1 << 4)
)

type FlowActionHubspotGetContact struct {
	Id           string                             `json:"id" url:"id"`
	Alias        *string                            `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                              `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                              `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionHubspotGetContactParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHubspotGetContact) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionHubspotGetContact) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionHubspotGetContact) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionHubspotGetContact) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionHubspotGetContact) GetParams() *FlowActionHubspotGetContactParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionHubspotGetContact) Type() string {
	return f.type_
}

func (f *FlowActionHubspotGetContact) Action() string {
	return f.action
}

func (f *FlowActionHubspotGetContact) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHubspotGetContact) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContact) SetId(id string) {
	f.Id = id
	f.require(flowActionHubspotGetContactFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContact) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionHubspotGetContactFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContact) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionHubspotGetContactFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContact) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionHubspotGetContactFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContact) SetParams(params *FlowActionHubspotGetContactParams) {
	f.Params = params
	f.require(flowActionHubspotGetContactFieldParams)
}

func (f *FlowActionHubspotGetContact) UnmarshalJSON(data []byte) error {
	type embed FlowActionHubspotGetContact
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionHubspotGetContact(unmarshaler.embed)
	if unmarshaler.Type != "HUBSPOT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "HUBSPOT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "GET_CONTACT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "GET_CONTACT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotGetContact) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotGetContact
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "HUBSPOT",
		Action: "GET_CONTACT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHubspotGetContact) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHubspotGetContactParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionHubspotGetContactParamsFieldEmail        = big.NewInt(1 << 1)
)

type FlowActionHubspotGetContactParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	Email        string `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHubspotGetContactParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionHubspotGetContactParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionHubspotGetContactParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHubspotGetContactParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContactParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionHubspotGetContactParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotGetContactParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionHubspotGetContactParamsFieldEmail)
}

func (f *FlowActionHubspotGetContactParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionHubspotGetContactParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionHubspotGetContactParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotGetContactParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotGetContactParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHubspotGetContactParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHubspotUpsertContactFieldId           = big.NewInt(1 << 0)
	flowActionHubspotUpsertContactFieldAlias        = big.NewInt(1 << 1)
	flowActionHubspotUpsertContactFieldAllowFailure = big.NewInt(1 << 2)
	flowActionHubspotUpsertContactFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionHubspotUpsertContactFieldParams       = big.NewInt(1 << 4)
)

type FlowActionHubspotUpsertContact struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionHubspotUpsertContactParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHubspotUpsertContact) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionHubspotUpsertContact) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionHubspotUpsertContact) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionHubspotUpsertContact) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionHubspotUpsertContact) GetParams() *FlowActionHubspotUpsertContactParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionHubspotUpsertContact) Type() string {
	return f.type_
}

func (f *FlowActionHubspotUpsertContact) Action() string {
	return f.action
}

func (f *FlowActionHubspotUpsertContact) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHubspotUpsertContact) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContact) SetId(id string) {
	f.Id = id
	f.require(flowActionHubspotUpsertContactFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContact) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionHubspotUpsertContactFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContact) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionHubspotUpsertContactFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContact) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionHubspotUpsertContactFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContact) SetParams(params *FlowActionHubspotUpsertContactParams) {
	f.Params = params
	f.require(flowActionHubspotUpsertContactFieldParams)
}

func (f *FlowActionHubspotUpsertContact) UnmarshalJSON(data []byte) error {
	type embed FlowActionHubspotUpsertContact
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionHubspotUpsertContact(unmarshaler.embed)
	if unmarshaler.Type != "HUBSPOT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "HUBSPOT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPSERT_CONTACT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPSERT_CONTACT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotUpsertContact) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotUpsertContact
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "HUBSPOT",
		Action: "UPSERT_CONTACT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHubspotUpsertContact) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHubspotUpsertContactParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionHubspotUpsertContactParamsFieldEmail        = big.NewInt(1 << 1)
	flowActionHubspotUpsertContactParamsFieldProperties   = big.NewInt(1 << 2)
)

type FlowActionHubspotUpsertContactParams struct {
	ConnectionId string                                          `json:"connection_id" url:"connection_id"`
	Email        string                                          `json:"email" url:"email"`
	Properties   []*FlowActionHubspotUpsertContactParamsProperty `json:"properties,omitempty" url:"properties,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FlowActionHubspotUpsertContactParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionHubspotUpsertContactParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionHubspotUpsertContactParams) GetProperties() []*FlowActionHubspotUpsertContactParamsProperty {
	if f == nil || f.Properties == nil {
		return nil
	}
	return f.Properties
}

func (f *FlowActionHubspotUpsertContactParams) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FlowActionHubspotUpsertContactParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContactParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionHubspotUpsertContactParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContactParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionHubspotUpsertContactParamsFieldEmail)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContactParams) SetProperties(properties []*FlowActionHubspotUpsertContactParamsProperty) {
	f.Properties = properties
	f.require(flowActionHubspotUpsertContactParamsFieldProperties)
}

func (f *FlowActionHubspotUpsertContactParams) UnmarshalJSON(data []byte) error {
	type embed FlowActionHubspotUpsertContactParams
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionHubspotUpsertContactParams(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotUpsertContactParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotUpsertContactParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, f.ExtraProperties)
}

func (f *FlowActionHubspotUpsertContactParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionHubspotUpsertContactParamsPropertyFieldProperty = big.NewInt(1 << 0)
)

type FlowActionHubspotUpsertContactParamsProperty struct {
	Property string `json:"property" url:"property"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionHubspotUpsertContactParamsProperty) GetProperty() string {
	if f == nil {
		return ""
	}
	return f.Property
}

func (f *FlowActionHubspotUpsertContactParamsProperty) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionHubspotUpsertContactParamsProperty) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetProperty sets the Property field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionHubspotUpsertContactParamsProperty) SetProperty(property string) {
	f.Property = property
	f.require(flowActionHubspotUpsertContactParamsPropertyFieldProperty)
}

func (f *FlowActionHubspotUpsertContactParamsProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionHubspotUpsertContactParamsProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionHubspotUpsertContactParamsProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionHubspotUpsertContactParamsProperty) MarshalJSON() ([]byte, error) {
	type embed FlowActionHubspotUpsertContactParamsProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionHubspotUpsertContactParamsProperty) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionJson struct {
	FlowActionJsonCreateJson    *FlowActionJsonCreateJson
	FlowActionJsonParseJson     *FlowActionJsonParseJson
	FlowActionJsonSerializeJson *FlowActionJsonSerializeJson

	typ string
}

func (f *FlowActionJson) GetFlowActionJsonCreateJson() *FlowActionJsonCreateJson {
	if f == nil {
		return nil
	}
	return f.FlowActionJsonCreateJson
}

func (f *FlowActionJson) GetFlowActionJsonParseJson() *FlowActionJsonParseJson {
	if f == nil {
		return nil
	}
	return f.FlowActionJsonParseJson
}

func (f *FlowActionJson) GetFlowActionJsonSerializeJson() *FlowActionJsonSerializeJson {
	if f == nil {
		return nil
	}
	return f.FlowActionJsonSerializeJson
}

func (f *FlowActionJson) UnmarshalJSON(data []byte) error {
	valueFlowActionJsonCreateJson := new(FlowActionJsonCreateJson)
	if err := json.Unmarshal(data, &valueFlowActionJsonCreateJson); err == nil {
		f.typ = "FlowActionJsonCreateJson"
		f.FlowActionJsonCreateJson = valueFlowActionJsonCreateJson
		return nil
	}
	valueFlowActionJsonParseJson := new(FlowActionJsonParseJson)
	if err := json.Unmarshal(data, &valueFlowActionJsonParseJson); err == nil {
		f.typ = "FlowActionJsonParseJson"
		f.FlowActionJsonParseJson = valueFlowActionJsonParseJson
		return nil
	}
	valueFlowActionJsonSerializeJson := new(FlowActionJsonSerializeJson)
	if err := json.Unmarshal(data, &valueFlowActionJsonSerializeJson); err == nil {
		f.typ = "FlowActionJsonSerializeJson"
		f.FlowActionJsonSerializeJson = valueFlowActionJsonSerializeJson
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionJson) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionJsonCreateJson" || f.FlowActionJsonCreateJson != nil {
		return json.Marshal(f.FlowActionJsonCreateJson)
	}
	if f.typ == "FlowActionJsonParseJson" || f.FlowActionJsonParseJson != nil {
		return json.Marshal(f.FlowActionJsonParseJson)
	}
	if f.typ == "FlowActionJsonSerializeJson" || f.FlowActionJsonSerializeJson != nil {
		return json.Marshal(f.FlowActionJsonSerializeJson)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionJsonVisitor interface {
	VisitFlowActionJsonCreateJson(*FlowActionJsonCreateJson) error
	VisitFlowActionJsonParseJson(*FlowActionJsonParseJson) error
	VisitFlowActionJsonSerializeJson(*FlowActionJsonSerializeJson) error
}

func (f *FlowActionJson) Accept(visitor FlowActionJsonVisitor) error {
	if f.typ == "FlowActionJsonCreateJson" || f.FlowActionJsonCreateJson != nil {
		return visitor.VisitFlowActionJsonCreateJson(f.FlowActionJsonCreateJson)
	}
	if f.typ == "FlowActionJsonParseJson" || f.FlowActionJsonParseJson != nil {
		return visitor.VisitFlowActionJsonParseJson(f.FlowActionJsonParseJson)
	}
	if f.typ == "FlowActionJsonSerializeJson" || f.FlowActionJsonSerializeJson != nil {
		return visitor.VisitFlowActionJsonSerializeJson(f.FlowActionJsonSerializeJson)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionJsonCreateJsonFieldId           = big.NewInt(1 << 0)
	flowActionJsonCreateJsonFieldAlias        = big.NewInt(1 << 1)
	flowActionJsonCreateJsonFieldAllowFailure = big.NewInt(1 << 2)
	flowActionJsonCreateJsonFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionJsonCreateJsonFieldParams       = big.NewInt(1 << 4)
)

type FlowActionJsonCreateJson struct {
	Id           string                          `json:"id" url:"id"`
	Alias        *string                         `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                           `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                           `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionJsonCreateJsonParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJsonCreateJson) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionJsonCreateJson) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionJsonCreateJson) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionJsonCreateJson) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionJsonCreateJson) GetParams() *FlowActionJsonCreateJsonParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionJsonCreateJson) Type() string {
	return f.type_
}

func (f *FlowActionJsonCreateJson) Action() string {
	return f.action
}

func (f *FlowActionJsonCreateJson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJsonCreateJson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonCreateJson) SetId(id string) {
	f.Id = id
	f.require(flowActionJsonCreateJsonFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonCreateJson) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionJsonCreateJsonFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonCreateJson) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionJsonCreateJsonFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonCreateJson) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionJsonCreateJsonFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonCreateJson) SetParams(params *FlowActionJsonCreateJsonParams) {
	f.Params = params
	f.require(flowActionJsonCreateJsonFieldParams)
}

func (f *FlowActionJsonCreateJson) UnmarshalJSON(data []byte) error {
	type embed FlowActionJsonCreateJson
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionJsonCreateJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "JSON", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "CREATE_JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CREATE_JSON", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJsonCreateJson) MarshalJSON() ([]byte, error) {
	type embed FlowActionJsonCreateJson
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "JSON",
		Action: "CREATE_JSON",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJsonCreateJson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJsonCreateJsonParamsFieldObject = big.NewInt(1 << 0)
)

type FlowActionJsonCreateJsonParams struct {
	Object FlowActionJsonCreateJsonParamsObject `json:"object" url:"object"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJsonCreateJsonParams) GetObject() FlowActionJsonCreateJsonParamsObject {
	if f == nil {
		return nil
	}
	return f.Object
}

func (f *FlowActionJsonCreateJsonParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJsonCreateJsonParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetObject sets the Object field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonCreateJsonParams) SetObject(object FlowActionJsonCreateJsonParamsObject) {
	f.Object = object
	f.require(flowActionJsonCreateJsonParamsFieldObject)
}

func (f *FlowActionJsonCreateJsonParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionJsonCreateJsonParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionJsonCreateJsonParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJsonCreateJsonParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionJsonCreateJsonParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJsonCreateJsonParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionJsonCreateJsonParamsObject = map[string]interface{}

var (
	flowActionJsonParseJsonFieldId           = big.NewInt(1 << 0)
	flowActionJsonParseJsonFieldAlias        = big.NewInt(1 << 1)
	flowActionJsonParseJsonFieldAllowFailure = big.NewInt(1 << 2)
	flowActionJsonParseJsonFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionJsonParseJsonFieldParams       = big.NewInt(1 << 4)
)

type FlowActionJsonParseJson struct {
	Id           string                         `json:"id" url:"id"`
	Alias        *string                        `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                          `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                          `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionJsonParseJsonParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJsonParseJson) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionJsonParseJson) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionJsonParseJson) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionJsonParseJson) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionJsonParseJson) GetParams() *FlowActionJsonParseJsonParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionJsonParseJson) Type() string {
	return f.type_
}

func (f *FlowActionJsonParseJson) Action() string {
	return f.action
}

func (f *FlowActionJsonParseJson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJsonParseJson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonParseJson) SetId(id string) {
	f.Id = id
	f.require(flowActionJsonParseJsonFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonParseJson) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionJsonParseJsonFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonParseJson) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionJsonParseJsonFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonParseJson) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionJsonParseJsonFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonParseJson) SetParams(params *FlowActionJsonParseJsonParams) {
	f.Params = params
	f.require(flowActionJsonParseJsonFieldParams)
}

func (f *FlowActionJsonParseJson) UnmarshalJSON(data []byte) error {
	type embed FlowActionJsonParseJson
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionJsonParseJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "JSON", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "PARSE_JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "PARSE_JSON", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJsonParseJson) MarshalJSON() ([]byte, error) {
	type embed FlowActionJsonParseJson
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "JSON",
		Action: "PARSE_JSON",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJsonParseJson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJsonParseJsonParamsFieldJson = big.NewInt(1 << 0)
)

type FlowActionJsonParseJsonParams struct {
	Json string `json:"json" url:"json"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJsonParseJsonParams) GetJson() string {
	if f == nil {
		return ""
	}
	return f.Json
}

func (f *FlowActionJsonParseJsonParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJsonParseJsonParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetJson sets the Json field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonParseJsonParams) SetJson(json string) {
	f.Json = json
	f.require(flowActionJsonParseJsonParamsFieldJson)
}

func (f *FlowActionJsonParseJsonParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionJsonParseJsonParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionJsonParseJsonParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJsonParseJsonParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionJsonParseJsonParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJsonParseJsonParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJsonSerializeJsonFieldId           = big.NewInt(1 << 0)
	flowActionJsonSerializeJsonFieldAlias        = big.NewInt(1 << 1)
	flowActionJsonSerializeJsonFieldAllowFailure = big.NewInt(1 << 2)
	flowActionJsonSerializeJsonFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionJsonSerializeJsonFieldParams       = big.NewInt(1 << 4)
)

type FlowActionJsonSerializeJson struct {
	Id           string                             `json:"id" url:"id"`
	Alias        *string                            `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                              `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                              `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionJsonSerializeJsonParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJsonSerializeJson) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionJsonSerializeJson) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionJsonSerializeJson) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionJsonSerializeJson) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionJsonSerializeJson) GetParams() *FlowActionJsonSerializeJsonParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionJsonSerializeJson) Type() string {
	return f.type_
}

func (f *FlowActionJsonSerializeJson) Action() string {
	return f.action
}

func (f *FlowActionJsonSerializeJson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJsonSerializeJson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonSerializeJson) SetId(id string) {
	f.Id = id
	f.require(flowActionJsonSerializeJsonFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonSerializeJson) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionJsonSerializeJsonFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonSerializeJson) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionJsonSerializeJsonFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonSerializeJson) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionJsonSerializeJsonFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonSerializeJson) SetParams(params *FlowActionJsonSerializeJsonParams) {
	f.Params = params
	f.require(flowActionJsonSerializeJsonFieldParams)
}

func (f *FlowActionJsonSerializeJson) UnmarshalJSON(data []byte) error {
	type embed FlowActionJsonSerializeJson
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionJsonSerializeJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "JSON", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SERIALIZE_JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SERIALIZE_JSON", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJsonSerializeJson) MarshalJSON() ([]byte, error) {
	type embed FlowActionJsonSerializeJson
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "JSON",
		Action: "SERIALIZE_JSON",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJsonSerializeJson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJsonSerializeJsonParamsFieldObject = big.NewInt(1 << 0)
)

type FlowActionJsonSerializeJsonParams struct {
	Object *FlowActionJsonSerializeJsonParamsObject `json:"object" url:"object"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJsonSerializeJsonParams) GetObject() *FlowActionJsonSerializeJsonParamsObject {
	if f == nil {
		return nil
	}
	return f.Object
}

func (f *FlowActionJsonSerializeJsonParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJsonSerializeJsonParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetObject sets the Object field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJsonSerializeJsonParams) SetObject(object *FlowActionJsonSerializeJsonParamsObject) {
	f.Object = object
	f.require(flowActionJsonSerializeJsonParamsFieldObject)
}

func (f *FlowActionJsonSerializeJsonParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionJsonSerializeJsonParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionJsonSerializeJsonParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJsonSerializeJsonParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionJsonSerializeJsonParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJsonSerializeJsonParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionJsonSerializeJsonParamsObject struct {
	String                                        string
	FlowActionJsonSerializeJsonParamsObjectObject FlowActionJsonSerializeJsonParamsObjectObject

	typ string
}

func (f *FlowActionJsonSerializeJsonParamsObject) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionJsonSerializeJsonParamsObject) GetFlowActionJsonSerializeJsonParamsObjectObject() FlowActionJsonSerializeJsonParamsObjectObject {
	if f == nil {
		return nil
	}
	return f.FlowActionJsonSerializeJsonParamsObjectObject
}

func (f *FlowActionJsonSerializeJsonParamsObject) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueFlowActionJsonSerializeJsonParamsObjectObject FlowActionJsonSerializeJsonParamsObjectObject
	if err := json.Unmarshal(data, &valueFlowActionJsonSerializeJsonParamsObjectObject); err == nil {
		f.typ = "FlowActionJsonSerializeJsonParamsObjectObject"
		f.FlowActionJsonSerializeJsonParamsObjectObject = valueFlowActionJsonSerializeJsonParamsObjectObject
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionJsonSerializeJsonParamsObject) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "FlowActionJsonSerializeJsonParamsObjectObject" || f.FlowActionJsonSerializeJsonParamsObjectObject != nil {
		return json.Marshal(f.FlowActionJsonSerializeJsonParamsObjectObject)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionJsonSerializeJsonParamsObjectVisitor interface {
	VisitString(string) error
	VisitFlowActionJsonSerializeJsonParamsObjectObject(FlowActionJsonSerializeJsonParamsObjectObject) error
}

func (f *FlowActionJsonSerializeJsonParamsObject) Accept(visitor FlowActionJsonSerializeJsonParamsObjectVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "FlowActionJsonSerializeJsonParamsObjectObject" || f.FlowActionJsonSerializeJsonParamsObjectObject != nil {
		return visitor.VisitFlowActionJsonSerializeJsonParamsObjectObject(f.FlowActionJsonSerializeJsonParamsObjectObject)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionJsonSerializeJsonParamsObjectObject = map[string]interface{}

type FlowActionJwt struct {
	FlowActionJwtDecodeJwt *FlowActionJwtDecodeJwt
	FlowActionJwtSignJwt   *FlowActionJwtSignJwt
	FlowActionJwtVerifyJwt *FlowActionJwtVerifyJwt

	typ string
}

func (f *FlowActionJwt) GetFlowActionJwtDecodeJwt() *FlowActionJwtDecodeJwt {
	if f == nil {
		return nil
	}
	return f.FlowActionJwtDecodeJwt
}

func (f *FlowActionJwt) GetFlowActionJwtSignJwt() *FlowActionJwtSignJwt {
	if f == nil {
		return nil
	}
	return f.FlowActionJwtSignJwt
}

func (f *FlowActionJwt) GetFlowActionJwtVerifyJwt() *FlowActionJwtVerifyJwt {
	if f == nil {
		return nil
	}
	return f.FlowActionJwtVerifyJwt
}

func (f *FlowActionJwt) UnmarshalJSON(data []byte) error {
	valueFlowActionJwtDecodeJwt := new(FlowActionJwtDecodeJwt)
	if err := json.Unmarshal(data, &valueFlowActionJwtDecodeJwt); err == nil {
		f.typ = "FlowActionJwtDecodeJwt"
		f.FlowActionJwtDecodeJwt = valueFlowActionJwtDecodeJwt
		return nil
	}
	valueFlowActionJwtSignJwt := new(FlowActionJwtSignJwt)
	if err := json.Unmarshal(data, &valueFlowActionJwtSignJwt); err == nil {
		f.typ = "FlowActionJwtSignJwt"
		f.FlowActionJwtSignJwt = valueFlowActionJwtSignJwt
		return nil
	}
	valueFlowActionJwtVerifyJwt := new(FlowActionJwtVerifyJwt)
	if err := json.Unmarshal(data, &valueFlowActionJwtVerifyJwt); err == nil {
		f.typ = "FlowActionJwtVerifyJwt"
		f.FlowActionJwtVerifyJwt = valueFlowActionJwtVerifyJwt
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionJwt) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionJwtDecodeJwt" || f.FlowActionJwtDecodeJwt != nil {
		return json.Marshal(f.FlowActionJwtDecodeJwt)
	}
	if f.typ == "FlowActionJwtSignJwt" || f.FlowActionJwtSignJwt != nil {
		return json.Marshal(f.FlowActionJwtSignJwt)
	}
	if f.typ == "FlowActionJwtVerifyJwt" || f.FlowActionJwtVerifyJwt != nil {
		return json.Marshal(f.FlowActionJwtVerifyJwt)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionJwtVisitor interface {
	VisitFlowActionJwtDecodeJwt(*FlowActionJwtDecodeJwt) error
	VisitFlowActionJwtSignJwt(*FlowActionJwtSignJwt) error
	VisitFlowActionJwtVerifyJwt(*FlowActionJwtVerifyJwt) error
}

func (f *FlowActionJwt) Accept(visitor FlowActionJwtVisitor) error {
	if f.typ == "FlowActionJwtDecodeJwt" || f.FlowActionJwtDecodeJwt != nil {
		return visitor.VisitFlowActionJwtDecodeJwt(f.FlowActionJwtDecodeJwt)
	}
	if f.typ == "FlowActionJwtSignJwt" || f.FlowActionJwtSignJwt != nil {
		return visitor.VisitFlowActionJwtSignJwt(f.FlowActionJwtSignJwt)
	}
	if f.typ == "FlowActionJwtVerifyJwt" || f.FlowActionJwtVerifyJwt != nil {
		return visitor.VisitFlowActionJwtVerifyJwt(f.FlowActionJwtVerifyJwt)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionJwtDecodeJwtFieldId           = big.NewInt(1 << 0)
	flowActionJwtDecodeJwtFieldAlias        = big.NewInt(1 << 1)
	flowActionJwtDecodeJwtFieldAllowFailure = big.NewInt(1 << 2)
	flowActionJwtDecodeJwtFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionJwtDecodeJwtFieldParams       = big.NewInt(1 << 4)
)

type FlowActionJwtDecodeJwt struct {
	Id           string                        `json:"id" url:"id"`
	Alias        *string                       `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                         `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                         `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionJwtDecodeJwtParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJwtDecodeJwt) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionJwtDecodeJwt) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionJwtDecodeJwt) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionJwtDecodeJwt) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionJwtDecodeJwt) GetParams() *FlowActionJwtDecodeJwtParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionJwtDecodeJwt) Type() string {
	return f.type_
}

func (f *FlowActionJwtDecodeJwt) Action() string {
	return f.action
}

func (f *FlowActionJwtDecodeJwt) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJwtDecodeJwt) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtDecodeJwt) SetId(id string) {
	f.Id = id
	f.require(flowActionJwtDecodeJwtFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtDecodeJwt) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionJwtDecodeJwtFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtDecodeJwt) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionJwtDecodeJwtFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtDecodeJwt) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionJwtDecodeJwtFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtDecodeJwt) SetParams(params *FlowActionJwtDecodeJwtParams) {
	f.Params = params
	f.require(flowActionJwtDecodeJwtFieldParams)
}

func (f *FlowActionJwtDecodeJwt) UnmarshalJSON(data []byte) error {
	type embed FlowActionJwtDecodeJwt
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionJwtDecodeJwt(unmarshaler.embed)
	if unmarshaler.Type != "JWT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "JWT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "DECODE_JWT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "DECODE_JWT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJwtDecodeJwt) MarshalJSON() ([]byte, error) {
	type embed FlowActionJwtDecodeJwt
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "JWT",
		Action: "DECODE_JWT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJwtDecodeJwt) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJwtDecodeJwtParamsFieldToken = big.NewInt(1 << 0)
)

type FlowActionJwtDecodeJwtParams struct {
	Token string `json:"token" url:"token"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJwtDecodeJwtParams) GetToken() string {
	if f == nil {
		return ""
	}
	return f.Token
}

func (f *FlowActionJwtDecodeJwtParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJwtDecodeJwtParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtDecodeJwtParams) SetToken(token string) {
	f.Token = token
	f.require(flowActionJwtDecodeJwtParamsFieldToken)
}

func (f *FlowActionJwtDecodeJwtParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionJwtDecodeJwtParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionJwtDecodeJwtParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJwtDecodeJwtParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionJwtDecodeJwtParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJwtDecodeJwtParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJwtSignJwtFieldId           = big.NewInt(1 << 0)
	flowActionJwtSignJwtFieldAlias        = big.NewInt(1 << 1)
	flowActionJwtSignJwtFieldAllowFailure = big.NewInt(1 << 2)
	flowActionJwtSignJwtFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionJwtSignJwtFieldParams       = big.NewInt(1 << 4)
)

type FlowActionJwtSignJwt struct {
	Id           string                      `json:"id" url:"id"`
	Alias        *string                     `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                       `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                       `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionJwtSignJwtParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJwtSignJwt) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionJwtSignJwt) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionJwtSignJwt) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionJwtSignJwt) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionJwtSignJwt) GetParams() *FlowActionJwtSignJwtParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionJwtSignJwt) Type() string {
	return f.type_
}

func (f *FlowActionJwtSignJwt) Action() string {
	return f.action
}

func (f *FlowActionJwtSignJwt) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJwtSignJwt) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwt) SetId(id string) {
	f.Id = id
	f.require(flowActionJwtSignJwtFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwt) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionJwtSignJwtFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwt) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionJwtSignJwtFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwt) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionJwtSignJwtFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwt) SetParams(params *FlowActionJwtSignJwtParams) {
	f.Params = params
	f.require(flowActionJwtSignJwtFieldParams)
}

func (f *FlowActionJwtSignJwt) UnmarshalJSON(data []byte) error {
	type embed FlowActionJwtSignJwt
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionJwtSignJwt(unmarshaler.embed)
	if unmarshaler.Type != "JWT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "JWT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SIGN_JWT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SIGN_JWT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJwtSignJwt) MarshalJSON() ([]byte, error) {
	type embed FlowActionJwtSignJwt
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "JWT",
		Action: "SIGN_JWT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJwtSignJwt) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJwtSignJwtParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionJwtSignJwtParamsFieldPayload      = big.NewInt(1 << 1)
	flowActionJwtSignJwtParamsFieldSubject      = big.NewInt(1 << 2)
	flowActionJwtSignJwtParamsFieldIssuer       = big.NewInt(1 << 3)
	flowActionJwtSignJwtParamsFieldAudience     = big.NewInt(1 << 4)
	flowActionJwtSignJwtParamsFieldExpiresIn    = big.NewInt(1 << 5)
)

type FlowActionJwtSignJwtParams struct {
	ConnectionId string                             `json:"connection_id" url:"connection_id"`
	Payload      *FlowActionJwtSignJwtParamsPayload `json:"payload,omitempty" url:"payload,omitempty"`
	Subject      *string                            `json:"subject,omitempty" url:"subject,omitempty"`
	Issuer       *string                            `json:"issuer,omitempty" url:"issuer,omitempty"`
	Audience     *string                            `json:"audience,omitempty" url:"audience,omitempty"`
	ExpiresIn    *string                            `json:"expires_in,omitempty" url:"expires_in,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJwtSignJwtParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionJwtSignJwtParams) GetPayload() FlowActionJwtSignJwtParamsPayload {
	if f == nil || f.Payload == nil {
		return nil
	}
	return *f.Payload
}

func (f *FlowActionJwtSignJwtParams) GetSubject() string {
	if f == nil || f.Subject == nil {
		return ""
	}
	return *f.Subject
}

func (f *FlowActionJwtSignJwtParams) GetIssuer() string {
	if f == nil || f.Issuer == nil {
		return ""
	}
	return *f.Issuer
}

func (f *FlowActionJwtSignJwtParams) GetAudience() string {
	if f == nil || f.Audience == nil {
		return ""
	}
	return *f.Audience
}

func (f *FlowActionJwtSignJwtParams) GetExpiresIn() string {
	if f == nil || f.ExpiresIn == nil {
		return ""
	}
	return *f.ExpiresIn
}

func (f *FlowActionJwtSignJwtParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJwtSignJwtParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwtParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionJwtSignJwtParamsFieldConnectionId)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwtParams) SetPayload(payload *FlowActionJwtSignJwtParamsPayload) {
	f.Payload = payload
	f.require(flowActionJwtSignJwtParamsFieldPayload)
}

// SetSubject sets the Subject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwtParams) SetSubject(subject *string) {
	f.Subject = subject
	f.require(flowActionJwtSignJwtParamsFieldSubject)
}

// SetIssuer sets the Issuer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwtParams) SetIssuer(issuer *string) {
	f.Issuer = issuer
	f.require(flowActionJwtSignJwtParamsFieldIssuer)
}

// SetAudience sets the Audience field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwtParams) SetAudience(audience *string) {
	f.Audience = audience
	f.require(flowActionJwtSignJwtParamsFieldAudience)
}

// SetExpiresIn sets the ExpiresIn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtSignJwtParams) SetExpiresIn(expiresIn *string) {
	f.ExpiresIn = expiresIn
	f.require(flowActionJwtSignJwtParamsFieldExpiresIn)
}

func (f *FlowActionJwtSignJwtParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionJwtSignJwtParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionJwtSignJwtParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJwtSignJwtParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionJwtSignJwtParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJwtSignJwtParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionJwtSignJwtParamsPayload = map[string]interface{}

var (
	flowActionJwtVerifyJwtFieldId           = big.NewInt(1 << 0)
	flowActionJwtVerifyJwtFieldAlias        = big.NewInt(1 << 1)
	flowActionJwtVerifyJwtFieldAllowFailure = big.NewInt(1 << 2)
	flowActionJwtVerifyJwtFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionJwtVerifyJwtFieldParams       = big.NewInt(1 << 4)
)

type FlowActionJwtVerifyJwt struct {
	Id           string                        `json:"id" url:"id"`
	Alias        *string                       `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                         `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                         `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionJwtVerifyJwtParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJwtVerifyJwt) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionJwtVerifyJwt) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionJwtVerifyJwt) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionJwtVerifyJwt) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionJwtVerifyJwt) GetParams() *FlowActionJwtVerifyJwtParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionJwtVerifyJwt) Type() string {
	return f.type_
}

func (f *FlowActionJwtVerifyJwt) Action() string {
	return f.action
}

func (f *FlowActionJwtVerifyJwt) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJwtVerifyJwt) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwt) SetId(id string) {
	f.Id = id
	f.require(flowActionJwtVerifyJwtFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwt) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionJwtVerifyJwtFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwt) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionJwtVerifyJwtFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwt) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionJwtVerifyJwtFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwt) SetParams(params *FlowActionJwtVerifyJwtParams) {
	f.Params = params
	f.require(flowActionJwtVerifyJwtFieldParams)
}

func (f *FlowActionJwtVerifyJwt) UnmarshalJSON(data []byte) error {
	type embed FlowActionJwtVerifyJwt
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionJwtVerifyJwt(unmarshaler.embed)
	if unmarshaler.Type != "JWT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "JWT", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "VERIFY_JWT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "VERIFY_JWT", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJwtVerifyJwt) MarshalJSON() ([]byte, error) {
	type embed FlowActionJwtVerifyJwt
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "JWT",
		Action: "VERIFY_JWT",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJwtVerifyJwt) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionJwtVerifyJwtParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionJwtVerifyJwtParamsFieldToken        = big.NewInt(1 << 1)
	flowActionJwtVerifyJwtParamsFieldAudience     = big.NewInt(1 << 2)
	flowActionJwtVerifyJwtParamsFieldIssuer       = big.NewInt(1 << 3)
)

type FlowActionJwtVerifyJwtParams struct {
	ConnectionId string  `json:"connection_id" url:"connection_id"`
	Token        string  `json:"token" url:"token"`
	Audience     *string `json:"audience,omitempty" url:"audience,omitempty"`
	Issuer       *string `json:"issuer,omitempty" url:"issuer,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionJwtVerifyJwtParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionJwtVerifyJwtParams) GetToken() string {
	if f == nil {
		return ""
	}
	return f.Token
}

func (f *FlowActionJwtVerifyJwtParams) GetAudience() string {
	if f == nil || f.Audience == nil {
		return ""
	}
	return *f.Audience
}

func (f *FlowActionJwtVerifyJwtParams) GetIssuer() string {
	if f == nil || f.Issuer == nil {
		return ""
	}
	return *f.Issuer
}

func (f *FlowActionJwtVerifyJwtParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionJwtVerifyJwtParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwtParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionJwtVerifyJwtParamsFieldConnectionId)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwtParams) SetToken(token string) {
	f.Token = token
	f.require(flowActionJwtVerifyJwtParamsFieldToken)
}

// SetAudience sets the Audience field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwtParams) SetAudience(audience *string) {
	f.Audience = audience
	f.require(flowActionJwtVerifyJwtParamsFieldAudience)
}

// SetIssuer sets the Issuer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionJwtVerifyJwtParams) SetIssuer(issuer *string) {
	f.Issuer = issuer
	f.require(flowActionJwtVerifyJwtParamsFieldIssuer)
}

func (f *FlowActionJwtVerifyJwtParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionJwtVerifyJwtParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionJwtVerifyJwtParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionJwtVerifyJwtParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionJwtVerifyJwtParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionJwtVerifyJwtParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionMailchimp = *FlowActionMailchimpUpsertMember

var (
	flowActionMailchimpUpsertMemberFieldId           = big.NewInt(1 << 0)
	flowActionMailchimpUpsertMemberFieldAlias        = big.NewInt(1 << 1)
	flowActionMailchimpUpsertMemberFieldAllowFailure = big.NewInt(1 << 2)
	flowActionMailchimpUpsertMemberFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionMailchimpUpsertMemberFieldParams       = big.NewInt(1 << 4)
)

type FlowActionMailchimpUpsertMember struct {
	Id           string                                 `json:"id" url:"id"`
	Alias        *string                                `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                  `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                  `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionMailchimpUpsertMemberParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionMailchimpUpsertMember) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionMailchimpUpsertMember) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionMailchimpUpsertMember) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionMailchimpUpsertMember) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionMailchimpUpsertMember) GetParams() *FlowActionMailchimpUpsertMemberParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionMailchimpUpsertMember) Type() string {
	return f.type_
}

func (f *FlowActionMailchimpUpsertMember) Action() string {
	return f.action
}

func (f *FlowActionMailchimpUpsertMember) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionMailchimpUpsertMember) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMember) SetId(id string) {
	f.Id = id
	f.require(flowActionMailchimpUpsertMemberFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMember) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionMailchimpUpsertMemberFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMember) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionMailchimpUpsertMemberFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMember) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionMailchimpUpsertMemberFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMember) SetParams(params *FlowActionMailchimpUpsertMemberParams) {
	f.Params = params
	f.require(flowActionMailchimpUpsertMemberFieldParams)
}

func (f *FlowActionMailchimpUpsertMember) UnmarshalJSON(data []byte) error {
	type embed FlowActionMailchimpUpsertMember
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionMailchimpUpsertMember(unmarshaler.embed)
	if unmarshaler.Type != "MAILCHIMP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "MAILCHIMP", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPSERT_MEMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPSERT_MEMBER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionMailchimpUpsertMember) MarshalJSON() ([]byte, error) {
	type embed FlowActionMailchimpUpsertMember
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "MAILCHIMP",
		Action: "UPSERT_MEMBER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionMailchimpUpsertMember) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionMailchimpUpsertMemberParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionMailchimpUpsertMemberParamsFieldListId       = big.NewInt(1 << 1)
	flowActionMailchimpUpsertMemberParamsFieldMember       = big.NewInt(1 << 2)
)

type FlowActionMailchimpUpsertMemberParams struct {
	ConnectionId string                                       `json:"connection_id" url:"connection_id"`
	ListId       string                                       `json:"list_id" url:"list_id"`
	Member       *FlowActionMailchimpUpsertMemberParamsMember `json:"member" url:"member"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionMailchimpUpsertMemberParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionMailchimpUpsertMemberParams) GetListId() string {
	if f == nil {
		return ""
	}
	return f.ListId
}

func (f *FlowActionMailchimpUpsertMemberParams) GetMember() *FlowActionMailchimpUpsertMemberParamsMember {
	if f == nil {
		return nil
	}
	return f.Member
}

func (f *FlowActionMailchimpUpsertMemberParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionMailchimpUpsertMemberParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMemberParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionMailchimpUpsertMemberParamsFieldConnectionId)
}

// SetListId sets the ListId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMemberParams) SetListId(listId string) {
	f.ListId = listId
	f.require(flowActionMailchimpUpsertMemberParamsFieldListId)
}

// SetMember sets the Member field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMemberParams) SetMember(member *FlowActionMailchimpUpsertMemberParamsMember) {
	f.Member = member
	f.require(flowActionMailchimpUpsertMemberParamsFieldMember)
}

func (f *FlowActionMailchimpUpsertMemberParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionMailchimpUpsertMemberParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionMailchimpUpsertMemberParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionMailchimpUpsertMemberParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionMailchimpUpsertMemberParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionMailchimpUpsertMemberParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionMailchimpUpsertMemberParamsMemberFieldEmailAddress = big.NewInt(1 << 0)
	flowActionMailchimpUpsertMemberParamsMemberFieldStatusIfNew  = big.NewInt(1 << 1)
	flowActionMailchimpUpsertMemberParamsMemberFieldMergeFields  = big.NewInt(1 << 2)
)

type FlowActionMailchimpUpsertMemberParamsMember struct {
	EmailAddress string                                                  `json:"email_address" url:"email_address"`
	StatusIfNew  string                                                  `json:"status_if_new" url:"status_if_new"`
	MergeFields  *FlowActionMailchimpUpsertMemberParamsMemberMergeFields `json:"merge_fields,omitempty" url:"merge_fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) GetEmailAddress() string {
	if f == nil {
		return ""
	}
	return f.EmailAddress
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) GetStatusIfNew() string {
	if f == nil {
		return ""
	}
	return f.StatusIfNew
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) GetMergeFields() FlowActionMailchimpUpsertMemberParamsMemberMergeFields {
	if f == nil || f.MergeFields == nil {
		return nil
	}
	return *f.MergeFields
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetEmailAddress sets the EmailAddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMemberParamsMember) SetEmailAddress(emailAddress string) {
	f.EmailAddress = emailAddress
	f.require(flowActionMailchimpUpsertMemberParamsMemberFieldEmailAddress)
}

// SetStatusIfNew sets the StatusIfNew field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMemberParamsMember) SetStatusIfNew(statusIfNew string) {
	f.StatusIfNew = statusIfNew
	f.require(flowActionMailchimpUpsertMemberParamsMemberFieldStatusIfNew)
}

// SetMergeFields sets the MergeFields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailchimpUpsertMemberParamsMember) SetMergeFields(mergeFields *FlowActionMailchimpUpsertMemberParamsMemberMergeFields) {
	f.MergeFields = mergeFields
	f.require(flowActionMailchimpUpsertMemberParamsMemberFieldMergeFields)
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionMailchimpUpsertMemberParamsMember
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionMailchimpUpsertMemberParamsMember(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) MarshalJSON() ([]byte, error) {
	type embed FlowActionMailchimpUpsertMemberParamsMember
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionMailchimpUpsertMemberParamsMember) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionMailchimpUpsertMemberParamsMemberMergeFields = map[string]interface{}

type FlowActionMailjet = *FlowActionMailjetSendEmail

var (
	flowActionMailjetSendEmailFieldId           = big.NewInt(1 << 0)
	flowActionMailjetSendEmailFieldAlias        = big.NewInt(1 << 1)
	flowActionMailjetSendEmailFieldAllowFailure = big.NewInt(1 << 2)
	flowActionMailjetSendEmailFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionMailjetSendEmailFieldParams       = big.NewInt(1 << 4)
)

type FlowActionMailjetSendEmail struct {
	Id           string                            `json:"id" url:"id"`
	Alias        *string                           `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                             `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                             `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionMailjetSendEmailParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionMailjetSendEmail) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionMailjetSendEmail) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionMailjetSendEmail) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionMailjetSendEmail) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionMailjetSendEmail) GetParams() *FlowActionMailjetSendEmailParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionMailjetSendEmail) Type() string {
	return f.type_
}

func (f *FlowActionMailjetSendEmail) Action() string {
	return f.action
}

func (f *FlowActionMailjetSendEmail) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionMailjetSendEmail) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmail) SetId(id string) {
	f.Id = id
	f.require(flowActionMailjetSendEmailFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmail) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionMailjetSendEmailFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmail) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionMailjetSendEmailFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmail) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionMailjetSendEmailFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmail) SetParams(params *FlowActionMailjetSendEmailParams) {
	f.Params = params
	f.require(flowActionMailjetSendEmailFieldParams)
}

func (f *FlowActionMailjetSendEmail) UnmarshalJSON(data []byte) error {
	type embed FlowActionMailjetSendEmail
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionMailjetSendEmail(unmarshaler.embed)
	if unmarshaler.Type != "MAILJET" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "MAILJET", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_EMAIL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_EMAIL", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionMailjetSendEmail) MarshalJSON() ([]byte, error) {
	type embed FlowActionMailjetSendEmail
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "MAILJET",
		Action: "SEND_EMAIL",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionMailjetSendEmail) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionMailjetSendEmailParams struct {
	FlowActionMailjetSendEmailParamsContent    *FlowActionMailjetSendEmailParamsContent
	FlowActionMailjetSendEmailParamsTemplateId *FlowActionMailjetSendEmailParamsTemplateId

	typ string
}

func (f *FlowActionMailjetSendEmailParams) GetFlowActionMailjetSendEmailParamsContent() *FlowActionMailjetSendEmailParamsContent {
	if f == nil {
		return nil
	}
	return f.FlowActionMailjetSendEmailParamsContent
}

func (f *FlowActionMailjetSendEmailParams) GetFlowActionMailjetSendEmailParamsTemplateId() *FlowActionMailjetSendEmailParamsTemplateId {
	if f == nil {
		return nil
	}
	return f.FlowActionMailjetSendEmailParamsTemplateId
}

func (f *FlowActionMailjetSendEmailParams) UnmarshalJSON(data []byte) error {
	valueFlowActionMailjetSendEmailParamsContent := new(FlowActionMailjetSendEmailParamsContent)
	if err := json.Unmarshal(data, &valueFlowActionMailjetSendEmailParamsContent); err == nil {
		f.typ = "FlowActionMailjetSendEmailParamsContent"
		f.FlowActionMailjetSendEmailParamsContent = valueFlowActionMailjetSendEmailParamsContent
		return nil
	}
	valueFlowActionMailjetSendEmailParamsTemplateId := new(FlowActionMailjetSendEmailParamsTemplateId)
	if err := json.Unmarshal(data, &valueFlowActionMailjetSendEmailParamsTemplateId); err == nil {
		f.typ = "FlowActionMailjetSendEmailParamsTemplateId"
		f.FlowActionMailjetSendEmailParamsTemplateId = valueFlowActionMailjetSendEmailParamsTemplateId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionMailjetSendEmailParams) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionMailjetSendEmailParamsContent" || f.FlowActionMailjetSendEmailParamsContent != nil {
		return json.Marshal(f.FlowActionMailjetSendEmailParamsContent)
	}
	if f.typ == "FlowActionMailjetSendEmailParamsTemplateId" || f.FlowActionMailjetSendEmailParamsTemplateId != nil {
		return json.Marshal(f.FlowActionMailjetSendEmailParamsTemplateId)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionMailjetSendEmailParamsVisitor interface {
	VisitFlowActionMailjetSendEmailParamsContent(*FlowActionMailjetSendEmailParamsContent) error
	VisitFlowActionMailjetSendEmailParamsTemplateId(*FlowActionMailjetSendEmailParamsTemplateId) error
}

func (f *FlowActionMailjetSendEmailParams) Accept(visitor FlowActionMailjetSendEmailParamsVisitor) error {
	if f.typ == "FlowActionMailjetSendEmailParamsContent" || f.FlowActionMailjetSendEmailParamsContent != nil {
		return visitor.VisitFlowActionMailjetSendEmailParamsContent(f.FlowActionMailjetSendEmailParamsContent)
	}
	if f.typ == "FlowActionMailjetSendEmailParamsTemplateId" || f.FlowActionMailjetSendEmailParamsTemplateId != nil {
		return visitor.VisitFlowActionMailjetSendEmailParamsTemplateId(f.FlowActionMailjetSendEmailParamsTemplateId)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionMailjetSendEmailParamsContentFieldContent = big.NewInt(1 << 0)
)

type FlowActionMailjetSendEmailParamsContent struct {
	Content string `json:"content" url:"content"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FlowActionMailjetSendEmailParamsContent) GetContent() string {
	if f == nil {
		return ""
	}
	return f.Content
}

func (f *FlowActionMailjetSendEmailParamsContent) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FlowActionMailjetSendEmailParamsContent) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmailParamsContent) SetContent(content string) {
	f.Content = content
	f.require(flowActionMailjetSendEmailParamsContentFieldContent)
}

func (f *FlowActionMailjetSendEmailParamsContent) UnmarshalJSON(data []byte) error {
	type embed FlowActionMailjetSendEmailParamsContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionMailjetSendEmailParamsContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionMailjetSendEmailParamsContent) MarshalJSON() ([]byte, error) {
	type embed FlowActionMailjetSendEmailParamsContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, f.ExtraProperties)
}

func (f *FlowActionMailjetSendEmailParamsContent) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionMailjetSendEmailParamsTemplateIdFieldTemplateId = big.NewInt(1 << 0)
	flowActionMailjetSendEmailParamsTemplateIdFieldVariables  = big.NewInt(1 << 1)
)

type FlowActionMailjetSendEmailParamsTemplateId struct {
	TemplateId int                    `json:"template_id" url:"template_id"`
	Variables  map[string]interface{} `json:"variables,omitempty" url:"variables,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) GetTemplateId() int {
	if f == nil {
		return 0
	}
	return f.TemplateId
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) GetVariables() map[string]interface{} {
	if f == nil || f.Variables == nil {
		return nil
	}
	return f.Variables
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetTemplateId sets the TemplateId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmailParamsTemplateId) SetTemplateId(templateId int) {
	f.TemplateId = templateId
	f.require(flowActionMailjetSendEmailParamsTemplateIdFieldTemplateId)
}

// SetVariables sets the Variables field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionMailjetSendEmailParamsTemplateId) SetVariables(variables map[string]interface{}) {
	f.Variables = variables
	f.require(flowActionMailjetSendEmailParamsTemplateIdFieldVariables)
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) UnmarshalJSON(data []byte) error {
	type embed FlowActionMailjetSendEmailParamsTemplateId
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionMailjetSendEmailParamsTemplateId(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) MarshalJSON() ([]byte, error) {
	type embed FlowActionMailjetSendEmailParamsTemplateId
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, f.ExtraProperties)
}

func (f *FlowActionMailjetSendEmailParamsTemplateId) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionOtp struct {
	FlowActionOtpGenerateCode *FlowActionOtpGenerateCode
	FlowActionOtpVerifyCode   *FlowActionOtpVerifyCode

	typ string
}

func (f *FlowActionOtp) GetFlowActionOtpGenerateCode() *FlowActionOtpGenerateCode {
	if f == nil {
		return nil
	}
	return f.FlowActionOtpGenerateCode
}

func (f *FlowActionOtp) GetFlowActionOtpVerifyCode() *FlowActionOtpVerifyCode {
	if f == nil {
		return nil
	}
	return f.FlowActionOtpVerifyCode
}

func (f *FlowActionOtp) UnmarshalJSON(data []byte) error {
	valueFlowActionOtpGenerateCode := new(FlowActionOtpGenerateCode)
	if err := json.Unmarshal(data, &valueFlowActionOtpGenerateCode); err == nil {
		f.typ = "FlowActionOtpGenerateCode"
		f.FlowActionOtpGenerateCode = valueFlowActionOtpGenerateCode
		return nil
	}
	valueFlowActionOtpVerifyCode := new(FlowActionOtpVerifyCode)
	if err := json.Unmarshal(data, &valueFlowActionOtpVerifyCode); err == nil {
		f.typ = "FlowActionOtpVerifyCode"
		f.FlowActionOtpVerifyCode = valueFlowActionOtpVerifyCode
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionOtp) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionOtpGenerateCode" || f.FlowActionOtpGenerateCode != nil {
		return json.Marshal(f.FlowActionOtpGenerateCode)
	}
	if f.typ == "FlowActionOtpVerifyCode" || f.FlowActionOtpVerifyCode != nil {
		return json.Marshal(f.FlowActionOtpVerifyCode)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionOtpVisitor interface {
	VisitFlowActionOtpGenerateCode(*FlowActionOtpGenerateCode) error
	VisitFlowActionOtpVerifyCode(*FlowActionOtpVerifyCode) error
}

func (f *FlowActionOtp) Accept(visitor FlowActionOtpVisitor) error {
	if f.typ == "FlowActionOtpGenerateCode" || f.FlowActionOtpGenerateCode != nil {
		return visitor.VisitFlowActionOtpGenerateCode(f.FlowActionOtpGenerateCode)
	}
	if f.typ == "FlowActionOtpVerifyCode" || f.FlowActionOtpVerifyCode != nil {
		return visitor.VisitFlowActionOtpVerifyCode(f.FlowActionOtpVerifyCode)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionOtpGenerateCodeFieldId           = big.NewInt(1 << 0)
	flowActionOtpGenerateCodeFieldAlias        = big.NewInt(1 << 1)
	flowActionOtpGenerateCodeFieldAllowFailure = big.NewInt(1 << 2)
	flowActionOtpGenerateCodeFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionOtpGenerateCodeFieldParams       = big.NewInt(1 << 4)
)

type FlowActionOtpGenerateCode struct {
	Id           string                           `json:"id" url:"id"`
	Alias        *string                          `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                            `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                            `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionOtpGenerateCodeParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionOtpGenerateCode) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionOtpGenerateCode) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionOtpGenerateCode) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionOtpGenerateCode) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionOtpGenerateCode) GetParams() *FlowActionOtpGenerateCodeParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionOtpGenerateCode) Type() string {
	return f.type_
}

func (f *FlowActionOtpGenerateCode) Action() string {
	return f.action
}

func (f *FlowActionOtpGenerateCode) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionOtpGenerateCode) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCode) SetId(id string) {
	f.Id = id
	f.require(flowActionOtpGenerateCodeFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCode) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionOtpGenerateCodeFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCode) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionOtpGenerateCodeFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCode) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionOtpGenerateCodeFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCode) SetParams(params *FlowActionOtpGenerateCodeParams) {
	f.Params = params
	f.require(flowActionOtpGenerateCodeFieldParams)
}

func (f *FlowActionOtpGenerateCode) UnmarshalJSON(data []byte) error {
	type embed FlowActionOtpGenerateCode
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionOtpGenerateCode(unmarshaler.embed)
	if unmarshaler.Type != "OTP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "OTP", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "GENERATE_CODE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "GENERATE_CODE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionOtpGenerateCode) MarshalJSON() ([]byte, error) {
	type embed FlowActionOtpGenerateCode
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "OTP",
		Action: "GENERATE_CODE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionOtpGenerateCode) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionOtpGenerateCodeParamsFieldReference = big.NewInt(1 << 0)
	flowActionOtpGenerateCodeParamsFieldLength    = big.NewInt(1 << 1)
)

type FlowActionOtpGenerateCodeParams struct {
	Reference string `json:"reference" url:"reference"`
	Length    int    `json:"length" url:"length"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionOtpGenerateCodeParams) GetReference() string {
	if f == nil {
		return ""
	}
	return f.Reference
}

func (f *FlowActionOtpGenerateCodeParams) GetLength() int {
	if f == nil {
		return 0
	}
	return f.Length
}

func (f *FlowActionOtpGenerateCodeParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionOtpGenerateCodeParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetReference sets the Reference field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCodeParams) SetReference(reference string) {
	f.Reference = reference
	f.require(flowActionOtpGenerateCodeParamsFieldReference)
}

// SetLength sets the Length field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpGenerateCodeParams) SetLength(length int) {
	f.Length = length
	f.require(flowActionOtpGenerateCodeParamsFieldLength)
}

func (f *FlowActionOtpGenerateCodeParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionOtpGenerateCodeParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionOtpGenerateCodeParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionOtpGenerateCodeParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionOtpGenerateCodeParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionOtpGenerateCodeParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionOtpVerifyCodeFieldId           = big.NewInt(1 << 0)
	flowActionOtpVerifyCodeFieldAlias        = big.NewInt(1 << 1)
	flowActionOtpVerifyCodeFieldAllowFailure = big.NewInt(1 << 2)
	flowActionOtpVerifyCodeFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionOtpVerifyCodeFieldParams       = big.NewInt(1 << 4)
)

type FlowActionOtpVerifyCode struct {
	Id           string                         `json:"id" url:"id"`
	Alias        *string                        `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                          `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                          `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionOtpVerifyCodeParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionOtpVerifyCode) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionOtpVerifyCode) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionOtpVerifyCode) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionOtpVerifyCode) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionOtpVerifyCode) GetParams() *FlowActionOtpVerifyCodeParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionOtpVerifyCode) Type() string {
	return f.type_
}

func (f *FlowActionOtpVerifyCode) Action() string {
	return f.action
}

func (f *FlowActionOtpVerifyCode) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionOtpVerifyCode) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCode) SetId(id string) {
	f.Id = id
	f.require(flowActionOtpVerifyCodeFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCode) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionOtpVerifyCodeFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCode) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionOtpVerifyCodeFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCode) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionOtpVerifyCodeFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCode) SetParams(params *FlowActionOtpVerifyCodeParams) {
	f.Params = params
	f.require(flowActionOtpVerifyCodeFieldParams)
}

func (f *FlowActionOtpVerifyCode) UnmarshalJSON(data []byte) error {
	type embed FlowActionOtpVerifyCode
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionOtpVerifyCode(unmarshaler.embed)
	if unmarshaler.Type != "OTP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "OTP", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "VERIFY_CODE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "VERIFY_CODE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionOtpVerifyCode) MarshalJSON() ([]byte, error) {
	type embed FlowActionOtpVerifyCode
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "OTP",
		Action: "VERIFY_CODE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionOtpVerifyCode) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionOtpVerifyCodeParamsFieldReference = big.NewInt(1 << 0)
	flowActionOtpVerifyCodeParamsFieldCode      = big.NewInt(1 << 1)
)

type FlowActionOtpVerifyCodeParams struct {
	Reference string                             `json:"reference" url:"reference"`
	Code      *FlowActionOtpVerifyCodeParamsCode `json:"code" url:"code"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionOtpVerifyCodeParams) GetReference() string {
	if f == nil {
		return ""
	}
	return f.Reference
}

func (f *FlowActionOtpVerifyCodeParams) GetCode() *FlowActionOtpVerifyCodeParamsCode {
	if f == nil {
		return nil
	}
	return f.Code
}

func (f *FlowActionOtpVerifyCodeParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionOtpVerifyCodeParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetReference sets the Reference field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCodeParams) SetReference(reference string) {
	f.Reference = reference
	f.require(flowActionOtpVerifyCodeParamsFieldReference)
}

// SetCode sets the Code field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionOtpVerifyCodeParams) SetCode(code *FlowActionOtpVerifyCodeParamsCode) {
	f.Code = code
	f.require(flowActionOtpVerifyCodeParamsFieldCode)
}

func (f *FlowActionOtpVerifyCodeParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionOtpVerifyCodeParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionOtpVerifyCodeParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionOtpVerifyCodeParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionOtpVerifyCodeParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionOtpVerifyCodeParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionOtpVerifyCodeParamsCode struct {
	Integer int
	String  string

	typ string
}

func (f *FlowActionOtpVerifyCodeParamsCode) GetInteger() int {
	if f == nil {
		return 0
	}
	return f.Integer
}

func (f *FlowActionOtpVerifyCodeParamsCode) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionOtpVerifyCodeParamsCode) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		f.typ = "Integer"
		f.Integer = valueInteger
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionOtpVerifyCodeParamsCode) MarshalJSON() ([]byte, error) {
	if f.typ == "Integer" || f.Integer != 0 {
		return json.Marshal(f.Integer)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionOtpVerifyCodeParamsCodeVisitor interface {
	VisitInteger(int) error
	VisitString(string) error
}

func (f *FlowActionOtpVerifyCodeParamsCode) Accept(visitor FlowActionOtpVerifyCodeParamsCodeVisitor) error {
	if f.typ == "Integer" || f.Integer != 0 {
		return visitor.VisitInteger(f.Integer)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedrive struct {
	FlowActionPipedriveAddDeal         *FlowActionPipedriveAddDeal
	FlowActionPipedriveAddOrganization *FlowActionPipedriveAddOrganization
	FlowActionPipedriveAddPerson       *FlowActionPipedriveAddPerson

	typ string
}

func (f *FlowActionPipedrive) GetFlowActionPipedriveAddDeal() *FlowActionPipedriveAddDeal {
	if f == nil {
		return nil
	}
	return f.FlowActionPipedriveAddDeal
}

func (f *FlowActionPipedrive) GetFlowActionPipedriveAddOrganization() *FlowActionPipedriveAddOrganization {
	if f == nil {
		return nil
	}
	return f.FlowActionPipedriveAddOrganization
}

func (f *FlowActionPipedrive) GetFlowActionPipedriveAddPerson() *FlowActionPipedriveAddPerson {
	if f == nil {
		return nil
	}
	return f.FlowActionPipedriveAddPerson
}

func (f *FlowActionPipedrive) UnmarshalJSON(data []byte) error {
	valueFlowActionPipedriveAddDeal := new(FlowActionPipedriveAddDeal)
	if err := json.Unmarshal(data, &valueFlowActionPipedriveAddDeal); err == nil {
		f.typ = "FlowActionPipedriveAddDeal"
		f.FlowActionPipedriveAddDeal = valueFlowActionPipedriveAddDeal
		return nil
	}
	valueFlowActionPipedriveAddOrganization := new(FlowActionPipedriveAddOrganization)
	if err := json.Unmarshal(data, &valueFlowActionPipedriveAddOrganization); err == nil {
		f.typ = "FlowActionPipedriveAddOrganization"
		f.FlowActionPipedriveAddOrganization = valueFlowActionPipedriveAddOrganization
		return nil
	}
	valueFlowActionPipedriveAddPerson := new(FlowActionPipedriveAddPerson)
	if err := json.Unmarshal(data, &valueFlowActionPipedriveAddPerson); err == nil {
		f.typ = "FlowActionPipedriveAddPerson"
		f.FlowActionPipedriveAddPerson = valueFlowActionPipedriveAddPerson
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedrive) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionPipedriveAddDeal" || f.FlowActionPipedriveAddDeal != nil {
		return json.Marshal(f.FlowActionPipedriveAddDeal)
	}
	if f.typ == "FlowActionPipedriveAddOrganization" || f.FlowActionPipedriveAddOrganization != nil {
		return json.Marshal(f.FlowActionPipedriveAddOrganization)
	}
	if f.typ == "FlowActionPipedriveAddPerson" || f.FlowActionPipedriveAddPerson != nil {
		return json.Marshal(f.FlowActionPipedriveAddPerson)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveVisitor interface {
	VisitFlowActionPipedriveAddDeal(*FlowActionPipedriveAddDeal) error
	VisitFlowActionPipedriveAddOrganization(*FlowActionPipedriveAddOrganization) error
	VisitFlowActionPipedriveAddPerson(*FlowActionPipedriveAddPerson) error
}

func (f *FlowActionPipedrive) Accept(visitor FlowActionPipedriveVisitor) error {
	if f.typ == "FlowActionPipedriveAddDeal" || f.FlowActionPipedriveAddDeal != nil {
		return visitor.VisitFlowActionPipedriveAddDeal(f.FlowActionPipedriveAddDeal)
	}
	if f.typ == "FlowActionPipedriveAddOrganization" || f.FlowActionPipedriveAddOrganization != nil {
		return visitor.VisitFlowActionPipedriveAddOrganization(f.FlowActionPipedriveAddOrganization)
	}
	if f.typ == "FlowActionPipedriveAddPerson" || f.FlowActionPipedriveAddPerson != nil {
		return visitor.VisitFlowActionPipedriveAddPerson(f.FlowActionPipedriveAddPerson)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionPipedriveAddDealFieldId           = big.NewInt(1 << 0)
	flowActionPipedriveAddDealFieldAlias        = big.NewInt(1 << 1)
	flowActionPipedriveAddDealFieldAllowFailure = big.NewInt(1 << 2)
	flowActionPipedriveAddDealFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionPipedriveAddDealFieldParams       = big.NewInt(1 << 4)
)

type FlowActionPipedriveAddDeal struct {
	Id           string                            `json:"id" url:"id"`
	Alias        *string                           `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                             `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                             `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionPipedriveAddDealParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionPipedriveAddDeal) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionPipedriveAddDeal) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionPipedriveAddDeal) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionPipedriveAddDeal) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionPipedriveAddDeal) GetParams() *FlowActionPipedriveAddDealParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionPipedriveAddDeal) Type() string {
	return f.type_
}

func (f *FlowActionPipedriveAddDeal) Action() string {
	return f.action
}

func (f *FlowActionPipedriveAddDeal) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionPipedriveAddDeal) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDeal) SetId(id string) {
	f.Id = id
	f.require(flowActionPipedriveAddDealFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDeal) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionPipedriveAddDealFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDeal) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionPipedriveAddDealFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDeal) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionPipedriveAddDealFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDeal) SetParams(params *FlowActionPipedriveAddDealParams) {
	f.Params = params
	f.require(flowActionPipedriveAddDealFieldParams)
}

func (f *FlowActionPipedriveAddDeal) UnmarshalJSON(data []byte) error {
	type embed FlowActionPipedriveAddDeal
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionPipedriveAddDeal(unmarshaler.embed)
	if unmarshaler.Type != "PIPEDRIVE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "PIPEDRIVE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ADD_DEAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ADD_DEAL", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionPipedriveAddDeal) MarshalJSON() ([]byte, error) {
	type embed FlowActionPipedriveAddDeal
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "PIPEDRIVE",
		Action: "ADD_DEAL",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionPipedriveAddDeal) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionPipedriveAddDealParamsFieldConnectionId   = big.NewInt(1 << 0)
	flowActionPipedriveAddDealParamsFieldTitle          = big.NewInt(1 << 1)
	flowActionPipedriveAddDealParamsFieldValue          = big.NewInt(1 << 2)
	flowActionPipedriveAddDealParamsFieldUserId         = big.NewInt(1 << 3)
	flowActionPipedriveAddDealParamsFieldPersonId       = big.NewInt(1 << 4)
	flowActionPipedriveAddDealParamsFieldOrganizationId = big.NewInt(1 << 5)
	flowActionPipedriveAddDealParamsFieldStageId        = big.NewInt(1 << 6)
	flowActionPipedriveAddDealParamsFieldFields         = big.NewInt(1 << 7)
)

type FlowActionPipedriveAddDealParams struct {
	ConnectionId   string                                          `json:"connection_id" url:"connection_id"`
	Title          string                                          `json:"title" url:"title"`
	Value          *string                                         `json:"value,omitempty" url:"value,omitempty"`
	UserId         *FlowActionPipedriveAddDealParamsUserId         `json:"user_id,omitempty" url:"user_id,omitempty"`
	PersonId       *FlowActionPipedriveAddDealParamsPersonId       `json:"person_id,omitempty" url:"person_id,omitempty"`
	OrganizationId *FlowActionPipedriveAddDealParamsOrganizationId `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	StageId        *FlowActionPipedriveAddDealParamsStageId        `json:"stage_id,omitempty" url:"stage_id,omitempty"`
	Fields         *FlowActionPipedriveAddDealParamsFields         `json:"fields,omitempty" url:"fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionPipedriveAddDealParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionPipedriveAddDealParams) GetTitle() string {
	if f == nil {
		return ""
	}
	return f.Title
}

func (f *FlowActionPipedriveAddDealParams) GetValue() string {
	if f == nil || f.Value == nil {
		return ""
	}
	return *f.Value
}

func (f *FlowActionPipedriveAddDealParams) GetUserId() FlowActionPipedriveAddDealParamsUserId {
	if f == nil || f.UserId == nil {
		return FlowActionPipedriveAddDealParamsUserId{}
	}
	return *f.UserId
}

func (f *FlowActionPipedriveAddDealParams) GetPersonId() FlowActionPipedriveAddDealParamsPersonId {
	if f == nil || f.PersonId == nil {
		return FlowActionPipedriveAddDealParamsPersonId{}
	}
	return *f.PersonId
}

func (f *FlowActionPipedriveAddDealParams) GetOrganizationId() FlowActionPipedriveAddDealParamsOrganizationId {
	if f == nil || f.OrganizationId == nil {
		return FlowActionPipedriveAddDealParamsOrganizationId{}
	}
	return *f.OrganizationId
}

func (f *FlowActionPipedriveAddDealParams) GetStageId() FlowActionPipedriveAddDealParamsStageId {
	if f == nil || f.StageId == nil {
		return FlowActionPipedriveAddDealParamsStageId{}
	}
	return *f.StageId
}

func (f *FlowActionPipedriveAddDealParams) GetFields() FlowActionPipedriveAddDealParamsFields {
	if f == nil || f.Fields == nil {
		return nil
	}
	return *f.Fields
}

func (f *FlowActionPipedriveAddDealParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionPipedriveAddDealParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionPipedriveAddDealParamsFieldConnectionId)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetTitle(title string) {
	f.Title = title
	f.require(flowActionPipedriveAddDealParamsFieldTitle)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetValue(value *string) {
	f.Value = value
	f.require(flowActionPipedriveAddDealParamsFieldValue)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetUserId(userId *FlowActionPipedriveAddDealParamsUserId) {
	f.UserId = userId
	f.require(flowActionPipedriveAddDealParamsFieldUserId)
}

// SetPersonId sets the PersonId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetPersonId(personId *FlowActionPipedriveAddDealParamsPersonId) {
	f.PersonId = personId
	f.require(flowActionPipedriveAddDealParamsFieldPersonId)
}

// SetOrganizationId sets the OrganizationId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetOrganizationId(organizationId *FlowActionPipedriveAddDealParamsOrganizationId) {
	f.OrganizationId = organizationId
	f.require(flowActionPipedriveAddDealParamsFieldOrganizationId)
}

// SetStageId sets the StageId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetStageId(stageId *FlowActionPipedriveAddDealParamsStageId) {
	f.StageId = stageId
	f.require(flowActionPipedriveAddDealParamsFieldStageId)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddDealParams) SetFields(fields *FlowActionPipedriveAddDealParamsFields) {
	f.Fields = fields
	f.require(flowActionPipedriveAddDealParamsFieldFields)
}

func (f *FlowActionPipedriveAddDealParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionPipedriveAddDealParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionPipedriveAddDealParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionPipedriveAddDealParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionPipedriveAddDealParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionPipedriveAddDealParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionPipedriveAddDealParamsFields = map[string]interface{}

type FlowActionPipedriveAddDealParamsOrganizationId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddDealParamsOrganizationId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddDealParamsOrganizationId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddDealParamsOrganizationId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddDealParamsOrganizationId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsOrganizationIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddDealParamsOrganizationId) Accept(visitor FlowActionPipedriveAddDealParamsOrganizationIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsPersonId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddDealParamsPersonId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddDealParamsPersonId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddDealParamsPersonId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddDealParamsPersonId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsPersonIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddDealParamsPersonId) Accept(visitor FlowActionPipedriveAddDealParamsPersonIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsStageId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddDealParamsStageId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddDealParamsStageId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddDealParamsStageId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddDealParamsStageId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsStageIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddDealParamsStageId) Accept(visitor FlowActionPipedriveAddDealParamsStageIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsUserId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddDealParamsUserId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddDealParamsUserId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddDealParamsUserId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddDealParamsUserId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddDealParamsUserIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddDealParamsUserId) Accept(visitor FlowActionPipedriveAddDealParamsUserIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionPipedriveAddOrganizationFieldId           = big.NewInt(1 << 0)
	flowActionPipedriveAddOrganizationFieldAlias        = big.NewInt(1 << 1)
	flowActionPipedriveAddOrganizationFieldAllowFailure = big.NewInt(1 << 2)
	flowActionPipedriveAddOrganizationFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionPipedriveAddOrganizationFieldParams       = big.NewInt(1 << 4)
)

type FlowActionPipedriveAddOrganization struct {
	Id           string                                    `json:"id" url:"id"`
	Alias        *string                                   `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                     `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                     `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionPipedriveAddOrganizationParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionPipedriveAddOrganization) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionPipedriveAddOrganization) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionPipedriveAddOrganization) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionPipedriveAddOrganization) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionPipedriveAddOrganization) GetParams() *FlowActionPipedriveAddOrganizationParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionPipedriveAddOrganization) Type() string {
	return f.type_
}

func (f *FlowActionPipedriveAddOrganization) Action() string {
	return f.action
}

func (f *FlowActionPipedriveAddOrganization) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionPipedriveAddOrganization) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganization) SetId(id string) {
	f.Id = id
	f.require(flowActionPipedriveAddOrganizationFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganization) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionPipedriveAddOrganizationFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganization) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionPipedriveAddOrganizationFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganization) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionPipedriveAddOrganizationFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganization) SetParams(params *FlowActionPipedriveAddOrganizationParams) {
	f.Params = params
	f.require(flowActionPipedriveAddOrganizationFieldParams)
}

func (f *FlowActionPipedriveAddOrganization) UnmarshalJSON(data []byte) error {
	type embed FlowActionPipedriveAddOrganization
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionPipedriveAddOrganization(unmarshaler.embed)
	if unmarshaler.Type != "PIPEDRIVE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "PIPEDRIVE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ADD_ORGANIZATION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ADD_ORGANIZATION", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionPipedriveAddOrganization) MarshalJSON() ([]byte, error) {
	type embed FlowActionPipedriveAddOrganization
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "PIPEDRIVE",
		Action: "ADD_ORGANIZATION",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionPipedriveAddOrganization) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionPipedriveAddOrganizationParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionPipedriveAddOrganizationParamsFieldName         = big.NewInt(1 << 1)
	flowActionPipedriveAddOrganizationParamsFieldOwnerId      = big.NewInt(1 << 2)
	flowActionPipedriveAddOrganizationParamsFieldFields       = big.NewInt(1 << 3)
)

type FlowActionPipedriveAddOrganizationParams struct {
	ConnectionId string                                           `json:"connection_id" url:"connection_id"`
	Name         string                                           `json:"name" url:"name"`
	OwnerId      *FlowActionPipedriveAddOrganizationParamsOwnerId `json:"owner_id,omitempty" url:"owner_id,omitempty"`
	Fields       *FlowActionPipedriveAddOrganizationParamsFields  `json:"fields,omitempty" url:"fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionPipedriveAddOrganizationParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionPipedriveAddOrganizationParams) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FlowActionPipedriveAddOrganizationParams) GetOwnerId() FlowActionPipedriveAddOrganizationParamsOwnerId {
	if f == nil || f.OwnerId == nil {
		return FlowActionPipedriveAddOrganizationParamsOwnerId{}
	}
	return *f.OwnerId
}

func (f *FlowActionPipedriveAddOrganizationParams) GetFields() FlowActionPipedriveAddOrganizationParamsFields {
	if f == nil || f.Fields == nil {
		return nil
	}
	return *f.Fields
}

func (f *FlowActionPipedriveAddOrganizationParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionPipedriveAddOrganizationParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganizationParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionPipedriveAddOrganizationParamsFieldConnectionId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganizationParams) SetName(name string) {
	f.Name = name
	f.require(flowActionPipedriveAddOrganizationParamsFieldName)
}

// SetOwnerId sets the OwnerId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganizationParams) SetOwnerId(ownerId *FlowActionPipedriveAddOrganizationParamsOwnerId) {
	f.OwnerId = ownerId
	f.require(flowActionPipedriveAddOrganizationParamsFieldOwnerId)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddOrganizationParams) SetFields(fields *FlowActionPipedriveAddOrganizationParamsFields) {
	f.Fields = fields
	f.require(flowActionPipedriveAddOrganizationParamsFieldFields)
}

func (f *FlowActionPipedriveAddOrganizationParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionPipedriveAddOrganizationParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionPipedriveAddOrganizationParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionPipedriveAddOrganizationParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionPipedriveAddOrganizationParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionPipedriveAddOrganizationParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionPipedriveAddOrganizationParamsFields = map[string]interface{}

type FlowActionPipedriveAddOrganizationParamsOwnerId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddOrganizationParamsOwnerId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddOrganizationParamsOwnerId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddOrganizationParamsOwnerId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddOrganizationParamsOwnerId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddOrganizationParamsOwnerIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddOrganizationParamsOwnerId) Accept(visitor FlowActionPipedriveAddOrganizationParamsOwnerIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionPipedriveAddPersonFieldId           = big.NewInt(1 << 0)
	flowActionPipedriveAddPersonFieldAlias        = big.NewInt(1 << 1)
	flowActionPipedriveAddPersonFieldAllowFailure = big.NewInt(1 << 2)
	flowActionPipedriveAddPersonFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionPipedriveAddPersonFieldParams       = big.NewInt(1 << 4)
)

type FlowActionPipedriveAddPerson struct {
	Id           string                              `json:"id" url:"id"`
	Alias        *string                             `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                               `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                               `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionPipedriveAddPersonParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionPipedriveAddPerson) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionPipedriveAddPerson) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionPipedriveAddPerson) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionPipedriveAddPerson) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionPipedriveAddPerson) GetParams() *FlowActionPipedriveAddPersonParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionPipedriveAddPerson) Type() string {
	return f.type_
}

func (f *FlowActionPipedriveAddPerson) Action() string {
	return f.action
}

func (f *FlowActionPipedriveAddPerson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionPipedriveAddPerson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPerson) SetId(id string) {
	f.Id = id
	f.require(flowActionPipedriveAddPersonFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPerson) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionPipedriveAddPersonFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPerson) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionPipedriveAddPersonFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPerson) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionPipedriveAddPersonFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPerson) SetParams(params *FlowActionPipedriveAddPersonParams) {
	f.Params = params
	f.require(flowActionPipedriveAddPersonFieldParams)
}

func (f *FlowActionPipedriveAddPerson) UnmarshalJSON(data []byte) error {
	type embed FlowActionPipedriveAddPerson
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionPipedriveAddPerson(unmarshaler.embed)
	if unmarshaler.Type != "PIPEDRIVE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "PIPEDRIVE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ADD_PERSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ADD_PERSON", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionPipedriveAddPerson) MarshalJSON() ([]byte, error) {
	type embed FlowActionPipedriveAddPerson
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "PIPEDRIVE",
		Action: "ADD_PERSON",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionPipedriveAddPerson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionPipedriveAddPersonParamsFieldConnectionId   = big.NewInt(1 << 0)
	flowActionPipedriveAddPersonParamsFieldName           = big.NewInt(1 << 1)
	flowActionPipedriveAddPersonParamsFieldEmail          = big.NewInt(1 << 2)
	flowActionPipedriveAddPersonParamsFieldPhone          = big.NewInt(1 << 3)
	flowActionPipedriveAddPersonParamsFieldOwnerId        = big.NewInt(1 << 4)
	flowActionPipedriveAddPersonParamsFieldOrganizationId = big.NewInt(1 << 5)
	flowActionPipedriveAddPersonParamsFieldFields         = big.NewInt(1 << 6)
)

type FlowActionPipedriveAddPersonParams struct {
	ConnectionId   string                                            `json:"connection_id" url:"connection_id"`
	Name           string                                            `json:"name" url:"name"`
	Email          *string                                           `json:"email,omitempty" url:"email,omitempty"`
	Phone          *string                                           `json:"phone,omitempty" url:"phone,omitempty"`
	OwnerId        *FlowActionPipedriveAddPersonParamsOwnerId        `json:"owner_id,omitempty" url:"owner_id,omitempty"`
	OrganizationId *FlowActionPipedriveAddPersonParamsOrganizationId `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Fields         *FlowActionPipedriveAddPersonParamsFields         `json:"fields,omitempty" url:"fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionPipedriveAddPersonParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionPipedriveAddPersonParams) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FlowActionPipedriveAddPersonParams) GetEmail() string {
	if f == nil || f.Email == nil {
		return ""
	}
	return *f.Email
}

func (f *FlowActionPipedriveAddPersonParams) GetPhone() string {
	if f == nil || f.Phone == nil {
		return ""
	}
	return *f.Phone
}

func (f *FlowActionPipedriveAddPersonParams) GetOwnerId() FlowActionPipedriveAddPersonParamsOwnerId {
	if f == nil || f.OwnerId == nil {
		return FlowActionPipedriveAddPersonParamsOwnerId{}
	}
	return *f.OwnerId
}

func (f *FlowActionPipedriveAddPersonParams) GetOrganizationId() FlowActionPipedriveAddPersonParamsOrganizationId {
	if f == nil || f.OrganizationId == nil {
		return FlowActionPipedriveAddPersonParamsOrganizationId{}
	}
	return *f.OrganizationId
}

func (f *FlowActionPipedriveAddPersonParams) GetFields() FlowActionPipedriveAddPersonParamsFields {
	if f == nil || f.Fields == nil {
		return nil
	}
	return *f.Fields
}

func (f *FlowActionPipedriveAddPersonParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionPipedriveAddPersonParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionPipedriveAddPersonParamsFieldConnectionId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetName(name string) {
	f.Name = name
	f.require(flowActionPipedriveAddPersonParamsFieldName)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetEmail(email *string) {
	f.Email = email
	f.require(flowActionPipedriveAddPersonParamsFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetPhone(phone *string) {
	f.Phone = phone
	f.require(flowActionPipedriveAddPersonParamsFieldPhone)
}

// SetOwnerId sets the OwnerId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetOwnerId(ownerId *FlowActionPipedriveAddPersonParamsOwnerId) {
	f.OwnerId = ownerId
	f.require(flowActionPipedriveAddPersonParamsFieldOwnerId)
}

// SetOrganizationId sets the OrganizationId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetOrganizationId(organizationId *FlowActionPipedriveAddPersonParamsOrganizationId) {
	f.OrganizationId = organizationId
	f.require(flowActionPipedriveAddPersonParamsFieldOrganizationId)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionPipedriveAddPersonParams) SetFields(fields *FlowActionPipedriveAddPersonParamsFields) {
	f.Fields = fields
	f.require(flowActionPipedriveAddPersonParamsFieldFields)
}

func (f *FlowActionPipedriveAddPersonParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionPipedriveAddPersonParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionPipedriveAddPersonParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionPipedriveAddPersonParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionPipedriveAddPersonParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionPipedriveAddPersonParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionPipedriveAddPersonParamsFields = map[string]interface{}

type FlowActionPipedriveAddPersonParamsOrganizationId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddPersonParamsOrganizationId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddPersonParamsOrganizationId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddPersonParamsOrganizationId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddPersonParamsOrganizationId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddPersonParamsOrganizationIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddPersonParamsOrganizationId) Accept(visitor FlowActionPipedriveAddPersonParamsOrganizationIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddPersonParamsOwnerId struct {
	String string
	Double float64

	typ string
}

func (f *FlowActionPipedriveAddPersonParamsOwnerId) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionPipedriveAddPersonParamsOwnerId) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FlowActionPipedriveAddPersonParamsOwnerId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionPipedriveAddPersonParamsOwnerId) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionPipedriveAddPersonParamsOwnerIdVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FlowActionPipedriveAddPersonParamsOwnerId) Accept(visitor FlowActionPipedriveAddPersonParamsOwnerIdVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionSalesforce struct {
	FlowActionSalesforceCreateLead  *FlowActionSalesforceCreateLead
	FlowActionSalesforceGetLead     *FlowActionSalesforceGetLead
	FlowActionSalesforceSearchLeads *FlowActionSalesforceSearchLeads
	FlowActionSalesforceUpdateLead  *FlowActionSalesforceUpdateLead

	typ string
}

func (f *FlowActionSalesforce) GetFlowActionSalesforceCreateLead() *FlowActionSalesforceCreateLead {
	if f == nil {
		return nil
	}
	return f.FlowActionSalesforceCreateLead
}

func (f *FlowActionSalesforce) GetFlowActionSalesforceGetLead() *FlowActionSalesforceGetLead {
	if f == nil {
		return nil
	}
	return f.FlowActionSalesforceGetLead
}

func (f *FlowActionSalesforce) GetFlowActionSalesforceSearchLeads() *FlowActionSalesforceSearchLeads {
	if f == nil {
		return nil
	}
	return f.FlowActionSalesforceSearchLeads
}

func (f *FlowActionSalesforce) GetFlowActionSalesforceUpdateLead() *FlowActionSalesforceUpdateLead {
	if f == nil {
		return nil
	}
	return f.FlowActionSalesforceUpdateLead
}

func (f *FlowActionSalesforce) UnmarshalJSON(data []byte) error {
	valueFlowActionSalesforceCreateLead := new(FlowActionSalesforceCreateLead)
	if err := json.Unmarshal(data, &valueFlowActionSalesforceCreateLead); err == nil {
		f.typ = "FlowActionSalesforceCreateLead"
		f.FlowActionSalesforceCreateLead = valueFlowActionSalesforceCreateLead
		return nil
	}
	valueFlowActionSalesforceGetLead := new(FlowActionSalesforceGetLead)
	if err := json.Unmarshal(data, &valueFlowActionSalesforceGetLead); err == nil {
		f.typ = "FlowActionSalesforceGetLead"
		f.FlowActionSalesforceGetLead = valueFlowActionSalesforceGetLead
		return nil
	}
	valueFlowActionSalesforceSearchLeads := new(FlowActionSalesforceSearchLeads)
	if err := json.Unmarshal(data, &valueFlowActionSalesforceSearchLeads); err == nil {
		f.typ = "FlowActionSalesforceSearchLeads"
		f.FlowActionSalesforceSearchLeads = valueFlowActionSalesforceSearchLeads
		return nil
	}
	valueFlowActionSalesforceUpdateLead := new(FlowActionSalesforceUpdateLead)
	if err := json.Unmarshal(data, &valueFlowActionSalesforceUpdateLead); err == nil {
		f.typ = "FlowActionSalesforceUpdateLead"
		f.FlowActionSalesforceUpdateLead = valueFlowActionSalesforceUpdateLead
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionSalesforce) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionSalesforceCreateLead" || f.FlowActionSalesforceCreateLead != nil {
		return json.Marshal(f.FlowActionSalesforceCreateLead)
	}
	if f.typ == "FlowActionSalesforceGetLead" || f.FlowActionSalesforceGetLead != nil {
		return json.Marshal(f.FlowActionSalesforceGetLead)
	}
	if f.typ == "FlowActionSalesforceSearchLeads" || f.FlowActionSalesforceSearchLeads != nil {
		return json.Marshal(f.FlowActionSalesforceSearchLeads)
	}
	if f.typ == "FlowActionSalesforceUpdateLead" || f.FlowActionSalesforceUpdateLead != nil {
		return json.Marshal(f.FlowActionSalesforceUpdateLead)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionSalesforceVisitor interface {
	VisitFlowActionSalesforceCreateLead(*FlowActionSalesforceCreateLead) error
	VisitFlowActionSalesforceGetLead(*FlowActionSalesforceGetLead) error
	VisitFlowActionSalesforceSearchLeads(*FlowActionSalesforceSearchLeads) error
	VisitFlowActionSalesforceUpdateLead(*FlowActionSalesforceUpdateLead) error
}

func (f *FlowActionSalesforce) Accept(visitor FlowActionSalesforceVisitor) error {
	if f.typ == "FlowActionSalesforceCreateLead" || f.FlowActionSalesforceCreateLead != nil {
		return visitor.VisitFlowActionSalesforceCreateLead(f.FlowActionSalesforceCreateLead)
	}
	if f.typ == "FlowActionSalesforceGetLead" || f.FlowActionSalesforceGetLead != nil {
		return visitor.VisitFlowActionSalesforceGetLead(f.FlowActionSalesforceGetLead)
	}
	if f.typ == "FlowActionSalesforceSearchLeads" || f.FlowActionSalesforceSearchLeads != nil {
		return visitor.VisitFlowActionSalesforceSearchLeads(f.FlowActionSalesforceSearchLeads)
	}
	if f.typ == "FlowActionSalesforceUpdateLead" || f.FlowActionSalesforceUpdateLead != nil {
		return visitor.VisitFlowActionSalesforceUpdateLead(f.FlowActionSalesforceUpdateLead)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionSalesforceCreateLeadFieldId           = big.NewInt(1 << 0)
	flowActionSalesforceCreateLeadFieldAlias        = big.NewInt(1 << 1)
	flowActionSalesforceCreateLeadFieldAllowFailure = big.NewInt(1 << 2)
	flowActionSalesforceCreateLeadFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionSalesforceCreateLeadFieldParams       = big.NewInt(1 << 4)
)

type FlowActionSalesforceCreateLead struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionSalesforceCreateLeadParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceCreateLead) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionSalesforceCreateLead) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionSalesforceCreateLead) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionSalesforceCreateLead) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionSalesforceCreateLead) GetParams() *FlowActionSalesforceCreateLeadParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionSalesforceCreateLead) Type() string {
	return f.type_
}

func (f *FlowActionSalesforceCreateLead) Action() string {
	return f.action
}

func (f *FlowActionSalesforceCreateLead) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceCreateLead) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLead) SetId(id string) {
	f.Id = id
	f.require(flowActionSalesforceCreateLeadFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLead) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionSalesforceCreateLeadFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLead) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionSalesforceCreateLeadFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLead) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionSalesforceCreateLeadFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLead) SetParams(params *FlowActionSalesforceCreateLeadParams) {
	f.Params = params
	f.require(flowActionSalesforceCreateLeadFieldParams)
}

func (f *FlowActionSalesforceCreateLead) UnmarshalJSON(data []byte) error {
	type embed FlowActionSalesforceCreateLead
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSalesforceCreateLead(unmarshaler.embed)
	if unmarshaler.Type != "SALESFORCE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SALESFORCE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "CREATE_LEAD" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CREATE_LEAD", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceCreateLead) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceCreateLead
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "SALESFORCE",
		Action: "CREATE_LEAD",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceCreateLead) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSalesforceCreateLeadParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionSalesforceCreateLeadParamsFieldFirstName    = big.NewInt(1 << 1)
	flowActionSalesforceCreateLeadParamsFieldLastName     = big.NewInt(1 << 2)
	flowActionSalesforceCreateLeadParamsFieldCompany      = big.NewInt(1 << 3)
	flowActionSalesforceCreateLeadParamsFieldEmail        = big.NewInt(1 << 4)
	flowActionSalesforceCreateLeadParamsFieldPhone        = big.NewInt(1 << 5)
	flowActionSalesforceCreateLeadParamsFieldPayload      = big.NewInt(1 << 6)
)

type FlowActionSalesforceCreateLeadParams struct {
	ConnectionId string                                       `json:"connection_id" url:"connection_id"`
	FirstName    *string                                      `json:"first_name,omitempty" url:"first_name,omitempty"`
	LastName     string                                       `json:"last_name" url:"last_name"`
	Company      string                                       `json:"company" url:"company"`
	Email        *string                                      `json:"email,omitempty" url:"email,omitempty"`
	Phone        *string                                      `json:"phone,omitempty" url:"phone,omitempty"`
	Payload      *FlowActionSalesforceCreateLeadParamsPayload `json:"payload,omitempty" url:"payload,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceCreateLeadParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionSalesforceCreateLeadParams) GetFirstName() string {
	if f == nil || f.FirstName == nil {
		return ""
	}
	return *f.FirstName
}

func (f *FlowActionSalesforceCreateLeadParams) GetLastName() string {
	if f == nil {
		return ""
	}
	return f.LastName
}

func (f *FlowActionSalesforceCreateLeadParams) GetCompany() string {
	if f == nil {
		return ""
	}
	return f.Company
}

func (f *FlowActionSalesforceCreateLeadParams) GetEmail() string {
	if f == nil || f.Email == nil {
		return ""
	}
	return *f.Email
}

func (f *FlowActionSalesforceCreateLeadParams) GetPhone() string {
	if f == nil || f.Phone == nil {
		return ""
	}
	return *f.Phone
}

func (f *FlowActionSalesforceCreateLeadParams) GetPayload() FlowActionSalesforceCreateLeadParamsPayload {
	if f == nil || f.Payload == nil {
		return nil
	}
	return *f.Payload
}

func (f *FlowActionSalesforceCreateLeadParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceCreateLeadParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionSalesforceCreateLeadParamsFieldConnectionId)
}

// SetFirstName sets the FirstName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetFirstName(firstName *string) {
	f.FirstName = firstName
	f.require(flowActionSalesforceCreateLeadParamsFieldFirstName)
}

// SetLastName sets the LastName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetLastName(lastName string) {
	f.LastName = lastName
	f.require(flowActionSalesforceCreateLeadParamsFieldLastName)
}

// SetCompany sets the Company field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetCompany(company string) {
	f.Company = company
	f.require(flowActionSalesforceCreateLeadParamsFieldCompany)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetEmail(email *string) {
	f.Email = email
	f.require(flowActionSalesforceCreateLeadParamsFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetPhone(phone *string) {
	f.Phone = phone
	f.require(flowActionSalesforceCreateLeadParamsFieldPhone)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceCreateLeadParams) SetPayload(payload *FlowActionSalesforceCreateLeadParamsPayload) {
	f.Payload = payload
	f.require(flowActionSalesforceCreateLeadParamsFieldPayload)
}

func (f *FlowActionSalesforceCreateLeadParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSalesforceCreateLeadParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSalesforceCreateLeadParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceCreateLeadParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceCreateLeadParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceCreateLeadParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionSalesforceCreateLeadParamsPayload = map[string]interface{}

var (
	flowActionSalesforceGetLeadFieldId           = big.NewInt(1 << 0)
	flowActionSalesforceGetLeadFieldAlias        = big.NewInt(1 << 1)
	flowActionSalesforceGetLeadFieldAllowFailure = big.NewInt(1 << 2)
	flowActionSalesforceGetLeadFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionSalesforceGetLeadFieldParams       = big.NewInt(1 << 4)
)

type FlowActionSalesforceGetLead struct {
	Id           string                             `json:"id" url:"id"`
	Alias        *string                            `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                              `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                              `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionSalesforceGetLeadParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceGetLead) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionSalesforceGetLead) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionSalesforceGetLead) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionSalesforceGetLead) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionSalesforceGetLead) GetParams() *FlowActionSalesforceGetLeadParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionSalesforceGetLead) Type() string {
	return f.type_
}

func (f *FlowActionSalesforceGetLead) Action() string {
	return f.action
}

func (f *FlowActionSalesforceGetLead) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceGetLead) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLead) SetId(id string) {
	f.Id = id
	f.require(flowActionSalesforceGetLeadFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLead) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionSalesforceGetLeadFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLead) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionSalesforceGetLeadFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLead) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionSalesforceGetLeadFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLead) SetParams(params *FlowActionSalesforceGetLeadParams) {
	f.Params = params
	f.require(flowActionSalesforceGetLeadFieldParams)
}

func (f *FlowActionSalesforceGetLead) UnmarshalJSON(data []byte) error {
	type embed FlowActionSalesforceGetLead
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSalesforceGetLead(unmarshaler.embed)
	if unmarshaler.Type != "SALESFORCE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SALESFORCE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "GET_LEAD" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "GET_LEAD", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceGetLead) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceGetLead
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "SALESFORCE",
		Action: "GET_LEAD",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceGetLead) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSalesforceGetLeadParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionSalesforceGetLeadParamsFieldLeadId       = big.NewInt(1 << 1)
)

type FlowActionSalesforceGetLeadParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	LeadId       string `json:"lead_id" url:"lead_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceGetLeadParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionSalesforceGetLeadParams) GetLeadId() string {
	if f == nil {
		return ""
	}
	return f.LeadId
}

func (f *FlowActionSalesforceGetLeadParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceGetLeadParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLeadParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionSalesforceGetLeadParamsFieldConnectionId)
}

// SetLeadId sets the LeadId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceGetLeadParams) SetLeadId(leadId string) {
	f.LeadId = leadId
	f.require(flowActionSalesforceGetLeadParamsFieldLeadId)
}

func (f *FlowActionSalesforceGetLeadParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSalesforceGetLeadParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSalesforceGetLeadParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceGetLeadParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceGetLeadParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceGetLeadParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSalesforceSearchLeadsFieldId           = big.NewInt(1 << 0)
	flowActionSalesforceSearchLeadsFieldAlias        = big.NewInt(1 << 1)
	flowActionSalesforceSearchLeadsFieldAllowFailure = big.NewInt(1 << 2)
	flowActionSalesforceSearchLeadsFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionSalesforceSearchLeadsFieldParams       = big.NewInt(1 << 4)
)

type FlowActionSalesforceSearchLeads struct {
	Id           string                                 `json:"id" url:"id"`
	Alias        *string                                `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                  `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                  `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionSalesforceSearchLeadsParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceSearchLeads) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionSalesforceSearchLeads) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionSalesforceSearchLeads) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionSalesforceSearchLeads) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionSalesforceSearchLeads) GetParams() *FlowActionSalesforceSearchLeadsParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionSalesforceSearchLeads) Type() string {
	return f.type_
}

func (f *FlowActionSalesforceSearchLeads) Action() string {
	return f.action
}

func (f *FlowActionSalesforceSearchLeads) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceSearchLeads) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeads) SetId(id string) {
	f.Id = id
	f.require(flowActionSalesforceSearchLeadsFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeads) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionSalesforceSearchLeadsFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeads) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionSalesforceSearchLeadsFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeads) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionSalesforceSearchLeadsFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeads) SetParams(params *FlowActionSalesforceSearchLeadsParams) {
	f.Params = params
	f.require(flowActionSalesforceSearchLeadsFieldParams)
}

func (f *FlowActionSalesforceSearchLeads) UnmarshalJSON(data []byte) error {
	type embed FlowActionSalesforceSearchLeads
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSalesforceSearchLeads(unmarshaler.embed)
	if unmarshaler.Type != "SALESFORCE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SALESFORCE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEARCH_LEADS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEARCH_LEADS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceSearchLeads) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceSearchLeads
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "SALESFORCE",
		Action: "SEARCH_LEADS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceSearchLeads) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSalesforceSearchLeadsParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionSalesforceSearchLeadsParamsFieldSearchField  = big.NewInt(1 << 1)
	flowActionSalesforceSearchLeadsParamsFieldSearchValue  = big.NewInt(1 << 2)
	flowActionSalesforceSearchLeadsParamsFieldLeadFields   = big.NewInt(1 << 3)
)

type FlowActionSalesforceSearchLeadsParams struct {
	ConnectionId string                                           `json:"connection_id" url:"connection_id"`
	SearchField  FlowActionSalesforceSearchLeadsParamsSearchField `json:"search_field" url:"search_field"`
	SearchValue  string                                           `json:"search_value" url:"search_value"`
	LeadFields   []string                                         `json:"lead_fields" url:"lead_fields"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceSearchLeadsParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionSalesforceSearchLeadsParams) GetSearchField() FlowActionSalesforceSearchLeadsParamsSearchField {
	if f == nil {
		return ""
	}
	return f.SearchField
}

func (f *FlowActionSalesforceSearchLeadsParams) GetSearchValue() string {
	if f == nil {
		return ""
	}
	return f.SearchValue
}

func (f *FlowActionSalesforceSearchLeadsParams) GetLeadFields() []string {
	if f == nil {
		return nil
	}
	return f.LeadFields
}

func (f *FlowActionSalesforceSearchLeadsParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceSearchLeadsParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeadsParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionSalesforceSearchLeadsParamsFieldConnectionId)
}

// SetSearchField sets the SearchField field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeadsParams) SetSearchField(searchField FlowActionSalesforceSearchLeadsParamsSearchField) {
	f.SearchField = searchField
	f.require(flowActionSalesforceSearchLeadsParamsFieldSearchField)
}

// SetSearchValue sets the SearchValue field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeadsParams) SetSearchValue(searchValue string) {
	f.SearchValue = searchValue
	f.require(flowActionSalesforceSearchLeadsParamsFieldSearchValue)
}

// SetLeadFields sets the LeadFields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceSearchLeadsParams) SetLeadFields(leadFields []string) {
	f.LeadFields = leadFields
	f.require(flowActionSalesforceSearchLeadsParamsFieldLeadFields)
}

func (f *FlowActionSalesforceSearchLeadsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSalesforceSearchLeadsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSalesforceSearchLeadsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceSearchLeadsParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceSearchLeadsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceSearchLeadsParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionSalesforceSearchLeadsParamsSearchField string

const (
	FlowActionSalesforceSearchLeadsParamsSearchFieldEmail FlowActionSalesforceSearchLeadsParamsSearchField = "email"
	FlowActionSalesforceSearchLeadsParamsSearchFieldName  FlowActionSalesforceSearchLeadsParamsSearchField = "name"
	FlowActionSalesforceSearchLeadsParamsSearchFieldPhone FlowActionSalesforceSearchLeadsParamsSearchField = "phone"
	FlowActionSalesforceSearchLeadsParamsSearchFieldAll   FlowActionSalesforceSearchLeadsParamsSearchField = "all"
)

func NewFlowActionSalesforceSearchLeadsParamsSearchFieldFromString(s string) (FlowActionSalesforceSearchLeadsParamsSearchField, error) {
	switch s {
	case "email":
		return FlowActionSalesforceSearchLeadsParamsSearchFieldEmail, nil
	case "name":
		return FlowActionSalesforceSearchLeadsParamsSearchFieldName, nil
	case "phone":
		return FlowActionSalesforceSearchLeadsParamsSearchFieldPhone, nil
	case "all":
		return FlowActionSalesforceSearchLeadsParamsSearchFieldAll, nil
	}
	var t FlowActionSalesforceSearchLeadsParamsSearchField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionSalesforceSearchLeadsParamsSearchField) Ptr() *FlowActionSalesforceSearchLeadsParamsSearchField {
	return &f
}

var (
	flowActionSalesforceUpdateLeadFieldId           = big.NewInt(1 << 0)
	flowActionSalesforceUpdateLeadFieldAlias        = big.NewInt(1 << 1)
	flowActionSalesforceUpdateLeadFieldAllowFailure = big.NewInt(1 << 2)
	flowActionSalesforceUpdateLeadFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionSalesforceUpdateLeadFieldParams       = big.NewInt(1 << 4)
)

type FlowActionSalesforceUpdateLead struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionSalesforceUpdateLeadParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceUpdateLead) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionSalesforceUpdateLead) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionSalesforceUpdateLead) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionSalesforceUpdateLead) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionSalesforceUpdateLead) GetParams() *FlowActionSalesforceUpdateLeadParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionSalesforceUpdateLead) Type() string {
	return f.type_
}

func (f *FlowActionSalesforceUpdateLead) Action() string {
	return f.action
}

func (f *FlowActionSalesforceUpdateLead) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceUpdateLead) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLead) SetId(id string) {
	f.Id = id
	f.require(flowActionSalesforceUpdateLeadFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLead) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionSalesforceUpdateLeadFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLead) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionSalesforceUpdateLeadFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLead) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionSalesforceUpdateLeadFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLead) SetParams(params *FlowActionSalesforceUpdateLeadParams) {
	f.Params = params
	f.require(flowActionSalesforceUpdateLeadFieldParams)
}

func (f *FlowActionSalesforceUpdateLead) UnmarshalJSON(data []byte) error {
	type embed FlowActionSalesforceUpdateLead
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSalesforceUpdateLead(unmarshaler.embed)
	if unmarshaler.Type != "SALESFORCE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SALESFORCE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPDATE_LEAD" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPDATE_LEAD", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceUpdateLead) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceUpdateLead
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "SALESFORCE",
		Action: "UPDATE_LEAD",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceUpdateLead) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSalesforceUpdateLeadParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionSalesforceUpdateLeadParamsFieldLeadId       = big.NewInt(1 << 1)
	flowActionSalesforceUpdateLeadParamsFieldPayload      = big.NewInt(1 << 2)
)

type FlowActionSalesforceUpdateLeadParams struct {
	ConnectionId string                                       `json:"connection_id" url:"connection_id"`
	LeadId       string                                       `json:"lead_id" url:"lead_id"`
	Payload      *FlowActionSalesforceUpdateLeadParamsPayload `json:"payload,omitempty" url:"payload,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSalesforceUpdateLeadParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionSalesforceUpdateLeadParams) GetLeadId() string {
	if f == nil {
		return ""
	}
	return f.LeadId
}

func (f *FlowActionSalesforceUpdateLeadParams) GetPayload() FlowActionSalesforceUpdateLeadParamsPayload {
	if f == nil || f.Payload == nil {
		return nil
	}
	return *f.Payload
}

func (f *FlowActionSalesforceUpdateLeadParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSalesforceUpdateLeadParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLeadParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionSalesforceUpdateLeadParamsFieldConnectionId)
}

// SetLeadId sets the LeadId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLeadParams) SetLeadId(leadId string) {
	f.LeadId = leadId
	f.require(flowActionSalesforceUpdateLeadParamsFieldLeadId)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSalesforceUpdateLeadParams) SetPayload(payload *FlowActionSalesforceUpdateLeadParamsPayload) {
	f.Payload = payload
	f.require(flowActionSalesforceUpdateLeadParamsFieldPayload)
}

func (f *FlowActionSalesforceUpdateLeadParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSalesforceUpdateLeadParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSalesforceUpdateLeadParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSalesforceUpdateLeadParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionSalesforceUpdateLeadParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSalesforceUpdateLeadParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionSalesforceUpdateLeadParamsPayload = map[string]interface{}

type FlowActionSendgrid = *FlowActionSendgridSendEmail

var (
	flowActionSendgridSendEmailFieldId           = big.NewInt(1 << 0)
	flowActionSendgridSendEmailFieldAlias        = big.NewInt(1 << 1)
	flowActionSendgridSendEmailFieldAllowFailure = big.NewInt(1 << 2)
	flowActionSendgridSendEmailFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionSendgridSendEmailFieldParams       = big.NewInt(1 << 4)
)

type FlowActionSendgridSendEmail struct {
	Id           string                             `json:"id" url:"id"`
	Alias        *string                            `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                              `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                              `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionSendgridSendEmailParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSendgridSendEmail) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionSendgridSendEmail) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionSendgridSendEmail) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionSendgridSendEmail) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionSendgridSendEmail) GetParams() *FlowActionSendgridSendEmailParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionSendgridSendEmail) Type() string {
	return f.type_
}

func (f *FlowActionSendgridSendEmail) Action() string {
	return f.action
}

func (f *FlowActionSendgridSendEmail) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSendgridSendEmail) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmail) SetId(id string) {
	f.Id = id
	f.require(flowActionSendgridSendEmailFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmail) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionSendgridSendEmailFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmail) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionSendgridSendEmailFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmail) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionSendgridSendEmailFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmail) SetParams(params *FlowActionSendgridSendEmailParams) {
	f.Params = params
	f.require(flowActionSendgridSendEmailFieldParams)
}

func (f *FlowActionSendgridSendEmail) UnmarshalJSON(data []byte) error {
	type embed FlowActionSendgridSendEmail
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSendgridSendEmail(unmarshaler.embed)
	if unmarshaler.Type != "SENDGRID" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SENDGRID", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_EMAIL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_EMAIL", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSendgridSendEmail) MarshalJSON() ([]byte, error) {
	type embed FlowActionSendgridSendEmail
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "SENDGRID",
		Action: "SEND_EMAIL",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSendgridSendEmail) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSendgridSendEmailParamsFieldConnectionId     = big.NewInt(1 << 0)
	flowActionSendgridSendEmailParamsFieldFrom             = big.NewInt(1 << 1)
	flowActionSendgridSendEmailParamsFieldPersonalizations = big.NewInt(1 << 2)
)

type FlowActionSendgridSendEmailParams struct {
	ConnectionId     string                                   `json:"connection_id" url:"connection_id"`
	From             *FlowActionSendgridSendEmailParamsPerson `json:"from" url:"from"`
	Personalizations []interface{}                            `json:"personalizations" url:"personalizations"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FlowActionSendgridSendEmailParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionSendgridSendEmailParams) GetFrom() *FlowActionSendgridSendEmailParamsPerson {
	if f == nil {
		return nil
	}
	return f.From
}

func (f *FlowActionSendgridSendEmailParams) GetPersonalizations() []interface{} {
	if f == nil {
		return nil
	}
	return f.Personalizations
}

func (f *FlowActionSendgridSendEmailParams) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FlowActionSendgridSendEmailParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmailParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionSendgridSendEmailParamsFieldConnectionId)
}

// SetFrom sets the From field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmailParams) SetFrom(from *FlowActionSendgridSendEmailParamsPerson) {
	f.From = from
	f.require(flowActionSendgridSendEmailParamsFieldFrom)
}

// SetPersonalizations sets the Personalizations field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmailParams) SetPersonalizations(personalizations []interface{}) {
	f.Personalizations = personalizations
	f.require(flowActionSendgridSendEmailParamsFieldPersonalizations)
}

func (f *FlowActionSendgridSendEmailParams) UnmarshalJSON(data []byte) error {
	type embed FlowActionSendgridSendEmailParams
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSendgridSendEmailParams(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSendgridSendEmailParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionSendgridSendEmailParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, f.ExtraProperties)
}

func (f *FlowActionSendgridSendEmailParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSendgridSendEmailParamsPersonFieldName  = big.NewInt(1 << 0)
	flowActionSendgridSendEmailParamsPersonFieldEmail = big.NewInt(1 << 1)
)

type FlowActionSendgridSendEmailParamsPerson struct {
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	Email string  `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSendgridSendEmailParamsPerson) GetName() string {
	if f == nil || f.Name == nil {
		return ""
	}
	return *f.Name
}

func (f *FlowActionSendgridSendEmailParamsPerson) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionSendgridSendEmailParamsPerson) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSendgridSendEmailParamsPerson) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmailParamsPerson) SetName(name *string) {
	f.Name = name
	f.require(flowActionSendgridSendEmailParamsPersonFieldName)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSendgridSendEmailParamsPerson) SetEmail(email string) {
	f.Email = email
	f.require(flowActionSendgridSendEmailParamsPersonFieldEmail)
}

func (f *FlowActionSendgridSendEmailParamsPerson) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSendgridSendEmailParamsPerson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSendgridSendEmailParamsPerson(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSendgridSendEmailParamsPerson) MarshalJSON() ([]byte, error) {
	type embed FlowActionSendgridSendEmailParamsPerson
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSendgridSendEmailParamsPerson) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionSlack = *FlowActionSlackPostMessage

var (
	flowActionSlackPostMessageFieldId           = big.NewInt(1 << 0)
	flowActionSlackPostMessageFieldAlias        = big.NewInt(1 << 1)
	flowActionSlackPostMessageFieldAllowFailure = big.NewInt(1 << 2)
	flowActionSlackPostMessageFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionSlackPostMessageFieldParams       = big.NewInt(1 << 4)
)

type FlowActionSlackPostMessage struct {
	Id           string                            `json:"id" url:"id"`
	Alias        *string                           `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                             `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                             `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionSlackPostMessageParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSlackPostMessage) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionSlackPostMessage) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionSlackPostMessage) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionSlackPostMessage) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionSlackPostMessage) GetParams() *FlowActionSlackPostMessageParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionSlackPostMessage) Type() string {
	return f.type_
}

func (f *FlowActionSlackPostMessage) Action() string {
	return f.action
}

func (f *FlowActionSlackPostMessage) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSlackPostMessage) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessage) SetId(id string) {
	f.Id = id
	f.require(flowActionSlackPostMessageFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessage) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionSlackPostMessageFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessage) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionSlackPostMessageFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessage) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionSlackPostMessageFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessage) SetParams(params *FlowActionSlackPostMessageParams) {
	f.Params = params
	f.require(flowActionSlackPostMessageFieldParams)
}

func (f *FlowActionSlackPostMessage) UnmarshalJSON(data []byte) error {
	type embed FlowActionSlackPostMessage
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionSlackPostMessage(unmarshaler.embed)
	if unmarshaler.Type != "SLACK" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SLACK", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "POST_MESSAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "POST_MESSAGE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSlackPostMessage) MarshalJSON() ([]byte, error) {
	type embed FlowActionSlackPostMessage
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "SLACK",
		Action: "POST_MESSAGE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSlackPostMessage) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSlackPostMessageParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionSlackPostMessageParamsFieldText         = big.NewInt(1 << 1)
	flowActionSlackPostMessageParamsFieldAttachments  = big.NewInt(1 << 2)
)

type FlowActionSlackPostMessageParams struct {
	ConnectionId string                                        `json:"connection_id" url:"connection_id"`
	Text         *string                                       `json:"text,omitempty" url:"text,omitempty"`
	Attachments  []*FlowActionSlackPostMessageParamsAttachment `json:"attachments,omitempty" url:"attachments,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSlackPostMessageParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionSlackPostMessageParams) GetText() string {
	if f == nil || f.Text == nil {
		return ""
	}
	return *f.Text
}

func (f *FlowActionSlackPostMessageParams) GetAttachments() []*FlowActionSlackPostMessageParamsAttachment {
	if f == nil || f.Attachments == nil {
		return nil
	}
	return f.Attachments
}

func (f *FlowActionSlackPostMessageParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSlackPostMessageParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionSlackPostMessageParamsFieldConnectionId)
}

// SetText sets the Text field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParams) SetText(text *string) {
	f.Text = text
	f.require(flowActionSlackPostMessageParamsFieldText)
}

// SetAttachments sets the Attachments field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParams) SetAttachments(attachments []*FlowActionSlackPostMessageParamsAttachment) {
	f.Attachments = attachments
	f.require(flowActionSlackPostMessageParamsFieldAttachments)
}

func (f *FlowActionSlackPostMessageParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSlackPostMessageParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSlackPostMessageParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSlackPostMessageParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionSlackPostMessageParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSlackPostMessageParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionSlackPostMessageParamsAttachmentFieldColor   = big.NewInt(1 << 0)
	flowActionSlackPostMessageParamsAttachmentFieldPretext = big.NewInt(1 << 1)
	flowActionSlackPostMessageParamsAttachmentFieldText    = big.NewInt(1 << 2)
	flowActionSlackPostMessageParamsAttachmentFieldFields  = big.NewInt(1 << 3)
)

type FlowActionSlackPostMessageParamsAttachment struct {
	Color   *FlowActionSlackPostMessageParamsAttachmentColor   `json:"color,omitempty" url:"color,omitempty"`
	Pretext *string                                            `json:"pretext,omitempty" url:"pretext,omitempty"`
	Text    *string                                            `json:"text,omitempty" url:"text,omitempty"`
	Fields  []*FlowActionSlackPostMessageParamsAttachmentField `json:"fields,omitempty" url:"fields,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSlackPostMessageParamsAttachment) GetColor() FlowActionSlackPostMessageParamsAttachmentColor {
	if f == nil || f.Color == nil {
		return ""
	}
	return *f.Color
}

func (f *FlowActionSlackPostMessageParamsAttachment) GetPretext() string {
	if f == nil || f.Pretext == nil {
		return ""
	}
	return *f.Pretext
}

func (f *FlowActionSlackPostMessageParamsAttachment) GetText() string {
	if f == nil || f.Text == nil {
		return ""
	}
	return *f.Text
}

func (f *FlowActionSlackPostMessageParamsAttachment) GetFields() []*FlowActionSlackPostMessageParamsAttachmentField {
	if f == nil || f.Fields == nil {
		return nil
	}
	return f.Fields
}

func (f *FlowActionSlackPostMessageParamsAttachment) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSlackPostMessageParamsAttachment) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetColor sets the Color field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachment) SetColor(color *FlowActionSlackPostMessageParamsAttachmentColor) {
	f.Color = color
	f.require(flowActionSlackPostMessageParamsAttachmentFieldColor)
}

// SetPretext sets the Pretext field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachment) SetPretext(pretext *string) {
	f.Pretext = pretext
	f.require(flowActionSlackPostMessageParamsAttachmentFieldPretext)
}

// SetText sets the Text field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachment) SetText(text *string) {
	f.Text = text
	f.require(flowActionSlackPostMessageParamsAttachmentFieldText)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachment) SetFields(fields []*FlowActionSlackPostMessageParamsAttachmentField) {
	f.Fields = fields
	f.require(flowActionSlackPostMessageParamsAttachmentFieldFields)
}

func (f *FlowActionSlackPostMessageParamsAttachment) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSlackPostMessageParamsAttachment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSlackPostMessageParamsAttachment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSlackPostMessageParamsAttachment) MarshalJSON() ([]byte, error) {
	type embed FlowActionSlackPostMessageParamsAttachment
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSlackPostMessageParamsAttachment) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionSlackPostMessageParamsAttachmentColor string

const (
	FlowActionSlackPostMessageParamsAttachmentColorGood    FlowActionSlackPostMessageParamsAttachmentColor = "GOOD"
	FlowActionSlackPostMessageParamsAttachmentColorWarning FlowActionSlackPostMessageParamsAttachmentColor = "WARNING"
	FlowActionSlackPostMessageParamsAttachmentColorDanger  FlowActionSlackPostMessageParamsAttachmentColor = "DANGER"
)

func NewFlowActionSlackPostMessageParamsAttachmentColorFromString(s string) (FlowActionSlackPostMessageParamsAttachmentColor, error) {
	switch s {
	case "GOOD":
		return FlowActionSlackPostMessageParamsAttachmentColorGood, nil
	case "WARNING":
		return FlowActionSlackPostMessageParamsAttachmentColorWarning, nil
	case "DANGER":
		return FlowActionSlackPostMessageParamsAttachmentColorDanger, nil
	}
	var t FlowActionSlackPostMessageParamsAttachmentColor
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionSlackPostMessageParamsAttachmentColor) Ptr() *FlowActionSlackPostMessageParamsAttachmentColor {
	return &f
}

var (
	flowActionSlackPostMessageParamsAttachmentFieldFieldTitle = big.NewInt(1 << 0)
	flowActionSlackPostMessageParamsAttachmentFieldFieldValue = big.NewInt(1 << 1)
	flowActionSlackPostMessageParamsAttachmentFieldFieldShort = big.NewInt(1 << 2)
)

type FlowActionSlackPostMessageParamsAttachmentField struct {
	Title string  `json:"title" url:"title"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Short *bool   `json:"short,omitempty" url:"short,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) GetTitle() string {
	if f == nil {
		return ""
	}
	return f.Title
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) GetValue() string {
	if f == nil || f.Value == nil {
		return ""
	}
	return *f.Value
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) GetShort() bool {
	if f == nil || f.Short == nil {
		return false
	}
	return *f.Short
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachmentField) SetTitle(title string) {
	f.Title = title
	f.require(flowActionSlackPostMessageParamsAttachmentFieldFieldTitle)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachmentField) SetValue(value *string) {
	f.Value = value
	f.require(flowActionSlackPostMessageParamsAttachmentFieldFieldValue)
}

// SetShort sets the Short field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionSlackPostMessageParamsAttachmentField) SetShort(short *bool) {
	f.Short = short
	f.require(flowActionSlackPostMessageParamsAttachmentFieldFieldShort)
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionSlackPostMessageParamsAttachmentField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionSlackPostMessageParamsAttachmentField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) MarshalJSON() ([]byte, error) {
	type embed FlowActionSlackPostMessageParamsAttachmentField
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionSlackPostMessageParamsAttachmentField) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionStripe struct {
	FlowActionStripeAddTaxId            *FlowActionStripeAddTaxId
	FlowActionStripeCreateCustomer      *FlowActionStripeCreateCustomer
	FlowActionStripeCreatePortalSession *FlowActionStripeCreatePortalSession
	FlowActionStripeDeleteTaxId         *FlowActionStripeDeleteTaxId
	FlowActionStripeFindCustomers       *FlowActionStripeFindCustomers
	FlowActionStripeGetCustomer         *FlowActionStripeGetCustomer
	FlowActionStripeUpdateCustomer      *FlowActionStripeUpdateCustomer

	typ string
}

func (f *FlowActionStripe) GetFlowActionStripeAddTaxId() *FlowActionStripeAddTaxId {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeAddTaxId
}

func (f *FlowActionStripe) GetFlowActionStripeCreateCustomer() *FlowActionStripeCreateCustomer {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeCreateCustomer
}

func (f *FlowActionStripe) GetFlowActionStripeCreatePortalSession() *FlowActionStripeCreatePortalSession {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeCreatePortalSession
}

func (f *FlowActionStripe) GetFlowActionStripeDeleteTaxId() *FlowActionStripeDeleteTaxId {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeDeleteTaxId
}

func (f *FlowActionStripe) GetFlowActionStripeFindCustomers() *FlowActionStripeFindCustomers {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeFindCustomers
}

func (f *FlowActionStripe) GetFlowActionStripeGetCustomer() *FlowActionStripeGetCustomer {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeGetCustomer
}

func (f *FlowActionStripe) GetFlowActionStripeUpdateCustomer() *FlowActionStripeUpdateCustomer {
	if f == nil {
		return nil
	}
	return f.FlowActionStripeUpdateCustomer
}

func (f *FlowActionStripe) UnmarshalJSON(data []byte) error {
	valueFlowActionStripeAddTaxId := new(FlowActionStripeAddTaxId)
	if err := json.Unmarshal(data, &valueFlowActionStripeAddTaxId); err == nil {
		f.typ = "FlowActionStripeAddTaxId"
		f.FlowActionStripeAddTaxId = valueFlowActionStripeAddTaxId
		return nil
	}
	valueFlowActionStripeCreateCustomer := new(FlowActionStripeCreateCustomer)
	if err := json.Unmarshal(data, &valueFlowActionStripeCreateCustomer); err == nil {
		f.typ = "FlowActionStripeCreateCustomer"
		f.FlowActionStripeCreateCustomer = valueFlowActionStripeCreateCustomer
		return nil
	}
	valueFlowActionStripeCreatePortalSession := new(FlowActionStripeCreatePortalSession)
	if err := json.Unmarshal(data, &valueFlowActionStripeCreatePortalSession); err == nil {
		f.typ = "FlowActionStripeCreatePortalSession"
		f.FlowActionStripeCreatePortalSession = valueFlowActionStripeCreatePortalSession
		return nil
	}
	valueFlowActionStripeDeleteTaxId := new(FlowActionStripeDeleteTaxId)
	if err := json.Unmarshal(data, &valueFlowActionStripeDeleteTaxId); err == nil {
		f.typ = "FlowActionStripeDeleteTaxId"
		f.FlowActionStripeDeleteTaxId = valueFlowActionStripeDeleteTaxId
		return nil
	}
	valueFlowActionStripeFindCustomers := new(FlowActionStripeFindCustomers)
	if err := json.Unmarshal(data, &valueFlowActionStripeFindCustomers); err == nil {
		f.typ = "FlowActionStripeFindCustomers"
		f.FlowActionStripeFindCustomers = valueFlowActionStripeFindCustomers
		return nil
	}
	valueFlowActionStripeGetCustomer := new(FlowActionStripeGetCustomer)
	if err := json.Unmarshal(data, &valueFlowActionStripeGetCustomer); err == nil {
		f.typ = "FlowActionStripeGetCustomer"
		f.FlowActionStripeGetCustomer = valueFlowActionStripeGetCustomer
		return nil
	}
	valueFlowActionStripeUpdateCustomer := new(FlowActionStripeUpdateCustomer)
	if err := json.Unmarshal(data, &valueFlowActionStripeUpdateCustomer); err == nil {
		f.typ = "FlowActionStripeUpdateCustomer"
		f.FlowActionStripeUpdateCustomer = valueFlowActionStripeUpdateCustomer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionStripe) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionStripeAddTaxId" || f.FlowActionStripeAddTaxId != nil {
		return json.Marshal(f.FlowActionStripeAddTaxId)
	}
	if f.typ == "FlowActionStripeCreateCustomer" || f.FlowActionStripeCreateCustomer != nil {
		return json.Marshal(f.FlowActionStripeCreateCustomer)
	}
	if f.typ == "FlowActionStripeCreatePortalSession" || f.FlowActionStripeCreatePortalSession != nil {
		return json.Marshal(f.FlowActionStripeCreatePortalSession)
	}
	if f.typ == "FlowActionStripeDeleteTaxId" || f.FlowActionStripeDeleteTaxId != nil {
		return json.Marshal(f.FlowActionStripeDeleteTaxId)
	}
	if f.typ == "FlowActionStripeFindCustomers" || f.FlowActionStripeFindCustomers != nil {
		return json.Marshal(f.FlowActionStripeFindCustomers)
	}
	if f.typ == "FlowActionStripeGetCustomer" || f.FlowActionStripeGetCustomer != nil {
		return json.Marshal(f.FlowActionStripeGetCustomer)
	}
	if f.typ == "FlowActionStripeUpdateCustomer" || f.FlowActionStripeUpdateCustomer != nil {
		return json.Marshal(f.FlowActionStripeUpdateCustomer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionStripeVisitor interface {
	VisitFlowActionStripeAddTaxId(*FlowActionStripeAddTaxId) error
	VisitFlowActionStripeCreateCustomer(*FlowActionStripeCreateCustomer) error
	VisitFlowActionStripeCreatePortalSession(*FlowActionStripeCreatePortalSession) error
	VisitFlowActionStripeDeleteTaxId(*FlowActionStripeDeleteTaxId) error
	VisitFlowActionStripeFindCustomers(*FlowActionStripeFindCustomers) error
	VisitFlowActionStripeGetCustomer(*FlowActionStripeGetCustomer) error
	VisitFlowActionStripeUpdateCustomer(*FlowActionStripeUpdateCustomer) error
}

func (f *FlowActionStripe) Accept(visitor FlowActionStripeVisitor) error {
	if f.typ == "FlowActionStripeAddTaxId" || f.FlowActionStripeAddTaxId != nil {
		return visitor.VisitFlowActionStripeAddTaxId(f.FlowActionStripeAddTaxId)
	}
	if f.typ == "FlowActionStripeCreateCustomer" || f.FlowActionStripeCreateCustomer != nil {
		return visitor.VisitFlowActionStripeCreateCustomer(f.FlowActionStripeCreateCustomer)
	}
	if f.typ == "FlowActionStripeCreatePortalSession" || f.FlowActionStripeCreatePortalSession != nil {
		return visitor.VisitFlowActionStripeCreatePortalSession(f.FlowActionStripeCreatePortalSession)
	}
	if f.typ == "FlowActionStripeDeleteTaxId" || f.FlowActionStripeDeleteTaxId != nil {
		return visitor.VisitFlowActionStripeDeleteTaxId(f.FlowActionStripeDeleteTaxId)
	}
	if f.typ == "FlowActionStripeFindCustomers" || f.FlowActionStripeFindCustomers != nil {
		return visitor.VisitFlowActionStripeFindCustomers(f.FlowActionStripeFindCustomers)
	}
	if f.typ == "FlowActionStripeGetCustomer" || f.FlowActionStripeGetCustomer != nil {
		return visitor.VisitFlowActionStripeGetCustomer(f.FlowActionStripeGetCustomer)
	}
	if f.typ == "FlowActionStripeUpdateCustomer" || f.FlowActionStripeUpdateCustomer != nil {
		return visitor.VisitFlowActionStripeUpdateCustomer(f.FlowActionStripeUpdateCustomer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionStripeAddTaxIdFieldId           = big.NewInt(1 << 0)
	flowActionStripeAddTaxIdFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeAddTaxIdFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeAddTaxIdFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeAddTaxIdFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeAddTaxId struct {
	Id           string                          `json:"id" url:"id"`
	Alias        *string                         `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                           `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                           `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeAddTaxIdParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeAddTaxId) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeAddTaxId) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeAddTaxId) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeAddTaxId) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeAddTaxId) GetParams() *FlowActionStripeAddTaxIdParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeAddTaxId) Type() string {
	return f.type_
}

func (f *FlowActionStripeAddTaxId) Action() string {
	return f.action
}

func (f *FlowActionStripeAddTaxId) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeAddTaxId) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxId) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeAddTaxIdFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxId) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeAddTaxIdFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxId) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeAddTaxIdFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxId) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeAddTaxIdFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxId) SetParams(params *FlowActionStripeAddTaxIdParams) {
	f.Params = params
	f.require(flowActionStripeAddTaxIdFieldParams)
}

func (f *FlowActionStripeAddTaxId) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeAddTaxId
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeAddTaxId(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "ADD_TAX_ID" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ADD_TAX_ID", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeAddTaxId) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeAddTaxId
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "ADD_TAX_ID",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeAddTaxId) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeAddTaxIdParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeAddTaxIdParamsFieldCustomerId   = big.NewInt(1 << 1)
	flowActionStripeAddTaxIdParamsFieldType         = big.NewInt(1 << 2)
	flowActionStripeAddTaxIdParamsFieldValue        = big.NewInt(1 << 3)
)

type FlowActionStripeAddTaxIdParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	CustomerId   string `json:"customer_id" url:"customer_id"`
	Type         string `json:"type" url:"type"`
	Value        string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeAddTaxIdParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeAddTaxIdParams) GetCustomerId() string {
	if f == nil {
		return ""
	}
	return f.CustomerId
}

func (f *FlowActionStripeAddTaxIdParams) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FlowActionStripeAddTaxIdParams) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FlowActionStripeAddTaxIdParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeAddTaxIdParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxIdParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeAddTaxIdParamsFieldConnectionId)
}

// SetCustomerId sets the CustomerId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxIdParams) SetCustomerId(customerId string) {
	f.CustomerId = customerId
	f.require(flowActionStripeAddTaxIdParamsFieldCustomerId)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxIdParams) SetType(type_ string) {
	f.Type = type_
	f.require(flowActionStripeAddTaxIdParamsFieldType)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddTaxIdParams) SetValue(value string) {
	f.Value = value
	f.require(flowActionStripeAddTaxIdParamsFieldValue)
}

func (f *FlowActionStripeAddTaxIdParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeAddTaxIdParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeAddTaxIdParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeAddTaxIdParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeAddTaxIdParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeAddTaxIdParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeAddressFieldLine1      = big.NewInt(1 << 0)
	flowActionStripeAddressFieldLine2      = big.NewInt(1 << 1)
	flowActionStripeAddressFieldPostalCode = big.NewInt(1 << 2)
	flowActionStripeAddressFieldCity       = big.NewInt(1 << 3)
	flowActionStripeAddressFieldState      = big.NewInt(1 << 4)
	flowActionStripeAddressFieldCountry    = big.NewInt(1 << 5)
)

type FlowActionStripeAddress struct {
	Line1      *string `json:"line1,omitempty" url:"line1,omitempty"`
	Line2      *string `json:"line2,omitempty" url:"line2,omitempty"`
	PostalCode *string `json:"postalCode,omitempty" url:"postalCode,omitempty"`
	City       *string `json:"city,omitempty" url:"city,omitempty"`
	State      *string `json:"state,omitempty" url:"state,omitempty"`
	Country    *string `json:"country,omitempty" url:"country,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeAddress) GetLine1() string {
	if f == nil || f.Line1 == nil {
		return ""
	}
	return *f.Line1
}

func (f *FlowActionStripeAddress) GetLine2() string {
	if f == nil || f.Line2 == nil {
		return ""
	}
	return *f.Line2
}

func (f *FlowActionStripeAddress) GetPostalCode() string {
	if f == nil || f.PostalCode == nil {
		return ""
	}
	return *f.PostalCode
}

func (f *FlowActionStripeAddress) GetCity() string {
	if f == nil || f.City == nil {
		return ""
	}
	return *f.City
}

func (f *FlowActionStripeAddress) GetState() string {
	if f == nil || f.State == nil {
		return ""
	}
	return *f.State
}

func (f *FlowActionStripeAddress) GetCountry() string {
	if f == nil || f.Country == nil {
		return ""
	}
	return *f.Country
}

func (f *FlowActionStripeAddress) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeAddress) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetLine1 sets the Line1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddress) SetLine1(line1 *string) {
	f.Line1 = line1
	f.require(flowActionStripeAddressFieldLine1)
}

// SetLine2 sets the Line2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddress) SetLine2(line2 *string) {
	f.Line2 = line2
	f.require(flowActionStripeAddressFieldLine2)
}

// SetPostalCode sets the PostalCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddress) SetPostalCode(postalCode *string) {
	f.PostalCode = postalCode
	f.require(flowActionStripeAddressFieldPostalCode)
}

// SetCity sets the City field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddress) SetCity(city *string) {
	f.City = city
	f.require(flowActionStripeAddressFieldCity)
}

// SetState sets the State field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddress) SetState(state *string) {
	f.State = state
	f.require(flowActionStripeAddressFieldState)
}

// SetCountry sets the Country field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeAddress) SetCountry(country *string) {
	f.Country = country
	f.require(flowActionStripeAddressFieldCountry)
}

func (f *FlowActionStripeAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeAddress) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeAddress
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeAddress) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeCreateCustomerFieldId           = big.NewInt(1 << 0)
	flowActionStripeCreateCustomerFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeCreateCustomerFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeCreateCustomerFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeCreateCustomerFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeCreateCustomer struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeCreateCustomerParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeCreateCustomer) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeCreateCustomer) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeCreateCustomer) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeCreateCustomer) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeCreateCustomer) GetParams() *FlowActionStripeCreateCustomerParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeCreateCustomer) Type() string {
	return f.type_
}

func (f *FlowActionStripeCreateCustomer) Action() string {
	return f.action
}

func (f *FlowActionStripeCreateCustomer) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeCreateCustomer) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomer) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeCreateCustomerFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomer) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeCreateCustomerFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomer) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeCreateCustomerFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomer) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeCreateCustomerFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomer) SetParams(params *FlowActionStripeCreateCustomerParams) {
	f.Params = params
	f.require(flowActionStripeCreateCustomerFieldParams)
}

func (f *FlowActionStripeCreateCustomer) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeCreateCustomer
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeCreateCustomer(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "CREATE_CUSTOMER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CREATE_CUSTOMER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeCreateCustomer) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeCreateCustomer
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "CREATE_CUSTOMER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeCreateCustomer) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeCreateCustomerParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeCreateCustomerParamsFieldTaxId        = big.NewInt(1 << 1)
	flowActionStripeCreateCustomerParamsFieldName         = big.NewInt(1 << 2)
	flowActionStripeCreateCustomerParamsFieldDescription  = big.NewInt(1 << 3)
	flowActionStripeCreateCustomerParamsFieldEmail        = big.NewInt(1 << 4)
	flowActionStripeCreateCustomerParamsFieldPhone        = big.NewInt(1 << 5)
	flowActionStripeCreateCustomerParamsFieldTaxExempt    = big.NewInt(1 << 6)
	flowActionStripeCreateCustomerParamsFieldAddress      = big.NewInt(1 << 7)
	flowActionStripeCreateCustomerParamsFieldMetadata     = big.NewInt(1 << 8)
)

type FlowActionStripeCreateCustomerParams struct {
	ConnectionId string                    `json:"connection_id" url:"connection_id"`
	TaxId        *FlowActionStripeTaxId    `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	Name         *string                   `json:"name,omitempty" url:"name,omitempty"`
	Description  *string                   `json:"description,omitempty" url:"description,omitempty"`
	Email        *string                   `json:"email,omitempty" url:"email,omitempty"`
	Phone        *string                   `json:"phone,omitempty" url:"phone,omitempty"`
	TaxExempt    *string                   `json:"tax_exempt,omitempty" url:"tax_exempt,omitempty"`
	Address      *FlowActionStripeAddress  `json:"address,omitempty" url:"address,omitempty"`
	Metadata     *FlowActionStripeMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeCreateCustomerParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeCreateCustomerParams) GetTaxId() FlowActionStripeTaxId {
	if f == nil || f.TaxId == nil {
		return FlowActionStripeTaxId{}
	}
	return *f.TaxId
}

func (f *FlowActionStripeCreateCustomerParams) GetName() string {
	if f == nil || f.Name == nil {
		return ""
	}
	return *f.Name
}

func (f *FlowActionStripeCreateCustomerParams) GetDescription() string {
	if f == nil || f.Description == nil {
		return ""
	}
	return *f.Description
}

func (f *FlowActionStripeCreateCustomerParams) GetEmail() string {
	if f == nil || f.Email == nil {
		return ""
	}
	return *f.Email
}

func (f *FlowActionStripeCreateCustomerParams) GetPhone() string {
	if f == nil || f.Phone == nil {
		return ""
	}
	return *f.Phone
}

func (f *FlowActionStripeCreateCustomerParams) GetTaxExempt() string {
	if f == nil || f.TaxExempt == nil {
		return ""
	}
	return *f.TaxExempt
}

func (f *FlowActionStripeCreateCustomerParams) GetAddress() FlowActionStripeAddress {
	if f == nil || f.Address == nil {
		return FlowActionStripeAddress{}
	}
	return *f.Address
}

func (f *FlowActionStripeCreateCustomerParams) GetMetadata() FlowActionStripeMetadata {
	if f == nil || f.Metadata == nil {
		return nil
	}
	return *f.Metadata
}

func (f *FlowActionStripeCreateCustomerParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeCreateCustomerParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeCreateCustomerParamsFieldConnectionId)
}

// SetTaxId sets the TaxId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetTaxId(taxId *FlowActionStripeTaxId) {
	f.TaxId = taxId
	f.require(flowActionStripeCreateCustomerParamsFieldTaxId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetName(name *string) {
	f.Name = name
	f.require(flowActionStripeCreateCustomerParamsFieldName)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetDescription(description *string) {
	f.Description = description
	f.require(flowActionStripeCreateCustomerParamsFieldDescription)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetEmail(email *string) {
	f.Email = email
	f.require(flowActionStripeCreateCustomerParamsFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetPhone(phone *string) {
	f.Phone = phone
	f.require(flowActionStripeCreateCustomerParamsFieldPhone)
}

// SetTaxExempt sets the TaxExempt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetTaxExempt(taxExempt *string) {
	f.TaxExempt = taxExempt
	f.require(flowActionStripeCreateCustomerParamsFieldTaxExempt)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetAddress(address *FlowActionStripeAddress) {
	f.Address = address
	f.require(flowActionStripeCreateCustomerParamsFieldAddress)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreateCustomerParams) SetMetadata(metadata *FlowActionStripeMetadata) {
	f.Metadata = metadata
	f.require(flowActionStripeCreateCustomerParamsFieldMetadata)
}

func (f *FlowActionStripeCreateCustomerParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeCreateCustomerParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeCreateCustomerParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeCreateCustomerParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeCreateCustomerParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeCreateCustomerParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeCreatePortalSessionFieldId           = big.NewInt(1 << 0)
	flowActionStripeCreatePortalSessionFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeCreatePortalSessionFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeCreatePortalSessionFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeCreatePortalSessionFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeCreatePortalSession struct {
	Id           string                                     `json:"id" url:"id"`
	Alias        *string                                    `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                      `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                      `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeCreatePortalSessionParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeCreatePortalSession) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeCreatePortalSession) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeCreatePortalSession) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeCreatePortalSession) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeCreatePortalSession) GetParams() *FlowActionStripeCreatePortalSessionParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeCreatePortalSession) Type() string {
	return f.type_
}

func (f *FlowActionStripeCreatePortalSession) Action() string {
	return f.action
}

func (f *FlowActionStripeCreatePortalSession) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeCreatePortalSession) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSession) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeCreatePortalSessionFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSession) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeCreatePortalSessionFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSession) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeCreatePortalSessionFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSession) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeCreatePortalSessionFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSession) SetParams(params *FlowActionStripeCreatePortalSessionParams) {
	f.Params = params
	f.require(flowActionStripeCreatePortalSessionFieldParams)
}

func (f *FlowActionStripeCreatePortalSession) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeCreatePortalSession
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeCreatePortalSession(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "CREATE_PORTAL_SESSION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "CREATE_PORTAL_SESSION", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeCreatePortalSession) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeCreatePortalSession
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "CREATE_PORTAL_SESSION",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeCreatePortalSession) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeCreatePortalSessionParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeCreatePortalSessionParamsFieldCustomerId   = big.NewInt(1 << 1)
	flowActionStripeCreatePortalSessionParamsFieldReturnUrl    = big.NewInt(1 << 2)
)

type FlowActionStripeCreatePortalSessionParams struct {
	ConnectionId string  `json:"connection_id" url:"connection_id"`
	CustomerId   string  `json:"customer_id" url:"customer_id"`
	ReturnUrl    *string `json:"return_url,omitempty" url:"return_url,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeCreatePortalSessionParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeCreatePortalSessionParams) GetCustomerId() string {
	if f == nil {
		return ""
	}
	return f.CustomerId
}

func (f *FlowActionStripeCreatePortalSessionParams) GetReturnUrl() string {
	if f == nil || f.ReturnUrl == nil {
		return ""
	}
	return *f.ReturnUrl
}

func (f *FlowActionStripeCreatePortalSessionParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeCreatePortalSessionParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSessionParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeCreatePortalSessionParamsFieldConnectionId)
}

// SetCustomerId sets the CustomerId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSessionParams) SetCustomerId(customerId string) {
	f.CustomerId = customerId
	f.require(flowActionStripeCreatePortalSessionParamsFieldCustomerId)
}

// SetReturnUrl sets the ReturnUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeCreatePortalSessionParams) SetReturnUrl(returnUrl *string) {
	f.ReturnUrl = returnUrl
	f.require(flowActionStripeCreatePortalSessionParamsFieldReturnUrl)
}

func (f *FlowActionStripeCreatePortalSessionParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeCreatePortalSessionParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeCreatePortalSessionParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeCreatePortalSessionParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeCreatePortalSessionParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeCreatePortalSessionParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeDeleteTaxIdFieldId           = big.NewInt(1 << 0)
	flowActionStripeDeleteTaxIdFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeDeleteTaxIdFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeDeleteTaxIdFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeDeleteTaxIdFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeDeleteTaxId struct {
	Id           string                             `json:"id" url:"id"`
	Alias        *string                            `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                              `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                              `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeDeleteTaxIdParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeDeleteTaxId) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeDeleteTaxId) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeDeleteTaxId) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeDeleteTaxId) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeDeleteTaxId) GetParams() *FlowActionStripeDeleteTaxIdParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeDeleteTaxId) Type() string {
	return f.type_
}

func (f *FlowActionStripeDeleteTaxId) Action() string {
	return f.action
}

func (f *FlowActionStripeDeleteTaxId) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeDeleteTaxId) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxId) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeDeleteTaxIdFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxId) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeDeleteTaxIdFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxId) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeDeleteTaxIdFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxId) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeDeleteTaxIdFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxId) SetParams(params *FlowActionStripeDeleteTaxIdParams) {
	f.Params = params
	f.require(flowActionStripeDeleteTaxIdFieldParams)
}

func (f *FlowActionStripeDeleteTaxId) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeDeleteTaxId
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeDeleteTaxId(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "DELETE_TAX_ID" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "DELETE_TAX_ID", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeDeleteTaxId) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeDeleteTaxId
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "DELETE_TAX_ID",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeDeleteTaxId) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeDeleteTaxIdParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeDeleteTaxIdParamsFieldCustomerId   = big.NewInt(1 << 1)
	flowActionStripeDeleteTaxIdParamsFieldId           = big.NewInt(1 << 2)
)

type FlowActionStripeDeleteTaxIdParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	CustomerId   string `json:"customer_id" url:"customer_id"`
	Id           string `json:"id" url:"id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeDeleteTaxIdParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeDeleteTaxIdParams) GetCustomerId() string {
	if f == nil {
		return ""
	}
	return f.CustomerId
}

func (f *FlowActionStripeDeleteTaxIdParams) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeDeleteTaxIdParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeDeleteTaxIdParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxIdParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeDeleteTaxIdParamsFieldConnectionId)
}

// SetCustomerId sets the CustomerId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxIdParams) SetCustomerId(customerId string) {
	f.CustomerId = customerId
	f.require(flowActionStripeDeleteTaxIdParamsFieldCustomerId)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeDeleteTaxIdParams) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeDeleteTaxIdParamsFieldId)
}

func (f *FlowActionStripeDeleteTaxIdParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeDeleteTaxIdParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeDeleteTaxIdParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeDeleteTaxIdParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeDeleteTaxIdParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeDeleteTaxIdParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeFindCustomersFieldId           = big.NewInt(1 << 0)
	flowActionStripeFindCustomersFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeFindCustomersFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeFindCustomersFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeFindCustomersFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeFindCustomers struct {
	Id           string                               `json:"id" url:"id"`
	Alias        *string                              `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeFindCustomersParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeFindCustomers) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeFindCustomers) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeFindCustomers) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeFindCustomers) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeFindCustomers) GetParams() *FlowActionStripeFindCustomersParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeFindCustomers) Type() string {
	return f.type_
}

func (f *FlowActionStripeFindCustomers) Action() string {
	return f.action
}

func (f *FlowActionStripeFindCustomers) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeFindCustomers) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomers) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeFindCustomersFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomers) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeFindCustomersFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomers) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeFindCustomersFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomers) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeFindCustomersFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomers) SetParams(params *FlowActionStripeFindCustomersParams) {
	f.Params = params
	f.require(flowActionStripeFindCustomersFieldParams)
}

func (f *FlowActionStripeFindCustomers) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeFindCustomers
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeFindCustomers(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "FIND_CUSTOMERS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FIND_CUSTOMERS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeFindCustomers) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeFindCustomers
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "FIND_CUSTOMERS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeFindCustomers) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeFindCustomersParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeFindCustomersParamsFieldEmail        = big.NewInt(1 << 1)
)

type FlowActionStripeFindCustomersParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	Email        string `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeFindCustomersParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeFindCustomersParams) GetEmail() string {
	if f == nil {
		return ""
	}
	return f.Email
}

func (f *FlowActionStripeFindCustomersParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeFindCustomersParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomersParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeFindCustomersParamsFieldConnectionId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeFindCustomersParams) SetEmail(email string) {
	f.Email = email
	f.require(flowActionStripeFindCustomersParamsFieldEmail)
}

func (f *FlowActionStripeFindCustomersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeFindCustomersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeFindCustomersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeFindCustomersParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeFindCustomersParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeFindCustomersParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeGetCustomerFieldId           = big.NewInt(1 << 0)
	flowActionStripeGetCustomerFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeGetCustomerFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeGetCustomerFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeGetCustomerFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeGetCustomer struct {
	Id           string                             `json:"id" url:"id"`
	Alias        *string                            `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                              `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                              `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeGetCustomerParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeGetCustomer) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeGetCustomer) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeGetCustomer) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeGetCustomer) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeGetCustomer) GetParams() *FlowActionStripeGetCustomerParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeGetCustomer) Type() string {
	return f.type_
}

func (f *FlowActionStripeGetCustomer) Action() string {
	return f.action
}

func (f *FlowActionStripeGetCustomer) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeGetCustomer) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomer) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeGetCustomerFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomer) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeGetCustomerFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomer) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeGetCustomerFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomer) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeGetCustomerFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomer) SetParams(params *FlowActionStripeGetCustomerParams) {
	f.Params = params
	f.require(flowActionStripeGetCustomerFieldParams)
}

func (f *FlowActionStripeGetCustomer) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeGetCustomer
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeGetCustomer(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "GET_CUSTOMER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "GET_CUSTOMER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeGetCustomer) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeGetCustomer
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "GET_CUSTOMER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeGetCustomer) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeGetCustomerParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeGetCustomerParamsFieldId           = big.NewInt(1 << 1)
)

type FlowActionStripeGetCustomerParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	Id           string `json:"id" url:"id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeGetCustomerParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeGetCustomerParams) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeGetCustomerParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeGetCustomerParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomerParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeGetCustomerParamsFieldConnectionId)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeGetCustomerParams) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeGetCustomerParamsFieldId)
}

func (f *FlowActionStripeGetCustomerParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeGetCustomerParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeGetCustomerParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeGetCustomerParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeGetCustomerParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeGetCustomerParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionStripeMetadata = map[string]string

var (
	flowActionStripeTaxIdFieldType  = big.NewInt(1 << 0)
	flowActionStripeTaxIdFieldValue = big.NewInt(1 << 1)
)

type FlowActionStripeTaxId struct {
	Type  string `json:"type" url:"type"`
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeTaxId) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FlowActionStripeTaxId) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FlowActionStripeTaxId) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeTaxId) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeTaxId) SetType(type_ string) {
	f.Type = type_
	f.require(flowActionStripeTaxIdFieldType)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeTaxId) SetValue(value string) {
	f.Value = value
	f.require(flowActionStripeTaxIdFieldValue)
}

func (f *FlowActionStripeTaxId) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeTaxId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeTaxId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeTaxId) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeTaxId
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeTaxId) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeUpdateCustomerFieldId           = big.NewInt(1 << 0)
	flowActionStripeUpdateCustomerFieldAlias        = big.NewInt(1 << 1)
	flowActionStripeUpdateCustomerFieldAllowFailure = big.NewInt(1 << 2)
	flowActionStripeUpdateCustomerFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionStripeUpdateCustomerFieldParams       = big.NewInt(1 << 4)
)

type FlowActionStripeUpdateCustomer struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionStripeUpdateCustomerParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeUpdateCustomer) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeUpdateCustomer) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionStripeUpdateCustomer) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionStripeUpdateCustomer) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionStripeUpdateCustomer) GetParams() *FlowActionStripeUpdateCustomerParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionStripeUpdateCustomer) Type() string {
	return f.type_
}

func (f *FlowActionStripeUpdateCustomer) Action() string {
	return f.action
}

func (f *FlowActionStripeUpdateCustomer) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeUpdateCustomer) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomer) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeUpdateCustomerFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomer) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionStripeUpdateCustomerFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomer) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionStripeUpdateCustomerFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomer) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionStripeUpdateCustomerFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomer) SetParams(params *FlowActionStripeUpdateCustomerParams) {
	f.Params = params
	f.require(flowActionStripeUpdateCustomerFieldParams)
}

func (f *FlowActionStripeUpdateCustomer) UnmarshalJSON(data []byte) error {
	type embed FlowActionStripeUpdateCustomer
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionStripeUpdateCustomer(unmarshaler.embed)
	if unmarshaler.Type != "STRIPE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "STRIPE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "UPDATE_CUSTOMER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "UPDATE_CUSTOMER", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeUpdateCustomer) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeUpdateCustomer
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "STRIPE",
		Action: "UPDATE_CUSTOMER",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeUpdateCustomer) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionStripeUpdateCustomerParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionStripeUpdateCustomerParamsFieldId           = big.NewInt(1 << 1)
	flowActionStripeUpdateCustomerParamsFieldName         = big.NewInt(1 << 2)
	flowActionStripeUpdateCustomerParamsFieldDescription  = big.NewInt(1 << 3)
	flowActionStripeUpdateCustomerParamsFieldEmail        = big.NewInt(1 << 4)
	flowActionStripeUpdateCustomerParamsFieldPhone        = big.NewInt(1 << 5)
	flowActionStripeUpdateCustomerParamsFieldTaxExempt    = big.NewInt(1 << 6)
	flowActionStripeUpdateCustomerParamsFieldAddress      = big.NewInt(1 << 7)
	flowActionStripeUpdateCustomerParamsFieldMetadata     = big.NewInt(1 << 8)
)

type FlowActionStripeUpdateCustomerParams struct {
	ConnectionId string                    `json:"connection_id" url:"connection_id"`
	Id           string                    `json:"id" url:"id"`
	Name         *string                   `json:"name,omitempty" url:"name,omitempty"`
	Description  *string                   `json:"description,omitempty" url:"description,omitempty"`
	Email        *string                   `json:"email,omitempty" url:"email,omitempty"`
	Phone        *string                   `json:"phone,omitempty" url:"phone,omitempty"`
	TaxExempt    *string                   `json:"tax_exempt,omitempty" url:"tax_exempt,omitempty"`
	Address      *FlowActionStripeAddress  `json:"address,omitempty" url:"address,omitempty"`
	Metadata     *FlowActionStripeMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionStripeUpdateCustomerParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionStripeUpdateCustomerParams) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionStripeUpdateCustomerParams) GetName() string {
	if f == nil || f.Name == nil {
		return ""
	}
	return *f.Name
}

func (f *FlowActionStripeUpdateCustomerParams) GetDescription() string {
	if f == nil || f.Description == nil {
		return ""
	}
	return *f.Description
}

func (f *FlowActionStripeUpdateCustomerParams) GetEmail() string {
	if f == nil || f.Email == nil {
		return ""
	}
	return *f.Email
}

func (f *FlowActionStripeUpdateCustomerParams) GetPhone() string {
	if f == nil || f.Phone == nil {
		return ""
	}
	return *f.Phone
}

func (f *FlowActionStripeUpdateCustomerParams) GetTaxExempt() string {
	if f == nil || f.TaxExempt == nil {
		return ""
	}
	return *f.TaxExempt
}

func (f *FlowActionStripeUpdateCustomerParams) GetAddress() FlowActionStripeAddress {
	if f == nil || f.Address == nil {
		return FlowActionStripeAddress{}
	}
	return *f.Address
}

func (f *FlowActionStripeUpdateCustomerParams) GetMetadata() FlowActionStripeMetadata {
	if f == nil || f.Metadata == nil {
		return nil
	}
	return *f.Metadata
}

func (f *FlowActionStripeUpdateCustomerParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionStripeUpdateCustomerParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionStripeUpdateCustomerParamsFieldConnectionId)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetId(id string) {
	f.Id = id
	f.require(flowActionStripeUpdateCustomerParamsFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetName(name *string) {
	f.Name = name
	f.require(flowActionStripeUpdateCustomerParamsFieldName)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetDescription(description *string) {
	f.Description = description
	f.require(flowActionStripeUpdateCustomerParamsFieldDescription)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetEmail(email *string) {
	f.Email = email
	f.require(flowActionStripeUpdateCustomerParamsFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetPhone(phone *string) {
	f.Phone = phone
	f.require(flowActionStripeUpdateCustomerParamsFieldPhone)
}

// SetTaxExempt sets the TaxExempt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetTaxExempt(taxExempt *string) {
	f.TaxExempt = taxExempt
	f.require(flowActionStripeUpdateCustomerParamsFieldTaxExempt)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetAddress(address *FlowActionStripeAddress) {
	f.Address = address
	f.require(flowActionStripeUpdateCustomerParamsFieldAddress)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionStripeUpdateCustomerParams) SetMetadata(metadata *FlowActionStripeMetadata) {
	f.Metadata = metadata
	f.require(flowActionStripeUpdateCustomerParamsFieldMetadata)
}

func (f *FlowActionStripeUpdateCustomerParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionStripeUpdateCustomerParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionStripeUpdateCustomerParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionStripeUpdateCustomerParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionStripeUpdateCustomerParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionStripeUpdateCustomerParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionTelegram = *FlowActionTelegramSendMessage

var (
	flowActionTelegramSendMessageFieldId           = big.NewInt(1 << 0)
	flowActionTelegramSendMessageFieldAlias        = big.NewInt(1 << 1)
	flowActionTelegramSendMessageFieldAllowFailure = big.NewInt(1 << 2)
	flowActionTelegramSendMessageFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionTelegramSendMessageFieldParams       = big.NewInt(1 << 4)
)

type FlowActionTelegramSendMessage struct {
	Id           string                               `json:"id" url:"id"`
	Alias        *string                              `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionTelegramSendMessageParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionTelegramSendMessage) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionTelegramSendMessage) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionTelegramSendMessage) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionTelegramSendMessage) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionTelegramSendMessage) GetParams() *FlowActionTelegramSendMessageParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionTelegramSendMessage) Type() string {
	return f.type_
}

func (f *FlowActionTelegramSendMessage) Action() string {
	return f.action
}

func (f *FlowActionTelegramSendMessage) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionTelegramSendMessage) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessage) SetId(id string) {
	f.Id = id
	f.require(flowActionTelegramSendMessageFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessage) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionTelegramSendMessageFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessage) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionTelegramSendMessageFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessage) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionTelegramSendMessageFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessage) SetParams(params *FlowActionTelegramSendMessageParams) {
	f.Params = params
	f.require(flowActionTelegramSendMessageFieldParams)
}

func (f *FlowActionTelegramSendMessage) UnmarshalJSON(data []byte) error {
	type embed FlowActionTelegramSendMessage
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionTelegramSendMessage(unmarshaler.embed)
	if unmarshaler.Type != "TELEGRAM" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "TELEGRAM", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_MESSAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_MESSAGE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionTelegramSendMessage) MarshalJSON() ([]byte, error) {
	type embed FlowActionTelegramSendMessage
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "TELEGRAM",
		Action: "SEND_MESSAGE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionTelegramSendMessage) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionTelegramSendMessageParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionTelegramSendMessageParamsFieldChatId       = big.NewInt(1 << 1)
	flowActionTelegramSendMessageParamsFieldText         = big.NewInt(1 << 2)
)

type FlowActionTelegramSendMessageParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	ChatId       string `json:"chat_id" url:"chat_id"`
	Text         string `json:"text" url:"text"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionTelegramSendMessageParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionTelegramSendMessageParams) GetChatId() string {
	if f == nil {
		return ""
	}
	return f.ChatId
}

func (f *FlowActionTelegramSendMessageParams) GetText() string {
	if f == nil {
		return ""
	}
	return f.Text
}

func (f *FlowActionTelegramSendMessageParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionTelegramSendMessageParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessageParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionTelegramSendMessageParamsFieldConnectionId)
}

// SetChatId sets the ChatId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessageParams) SetChatId(chatId string) {
	f.ChatId = chatId
	f.require(flowActionTelegramSendMessageParamsFieldChatId)
}

// SetText sets the Text field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTelegramSendMessageParams) SetText(text string) {
	f.Text = text
	f.require(flowActionTelegramSendMessageParamsFieldText)
}

func (f *FlowActionTelegramSendMessageParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionTelegramSendMessageParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionTelegramSendMessageParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionTelegramSendMessageParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionTelegramSendMessageParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionTelegramSendMessageParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionTwilio struct {
	FlowActionTwilioMakeCall *FlowActionTwilioMakeCall
	FlowActionTwilioSendSms  *FlowActionTwilioSendSms

	typ string
}

func (f *FlowActionTwilio) GetFlowActionTwilioMakeCall() *FlowActionTwilioMakeCall {
	if f == nil {
		return nil
	}
	return f.FlowActionTwilioMakeCall
}

func (f *FlowActionTwilio) GetFlowActionTwilioSendSms() *FlowActionTwilioSendSms {
	if f == nil {
		return nil
	}
	return f.FlowActionTwilioSendSms
}

func (f *FlowActionTwilio) UnmarshalJSON(data []byte) error {
	valueFlowActionTwilioMakeCall := new(FlowActionTwilioMakeCall)
	if err := json.Unmarshal(data, &valueFlowActionTwilioMakeCall); err == nil {
		f.typ = "FlowActionTwilioMakeCall"
		f.FlowActionTwilioMakeCall = valueFlowActionTwilioMakeCall
		return nil
	}
	valueFlowActionTwilioSendSms := new(FlowActionTwilioSendSms)
	if err := json.Unmarshal(data, &valueFlowActionTwilioSendSms); err == nil {
		f.typ = "FlowActionTwilioSendSms"
		f.FlowActionTwilioSendSms = valueFlowActionTwilioSendSms
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionTwilio) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionTwilioMakeCall" || f.FlowActionTwilioMakeCall != nil {
		return json.Marshal(f.FlowActionTwilioMakeCall)
	}
	if f.typ == "FlowActionTwilioSendSms" || f.FlowActionTwilioSendSms != nil {
		return json.Marshal(f.FlowActionTwilioSendSms)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionTwilioVisitor interface {
	VisitFlowActionTwilioMakeCall(*FlowActionTwilioMakeCall) error
	VisitFlowActionTwilioSendSms(*FlowActionTwilioSendSms) error
}

func (f *FlowActionTwilio) Accept(visitor FlowActionTwilioVisitor) error {
	if f.typ == "FlowActionTwilioMakeCall" || f.FlowActionTwilioMakeCall != nil {
		return visitor.VisitFlowActionTwilioMakeCall(f.FlowActionTwilioMakeCall)
	}
	if f.typ == "FlowActionTwilioSendSms" || f.FlowActionTwilioSendSms != nil {
		return visitor.VisitFlowActionTwilioSendSms(f.FlowActionTwilioSendSms)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionTwilioMakeCallFieldId           = big.NewInt(1 << 0)
	flowActionTwilioMakeCallFieldAlias        = big.NewInt(1 << 1)
	flowActionTwilioMakeCallFieldAllowFailure = big.NewInt(1 << 2)
	flowActionTwilioMakeCallFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionTwilioMakeCallFieldParams       = big.NewInt(1 << 4)
)

type FlowActionTwilioMakeCall struct {
	Id           string                          `json:"id" url:"id"`
	Alias        *string                         `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                           `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                           `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionTwilioMakeCallParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionTwilioMakeCall) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionTwilioMakeCall) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionTwilioMakeCall) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionTwilioMakeCall) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionTwilioMakeCall) GetParams() *FlowActionTwilioMakeCallParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionTwilioMakeCall) Type() string {
	return f.type_
}

func (f *FlowActionTwilioMakeCall) Action() string {
	return f.action
}

func (f *FlowActionTwilioMakeCall) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionTwilioMakeCall) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCall) SetId(id string) {
	f.Id = id
	f.require(flowActionTwilioMakeCallFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCall) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionTwilioMakeCallFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCall) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionTwilioMakeCallFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCall) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionTwilioMakeCallFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCall) SetParams(params *FlowActionTwilioMakeCallParams) {
	f.Params = params
	f.require(flowActionTwilioMakeCallFieldParams)
}

func (f *FlowActionTwilioMakeCall) UnmarshalJSON(data []byte) error {
	type embed FlowActionTwilioMakeCall
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionTwilioMakeCall(unmarshaler.embed)
	if unmarshaler.Type != "TWILIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "TWILIO", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "MAKE_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "MAKE_CALL", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionTwilioMakeCall) MarshalJSON() ([]byte, error) {
	type embed FlowActionTwilioMakeCall
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "TWILIO",
		Action: "MAKE_CALL",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionTwilioMakeCall) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionTwilioMakeCallParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionTwilioMakeCallParamsFieldFrom         = big.NewInt(1 << 1)
	flowActionTwilioMakeCallParamsFieldTo           = big.NewInt(1 << 2)
	flowActionTwilioMakeCallParamsFieldPayload      = big.NewInt(1 << 3)
)

type FlowActionTwilioMakeCallParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	From         string `json:"from" url:"from"`
	To           string `json:"to" url:"to"`
	Payload      string `json:"payload" url:"payload"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionTwilioMakeCallParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionTwilioMakeCallParams) GetFrom() string {
	if f == nil {
		return ""
	}
	return f.From
}

func (f *FlowActionTwilioMakeCallParams) GetTo() string {
	if f == nil {
		return ""
	}
	return f.To
}

func (f *FlowActionTwilioMakeCallParams) GetPayload() string {
	if f == nil {
		return ""
	}
	return f.Payload
}

func (f *FlowActionTwilioMakeCallParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionTwilioMakeCallParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCallParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionTwilioMakeCallParamsFieldConnectionId)
}

// SetFrom sets the From field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCallParams) SetFrom(from string) {
	f.From = from
	f.require(flowActionTwilioMakeCallParamsFieldFrom)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCallParams) SetTo(to string) {
	f.To = to
	f.require(flowActionTwilioMakeCallParamsFieldTo)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioMakeCallParams) SetPayload(payload string) {
	f.Payload = payload
	f.require(flowActionTwilioMakeCallParamsFieldPayload)
}

func (f *FlowActionTwilioMakeCallParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionTwilioMakeCallParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionTwilioMakeCallParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionTwilioMakeCallParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionTwilioMakeCallParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionTwilioMakeCallParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionTwilioSendSmsFieldId           = big.NewInt(1 << 0)
	flowActionTwilioSendSmsFieldAlias        = big.NewInt(1 << 1)
	flowActionTwilioSendSmsFieldAllowFailure = big.NewInt(1 << 2)
	flowActionTwilioSendSmsFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionTwilioSendSmsFieldParams       = big.NewInt(1 << 4)
)

type FlowActionTwilioSendSms struct {
	Id           string                         `json:"id" url:"id"`
	Alias        *string                        `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                          `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                          `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionTwilioSendSmsParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionTwilioSendSms) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionTwilioSendSms) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionTwilioSendSms) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionTwilioSendSms) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionTwilioSendSms) GetParams() *FlowActionTwilioSendSmsParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionTwilioSendSms) Type() string {
	return f.type_
}

func (f *FlowActionTwilioSendSms) Action() string {
	return f.action
}

func (f *FlowActionTwilioSendSms) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionTwilioSendSms) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSms) SetId(id string) {
	f.Id = id
	f.require(flowActionTwilioSendSmsFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSms) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionTwilioSendSmsFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSms) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionTwilioSendSmsFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSms) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionTwilioSendSmsFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSms) SetParams(params *FlowActionTwilioSendSmsParams) {
	f.Params = params
	f.require(flowActionTwilioSendSmsFieldParams)
}

func (f *FlowActionTwilioSendSms) UnmarshalJSON(data []byte) error {
	type embed FlowActionTwilioSendSms
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionTwilioSendSms(unmarshaler.embed)
	if unmarshaler.Type != "TWILIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "TWILIO", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_SMS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_SMS", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionTwilioSendSms) MarshalJSON() ([]byte, error) {
	type embed FlowActionTwilioSendSms
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "TWILIO",
		Action: "SEND_SMS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionTwilioSendSms) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionTwilioSendSmsParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionTwilioSendSmsParamsFieldFrom         = big.NewInt(1 << 1)
	flowActionTwilioSendSmsParamsFieldTo           = big.NewInt(1 << 2)
	flowActionTwilioSendSmsParamsFieldMessage      = big.NewInt(1 << 3)
)

type FlowActionTwilioSendSmsParams struct {
	ConnectionId string `json:"connection_id" url:"connection_id"`
	From         string `json:"from" url:"from"`
	To           string `json:"to" url:"to"`
	Message      string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionTwilioSendSmsParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionTwilioSendSmsParams) GetFrom() string {
	if f == nil {
		return ""
	}
	return f.From
}

func (f *FlowActionTwilioSendSmsParams) GetTo() string {
	if f == nil {
		return ""
	}
	return f.To
}

func (f *FlowActionTwilioSendSmsParams) GetMessage() string {
	if f == nil {
		return ""
	}
	return f.Message
}

func (f *FlowActionTwilioSendSmsParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionTwilioSendSmsParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSmsParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionTwilioSendSmsParamsFieldConnectionId)
}

// SetFrom sets the From field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSmsParams) SetFrom(from string) {
	f.From = from
	f.require(flowActionTwilioSendSmsParamsFieldFrom)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSmsParams) SetTo(to string) {
	f.To = to
	f.require(flowActionTwilioSendSmsParamsFieldTo)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionTwilioSendSmsParams) SetMessage(message string) {
	f.Message = message
	f.require(flowActionTwilioSendSmsParamsFieldMessage)
}

func (f *FlowActionTwilioSendSmsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionTwilioSendSmsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionTwilioSendSmsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionTwilioSendSmsParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionTwilioSendSmsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionTwilioSendSmsParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionWhatsapp = *FlowActionWhatsappSendMessage

var (
	flowActionWhatsappSendMessageFieldId           = big.NewInt(1 << 0)
	flowActionWhatsappSendMessageFieldAlias        = big.NewInt(1 << 1)
	flowActionWhatsappSendMessageFieldAllowFailure = big.NewInt(1 << 2)
	flowActionWhatsappSendMessageFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionWhatsappSendMessageFieldParams       = big.NewInt(1 << 4)
)

type FlowActionWhatsappSendMessage struct {
	Id           string                               `json:"id" url:"id"`
	Alias        *string                              `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionWhatsappSendMessageParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionWhatsappSendMessage) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionWhatsappSendMessage) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionWhatsappSendMessage) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionWhatsappSendMessage) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionWhatsappSendMessage) GetParams() *FlowActionWhatsappSendMessageParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionWhatsappSendMessage) Type() string {
	return f.type_
}

func (f *FlowActionWhatsappSendMessage) Action() string {
	return f.action
}

func (f *FlowActionWhatsappSendMessage) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionWhatsappSendMessage) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessage) SetId(id string) {
	f.Id = id
	f.require(flowActionWhatsappSendMessageFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessage) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionWhatsappSendMessageFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessage) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionWhatsappSendMessageFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessage) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionWhatsappSendMessageFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessage) SetParams(params *FlowActionWhatsappSendMessageParams) {
	f.Params = params
	f.require(flowActionWhatsappSendMessageFieldParams)
}

func (f *FlowActionWhatsappSendMessage) UnmarshalJSON(data []byte) error {
	type embed FlowActionWhatsappSendMessage
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionWhatsappSendMessage(unmarshaler.embed)
	if unmarshaler.Type != "WHATSAPP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "WHATSAPP", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SEND_MESSAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SEND_MESSAGE", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionWhatsappSendMessage) MarshalJSON() ([]byte, error) {
	type embed FlowActionWhatsappSendMessage
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "WHATSAPP",
		Action: "SEND_MESSAGE",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionWhatsappSendMessage) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionWhatsappSendMessageParamsFieldConnectionId    = big.NewInt(1 << 0)
	flowActionWhatsappSendMessageParamsFieldSenderId        = big.NewInt(1 << 1)
	flowActionWhatsappSendMessageParamsFieldRecipientNumber = big.NewInt(1 << 2)
	flowActionWhatsappSendMessageParamsFieldType            = big.NewInt(1 << 3)
	flowActionWhatsappSendMessageParamsFieldPayload         = big.NewInt(1 << 4)
)

type FlowActionWhatsappSendMessageParams struct {
	ConnectionId    string                                      `json:"connection_id" url:"connection_id"`
	SenderId        string                                      `json:"sender_id" url:"sender_id"`
	RecipientNumber string                                      `json:"recipient_number" url:"recipient_number"`
	Type            FlowActionWhatsappSendMessageParamsType     `json:"type" url:"type"`
	Payload         *FlowActionWhatsappSendMessageParamsPayload `json:"payload" url:"payload"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionWhatsappSendMessageParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionWhatsappSendMessageParams) GetSenderId() string {
	if f == nil {
		return ""
	}
	return f.SenderId
}

func (f *FlowActionWhatsappSendMessageParams) GetRecipientNumber() string {
	if f == nil {
		return ""
	}
	return f.RecipientNumber
}

func (f *FlowActionWhatsappSendMessageParams) GetType() FlowActionWhatsappSendMessageParamsType {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FlowActionWhatsappSendMessageParams) GetPayload() *FlowActionWhatsappSendMessageParamsPayload {
	if f == nil {
		return nil
	}
	return f.Payload
}

func (f *FlowActionWhatsappSendMessageParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionWhatsappSendMessageParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessageParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionWhatsappSendMessageParamsFieldConnectionId)
}

// SetSenderId sets the SenderId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessageParams) SetSenderId(senderId string) {
	f.SenderId = senderId
	f.require(flowActionWhatsappSendMessageParamsFieldSenderId)
}

// SetRecipientNumber sets the RecipientNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessageParams) SetRecipientNumber(recipientNumber string) {
	f.RecipientNumber = recipientNumber
	f.require(flowActionWhatsappSendMessageParamsFieldRecipientNumber)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessageParams) SetType(type_ FlowActionWhatsappSendMessageParamsType) {
	f.Type = type_
	f.require(flowActionWhatsappSendMessageParamsFieldType)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionWhatsappSendMessageParams) SetPayload(payload *FlowActionWhatsappSendMessageParamsPayload) {
	f.Payload = payload
	f.require(flowActionWhatsappSendMessageParamsFieldPayload)
}

func (f *FlowActionWhatsappSendMessageParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionWhatsappSendMessageParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionWhatsappSendMessageParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionWhatsappSendMessageParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionWhatsappSendMessageParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionWhatsappSendMessageParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionWhatsappSendMessageParamsPayload struct {
	FlowActionWhatsappSendMessageParamsPayloadObject FlowActionWhatsappSendMessageParamsPayloadObject
	String                                           string

	typ string
}

func (f *FlowActionWhatsappSendMessageParamsPayload) GetFlowActionWhatsappSendMessageParamsPayloadObject() FlowActionWhatsappSendMessageParamsPayloadObject {
	if f == nil {
		return nil
	}
	return f.FlowActionWhatsappSendMessageParamsPayloadObject
}

func (f *FlowActionWhatsappSendMessageParamsPayload) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionWhatsappSendMessageParamsPayload) UnmarshalJSON(data []byte) error {
	var valueFlowActionWhatsappSendMessageParamsPayloadObject FlowActionWhatsappSendMessageParamsPayloadObject
	if err := json.Unmarshal(data, &valueFlowActionWhatsappSendMessageParamsPayloadObject); err == nil {
		f.typ = "FlowActionWhatsappSendMessageParamsPayloadObject"
		f.FlowActionWhatsappSendMessageParamsPayloadObject = valueFlowActionWhatsappSendMessageParamsPayloadObject
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionWhatsappSendMessageParamsPayload) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionWhatsappSendMessageParamsPayloadObject" || f.FlowActionWhatsappSendMessageParamsPayloadObject != nil {
		return json.Marshal(f.FlowActionWhatsappSendMessageParamsPayloadObject)
	}
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionWhatsappSendMessageParamsPayloadVisitor interface {
	VisitFlowActionWhatsappSendMessageParamsPayloadObject(FlowActionWhatsappSendMessageParamsPayloadObject) error
	VisitString(string) error
}

func (f *FlowActionWhatsappSendMessageParamsPayload) Accept(visitor FlowActionWhatsappSendMessageParamsPayloadVisitor) error {
	if f.typ == "FlowActionWhatsappSendMessageParamsPayloadObject" || f.FlowActionWhatsappSendMessageParamsPayloadObject != nil {
		return visitor.VisitFlowActionWhatsappSendMessageParamsPayloadObject(f.FlowActionWhatsappSendMessageParamsPayloadObject)
	}
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionWhatsappSendMessageParamsPayloadObject = map[string]interface{}

type FlowActionWhatsappSendMessageParamsType string

const (
	FlowActionWhatsappSendMessageParamsTypeAudio       FlowActionWhatsappSendMessageParamsType = "AUDIO"
	FlowActionWhatsappSendMessageParamsTypeContacts    FlowActionWhatsappSendMessageParamsType = "CONTACTS"
	FlowActionWhatsappSendMessageParamsTypeDocument    FlowActionWhatsappSendMessageParamsType = "DOCUMENT"
	FlowActionWhatsappSendMessageParamsTypeImage       FlowActionWhatsappSendMessageParamsType = "IMAGE"
	FlowActionWhatsappSendMessageParamsTypeInteractive FlowActionWhatsappSendMessageParamsType = "INTERACTIVE"
	FlowActionWhatsappSendMessageParamsTypeLocation    FlowActionWhatsappSendMessageParamsType = "LOCATION"
	FlowActionWhatsappSendMessageParamsTypeSticker     FlowActionWhatsappSendMessageParamsType = "STICKER"
	FlowActionWhatsappSendMessageParamsTypeTemplate    FlowActionWhatsappSendMessageParamsType = "TEMPLATE"
	FlowActionWhatsappSendMessageParamsTypeText        FlowActionWhatsappSendMessageParamsType = "TEXT"
)

func NewFlowActionWhatsappSendMessageParamsTypeFromString(s string) (FlowActionWhatsappSendMessageParamsType, error) {
	switch s {
	case "AUDIO":
		return FlowActionWhatsappSendMessageParamsTypeAudio, nil
	case "CONTACTS":
		return FlowActionWhatsappSendMessageParamsTypeContacts, nil
	case "DOCUMENT":
		return FlowActionWhatsappSendMessageParamsTypeDocument, nil
	case "IMAGE":
		return FlowActionWhatsappSendMessageParamsTypeImage, nil
	case "INTERACTIVE":
		return FlowActionWhatsappSendMessageParamsTypeInteractive, nil
	case "LOCATION":
		return FlowActionWhatsappSendMessageParamsTypeLocation, nil
	case "STICKER":
		return FlowActionWhatsappSendMessageParamsTypeSticker, nil
	case "TEMPLATE":
		return FlowActionWhatsappSendMessageParamsTypeTemplate, nil
	case "TEXT":
		return FlowActionWhatsappSendMessageParamsTypeText, nil
	}
	var t FlowActionWhatsappSendMessageParamsType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionWhatsappSendMessageParamsType) Ptr() *FlowActionWhatsappSendMessageParamsType {
	return &f
}

type FlowActionXml struct {
	FlowActionXmlParseXml     *FlowActionXmlParseXml
	FlowActionXmlSerializeXml *FlowActionXmlSerializeXml

	typ string
}

func (f *FlowActionXml) GetFlowActionXmlParseXml() *FlowActionXmlParseXml {
	if f == nil {
		return nil
	}
	return f.FlowActionXmlParseXml
}

func (f *FlowActionXml) GetFlowActionXmlSerializeXml() *FlowActionXmlSerializeXml {
	if f == nil {
		return nil
	}
	return f.FlowActionXmlSerializeXml
}

func (f *FlowActionXml) UnmarshalJSON(data []byte) error {
	valueFlowActionXmlParseXml := new(FlowActionXmlParseXml)
	if err := json.Unmarshal(data, &valueFlowActionXmlParseXml); err == nil {
		f.typ = "FlowActionXmlParseXml"
		f.FlowActionXmlParseXml = valueFlowActionXmlParseXml
		return nil
	}
	valueFlowActionXmlSerializeXml := new(FlowActionXmlSerializeXml)
	if err := json.Unmarshal(data, &valueFlowActionXmlSerializeXml); err == nil {
		f.typ = "FlowActionXmlSerializeXml"
		f.FlowActionXmlSerializeXml = valueFlowActionXmlSerializeXml
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionXml) MarshalJSON() ([]byte, error) {
	if f.typ == "FlowActionXmlParseXml" || f.FlowActionXmlParseXml != nil {
		return json.Marshal(f.FlowActionXmlParseXml)
	}
	if f.typ == "FlowActionXmlSerializeXml" || f.FlowActionXmlSerializeXml != nil {
		return json.Marshal(f.FlowActionXmlSerializeXml)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionXmlVisitor interface {
	VisitFlowActionXmlParseXml(*FlowActionXmlParseXml) error
	VisitFlowActionXmlSerializeXml(*FlowActionXmlSerializeXml) error
}

func (f *FlowActionXml) Accept(visitor FlowActionXmlVisitor) error {
	if f.typ == "FlowActionXmlParseXml" || f.FlowActionXmlParseXml != nil {
		return visitor.VisitFlowActionXmlParseXml(f.FlowActionXmlParseXml)
	}
	if f.typ == "FlowActionXmlSerializeXml" || f.FlowActionXmlSerializeXml != nil {
		return visitor.VisitFlowActionXmlSerializeXml(f.FlowActionXmlSerializeXml)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

var (
	flowActionXmlParseXmlFieldId           = big.NewInt(1 << 0)
	flowActionXmlParseXmlFieldAlias        = big.NewInt(1 << 1)
	flowActionXmlParseXmlFieldAllowFailure = big.NewInt(1 << 2)
	flowActionXmlParseXmlFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionXmlParseXmlFieldParams       = big.NewInt(1 << 4)
)

type FlowActionXmlParseXml struct {
	Id           string                       `json:"id" url:"id"`
	Alias        *string                      `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                        `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                        `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionXmlParseXmlParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionXmlParseXml) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionXmlParseXml) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionXmlParseXml) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionXmlParseXml) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionXmlParseXml) GetParams() *FlowActionXmlParseXmlParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionXmlParseXml) Type() string {
	return f.type_
}

func (f *FlowActionXmlParseXml) Action() string {
	return f.action
}

func (f *FlowActionXmlParseXml) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionXmlParseXml) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlParseXml) SetId(id string) {
	f.Id = id
	f.require(flowActionXmlParseXmlFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlParseXml) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionXmlParseXmlFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlParseXml) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionXmlParseXmlFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlParseXml) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionXmlParseXmlFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlParseXml) SetParams(params *FlowActionXmlParseXmlParams) {
	f.Params = params
	f.require(flowActionXmlParseXmlFieldParams)
}

func (f *FlowActionXmlParseXml) UnmarshalJSON(data []byte) error {
	type embed FlowActionXmlParseXml
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionXmlParseXml(unmarshaler.embed)
	if unmarshaler.Type != "XML" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "XML", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "PARSE_XML" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "PARSE_XML", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionXmlParseXml) MarshalJSON() ([]byte, error) {
	type embed FlowActionXmlParseXml
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "XML",
		Action: "PARSE_XML",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionXmlParseXml) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionXmlParseXmlParamsFieldXml = big.NewInt(1 << 0)
)

type FlowActionXmlParseXmlParams struct {
	Xml string `json:"xml" url:"xml"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionXmlParseXmlParams) GetXml() string {
	if f == nil {
		return ""
	}
	return f.Xml
}

func (f *FlowActionXmlParseXmlParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionXmlParseXmlParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetXml sets the Xml field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlParseXmlParams) SetXml(xml string) {
	f.Xml = xml
	f.require(flowActionXmlParseXmlParamsFieldXml)
}

func (f *FlowActionXmlParseXmlParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionXmlParseXmlParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionXmlParseXmlParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionXmlParseXmlParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionXmlParseXmlParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionXmlParseXmlParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionXmlSerializeXmlFieldId           = big.NewInt(1 << 0)
	flowActionXmlSerializeXmlFieldAlias        = big.NewInt(1 << 1)
	flowActionXmlSerializeXmlFieldAllowFailure = big.NewInt(1 << 2)
	flowActionXmlSerializeXmlFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionXmlSerializeXmlFieldParams       = big.NewInt(1 << 4)
)

type FlowActionXmlSerializeXml struct {
	Id           string                           `json:"id" url:"id"`
	Alias        *string                          `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                            `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                            `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionXmlSerializeXmlParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionXmlSerializeXml) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionXmlSerializeXml) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionXmlSerializeXml) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionXmlSerializeXml) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionXmlSerializeXml) GetParams() *FlowActionXmlSerializeXmlParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionXmlSerializeXml) Type() string {
	return f.type_
}

func (f *FlowActionXmlSerializeXml) Action() string {
	return f.action
}

func (f *FlowActionXmlSerializeXml) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionXmlSerializeXml) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlSerializeXml) SetId(id string) {
	f.Id = id
	f.require(flowActionXmlSerializeXmlFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlSerializeXml) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionXmlSerializeXmlFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlSerializeXml) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionXmlSerializeXmlFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlSerializeXml) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionXmlSerializeXmlFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlSerializeXml) SetParams(params *FlowActionXmlSerializeXmlParams) {
	f.Params = params
	f.require(flowActionXmlSerializeXmlFieldParams)
}

func (f *FlowActionXmlSerializeXml) UnmarshalJSON(data []byte) error {
	type embed FlowActionXmlSerializeXml
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionXmlSerializeXml(unmarshaler.embed)
	if unmarshaler.Type != "XML" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "XML", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "SERIALIZE_XML" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "SERIALIZE_XML", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionXmlSerializeXml) MarshalJSON() ([]byte, error) {
	type embed FlowActionXmlSerializeXml
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "XML",
		Action: "SERIALIZE_XML",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionXmlSerializeXml) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionXmlSerializeXmlParamsFieldObject = big.NewInt(1 << 0)
)

type FlowActionXmlSerializeXmlParams struct {
	Object *FlowActionXmlSerializeXmlParamsObject `json:"object" url:"object"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionXmlSerializeXmlParams) GetObject() *FlowActionXmlSerializeXmlParamsObject {
	if f == nil {
		return nil
	}
	return f.Object
}

func (f *FlowActionXmlSerializeXmlParams) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionXmlSerializeXmlParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetObject sets the Object field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionXmlSerializeXmlParams) SetObject(object *FlowActionXmlSerializeXmlParamsObject) {
	f.Object = object
	f.require(flowActionXmlSerializeXmlParamsFieldObject)
}

func (f *FlowActionXmlSerializeXmlParams) UnmarshalJSON(data []byte) error {
	type unmarshaler FlowActionXmlSerializeXmlParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlowActionXmlSerializeXmlParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionXmlSerializeXmlParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionXmlSerializeXmlParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionXmlSerializeXmlParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionXmlSerializeXmlParamsObject struct {
	String                                      string
	FlowActionXmlSerializeXmlParamsObjectObject FlowActionXmlSerializeXmlParamsObjectObject

	typ string
}

func (f *FlowActionXmlSerializeXmlParamsObject) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FlowActionXmlSerializeXmlParamsObject) GetFlowActionXmlSerializeXmlParamsObjectObject() FlowActionXmlSerializeXmlParamsObjectObject {
	if f == nil {
		return nil
	}
	return f.FlowActionXmlSerializeXmlParamsObjectObject
}

func (f *FlowActionXmlSerializeXmlParamsObject) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueFlowActionXmlSerializeXmlParamsObjectObject FlowActionXmlSerializeXmlParamsObjectObject
	if err := json.Unmarshal(data, &valueFlowActionXmlSerializeXmlParamsObjectObject); err == nil {
		f.typ = "FlowActionXmlSerializeXmlParamsObjectObject"
		f.FlowActionXmlSerializeXmlParamsObjectObject = valueFlowActionXmlSerializeXmlParamsObjectObject
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FlowActionXmlSerializeXmlParamsObject) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "FlowActionXmlSerializeXmlParamsObjectObject" || f.FlowActionXmlSerializeXmlParamsObjectObject != nil {
		return json.Marshal(f.FlowActionXmlSerializeXmlParamsObjectObject)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionXmlSerializeXmlParamsObjectVisitor interface {
	VisitString(string) error
	VisitFlowActionXmlSerializeXmlParamsObjectObject(FlowActionXmlSerializeXmlParamsObjectObject) error
}

func (f *FlowActionXmlSerializeXmlParamsObject) Accept(visitor FlowActionXmlSerializeXmlParamsObjectVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "FlowActionXmlSerializeXmlParamsObjectObject" || f.FlowActionXmlSerializeXmlParamsObjectObject != nil {
		return visitor.VisitFlowActionXmlSerializeXmlParamsObjectObject(f.FlowActionXmlSerializeXmlParamsObjectObject)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FlowActionXmlSerializeXmlParamsObjectObject = map[string]interface{}

type FlowActionZapier = *FlowActionZapierTriggerWebhook

var (
	flowActionZapierTriggerWebhookFieldId           = big.NewInt(1 << 0)
	flowActionZapierTriggerWebhookFieldAlias        = big.NewInt(1 << 1)
	flowActionZapierTriggerWebhookFieldAllowFailure = big.NewInt(1 << 2)
	flowActionZapierTriggerWebhookFieldMaskOutput   = big.NewInt(1 << 3)
	flowActionZapierTriggerWebhookFieldParams       = big.NewInt(1 << 4)
)

type FlowActionZapierTriggerWebhook struct {
	Id           string                                `json:"id" url:"id"`
	Alias        *string                               `json:"alias,omitempty" url:"alias,omitempty"`
	AllowFailure *bool                                 `json:"allow_failure,omitempty" url:"allow_failure,omitempty"`
	MaskOutput   *bool                                 `json:"mask_output,omitempty" url:"mask_output,omitempty"`
	Params       *FlowActionZapierTriggerWebhookParams `json:"params" url:"params"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowActionZapierTriggerWebhook) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowActionZapierTriggerWebhook) GetAlias() string {
	if f == nil || f.Alias == nil {
		return ""
	}
	return *f.Alias
}

func (f *FlowActionZapierTriggerWebhook) GetAllowFailure() bool {
	if f == nil || f.AllowFailure == nil {
		return false
	}
	return *f.AllowFailure
}

func (f *FlowActionZapierTriggerWebhook) GetMaskOutput() bool {
	if f == nil || f.MaskOutput == nil {
		return false
	}
	return *f.MaskOutput
}

func (f *FlowActionZapierTriggerWebhook) GetParams() *FlowActionZapierTriggerWebhookParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FlowActionZapierTriggerWebhook) Type() string {
	return f.type_
}

func (f *FlowActionZapierTriggerWebhook) Action() string {
	return f.action
}

func (f *FlowActionZapierTriggerWebhook) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowActionZapierTriggerWebhook) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhook) SetId(id string) {
	f.Id = id
	f.require(flowActionZapierTriggerWebhookFieldId)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhook) SetAlias(alias *string) {
	f.Alias = alias
	f.require(flowActionZapierTriggerWebhookFieldAlias)
}

// SetAllowFailure sets the AllowFailure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhook) SetAllowFailure(allowFailure *bool) {
	f.AllowFailure = allowFailure
	f.require(flowActionZapierTriggerWebhookFieldAllowFailure)
}

// SetMaskOutput sets the MaskOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhook) SetMaskOutput(maskOutput *bool) {
	f.MaskOutput = maskOutput
	f.require(flowActionZapierTriggerWebhookFieldMaskOutput)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhook) SetParams(params *FlowActionZapierTriggerWebhookParams) {
	f.Params = params
	f.require(flowActionZapierTriggerWebhookFieldParams)
}

func (f *FlowActionZapierTriggerWebhook) UnmarshalJSON(data []byte) error {
	type embed FlowActionZapierTriggerWebhook
	var unmarshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionZapierTriggerWebhook(unmarshaler.embed)
	if unmarshaler.Type != "ZAPIER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "ZAPIER", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type
	if unmarshaler.Action != "TRIGGER_WEBHOOK" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "TRIGGER_WEBHOOK", unmarshaler.Action)
	}
	f.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *f, "type", "action")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionZapierTriggerWebhook) MarshalJSON() ([]byte, error) {
	type embed FlowActionZapierTriggerWebhook
	var marshaler = struct {
		embed
		Type   string `json:"type"`
		Action string `json:"action"`
	}{
		embed:  embed(*f),
		Type:   "ZAPIER",
		Action: "TRIGGER_WEBHOOK",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowActionZapierTriggerWebhook) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	flowActionZapierTriggerWebhookParamsFieldConnectionId = big.NewInt(1 << 0)
	flowActionZapierTriggerWebhookParamsFieldMethod       = big.NewInt(1 << 1)
)

type FlowActionZapierTriggerWebhookParams struct {
	ConnectionId string                                      `json:"connection_id" url:"connection_id"`
	Method       *FlowActionZapierTriggerWebhookParamsMethod `json:"method,omitempty" url:"method,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FlowActionZapierTriggerWebhookParams) GetConnectionId() string {
	if f == nil {
		return ""
	}
	return f.ConnectionId
}

func (f *FlowActionZapierTriggerWebhookParams) GetMethod() FlowActionZapierTriggerWebhookParamsMethod {
	if f == nil || f.Method == nil {
		return ""
	}
	return *f.Method
}

func (f *FlowActionZapierTriggerWebhookParams) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FlowActionZapierTriggerWebhookParams) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetConnectionId sets the ConnectionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhookParams) SetConnectionId(connectionId string) {
	f.ConnectionId = connectionId
	f.require(flowActionZapierTriggerWebhookParamsFieldConnectionId)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowActionZapierTriggerWebhookParams) SetMethod(method *FlowActionZapierTriggerWebhookParamsMethod) {
	f.Method = method
	f.require(flowActionZapierTriggerWebhookParamsFieldMethod)
}

func (f *FlowActionZapierTriggerWebhookParams) UnmarshalJSON(data []byte) error {
	type embed FlowActionZapierTriggerWebhookParams
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowActionZapierTriggerWebhookParams(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowActionZapierTriggerWebhookParams) MarshalJSON() ([]byte, error) {
	type embed FlowActionZapierTriggerWebhookParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, f.ExtraProperties)
}

func (f *FlowActionZapierTriggerWebhookParams) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlowActionZapierTriggerWebhookParamsMethod string

const (
	FlowActionZapierTriggerWebhookParamsMethodGet  FlowActionZapierTriggerWebhookParamsMethod = "GET"
	FlowActionZapierTriggerWebhookParamsMethodPost FlowActionZapierTriggerWebhookParamsMethod = "POST"
	FlowActionZapierTriggerWebhookParamsMethodPut  FlowActionZapierTriggerWebhookParamsMethod = "PUT"
)

func NewFlowActionZapierTriggerWebhookParamsMethodFromString(s string) (FlowActionZapierTriggerWebhookParamsMethod, error) {
	switch s {
	case "GET":
		return FlowActionZapierTriggerWebhookParamsMethodGet, nil
	case "POST":
		return FlowActionZapierTriggerWebhookParamsMethodPost, nil
	case "PUT":
		return FlowActionZapierTriggerWebhookParamsMethodPut, nil
	}
	var t FlowActionZapierTriggerWebhookParamsMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FlowActionZapierTriggerWebhookParamsMethod) Ptr() *FlowActionZapierTriggerWebhookParamsMethod {
	return &f
}

var (
	flowSummaryFieldId         = big.NewInt(1 << 0)
	flowSummaryFieldName       = big.NewInt(1 << 1)
	flowSummaryFieldCreatedAt  = big.NewInt(1 << 2)
	flowSummaryFieldUpdatedAt  = big.NewInt(1 << 3)
	flowSummaryFieldExecutedAt = big.NewInt(1 << 4)
)

type FlowSummary struct {
	Id         string    `json:"id" url:"id"`
	Name       string    `json:"name" url:"name"`
	CreatedAt  time.Time `json:"created_at" url:"created_at"`
	UpdatedAt  time.Time `json:"updated_at" url:"updated_at"`
	ExecutedAt *string   `json:"executed_at,omitempty" url:"executed_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowSummary) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FlowSummary) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FlowSummary) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FlowSummary) GetUpdatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.UpdatedAt
}

func (f *FlowSummary) GetExecutedAt() string {
	if f == nil || f.ExecutedAt == nil {
		return ""
	}
	return *f.ExecutedAt
}

func (f *FlowSummary) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowSummary) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowSummary) SetId(id string) {
	f.Id = id
	f.require(flowSummaryFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowSummary) SetName(name string) {
	f.Name = name
	f.require(flowSummaryFieldName)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowSummary) SetCreatedAt(createdAt time.Time) {
	f.CreatedAt = createdAt
	f.require(flowSummaryFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowSummary) SetUpdatedAt(updatedAt time.Time) {
	f.UpdatedAt = updatedAt
	f.require(flowSummaryFieldUpdatedAt)
}

// SetExecutedAt sets the ExecutedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FlowSummary) SetExecutedAt(executedAt *string) {
	f.ExecutedAt = executedAt
	f.require(flowSummaryFieldExecutedAt)
}

func (f *FlowSummary) UnmarshalJSON(data []byte) error {
	type embed FlowSummary
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowSummary(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowSummary) MarshalJSON() ([]byte, error) {
	type embed FlowSummary
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
		UpdatedAt: internal.NewDateTime(f.UpdatedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FlowSummary) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GetFlowRequestParametersHydrateEnum string

const (
	GetFlowRequestParametersHydrateEnumFormCount GetFlowRequestParametersHydrateEnum = "form_count"
	GetFlowRequestParametersHydrateEnumForms     GetFlowRequestParametersHydrateEnum = "forms"
)

func NewGetFlowRequestParametersHydrateEnumFromString(s string) (GetFlowRequestParametersHydrateEnum, error) {
	switch s {
	case "form_count":
		return GetFlowRequestParametersHydrateEnumFormCount, nil
	case "forms":
		return GetFlowRequestParametersHydrateEnumForms, nil
	}
	var t GetFlowRequestParametersHydrateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GetFlowRequestParametersHydrateEnum) Ptr() *GetFlowRequestParametersHydrateEnum {
	return &g
}

var (
	getFlowResponseContentFieldId         = big.NewInt(1 << 0)
	getFlowResponseContentFieldName       = big.NewInt(1 << 1)
	getFlowResponseContentFieldActions    = big.NewInt(1 << 2)
	getFlowResponseContentFieldCreatedAt  = big.NewInt(1 << 3)
	getFlowResponseContentFieldUpdatedAt  = big.NewInt(1 << 4)
	getFlowResponseContentFieldExecutedAt = big.NewInt(1 << 5)
)

type GetFlowResponseContent struct {
	Id         string        `json:"id" url:"id"`
	Name       string        `json:"name" url:"name"`
	Actions    []*FlowAction `json:"actions,omitempty" url:"actions,omitempty"`
	CreatedAt  time.Time     `json:"created_at" url:"created_at"`
	UpdatedAt  time.Time     `json:"updated_at" url:"updated_at"`
	ExecutedAt *string       `json:"executed_at,omitempty" url:"executed_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetFlowResponseContent) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetFlowResponseContent) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetFlowResponseContent) GetActions() []*FlowAction {
	if g == nil || g.Actions == nil {
		return nil
	}
	return g.Actions
}

func (g *GetFlowResponseContent) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GetFlowResponseContent) GetUpdatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.UpdatedAt
}

func (g *GetFlowResponseContent) GetExecutedAt() string {
	if g == nil || g.ExecutedAt == nil {
		return ""
	}
	return *g.ExecutedAt
}

func (g *GetFlowResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFlowResponseContent) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFlowResponseContent) SetId(id string) {
	g.Id = id
	g.require(getFlowResponseContentFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFlowResponseContent) SetName(name string) {
	g.Name = name
	g.require(getFlowResponseContentFieldName)
}

// SetActions sets the Actions field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFlowResponseContent) SetActions(actions []*FlowAction) {
	g.Actions = actions
	g.require(getFlowResponseContentFieldActions)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFlowResponseContent) SetCreatedAt(createdAt time.Time) {
	g.CreatedAt = createdAt
	g.require(getFlowResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFlowResponseContent) SetUpdatedAt(updatedAt time.Time) {
	g.UpdatedAt = updatedAt
	g.require(getFlowResponseContentFieldUpdatedAt)
}

// SetExecutedAt sets the ExecutedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFlowResponseContent) SetExecutedAt(executedAt *string) {
	g.ExecutedAt = executedAt
	g.require(getFlowResponseContentFieldExecutedAt)
}

func (g *GetFlowResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetFlowResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetFlowResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFlowResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetFlowResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewDateTime(g.CreatedAt),
		UpdatedAt: internal.NewDateTime(g.UpdatedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetFlowResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	listFlowsOffsetPaginatedResponseContentFieldStart = big.NewInt(1 << 0)
	listFlowsOffsetPaginatedResponseContentFieldLimit = big.NewInt(1 << 1)
	listFlowsOffsetPaginatedResponseContentFieldTotal = big.NewInt(1 << 2)
	listFlowsOffsetPaginatedResponseContentFieldFlows = big.NewInt(1 << 3)
)

type ListFlowsOffsetPaginatedResponseContent struct {
	Start *float64       `json:"start,omitempty" url:"start,omitempty"`
	Limit *float64       `json:"limit,omitempty" url:"limit,omitempty"`
	Total *float64       `json:"total,omitempty" url:"total,omitempty"`
	Flows []*FlowSummary `json:"flows,omitempty" url:"flows,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListFlowsOffsetPaginatedResponseContent) GetStart() float64 {
	if l == nil || l.Start == nil {
		return 0
	}
	return *l.Start
}

func (l *ListFlowsOffsetPaginatedResponseContent) GetLimit() float64 {
	if l == nil || l.Limit == nil {
		return 0
	}
	return *l.Limit
}

func (l *ListFlowsOffsetPaginatedResponseContent) GetTotal() float64 {
	if l == nil || l.Total == nil {
		return 0
	}
	return *l.Total
}

func (l *ListFlowsOffsetPaginatedResponseContent) GetFlows() []*FlowSummary {
	if l == nil || l.Flows == nil {
		return nil
	}
	return l.Flows
}

func (l *ListFlowsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFlowsOffsetPaginatedResponseContent) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetStart sets the Start field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListFlowsOffsetPaginatedResponseContent) SetStart(start *float64) {
	l.Start = start
	l.require(listFlowsOffsetPaginatedResponseContentFieldStart)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListFlowsOffsetPaginatedResponseContent) SetLimit(limit *float64) {
	l.Limit = limit
	l.require(listFlowsOffsetPaginatedResponseContentFieldLimit)
}

// SetTotal sets the Total field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListFlowsOffsetPaginatedResponseContent) SetTotal(total *float64) {
	l.Total = total
	l.require(listFlowsOffsetPaginatedResponseContentFieldTotal)
}

// SetFlows sets the Flows field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListFlowsOffsetPaginatedResponseContent) SetFlows(flows []*FlowSummary) {
	l.Flows = flows
	l.require(listFlowsOffsetPaginatedResponseContentFieldFlows)
}

func (l *ListFlowsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFlowsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFlowsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFlowsOffsetPaginatedResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListFlowsOffsetPaginatedResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListFlowsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	updateFlowResponseContentFieldId         = big.NewInt(1 << 0)
	updateFlowResponseContentFieldName       = big.NewInt(1 << 1)
	updateFlowResponseContentFieldActions    = big.NewInt(1 << 2)
	updateFlowResponseContentFieldCreatedAt  = big.NewInt(1 << 3)
	updateFlowResponseContentFieldUpdatedAt  = big.NewInt(1 << 4)
	updateFlowResponseContentFieldExecutedAt = big.NewInt(1 << 5)
)

type UpdateFlowResponseContent struct {
	Id         string        `json:"id" url:"id"`
	Name       string        `json:"name" url:"name"`
	Actions    []*FlowAction `json:"actions,omitempty" url:"actions,omitempty"`
	CreatedAt  time.Time     `json:"created_at" url:"created_at"`
	UpdatedAt  time.Time     `json:"updated_at" url:"updated_at"`
	ExecutedAt *string       `json:"executed_at,omitempty" url:"executed_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateFlowResponseContent) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UpdateFlowResponseContent) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateFlowResponseContent) GetActions() []*FlowAction {
	if u == nil || u.Actions == nil {
		return nil
	}
	return u.Actions
}

func (u *UpdateFlowResponseContent) GetCreatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.CreatedAt
}

func (u *UpdateFlowResponseContent) GetUpdatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.UpdatedAt
}

func (u *UpdateFlowResponseContent) GetExecutedAt() string {
	if u == nil || u.ExecutedAt == nil {
		return ""
	}
	return *u.ExecutedAt
}

func (u *UpdateFlowResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateFlowResponseContent) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateFlowResponseContent) SetId(id string) {
	u.Id = id
	u.require(updateFlowResponseContentFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateFlowResponseContent) SetName(name string) {
	u.Name = name
	u.require(updateFlowResponseContentFieldName)
}

// SetActions sets the Actions field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateFlowResponseContent) SetActions(actions []*FlowAction) {
	u.Actions = actions
	u.require(updateFlowResponseContentFieldActions)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateFlowResponseContent) SetCreatedAt(createdAt time.Time) {
	u.CreatedAt = createdAt
	u.require(updateFlowResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateFlowResponseContent) SetUpdatedAt(updatedAt time.Time) {
	u.UpdatedAt = updatedAt
	u.require(updateFlowResponseContentFieldUpdatedAt)
}

// SetExecutedAt sets the ExecutedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateFlowResponseContent) SetExecutedAt(executedAt *string) {
	u.ExecutedAt = executedAt
	u.require(updateFlowResponseContentFieldExecutedAt)
}

func (u *UpdateFlowResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateFlowResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateFlowResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFlowResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateFlowResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewDateTime(u.CreatedAt),
		UpdatedAt: internal.NewDateTime(u.UpdatedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UpdateFlowResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

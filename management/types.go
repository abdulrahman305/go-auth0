// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type Action struct {
	// The unique ID of the action.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of an action.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`
	// True if all of an Action's contents have been deployed.
	AllChangesDeployed *bool `json:"all_changes_deployed,omitempty" url:"all_changes_deployed,omitempty"`
	// The time when this action was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this action was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The source code of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets         []*ActionSecretResponse `json:"secrets,omitempty" url:"secrets,omitempty"`
	DeployedVersion *ActionDeployedVersion  `json:"deployed_version,omitempty" url:"deployed_version,omitempty"`
	// installed_integration_id is the fk reference to the InstalledIntegration entity.
	InstalledIntegrationID *string                `json:"installed_integration_id,omitempty" url:"installed_integration_id,omitempty"`
	Integration            *Integration           `json:"integration,omitempty" url:"integration,omitempty"`
	Status                 *ActionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The time when this action was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// True if the action should be deployed after creation.
	Deploy *bool `json:"deploy,omitempty" url:"deploy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Action) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *Action) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Action) GetSupportedTriggers() []*ActionTrigger {
	if a == nil {
		return nil
	}
	return a.SupportedTriggers
}

func (a *Action) GetAllChangesDeployed() *bool {
	if a == nil {
		return nil
	}
	return a.AllChangesDeployed
}

func (a *Action) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *Action) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *Action) GetCode() *string {
	if a == nil {
		return nil
	}
	return a.Code
}

func (a *Action) GetDependencies() []*ActionVersionDependency {
	if a == nil {
		return nil
	}
	return a.Dependencies
}

func (a *Action) GetRuntime() *string {
	if a == nil {
		return nil
	}
	return a.Runtime
}

func (a *Action) GetSecrets() []*ActionSecretResponse {
	if a == nil {
		return nil
	}
	return a.Secrets
}

func (a *Action) GetDeployedVersion() *ActionDeployedVersion {
	if a == nil {
		return nil
	}
	return a.DeployedVersion
}

func (a *Action) GetInstalledIntegrationID() *string {
	if a == nil {
		return nil
	}
	return a.InstalledIntegrationID
}

func (a *Action) GetIntegration() *Integration {
	if a == nil {
		return nil
	}
	return a.Integration
}

func (a *Action) GetStatus() *ActionBuildStatusEnum {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *Action) GetBuiltAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.BuiltAt
}

func (a *Action) GetDeploy() *bool {
	if a == nil {
		return nil
	}
	return a.Deploy
}

func (a *Action) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Action) UnmarshalJSON(data []byte) error {
	type embed Action
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Action(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	a.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Action) MarshalJSON() ([]byte, error) {
	type embed Action
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewOptionalDateTime(a.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(a.UpdatedAt),
		BuiltAt:   internal.NewOptionalDateTime(a.BuiltAt),
	}
	return json.Marshal(marshaler)
}

func (a *Action) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The action to which this version belongs.
type ActionBase struct {
	// The unique ID of the action.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of an action.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`
	// True if all of an Action's contents have been deployed.
	AllChangesDeployed *bool `json:"all_changes_deployed,omitempty" url:"all_changes_deployed,omitempty"`
	// The time when this action was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this action was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionBase) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ActionBase) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ActionBase) GetSupportedTriggers() []*ActionTrigger {
	if a == nil {
		return nil
	}
	return a.SupportedTriggers
}

func (a *ActionBase) GetAllChangesDeployed() *bool {
	if a == nil {
		return nil
	}
	return a.AllChangesDeployed
}

func (a *ActionBase) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ActionBase) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActionBase) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionBase) UnmarshalJSON(data []byte) error {
	type embed ActionBase
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionBase(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionBase) MarshalJSON() ([]byte, error) {
	type embed ActionBase
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewOptionalDateTime(a.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ActionBase) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Binding is the associative entity joining a trigger, and an action together.
type ActionBinding struct {
	// The unique ID of this binding.
	ID        *string                `json:"id,omitempty" url:"id,omitempty"`
	TriggerID *ActionTriggerTypeEnum `json:"trigger_id,omitempty" url:"trigger_id,omitempty"`
	// The name of the binding.
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	Action      *Action `json:"action,omitempty" url:"action,omitempty"`
	// The time when the binding was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when the binding was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionBinding) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ActionBinding) GetTriggerID() *ActionTriggerTypeEnum {
	if a == nil {
		return nil
	}
	return a.TriggerID
}

func (a *ActionBinding) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *ActionBinding) GetAction() *Action {
	if a == nil {
		return nil
	}
	return a.Action
}

func (a *ActionBinding) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ActionBinding) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActionBinding) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionBinding) UnmarshalJSON(data []byte) error {
	type embed ActionBinding
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionBinding(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionBinding) MarshalJSON() ([]byte, error) {
	type embed ActionBinding
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewOptionalDateTime(a.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ActionBinding) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A reference to an action. An action can be referred to by ID or by Name.
type ActionBindingRef struct {
	Type *ActionBindingRefTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// The id or name of an action that is being bound to a trigger.
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *ActionBindingRef) GetType() *ActionBindingRefTypeEnum {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *ActionBindingRef) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *ActionBindingRef) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *ActionBindingRef) UnmarshalJSON(data []byte) error {
	type embed ActionBindingRef
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionBindingRef(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionBindingRef) MarshalJSON() ([]byte, error) {
	type embed ActionBindingRef
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *ActionBindingRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// How the action is being referred to: `action_id` or `action_name`.
type ActionBindingRefTypeEnum string

const (
	ActionBindingRefTypeEnumBindingID  ActionBindingRefTypeEnum = "binding_id"
	ActionBindingRefTypeEnumActionID   ActionBindingRefTypeEnum = "action_id"
	ActionBindingRefTypeEnumActionName ActionBindingRefTypeEnum = "action_name"
)

func NewActionBindingRefTypeEnumFromString(s string) (ActionBindingRefTypeEnum, error) {
	switch s {
	case "binding_id":
		return ActionBindingRefTypeEnumBindingID, nil
	case "action_id":
		return ActionBindingRefTypeEnumActionID, nil
	case "action_name":
		return ActionBindingRefTypeEnumActionName, nil
	}
	var t ActionBindingRefTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActionBindingRefTypeEnum) Ptr() *ActionBindingRefTypeEnum {
	return &a
}

// In order to execute an Action, it must be bound to a trigger using a binding. `trigger-bound` means that bindings are managed by the tenant. `entity-bound` means that the bindings are automatically managed by Auth0 and other internal resouces will control those bindings. Tenants cannot manage `entity-bound` bindings.
type ActionBindingTypeEnum string

const (
	ActionBindingTypeEnumTriggerBound ActionBindingTypeEnum = "trigger-bound"
	ActionBindingTypeEnumEntityBound  ActionBindingTypeEnum = "entity-bound"
)

func NewActionBindingTypeEnumFromString(s string) (ActionBindingTypeEnum, error) {
	switch s {
	case "trigger-bound":
		return ActionBindingTypeEnumTriggerBound, nil
	case "entity-bound":
		return ActionBindingTypeEnumEntityBound, nil
	}
	var t ActionBindingTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActionBindingTypeEnum) Ptr() *ActionBindingTypeEnum {
	return &a
}

type ActionBindingWithRef struct {
	Ref *ActionBindingRef `json:"ref" url:"ref"`
	// The name of the binding.
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretRequest `json:"secrets,omitempty" url:"secrets,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionBindingWithRef) GetRef() *ActionBindingRef {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *ActionBindingWithRef) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *ActionBindingWithRef) GetSecrets() []*ActionSecretRequest {
	if a == nil {
		return nil
	}
	return a.Secrets
}

func (a *ActionBindingWithRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionBindingWithRef) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionBindingWithRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionBindingWithRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionBindingWithRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The build status of this action.
type ActionBuildStatusEnum string

const (
	ActionBuildStatusEnumPending  ActionBuildStatusEnum = "pending"
	ActionBuildStatusEnumBuilding ActionBuildStatusEnum = "building"
	ActionBuildStatusEnumPackaged ActionBuildStatusEnum = "packaged"
	ActionBuildStatusEnumBuilt    ActionBuildStatusEnum = "built"
	ActionBuildStatusEnumRetrying ActionBuildStatusEnum = "retrying"
	ActionBuildStatusEnumFailed   ActionBuildStatusEnum = "failed"
)

func NewActionBuildStatusEnumFromString(s string) (ActionBuildStatusEnum, error) {
	switch s {
	case "pending":
		return ActionBuildStatusEnumPending, nil
	case "building":
		return ActionBuildStatusEnumBuilding, nil
	case "packaged":
		return ActionBuildStatusEnumPackaged, nil
	case "built":
		return ActionBuildStatusEnumBuilt, nil
	case "retrying":
		return ActionBuildStatusEnumRetrying, nil
	case "failed":
		return ActionBuildStatusEnumFailed, nil
	}
	var t ActionBuildStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActionBuildStatusEnum) Ptr() *ActionBuildStatusEnum {
	return &a
}

// The version of the action that is currently deployed.
type ActionDeployedVersion struct {
	// The unique id of an action version.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The id of the action to which this version belongs.
	ActionID *string `json:"action_id,omitempty" url:"action_id,omitempty"`
	// The source code of this specific version of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this specific version depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// Indicates if this speciic version is the currently one deployed.
	Deployed *bool `json:"deployed,omitempty" url:"deployed,omitempty"`
	// The Node runtime. For example: `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretResponse       `json:"secrets,omitempty" url:"secrets,omitempty"`
	Status  *ActionVersionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The index of this version in list of versions for the action.
	Number *float64 `json:"number,omitempty" url:"number,omitempty"`
	// Any errors that occurred while the version was being built.
	Errors []*ActionError `json:"errors,omitempty" url:"errors,omitempty"`
	Action *ActionBase    `json:"action,omitempty" url:"action,omitempty"`
	// The time when this version was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// The time when this version was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionDeployedVersion) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ActionDeployedVersion) GetActionID() *string {
	if a == nil {
		return nil
	}
	return a.ActionID
}

func (a *ActionDeployedVersion) GetCode() *string {
	if a == nil {
		return nil
	}
	return a.Code
}

func (a *ActionDeployedVersion) GetDependencies() []*ActionVersionDependency {
	if a == nil {
		return nil
	}
	return a.Dependencies
}

func (a *ActionDeployedVersion) GetDeployed() *bool {
	if a == nil {
		return nil
	}
	return a.Deployed
}

func (a *ActionDeployedVersion) GetRuntime() *string {
	if a == nil {
		return nil
	}
	return a.Runtime
}

func (a *ActionDeployedVersion) GetSecrets() []*ActionSecretResponse {
	if a == nil {
		return nil
	}
	return a.Secrets
}

func (a *ActionDeployedVersion) GetStatus() *ActionVersionBuildStatusEnum {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *ActionDeployedVersion) GetNumber() *float64 {
	if a == nil {
		return nil
	}
	return a.Number
}

func (a *ActionDeployedVersion) GetErrors() []*ActionError {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *ActionDeployedVersion) GetAction() *ActionBase {
	if a == nil {
		return nil
	}
	return a.Action
}

func (a *ActionDeployedVersion) GetBuiltAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.BuiltAt
}

func (a *ActionDeployedVersion) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ActionDeployedVersion) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActionDeployedVersion) GetSupportedTriggers() []*ActionTrigger {
	if a == nil {
		return nil
	}
	return a.SupportedTriggers
}

func (a *ActionDeployedVersion) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionDeployedVersion) UnmarshalJSON(data []byte) error {
	type embed ActionDeployedVersion
	var unmarshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionDeployedVersion(unmarshaler.embed)
	a.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionDeployedVersion) MarshalJSON() ([]byte, error) {
	type embed ActionDeployedVersion
	var marshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*a),
		BuiltAt:   internal.NewOptionalDateTime(a.BuiltAt),
		CreatedAt: internal.NewOptionalDateTime(a.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ActionDeployedVersion) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Error is a generic error with a human readable id which should be easily referenced in support tickets.
type ActionError struct {
	ID  *string `json:"id,omitempty" url:"id,omitempty"`
	Msg *string `json:"msg,omitempty" url:"msg,omitempty"`
	URL *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionError) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ActionError) GetMsg() *string {
	if a == nil {
		return nil
	}
	return a.Msg
}

func (a *ActionError) GetURL() *string {
	if a == nil {
		return nil
	}
	return a.URL
}

func (a *ActionError) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionError) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Captures the results of a single action being executed.
type ActionExecutionResult struct {
	// The name of the action that was executed.
	ActionName *string      `json:"action_name,omitempty" url:"action_name,omitempty"`
	Error      *ActionError `json:"error,omitempty" url:"error,omitempty"`
	// The time when the action was started.
	StartedAt *time.Time `json:"started_at,omitempty" url:"started_at,omitempty"`
	// The time when the action finished executing.
	EndedAt *time.Time `json:"ended_at,omitempty" url:"ended_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionExecutionResult) GetActionName() *string {
	if a == nil {
		return nil
	}
	return a.ActionName
}

func (a *ActionExecutionResult) GetError() *ActionError {
	if a == nil {
		return nil
	}
	return a.Error
}

func (a *ActionExecutionResult) GetStartedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.StartedAt
}

func (a *ActionExecutionResult) GetEndedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.EndedAt
}

func (a *ActionExecutionResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionExecutionResult) UnmarshalJSON(data []byte) error {
	type embed ActionExecutionResult
	var unmarshaler = struct {
		embed
		StartedAt *internal.DateTime `json:"started_at,omitempty"`
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionExecutionResult(unmarshaler.embed)
	a.StartedAt = unmarshaler.StartedAt.TimePtr()
	a.EndedAt = unmarshaler.EndedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionExecutionResult) MarshalJSON() ([]byte, error) {
	type embed ActionExecutionResult
	var marshaler = struct {
		embed
		StartedAt *internal.DateTime `json:"started_at,omitempty"`
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
	}{
		embed:     embed(*a),
		StartedAt: internal.NewOptionalDateTime(a.StartedAt),
		EndedAt:   internal.NewOptionalDateTime(a.EndedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ActionExecutionResult) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The overall status of an execution.
type ActionExecutionStatusEnum string

const (
	ActionExecutionStatusEnumUnspecified ActionExecutionStatusEnum = "unspecified"
	ActionExecutionStatusEnumPending     ActionExecutionStatusEnum = "pending"
	ActionExecutionStatusEnumFinal       ActionExecutionStatusEnum = "final"
	ActionExecutionStatusEnumPartial     ActionExecutionStatusEnum = "partial"
	ActionExecutionStatusEnumCanceled    ActionExecutionStatusEnum = "canceled"
	ActionExecutionStatusEnumSuspended   ActionExecutionStatusEnum = "suspended"
)

func NewActionExecutionStatusEnumFromString(s string) (ActionExecutionStatusEnum, error) {
	switch s {
	case "unspecified":
		return ActionExecutionStatusEnumUnspecified, nil
	case "pending":
		return ActionExecutionStatusEnumPending, nil
	case "final":
		return ActionExecutionStatusEnumFinal, nil
	case "partial":
		return ActionExecutionStatusEnumPartial, nil
	case "canceled":
		return ActionExecutionStatusEnumCanceled, nil
	case "suspended":
		return ActionExecutionStatusEnumSuspended, nil
	}
	var t ActionExecutionStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActionExecutionStatusEnum) Ptr() *ActionExecutionStatusEnum {
	return &a
}

type ActionSecretRequest struct {
	// The name of the particular secret, e.g. API_KEY.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *ActionSecretRequest) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ActionSecretRequest) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *ActionSecretRequest) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *ActionSecretRequest) UnmarshalJSON(data []byte) error {
	type embed ActionSecretRequest
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionSecretRequest(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionSecretRequest) MarshalJSON() ([]byte, error) {
	type embed ActionSecretRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *ActionSecretRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionSecretResponse struct {
	// The name of the particular secret, e.g. API_KEY.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The time when the secret was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *ActionSecretResponse) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ActionSecretResponse) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActionSecretResponse) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *ActionSecretResponse) UnmarshalJSON(data []byte) error {
	type embed ActionSecretResponse
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionSecretResponse(unmarshaler.embed)
	a.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionSecretResponse) MarshalJSON() ([]byte, error) {
	type embed ActionSecretResponse
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*a),
		UpdatedAt: internal.NewOptionalDateTime(a.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *ActionSecretResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionTrigger struct {
	ID ActionTriggerTypeEnum `json:"id" url:"id"`
	// The version of a trigger. v1, v2, etc.
	Version *string `json:"version,omitempty" url:"version,omitempty"`
	// status points to the trigger status.
	Status *string `json:"status,omitempty" url:"status,omitempty"`
	// runtimes supported by this trigger.
	Runtimes []string `json:"runtimes,omitempty" url:"runtimes,omitempty"`
	// Runtime that will be used when none is specified when creating an action.
	DefaultRuntime *string `json:"default_runtime,omitempty" url:"default_runtime,omitempty"`
	// compatible_triggers informs which other trigger supports the same event and api.
	CompatibleTriggers []*ActionTriggerCompatibleTrigger `json:"compatible_triggers,omitempty" url:"compatible_triggers,omitempty"`
	BindingPolicy      *ActionBindingTypeEnum            `json:"binding_policy,omitempty" url:"binding_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionTrigger) GetID() ActionTriggerTypeEnum {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *ActionTrigger) GetVersion() *string {
	if a == nil {
		return nil
	}
	return a.Version
}

func (a *ActionTrigger) GetStatus() *string {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *ActionTrigger) GetRuntimes() []string {
	if a == nil {
		return nil
	}
	return a.Runtimes
}

func (a *ActionTrigger) GetDefaultRuntime() *string {
	if a == nil {
		return nil
	}
	return a.DefaultRuntime
}

func (a *ActionTrigger) GetCompatibleTriggers() []*ActionTriggerCompatibleTrigger {
	if a == nil {
		return nil
	}
	return a.CompatibleTriggers
}

func (a *ActionTrigger) GetBindingPolicy() *ActionBindingTypeEnum {
	if a == nil {
		return nil
	}
	return a.BindingPolicy
}

func (a *ActionTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionTrigger) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionTrigger
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionTrigger(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionTriggerCompatibleTrigger struct {
	ID ActionTriggerTypeEnum `json:"id" url:"id"`
	// The version of a trigger. v1, v2, etc.
	Version string `json:"version" url:"version"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *ActionTriggerCompatibleTrigger) GetID() ActionTriggerTypeEnum {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *ActionTriggerCompatibleTrigger) GetVersion() string {
	if a == nil {
		return ""
	}
	return a.Version
}

func (a *ActionTriggerCompatibleTrigger) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *ActionTriggerCompatibleTrigger) UnmarshalJSON(data []byte) error {
	type embed ActionTriggerCompatibleTrigger
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionTriggerCompatibleTrigger(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionTriggerCompatibleTrigger) MarshalJSON() ([]byte, error) {
	type embed ActionTriggerCompatibleTrigger
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *ActionTriggerCompatibleTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionTriggerTypeEnum = string

type ActionVersion struct {
	// The unique id of an action version.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The id of the action to which this version belongs.
	ActionID *string `json:"action_id,omitempty" url:"action_id,omitempty"`
	// The source code of this specific version of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this specific version depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// Indicates if this speciic version is the currently one deployed.
	Deployed *bool `json:"deployed,omitempty" url:"deployed,omitempty"`
	// The Node runtime. For example: `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretResponse       `json:"secrets,omitempty" url:"secrets,omitempty"`
	Status  *ActionVersionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The index of this version in list of versions for the action.
	Number *float64 `json:"number,omitempty" url:"number,omitempty"`
	// Any errors that occurred while the version was being built.
	Errors []*ActionError `json:"errors,omitempty" url:"errors,omitempty"`
	Action *ActionBase    `json:"action,omitempty" url:"action,omitempty"`
	// The time when this version was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// The time when this version was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionVersion) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ActionVersion) GetActionID() *string {
	if a == nil {
		return nil
	}
	return a.ActionID
}

func (a *ActionVersion) GetCode() *string {
	if a == nil {
		return nil
	}
	return a.Code
}

func (a *ActionVersion) GetDependencies() []*ActionVersionDependency {
	if a == nil {
		return nil
	}
	return a.Dependencies
}

func (a *ActionVersion) GetDeployed() *bool {
	if a == nil {
		return nil
	}
	return a.Deployed
}

func (a *ActionVersion) GetRuntime() *string {
	if a == nil {
		return nil
	}
	return a.Runtime
}

func (a *ActionVersion) GetSecrets() []*ActionSecretResponse {
	if a == nil {
		return nil
	}
	return a.Secrets
}

func (a *ActionVersion) GetStatus() *ActionVersionBuildStatusEnum {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *ActionVersion) GetNumber() *float64 {
	if a == nil {
		return nil
	}
	return a.Number
}

func (a *ActionVersion) GetErrors() []*ActionError {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *ActionVersion) GetAction() *ActionBase {
	if a == nil {
		return nil
	}
	return a.Action
}

func (a *ActionVersion) GetBuiltAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.BuiltAt
}

func (a *ActionVersion) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ActionVersion) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActionVersion) GetSupportedTriggers() []*ActionTrigger {
	if a == nil {
		return nil
	}
	return a.SupportedTriggers
}

func (a *ActionVersion) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionVersion) UnmarshalJSON(data []byte) error {
	type embed ActionVersion
	var unmarshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionVersion(unmarshaler.embed)
	a.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionVersion) MarshalJSON() ([]byte, error) {
	type embed ActionVersion
	var marshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*a),
		BuiltAt:   internal.NewOptionalDateTime(a.BuiltAt),
		CreatedAt: internal.NewOptionalDateTime(a.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ActionVersion) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The build status of this specific version.
type ActionVersionBuildStatusEnum string

const (
	ActionVersionBuildStatusEnumPending  ActionVersionBuildStatusEnum = "pending"
	ActionVersionBuildStatusEnumBuilding ActionVersionBuildStatusEnum = "building"
	ActionVersionBuildStatusEnumPackaged ActionVersionBuildStatusEnum = "packaged"
	ActionVersionBuildStatusEnumBuilt    ActionVersionBuildStatusEnum = "built"
	ActionVersionBuildStatusEnumRetrying ActionVersionBuildStatusEnum = "retrying"
	ActionVersionBuildStatusEnumFailed   ActionVersionBuildStatusEnum = "failed"
)

func NewActionVersionBuildStatusEnumFromString(s string) (ActionVersionBuildStatusEnum, error) {
	switch s {
	case "pending":
		return ActionVersionBuildStatusEnumPending, nil
	case "building":
		return ActionVersionBuildStatusEnumBuilding, nil
	case "packaged":
		return ActionVersionBuildStatusEnumPackaged, nil
	case "built":
		return ActionVersionBuildStatusEnumBuilt, nil
	case "retrying":
		return ActionVersionBuildStatusEnumRetrying, nil
	case "failed":
		return ActionVersionBuildStatusEnumFailed, nil
	}
	var t ActionVersionBuildStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActionVersionBuildStatusEnum) Ptr() *ActionVersionBuildStatusEnum {
	return &a
}

// Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.
type ActionVersionDependency struct {
	// name is the name of the npm module, e.g. lodash
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// description is the version of the npm module, e.g. 4.17.1
	Version *string `json:"version,omitempty" url:"version,omitempty"`
	// registry_url is an optional value used primarily for private npm registries.
	RegistryURL *string `json:"registry_url,omitempty" url:"registry_url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionVersionDependency) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *ActionVersionDependency) GetVersion() *string {
	if a == nil {
		return nil
	}
	return a.Version
}

func (a *ActionVersionDependency) GetRegistryURL() *string {
	if a == nil {
		return nil
	}
	return a.RegistryURL
}

func (a *ActionVersionDependency) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionVersionDependency) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionVersionDependency
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionVersionDependency(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionVersionDependency) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Client array filter items
type AculClientFilter struct {
	// Client ID
	ID       *string             `json:"id,omitempty" url:"id,omitempty"`
	Metadata *AculClientMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AculClientFilter) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AculClientFilter) GetMetadata() *AculClientMetadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *AculClientFilter) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AculClientFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler AculClientFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AculClientFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculClientFilter) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Client metadata key/value pairs
type AculClientMetadata = map[string]interface{}

// Domains array filter items
type AculDomainFilter struct {
	// Domain ID
	ID       *string             `json:"id,omitempty" url:"id,omitempty"`
	Metadata *AculDomainMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AculDomainFilter) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AculDomainFilter) GetMetadata() *AculDomainMetadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *AculDomainFilter) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AculDomainFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler AculDomainFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AculDomainFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculDomainFilter) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Client metadata key/value pairs
type AculDomainMetadata = map[string]interface{}

// Optional filters to apply rendering rules to specific entities
type AculFilters struct {
	MatchType *AculMatchTypeEnum `json:"match_type,omitempty" url:"match_type,omitempty"`
	// Clients filter
	Clients []*AculClientFilter `json:"clients,omitempty" url:"clients,omitempty"`
	// Organizations filter
	Organizations []*AculOrganizationFilter `json:"organizations,omitempty" url:"organizations,omitempty"`
	// Domains filter
	Domains []*AculDomainFilter `json:"domains,omitempty" url:"domains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AculFilters) GetMatchType() *AculMatchTypeEnum {
	if a == nil {
		return nil
	}
	return a.MatchType
}

func (a *AculFilters) GetClients() []*AculClientFilter {
	if a == nil {
		return nil
	}
	return a.Clients
}

func (a *AculFilters) GetOrganizations() []*AculOrganizationFilter {
	if a == nil {
		return nil
	}
	return a.Organizations
}

func (a *AculFilters) GetDomains() []*AculDomainFilter {
	if a == nil {
		return nil
	}
	return a.Domains
}

func (a *AculFilters) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AculFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler AculFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AculFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculFilters) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AculHeadTag struct {
	// Any HTML element valid for use in the head tag
	Tag        *string                `json:"tag,omitempty" url:"tag,omitempty"`
	Attributes *AculHeadTagAttributes `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Text/content within the opening and closing tags of the element.
	// See <a href="https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens">documentation</a> on using context variables
	Content *string `json:"content,omitempty" url:"content,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *AculHeadTag) GetTag() *string {
	if a == nil {
		return nil
	}
	return a.Tag
}

func (a *AculHeadTag) GetAttributes() *AculHeadTagAttributes {
	if a == nil {
		return nil
	}
	return a.Attributes
}

func (a *AculHeadTag) GetContent() *string {
	if a == nil {
		return nil
	}
	return a.Content
}

func (a *AculHeadTag) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *AculHeadTag) UnmarshalJSON(data []byte) error {
	type embed AculHeadTag
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AculHeadTag(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculHeadTag) MarshalJSON() ([]byte, error) {
	type embed AculHeadTag
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *AculHeadTag) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Attributes of the HTML tag
type AculHeadTagAttributes struct {
	Integrity []string `json:"integrity,omitempty" url:"integrity,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *AculHeadTagAttributes) GetIntegrity() []string {
	if a == nil {
		return nil
	}
	return a.Integrity
}

func (a *AculHeadTagAttributes) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *AculHeadTagAttributes) UnmarshalJSON(data []byte) error {
	type embed AculHeadTagAttributes
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AculHeadTagAttributes(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculHeadTagAttributes) MarshalJSON() ([]byte, error) {
	type embed AculHeadTagAttributes
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *AculHeadTagAttributes) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Type of match to apply
type AculMatchTypeEnum string

const (
	AculMatchTypeEnumIncludesAny AculMatchTypeEnum = "includes_any"
	AculMatchTypeEnumExcludesAny AculMatchTypeEnum = "excludes_any"
)

func NewAculMatchTypeEnumFromString(s string) (AculMatchTypeEnum, error) {
	switch s {
	case "includes_any":
		return AculMatchTypeEnumIncludesAny, nil
	case "excludes_any":
		return AculMatchTypeEnumExcludesAny, nil
	}
	var t AculMatchTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AculMatchTypeEnum) Ptr() *AculMatchTypeEnum {
	return &a
}

// Organizations array filter items
type AculOrganizationFilter struct {
	// Organization ID
	ID       *string                   `json:"id,omitempty" url:"id,omitempty"`
	Metadata *AculOrganizationMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AculOrganizationFilter) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AculOrganizationFilter) GetMetadata() *AculOrganizationMetadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *AculOrganizationFilter) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AculOrganizationFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler AculOrganizationFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AculOrganizationFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculOrganizationFilter) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Client metadata key/value pairs
type AculOrganizationMetadata = map[string]interface{}

type AculRenderingModeEnum string

const (
	AculRenderingModeEnumAdvanced AculRenderingModeEnum = "advanced"
	AculRenderingModeEnumStandard AculRenderingModeEnum = "standard"
)

func NewAculRenderingModeEnumFromString(s string) (AculRenderingModeEnum, error) {
	switch s {
	case "advanced":
		return AculRenderingModeEnumAdvanced, nil
	case "standard":
		return AculRenderingModeEnumStandard, nil
	}
	var t AculRenderingModeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AculRenderingModeEnum) Ptr() *AculRenderingModeEnum {
	return &a
}

type AculResponseContent struct {
	RenderingMode *AculRenderingModeEnum `json:"rendering_mode,omitempty" url:"rendering_mode,omitempty"`
	// Context values to make available
	ContextConfiguration []string `json:"context_configuration,omitempty" url:"context_configuration,omitempty"`
	// Override Universal Login default head tags
	DefaultHeadTagsDisabled *bool `json:"default_head_tags_disabled,omitempty" url:"default_head_tags_disabled,omitempty"`
	// An array of head tags
	HeadTags []*AculHeadTag `json:"head_tags,omitempty" url:"head_tags,omitempty"`
	Filters  *AculFilters   `json:"filters,omitempty" url:"filters,omitempty"`
	// Use page template with ACUL
	UsePageTemplate *bool `json:"use_page_template,omitempty" url:"use_page_template,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (a *AculResponseContent) GetRenderingMode() *AculRenderingModeEnum {
	if a == nil {
		return nil
	}
	return a.RenderingMode
}

func (a *AculResponseContent) GetContextConfiguration() []string {
	if a == nil {
		return nil
	}
	return a.ContextConfiguration
}

func (a *AculResponseContent) GetDefaultHeadTagsDisabled() *bool {
	if a == nil {
		return nil
	}
	return a.DefaultHeadTagsDisabled
}

func (a *AculResponseContent) GetHeadTags() []*AculHeadTag {
	if a == nil {
		return nil
	}
	return a.HeadTags
}

func (a *AculResponseContent) GetFilters() *AculFilters {
	if a == nil {
		return nil
	}
	return a.Filters
}

func (a *AculResponseContent) GetUsePageTemplate() *bool {
	if a == nil {
		return nil
	}
	return a.UsePageTemplate
}

func (a *AculResponseContent) GetExtraProperties() map[string]interface{} {
	return a.ExtraProperties
}

func (a *AculResponseContent) UnmarshalJSON(data []byte) error {
	type embed AculResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AculResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.ExtraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AculResponseContent) MarshalJSON() ([]byte, error) {
	type embed AculResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, a.ExtraProperties)
}

func (a *AculResponseContent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AddOrganizationConnectionResponseContent struct {
	// ID of the connection.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled *bool                              `json:"is_signup_enabled,omitempty" url:"is_signup_enabled,omitempty"`
	Connection      *OrganizationConnectionInformation `json:"connection,omitempty" url:"connection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddOrganizationConnectionResponseContent) GetConnectionID() *string {
	if a == nil {
		return nil
	}
	return a.ConnectionID
}

func (a *AddOrganizationConnectionResponseContent) GetAssignMembershipOnLogin() *bool {
	if a == nil {
		return nil
	}
	return a.AssignMembershipOnLogin
}

func (a *AddOrganizationConnectionResponseContent) GetShowAsButton() *bool {
	if a == nil {
		return nil
	}
	return a.ShowAsButton
}

func (a *AddOrganizationConnectionResponseContent) GetIsSignupEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.IsSignupEnabled
}

func (a *AddOrganizationConnectionResponseContent) GetConnection() *OrganizationConnectionInformation {
	if a == nil {
		return nil
	}
	return a.Connection
}

func (a *AddOrganizationConnectionResponseContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddOrganizationConnectionResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler AddOrganizationConnectionResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddOrganizationConnectionResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddOrganizationConnectionResponseContent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AnomalyIPFormat = string

// Data related to the user that does affect the application's core functionality.
type AppMetadata = map[string]interface{}

type AssociateOrganizationClientGrantResponseContent struct {
	// ID of the client grant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the client.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The audience (API identifier) of this client grant
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scopes allowed for this client grant.
	Scope             []string               `json:"scope,omitempty" url:"scope,omitempty"`
	OrganizationUsage *OrganizationUsageEnum `json:"organization_usage,omitempty" url:"organization_usage,omitempty"`
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"allow_any_organization,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AssociateOrganizationClientGrantResponseContent) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AssociateOrganizationClientGrantResponseContent) GetClientID() *string {
	if a == nil {
		return nil
	}
	return a.ClientID
}

func (a *AssociateOrganizationClientGrantResponseContent) GetAudience() *string {
	if a == nil {
		return nil
	}
	return a.Audience
}

func (a *AssociateOrganizationClientGrantResponseContent) GetScope() []string {
	if a == nil {
		return nil
	}
	return a.Scope
}

func (a *AssociateOrganizationClientGrantResponseContent) GetOrganizationUsage() *OrganizationUsageEnum {
	if a == nil {
		return nil
	}
	return a.OrganizationUsage
}

func (a *AssociateOrganizationClientGrantResponseContent) GetAllowAnyOrganization() *bool {
	if a == nil {
		return nil
	}
	return a.AllowAnyOrganization
}

func (a *AssociateOrganizationClientGrantResponseContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssociateOrganizationClientGrantResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociateOrganizationClientGrantResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociateOrganizationClientGrantResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociateOrganizationClientGrantResponseContent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthenticationMethodTypeEnum string

const (
	AuthenticationMethodTypeEnumRecoveryCode      AuthenticationMethodTypeEnum = "recovery-code"
	AuthenticationMethodTypeEnumTotp              AuthenticationMethodTypeEnum = "totp"
	AuthenticationMethodTypeEnumPush              AuthenticationMethodTypeEnum = "push"
	AuthenticationMethodTypeEnumPhone             AuthenticationMethodTypeEnum = "phone"
	AuthenticationMethodTypeEnumEmail             AuthenticationMethodTypeEnum = "email"
	AuthenticationMethodTypeEnumEmailVerification AuthenticationMethodTypeEnum = "email-verification"
	AuthenticationMethodTypeEnumWebauthnRoaming   AuthenticationMethodTypeEnum = "webauthn-roaming"
	AuthenticationMethodTypeEnumWebauthnPlatform  AuthenticationMethodTypeEnum = "webauthn-platform"
	AuthenticationMethodTypeEnumGuardian          AuthenticationMethodTypeEnum = "guardian"
	AuthenticationMethodTypeEnumPasskey           AuthenticationMethodTypeEnum = "passkey"
	AuthenticationMethodTypeEnumPassword          AuthenticationMethodTypeEnum = "password"
)

func NewAuthenticationMethodTypeEnumFromString(s string) (AuthenticationMethodTypeEnum, error) {
	switch s {
	case "recovery-code":
		return AuthenticationMethodTypeEnumRecoveryCode, nil
	case "totp":
		return AuthenticationMethodTypeEnumTotp, nil
	case "push":
		return AuthenticationMethodTypeEnumPush, nil
	case "phone":
		return AuthenticationMethodTypeEnumPhone, nil
	case "email":
		return AuthenticationMethodTypeEnumEmail, nil
	case "email-verification":
		return AuthenticationMethodTypeEnumEmailVerification, nil
	case "webauthn-roaming":
		return AuthenticationMethodTypeEnumWebauthnRoaming, nil
	case "webauthn-platform":
		return AuthenticationMethodTypeEnumWebauthnPlatform, nil
	case "guardian":
		return AuthenticationMethodTypeEnumGuardian, nil
	case "passkey":
		return AuthenticationMethodTypeEnumPasskey, nil
	case "password":
		return AuthenticationMethodTypeEnumPassword, nil
	}
	var t AuthenticationMethodTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuthenticationMethodTypeEnum) Ptr() *AuthenticationMethodTypeEnum {
	return &a
}

type AuthenticationTypeEnum string

const (
	AuthenticationTypeEnumPhone AuthenticationTypeEnum = "phone"
	AuthenticationTypeEnumEmail AuthenticationTypeEnum = "email"
	AuthenticationTypeEnumTotp  AuthenticationTypeEnum = "totp"
)

func NewAuthenticationTypeEnumFromString(s string) (AuthenticationTypeEnum, error) {
	switch s {
	case "phone":
		return AuthenticationTypeEnumPhone, nil
	case "email":
		return AuthenticationTypeEnumEmail, nil
	case "totp":
		return AuthenticationTypeEnumTotp, nil
	}
	var t AuthenticationTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuthenticationTypeEnum) Ptr() *AuthenticationTypeEnum {
	return &a
}

type BrandingThemeBorders struct {
	// Button border radius
	ButtonBorderRadius float64 `json:"button_border_radius" url:"button_border_radius"`
	// Button border weight
	ButtonBorderWeight float64                              `json:"button_border_weight" url:"button_border_weight"`
	ButtonsStyle       BrandingThemeBordersButtonsStyleEnum `json:"buttons_style" url:"buttons_style"`
	// Input border radius
	InputBorderRadius float64 `json:"input_border_radius" url:"input_border_radius"`
	// Input border weight
	InputBorderWeight float64                             `json:"input_border_weight" url:"input_border_weight"`
	InputsStyle       BrandingThemeBordersInputsStyleEnum `json:"inputs_style" url:"inputs_style"`
	// Show widget shadow
	ShowWidgetShadow bool `json:"show_widget_shadow" url:"show_widget_shadow"`
	// Widget border weight
	WidgetBorderWeight float64 `json:"widget_border_weight" url:"widget_border_weight"`
	// Widget corner radius
	WidgetCornerRadius float64 `json:"widget_corner_radius" url:"widget_corner_radius"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeBorders) GetButtonBorderRadius() float64 {
	if b == nil {
		return 0
	}
	return b.ButtonBorderRadius
}

func (b *BrandingThemeBorders) GetButtonBorderWeight() float64 {
	if b == nil {
		return 0
	}
	return b.ButtonBorderWeight
}

func (b *BrandingThemeBorders) GetButtonsStyle() BrandingThemeBordersButtonsStyleEnum {
	if b == nil {
		return ""
	}
	return b.ButtonsStyle
}

func (b *BrandingThemeBorders) GetInputBorderRadius() float64 {
	if b == nil {
		return 0
	}
	return b.InputBorderRadius
}

func (b *BrandingThemeBorders) GetInputBorderWeight() float64 {
	if b == nil {
		return 0
	}
	return b.InputBorderWeight
}

func (b *BrandingThemeBorders) GetInputsStyle() BrandingThemeBordersInputsStyleEnum {
	if b == nil {
		return ""
	}
	return b.InputsStyle
}

func (b *BrandingThemeBorders) GetShowWidgetShadow() bool {
	if b == nil {
		return false
	}
	return b.ShowWidgetShadow
}

func (b *BrandingThemeBorders) GetWidgetBorderWeight() float64 {
	if b == nil {
		return 0
	}
	return b.WidgetBorderWeight
}

func (b *BrandingThemeBorders) GetWidgetCornerRadius() float64 {
	if b == nil {
		return 0
	}
	return b.WidgetCornerRadius
}

func (b *BrandingThemeBorders) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeBorders) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeBorders
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeBorders(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeBorders) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Buttons style
type BrandingThemeBordersButtonsStyleEnum string

const (
	BrandingThemeBordersButtonsStyleEnumPill    BrandingThemeBordersButtonsStyleEnum = "pill"
	BrandingThemeBordersButtonsStyleEnumRounded BrandingThemeBordersButtonsStyleEnum = "rounded"
	BrandingThemeBordersButtonsStyleEnumSharp   BrandingThemeBordersButtonsStyleEnum = "sharp"
)

func NewBrandingThemeBordersButtonsStyleEnumFromString(s string) (BrandingThemeBordersButtonsStyleEnum, error) {
	switch s {
	case "pill":
		return BrandingThemeBordersButtonsStyleEnumPill, nil
	case "rounded":
		return BrandingThemeBordersButtonsStyleEnumRounded, nil
	case "sharp":
		return BrandingThemeBordersButtonsStyleEnumSharp, nil
	}
	var t BrandingThemeBordersButtonsStyleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeBordersButtonsStyleEnum) Ptr() *BrandingThemeBordersButtonsStyleEnum {
	return &b
}

// Inputs style
type BrandingThemeBordersInputsStyleEnum string

const (
	BrandingThemeBordersInputsStyleEnumPill    BrandingThemeBordersInputsStyleEnum = "pill"
	BrandingThemeBordersInputsStyleEnumRounded BrandingThemeBordersInputsStyleEnum = "rounded"
	BrandingThemeBordersInputsStyleEnumSharp   BrandingThemeBordersInputsStyleEnum = "sharp"
)

func NewBrandingThemeBordersInputsStyleEnumFromString(s string) (BrandingThemeBordersInputsStyleEnum, error) {
	switch s {
	case "pill":
		return BrandingThemeBordersInputsStyleEnumPill, nil
	case "rounded":
		return BrandingThemeBordersInputsStyleEnumRounded, nil
	case "sharp":
		return BrandingThemeBordersInputsStyleEnumSharp, nil
	}
	var t BrandingThemeBordersInputsStyleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeBordersInputsStyleEnum) Ptr() *BrandingThemeBordersInputsStyleEnum {
	return &b
}

type BrandingThemeColors struct {
	// Base Focus Color
	BaseFocusColor *string `json:"base_focus_color,omitempty" url:"base_focus_color,omitempty"`
	// Base Hover Color
	BaseHoverColor *string `json:"base_hover_color,omitempty" url:"base_hover_color,omitempty"`
	// Body text
	BodyText           string                                     `json:"body_text" url:"body_text"`
	CaptchaWidgetTheme *BrandingThemeColorsCaptchaWidgetThemeEnum `json:"captcha_widget_theme,omitempty" url:"captcha_widget_theme,omitempty"`
	// Error
	Error string `json:"error" url:"error"`
	// Header
	Header string `json:"header" url:"header"`
	// Icons
	Icons string `json:"icons" url:"icons"`
	// Input background
	InputBackground string `json:"input_background" url:"input_background"`
	// Input border
	InputBorder string `json:"input_border" url:"input_border"`
	// Input filled text
	InputFilledText string `json:"input_filled_text" url:"input_filled_text"`
	// Input labels & placeholders
	InputLabelsPlaceholders string `json:"input_labels_placeholders" url:"input_labels_placeholders"`
	// Links & focused components
	LinksFocusedComponents string `json:"links_focused_components" url:"links_focused_components"`
	// Primary button
	PrimaryButton string `json:"primary_button" url:"primary_button"`
	// Primary button label
	PrimaryButtonLabel string `json:"primary_button_label" url:"primary_button_label"`
	// Read only background
	ReadOnlyBackground *string `json:"read_only_background,omitempty" url:"read_only_background,omitempty"`
	// Secondary button border
	SecondaryButtonBorder string `json:"secondary_button_border" url:"secondary_button_border"`
	// Secondary button label
	SecondaryButtonLabel string `json:"secondary_button_label" url:"secondary_button_label"`
	// Success
	Success string `json:"success" url:"success"`
	// Widget background
	WidgetBackground string `json:"widget_background" url:"widget_background"`
	// Widget border
	WidgetBorder string `json:"widget_border" url:"widget_border"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeColors) GetBaseFocusColor() *string {
	if b == nil {
		return nil
	}
	return b.BaseFocusColor
}

func (b *BrandingThemeColors) GetBaseHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.BaseHoverColor
}

func (b *BrandingThemeColors) GetBodyText() string {
	if b == nil {
		return ""
	}
	return b.BodyText
}

func (b *BrandingThemeColors) GetCaptchaWidgetTheme() *BrandingThemeColorsCaptchaWidgetThemeEnum {
	if b == nil {
		return nil
	}
	return b.CaptchaWidgetTheme
}

func (b *BrandingThemeColors) GetError() string {
	if b == nil {
		return ""
	}
	return b.Error
}

func (b *BrandingThemeColors) GetHeader() string {
	if b == nil {
		return ""
	}
	return b.Header
}

func (b *BrandingThemeColors) GetIcons() string {
	if b == nil {
		return ""
	}
	return b.Icons
}

func (b *BrandingThemeColors) GetInputBackground() string {
	if b == nil {
		return ""
	}
	return b.InputBackground
}

func (b *BrandingThemeColors) GetInputBorder() string {
	if b == nil {
		return ""
	}
	return b.InputBorder
}

func (b *BrandingThemeColors) GetInputFilledText() string {
	if b == nil {
		return ""
	}
	return b.InputFilledText
}

func (b *BrandingThemeColors) GetInputLabelsPlaceholders() string {
	if b == nil {
		return ""
	}
	return b.InputLabelsPlaceholders
}

func (b *BrandingThemeColors) GetLinksFocusedComponents() string {
	if b == nil {
		return ""
	}
	return b.LinksFocusedComponents
}

func (b *BrandingThemeColors) GetPrimaryButton() string {
	if b == nil {
		return ""
	}
	return b.PrimaryButton
}

func (b *BrandingThemeColors) GetPrimaryButtonLabel() string {
	if b == nil {
		return ""
	}
	return b.PrimaryButtonLabel
}

func (b *BrandingThemeColors) GetReadOnlyBackground() *string {
	if b == nil {
		return nil
	}
	return b.ReadOnlyBackground
}

func (b *BrandingThemeColors) GetSecondaryButtonBorder() string {
	if b == nil {
		return ""
	}
	return b.SecondaryButtonBorder
}

func (b *BrandingThemeColors) GetSecondaryButtonLabel() string {
	if b == nil {
		return ""
	}
	return b.SecondaryButtonLabel
}

func (b *BrandingThemeColors) GetSuccess() string {
	if b == nil {
		return ""
	}
	return b.Success
}

func (b *BrandingThemeColors) GetWidgetBackground() string {
	if b == nil {
		return ""
	}
	return b.WidgetBackground
}

func (b *BrandingThemeColors) GetWidgetBorder() string {
	if b == nil {
		return ""
	}
	return b.WidgetBorder
}

func (b *BrandingThemeColors) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeColors) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeColors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeColors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeColors) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Captcha Widget Theme
type BrandingThemeColorsCaptchaWidgetThemeEnum string

const (
	BrandingThemeColorsCaptchaWidgetThemeEnumAuto  BrandingThemeColorsCaptchaWidgetThemeEnum = "auto"
	BrandingThemeColorsCaptchaWidgetThemeEnumDark  BrandingThemeColorsCaptchaWidgetThemeEnum = "dark"
	BrandingThemeColorsCaptchaWidgetThemeEnumLight BrandingThemeColorsCaptchaWidgetThemeEnum = "light"
)

func NewBrandingThemeColorsCaptchaWidgetThemeEnumFromString(s string) (BrandingThemeColorsCaptchaWidgetThemeEnum, error) {
	switch s {
	case "auto":
		return BrandingThemeColorsCaptchaWidgetThemeEnumAuto, nil
	case "dark":
		return BrandingThemeColorsCaptchaWidgetThemeEnumDark, nil
	case "light":
		return BrandingThemeColorsCaptchaWidgetThemeEnumLight, nil
	}
	var t BrandingThemeColorsCaptchaWidgetThemeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeColorsCaptchaWidgetThemeEnum) Ptr() *BrandingThemeColorsCaptchaWidgetThemeEnum {
	return &b
}

// Body text
type BrandingThemeFontBodyText struct {
	// Body text bold
	Bold bool `json:"bold" url:"bold"`
	// Body text size
	Size float64 `json:"size" url:"size"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFontBodyText) GetBold() bool {
	if b == nil {
		return false
	}
	return b.Bold
}

func (b *BrandingThemeFontBodyText) GetSize() float64 {
	if b == nil {
		return 0
	}
	return b.Size
}

func (b *BrandingThemeFontBodyText) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFontBodyText) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFontBodyText
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFontBodyText(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFontBodyText) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Buttons text
type BrandingThemeFontButtonsText struct {
	// Buttons text bold
	Bold bool `json:"bold" url:"bold"`
	// Buttons text size
	Size float64 `json:"size" url:"size"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFontButtonsText) GetBold() bool {
	if b == nil {
		return false
	}
	return b.Bold
}

func (b *BrandingThemeFontButtonsText) GetSize() float64 {
	if b == nil {
		return 0
	}
	return b.Size
}

func (b *BrandingThemeFontButtonsText) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFontButtonsText) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFontButtonsText
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFontButtonsText(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFontButtonsText) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Input Labels
type BrandingThemeFontInputLabels struct {
	// Input Labels bold
	Bold bool `json:"bold" url:"bold"`
	// Input Labels size
	Size float64 `json:"size" url:"size"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFontInputLabels) GetBold() bool {
	if b == nil {
		return false
	}
	return b.Bold
}

func (b *BrandingThemeFontInputLabels) GetSize() float64 {
	if b == nil {
		return 0
	}
	return b.Size
}

func (b *BrandingThemeFontInputLabels) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFontInputLabels) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFontInputLabels
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFontInputLabels(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFontInputLabels) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Links
type BrandingThemeFontLinks struct {
	// Links bold
	Bold bool `json:"bold" url:"bold"`
	// Links size
	Size float64 `json:"size" url:"size"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFontLinks) GetBold() bool {
	if b == nil {
		return false
	}
	return b.Bold
}

func (b *BrandingThemeFontLinks) GetSize() float64 {
	if b == nil {
		return 0
	}
	return b.Size
}

func (b *BrandingThemeFontLinks) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFontLinks) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFontLinks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFontLinks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFontLinks) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Links style
type BrandingThemeFontLinksStyleEnum string

const (
	BrandingThemeFontLinksStyleEnumNormal     BrandingThemeFontLinksStyleEnum = "normal"
	BrandingThemeFontLinksStyleEnumUnderlined BrandingThemeFontLinksStyleEnum = "underlined"
)

func NewBrandingThemeFontLinksStyleEnumFromString(s string) (BrandingThemeFontLinksStyleEnum, error) {
	switch s {
	case "normal":
		return BrandingThemeFontLinksStyleEnumNormal, nil
	case "underlined":
		return BrandingThemeFontLinksStyleEnumUnderlined, nil
	}
	var t BrandingThemeFontLinksStyleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeFontLinksStyleEnum) Ptr() *BrandingThemeFontLinksStyleEnum {
	return &b
}

// Subtitle
type BrandingThemeFontSubtitle struct {
	// Subtitle bold
	Bold bool `json:"bold" url:"bold"`
	// Subtitle size
	Size float64 `json:"size" url:"size"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFontSubtitle) GetBold() bool {
	if b == nil {
		return false
	}
	return b.Bold
}

func (b *BrandingThemeFontSubtitle) GetSize() float64 {
	if b == nil {
		return 0
	}
	return b.Size
}

func (b *BrandingThemeFontSubtitle) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFontSubtitle) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFontSubtitle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFontSubtitle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFontSubtitle) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Title
type BrandingThemeFontTitle struct {
	// Title bold
	Bold bool `json:"bold" url:"bold"`
	// Title size
	Size float64 `json:"size" url:"size"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFontTitle) GetBold() bool {
	if b == nil {
		return false
	}
	return b.Bold
}

func (b *BrandingThemeFontTitle) GetSize() float64 {
	if b == nil {
		return 0
	}
	return b.Size
}

func (b *BrandingThemeFontTitle) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFontTitle) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFontTitle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFontTitle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFontTitle) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandingThemeFonts struct {
	BodyText    *BrandingThemeFontBodyText    `json:"body_text" url:"body_text"`
	ButtonsText *BrandingThemeFontButtonsText `json:"buttons_text" url:"buttons_text"`
	// Font URL
	FontURL     string                          `json:"font_url" url:"font_url"`
	InputLabels *BrandingThemeFontInputLabels   `json:"input_labels" url:"input_labels"`
	Links       *BrandingThemeFontLinks         `json:"links" url:"links"`
	LinksStyle  BrandingThemeFontLinksStyleEnum `json:"links_style" url:"links_style"`
	// Reference text size
	ReferenceTextSize float64                    `json:"reference_text_size" url:"reference_text_size"`
	Subtitle          *BrandingThemeFontSubtitle `json:"subtitle" url:"subtitle"`
	Title             *BrandingThemeFontTitle    `json:"title" url:"title"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeFonts) GetBodyText() *BrandingThemeFontBodyText {
	if b == nil {
		return nil
	}
	return b.BodyText
}

func (b *BrandingThemeFonts) GetButtonsText() *BrandingThemeFontButtonsText {
	if b == nil {
		return nil
	}
	return b.ButtonsText
}

func (b *BrandingThemeFonts) GetFontURL() string {
	if b == nil {
		return ""
	}
	return b.FontURL
}

func (b *BrandingThemeFonts) GetInputLabels() *BrandingThemeFontInputLabels {
	if b == nil {
		return nil
	}
	return b.InputLabels
}

func (b *BrandingThemeFonts) GetLinks() *BrandingThemeFontLinks {
	if b == nil {
		return nil
	}
	return b.Links
}

func (b *BrandingThemeFonts) GetLinksStyle() BrandingThemeFontLinksStyleEnum {
	if b == nil {
		return ""
	}
	return b.LinksStyle
}

func (b *BrandingThemeFonts) GetReferenceTextSize() float64 {
	if b == nil {
		return 0
	}
	return b.ReferenceTextSize
}

func (b *BrandingThemeFonts) GetSubtitle() *BrandingThemeFontSubtitle {
	if b == nil {
		return nil
	}
	return b.Subtitle
}

func (b *BrandingThemeFonts) GetTitle() *BrandingThemeFontTitle {
	if b == nil {
		return nil
	}
	return b.Title
}

func (b *BrandingThemeFonts) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeFonts) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeFonts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeFonts(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeFonts) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandingThemePageBackground struct {
	// Background color
	BackgroundColor string `json:"background_color" url:"background_color"`
	// Background image url
	BackgroundImageURL string                                    `json:"background_image_url" url:"background_image_url"`
	PageLayout         BrandingThemePageBackgroundPageLayoutEnum `json:"page_layout" url:"page_layout"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemePageBackground) GetBackgroundColor() string {
	if b == nil {
		return ""
	}
	return b.BackgroundColor
}

func (b *BrandingThemePageBackground) GetBackgroundImageURL() string {
	if b == nil {
		return ""
	}
	return b.BackgroundImageURL
}

func (b *BrandingThemePageBackground) GetPageLayout() BrandingThemePageBackgroundPageLayoutEnum {
	if b == nil {
		return ""
	}
	return b.PageLayout
}

func (b *BrandingThemePageBackground) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemePageBackground) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemePageBackground
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemePageBackground(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemePageBackground) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Page Layout
type BrandingThemePageBackgroundPageLayoutEnum string

const (
	BrandingThemePageBackgroundPageLayoutEnumCenter BrandingThemePageBackgroundPageLayoutEnum = "center"
	BrandingThemePageBackgroundPageLayoutEnumLeft   BrandingThemePageBackgroundPageLayoutEnum = "left"
	BrandingThemePageBackgroundPageLayoutEnumRight  BrandingThemePageBackgroundPageLayoutEnum = "right"
)

func NewBrandingThemePageBackgroundPageLayoutEnumFromString(s string) (BrandingThemePageBackgroundPageLayoutEnum, error) {
	switch s {
	case "center":
		return BrandingThemePageBackgroundPageLayoutEnumCenter, nil
	case "left":
		return BrandingThemePageBackgroundPageLayoutEnumLeft, nil
	case "right":
		return BrandingThemePageBackgroundPageLayoutEnumRight, nil
	}
	var t BrandingThemePageBackgroundPageLayoutEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemePageBackgroundPageLayoutEnum) Ptr() *BrandingThemePageBackgroundPageLayoutEnum {
	return &b
}

type BrandingThemeWidget struct {
	HeaderTextAlignment BrandingThemeWidgetHeaderTextAlignmentEnum `json:"header_text_alignment" url:"header_text_alignment"`
	// Logo height
	LogoHeight   float64                             `json:"logo_height" url:"logo_height"`
	LogoPosition BrandingThemeWidgetLogoPositionEnum `json:"logo_position" url:"logo_position"`
	// Logo url
	LogoURL             string                                     `json:"logo_url" url:"logo_url"`
	SocialButtonsLayout BrandingThemeWidgetSocialButtonsLayoutEnum `json:"social_buttons_layout" url:"social_buttons_layout"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandingThemeWidget) GetHeaderTextAlignment() BrandingThemeWidgetHeaderTextAlignmentEnum {
	if b == nil {
		return ""
	}
	return b.HeaderTextAlignment
}

func (b *BrandingThemeWidget) GetLogoHeight() float64 {
	if b == nil {
		return 0
	}
	return b.LogoHeight
}

func (b *BrandingThemeWidget) GetLogoPosition() BrandingThemeWidgetLogoPositionEnum {
	if b == nil {
		return ""
	}
	return b.LogoPosition
}

func (b *BrandingThemeWidget) GetLogoURL() string {
	if b == nil {
		return ""
	}
	return b.LogoURL
}

func (b *BrandingThemeWidget) GetSocialButtonsLayout() BrandingThemeWidgetSocialButtonsLayoutEnum {
	if b == nil {
		return ""
	}
	return b.SocialButtonsLayout
}

func (b *BrandingThemeWidget) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandingThemeWidget) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandingThemeWidget
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandingThemeWidget(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandingThemeWidget) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Header text alignment
type BrandingThemeWidgetHeaderTextAlignmentEnum string

const (
	BrandingThemeWidgetHeaderTextAlignmentEnumCenter BrandingThemeWidgetHeaderTextAlignmentEnum = "center"
	BrandingThemeWidgetHeaderTextAlignmentEnumLeft   BrandingThemeWidgetHeaderTextAlignmentEnum = "left"
	BrandingThemeWidgetHeaderTextAlignmentEnumRight  BrandingThemeWidgetHeaderTextAlignmentEnum = "right"
)

func NewBrandingThemeWidgetHeaderTextAlignmentEnumFromString(s string) (BrandingThemeWidgetHeaderTextAlignmentEnum, error) {
	switch s {
	case "center":
		return BrandingThemeWidgetHeaderTextAlignmentEnumCenter, nil
	case "left":
		return BrandingThemeWidgetHeaderTextAlignmentEnumLeft, nil
	case "right":
		return BrandingThemeWidgetHeaderTextAlignmentEnumRight, nil
	}
	var t BrandingThemeWidgetHeaderTextAlignmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeWidgetHeaderTextAlignmentEnum) Ptr() *BrandingThemeWidgetHeaderTextAlignmentEnum {
	return &b
}

// Logo position
type BrandingThemeWidgetLogoPositionEnum string

const (
	BrandingThemeWidgetLogoPositionEnumCenter BrandingThemeWidgetLogoPositionEnum = "center"
	BrandingThemeWidgetLogoPositionEnumLeft   BrandingThemeWidgetLogoPositionEnum = "left"
	BrandingThemeWidgetLogoPositionEnumNone   BrandingThemeWidgetLogoPositionEnum = "none"
	BrandingThemeWidgetLogoPositionEnumRight  BrandingThemeWidgetLogoPositionEnum = "right"
)

func NewBrandingThemeWidgetLogoPositionEnumFromString(s string) (BrandingThemeWidgetLogoPositionEnum, error) {
	switch s {
	case "center":
		return BrandingThemeWidgetLogoPositionEnumCenter, nil
	case "left":
		return BrandingThemeWidgetLogoPositionEnumLeft, nil
	case "none":
		return BrandingThemeWidgetLogoPositionEnumNone, nil
	case "right":
		return BrandingThemeWidgetLogoPositionEnumRight, nil
	}
	var t BrandingThemeWidgetLogoPositionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeWidgetLogoPositionEnum) Ptr() *BrandingThemeWidgetLogoPositionEnum {
	return &b
}

// Social buttons layout
type BrandingThemeWidgetSocialButtonsLayoutEnum string

const (
	BrandingThemeWidgetSocialButtonsLayoutEnumBottom BrandingThemeWidgetSocialButtonsLayoutEnum = "bottom"
	BrandingThemeWidgetSocialButtonsLayoutEnumTop    BrandingThemeWidgetSocialButtonsLayoutEnum = "top"
)

func NewBrandingThemeWidgetSocialButtonsLayoutEnumFromString(s string) (BrandingThemeWidgetSocialButtonsLayoutEnum, error) {
	switch s {
	case "bottom":
		return BrandingThemeWidgetSocialButtonsLayoutEnumBottom, nil
	case "top":
		return BrandingThemeWidgetSocialButtonsLayoutEnumTop, nil
	}
	var t BrandingThemeWidgetSocialButtonsLayoutEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BrandingThemeWidgetSocialButtonsLayoutEnum) Ptr() *BrandingThemeWidgetSocialButtonsLayoutEnum {
	return &b
}

type BreachedPasswordDetectionAdminNotificationFrequencyEnum string

const (
	BreachedPasswordDetectionAdminNotificationFrequencyEnumImmediately BreachedPasswordDetectionAdminNotificationFrequencyEnum = "immediately"
	BreachedPasswordDetectionAdminNotificationFrequencyEnumDaily       BreachedPasswordDetectionAdminNotificationFrequencyEnum = "daily"
	BreachedPasswordDetectionAdminNotificationFrequencyEnumWeekly      BreachedPasswordDetectionAdminNotificationFrequencyEnum = "weekly"
	BreachedPasswordDetectionAdminNotificationFrequencyEnumMonthly     BreachedPasswordDetectionAdminNotificationFrequencyEnum = "monthly"
)

func NewBreachedPasswordDetectionAdminNotificationFrequencyEnumFromString(s string) (BreachedPasswordDetectionAdminNotificationFrequencyEnum, error) {
	switch s {
	case "immediately":
		return BreachedPasswordDetectionAdminNotificationFrequencyEnumImmediately, nil
	case "daily":
		return BreachedPasswordDetectionAdminNotificationFrequencyEnumDaily, nil
	case "weekly":
		return BreachedPasswordDetectionAdminNotificationFrequencyEnumWeekly, nil
	case "monthly":
		return BreachedPasswordDetectionAdminNotificationFrequencyEnumMonthly, nil
	}
	var t BreachedPasswordDetectionAdminNotificationFrequencyEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BreachedPasswordDetectionAdminNotificationFrequencyEnum) Ptr() *BreachedPasswordDetectionAdminNotificationFrequencyEnum {
	return &b
}

// The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard.
//
//	Possible values: <code>standard</code>, <code>enhanced</code>.
type BreachedPasswordDetectionMethodEnum string

const (
	BreachedPasswordDetectionMethodEnumStandard BreachedPasswordDetectionMethodEnum = "standard"
	BreachedPasswordDetectionMethodEnumEnhanced BreachedPasswordDetectionMethodEnum = "enhanced"
)

func NewBreachedPasswordDetectionMethodEnumFromString(s string) (BreachedPasswordDetectionMethodEnum, error) {
	switch s {
	case "standard":
		return BreachedPasswordDetectionMethodEnumStandard, nil
	case "enhanced":
		return BreachedPasswordDetectionMethodEnumEnhanced, nil
	}
	var t BreachedPasswordDetectionMethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BreachedPasswordDetectionMethodEnum) Ptr() *BreachedPasswordDetectionMethodEnum {
	return &b
}

type BreachedPasswordDetectionPreChangePasswordShieldsEnum string

const (
	BreachedPasswordDetectionPreChangePasswordShieldsEnumBlock             BreachedPasswordDetectionPreChangePasswordShieldsEnum = "block"
	BreachedPasswordDetectionPreChangePasswordShieldsEnumAdminNotification BreachedPasswordDetectionPreChangePasswordShieldsEnum = "admin_notification"
)

func NewBreachedPasswordDetectionPreChangePasswordShieldsEnumFromString(s string) (BreachedPasswordDetectionPreChangePasswordShieldsEnum, error) {
	switch s {
	case "block":
		return BreachedPasswordDetectionPreChangePasswordShieldsEnumBlock, nil
	case "admin_notification":
		return BreachedPasswordDetectionPreChangePasswordShieldsEnumAdminNotification, nil
	}
	var t BreachedPasswordDetectionPreChangePasswordShieldsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BreachedPasswordDetectionPreChangePasswordShieldsEnum) Ptr() *BreachedPasswordDetectionPreChangePasswordShieldsEnum {
	return &b
}

type BreachedPasswordDetectionPreChangePasswordStage struct {
	// Action to take when a breached password is detected during a password reset.
	//
	//	Possible values: <code>block</code>, <code>admin_notification</code>.
	Shields []BreachedPasswordDetectionPreChangePasswordShieldsEnum `json:"shields,omitempty" url:"shields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BreachedPasswordDetectionPreChangePasswordStage) GetShields() []BreachedPasswordDetectionPreChangePasswordShieldsEnum {
	if b == nil {
		return nil
	}
	return b.Shields
}

func (b *BreachedPasswordDetectionPreChangePasswordStage) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BreachedPasswordDetectionPreChangePasswordStage) UnmarshalJSON(data []byte) error {
	type unmarshaler BreachedPasswordDetectionPreChangePasswordStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BreachedPasswordDetectionPreChangePasswordStage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BreachedPasswordDetectionPreChangePasswordStage) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BreachedPasswordDetectionPreUserRegistrationShieldsEnum string

const (
	BreachedPasswordDetectionPreUserRegistrationShieldsEnumBlock             BreachedPasswordDetectionPreUserRegistrationShieldsEnum = "block"
	BreachedPasswordDetectionPreUserRegistrationShieldsEnumAdminNotification BreachedPasswordDetectionPreUserRegistrationShieldsEnum = "admin_notification"
)

func NewBreachedPasswordDetectionPreUserRegistrationShieldsEnumFromString(s string) (BreachedPasswordDetectionPreUserRegistrationShieldsEnum, error) {
	switch s {
	case "block":
		return BreachedPasswordDetectionPreUserRegistrationShieldsEnumBlock, nil
	case "admin_notification":
		return BreachedPasswordDetectionPreUserRegistrationShieldsEnumAdminNotification, nil
	}
	var t BreachedPasswordDetectionPreUserRegistrationShieldsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BreachedPasswordDetectionPreUserRegistrationShieldsEnum) Ptr() *BreachedPasswordDetectionPreUserRegistrationShieldsEnum {
	return &b
}

type BreachedPasswordDetectionPreUserRegistrationStage struct {
	// Action to take when a breached password is detected during a signup.
	//
	//	Possible values: <code>block</code>, <code>admin_notification</code>.
	Shields []BreachedPasswordDetectionPreUserRegistrationShieldsEnum `json:"shields,omitempty" url:"shields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BreachedPasswordDetectionPreUserRegistrationStage) GetShields() []BreachedPasswordDetectionPreUserRegistrationShieldsEnum {
	if b == nil {
		return nil
	}
	return b.Shields
}

func (b *BreachedPasswordDetectionPreUserRegistrationStage) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BreachedPasswordDetectionPreUserRegistrationStage) UnmarshalJSON(data []byte) error {
	type unmarshaler BreachedPasswordDetectionPreUserRegistrationStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BreachedPasswordDetectionPreUserRegistrationStage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BreachedPasswordDetectionPreUserRegistrationStage) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BreachedPasswordDetectionShieldsEnum string

const (
	BreachedPasswordDetectionShieldsEnumBlock             BreachedPasswordDetectionShieldsEnum = "block"
	BreachedPasswordDetectionShieldsEnumUserNotification  BreachedPasswordDetectionShieldsEnum = "user_notification"
	BreachedPasswordDetectionShieldsEnumAdminNotification BreachedPasswordDetectionShieldsEnum = "admin_notification"
)

func NewBreachedPasswordDetectionShieldsEnumFromString(s string) (BreachedPasswordDetectionShieldsEnum, error) {
	switch s {
	case "block":
		return BreachedPasswordDetectionShieldsEnumBlock, nil
	case "user_notification":
		return BreachedPasswordDetectionShieldsEnumUserNotification, nil
	case "admin_notification":
		return BreachedPasswordDetectionShieldsEnumAdminNotification, nil
	}
	var t BreachedPasswordDetectionShieldsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BreachedPasswordDetectionShieldsEnum) Ptr() *BreachedPasswordDetectionShieldsEnum {
	return &b
}

type BreachedPasswordDetectionStage struct {
	PreUserRegistration *BreachedPasswordDetectionPreUserRegistrationStage `json:"pre-user-registration,omitempty" url:"pre-user-registration,omitempty"`
	PreChangePassword   *BreachedPasswordDetectionPreChangePasswordStage   `json:"pre-change-password,omitempty" url:"pre-change-password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BreachedPasswordDetectionStage) GetPreUserRegistration() *BreachedPasswordDetectionPreUserRegistrationStage {
	if b == nil {
		return nil
	}
	return b.PreUserRegistration
}

func (b *BreachedPasswordDetectionStage) GetPreChangePassword() *BreachedPasswordDetectionPreChangePasswordStage {
	if b == nil {
		return nil
	}
	return b.PreChangePassword
}

func (b *BreachedPasswordDetectionStage) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BreachedPasswordDetectionStage) UnmarshalJSON(data []byte) error {
	type unmarshaler BreachedPasswordDetectionStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BreachedPasswordDetectionStage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BreachedPasswordDetectionStage) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type ClientCredential struct {
	// ID of the credential. Generated on creation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name given to the credential by the user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The key identifier of the credential, generated on creation.
	Kid            *string                        `json:"kid,omitempty" url:"kid,omitempty"`
	Alg            *ClientCredentialAlgorithmEnum `json:"alg,omitempty" url:"alg,omitempty"`
	CredentialType *ClientCredentialTypeEnum      `json:"credential_type,omitempty" url:"credential_type,omitempty"`
	// The X509 certificate's Subject Distinguished Name
	SubjectDn *string `json:"subject_dn,omitempty" url:"subject_dn,omitempty"`
	// The X509 certificate's SHA256 thumbprint
	ThumbprintSha256 *string `json:"thumbprint_sha256,omitempty" url:"thumbprint_sha256,omitempty"`
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *ClientCredential) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ClientCredential) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ClientCredential) GetKid() *string {
	if c == nil {
		return nil
	}
	return c.Kid
}

func (c *ClientCredential) GetAlg() *ClientCredentialAlgorithmEnum {
	if c == nil {
		return nil
	}
	return c.Alg
}

func (c *ClientCredential) GetCredentialType() *ClientCredentialTypeEnum {
	if c == nil {
		return nil
	}
	return c.CredentialType
}

func (c *ClientCredential) GetSubjectDn() *string {
	if c == nil {
		return nil
	}
	return c.SubjectDn
}

func (c *ClientCredential) GetThumbprintSha256() *string {
	if c == nil {
		return nil
	}
	return c.ThumbprintSha256
}

func (c *ClientCredential) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *ClientCredential) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *ClientCredential) GetExpiresAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *ClientCredential) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *ClientCredential) UnmarshalJSON(data []byte) error {
	type embed ClientCredential
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientCredential(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientCredential) MarshalJSON() ([]byte, error) {
	type embed ClientCredential
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *ClientCredential) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Algorithm which will be used with the credential. Supported algorithms: RS256,RS384,PS256
type ClientCredentialAlgorithmEnum string

const (
	ClientCredentialAlgorithmEnumRs256 ClientCredentialAlgorithmEnum = "RS256"
	ClientCredentialAlgorithmEnumRs384 ClientCredentialAlgorithmEnum = "RS384"
	ClientCredentialAlgorithmEnumPs256 ClientCredentialAlgorithmEnum = "PS256"
)

func NewClientCredentialAlgorithmEnumFromString(s string) (ClientCredentialAlgorithmEnum, error) {
	switch s {
	case "RS256":
		return ClientCredentialAlgorithmEnumRs256, nil
	case "RS384":
		return ClientCredentialAlgorithmEnumRs384, nil
	case "PS256":
		return ClientCredentialAlgorithmEnumPs256, nil
	}
	var t ClientCredentialAlgorithmEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientCredentialAlgorithmEnum) Ptr() *ClientCredentialAlgorithmEnum {
	return &c
}

// The type of credential.
type ClientCredentialTypeEnum string

const (
	ClientCredentialTypeEnumPublicKey     ClientCredentialTypeEnum = "public_key"
	ClientCredentialTypeEnumCertSubjectDn ClientCredentialTypeEnum = "cert_subject_dn"
	ClientCredentialTypeEnumX509Cert      ClientCredentialTypeEnum = "x509_cert"
)

func NewClientCredentialTypeEnumFromString(s string) (ClientCredentialTypeEnum, error) {
	switch s {
	case "public_key":
		return ClientCredentialTypeEnumPublicKey, nil
	case "cert_subject_dn":
		return ClientCredentialTypeEnumCertSubjectDn, nil
	case "x509_cert":
		return ClientCredentialTypeEnumX509Cert, nil
	}
	var t ClientCredentialTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientCredentialTypeEnum) Ptr() *ClientCredentialTypeEnum {
	return &c
}

type ConnectionEnabledClient struct {
	// The client id
	ClientID string `json:"client_id" url:"client_id"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *ConnectionEnabledClient) GetClientID() string {
	if c == nil {
		return ""
	}
	return c.ClientID
}

func (c *ConnectionEnabledClient) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *ConnectionEnabledClient) UnmarshalJSON(data []byte) error {
	type embed ConnectionEnabledClient
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConnectionEnabledClient(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionEnabledClient) MarshalJSON() ([]byte, error) {
	type embed ConnectionEnabledClient
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *ConnectionEnabledClient) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectionForList struct {
	// The name of the connection
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Connection name used in login screen
	DisplayName *string            `json:"display_name,omitempty" url:"display_name,omitempty"`
	Options     *ConnectionOptions `json:"options,omitempty" url:"options,omitempty"`
	// The connection's identifier
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The type of the connection, related to the identity provider
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`
	// Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm.
	Realms []string `json:"realms,omitempty" url:"realms,omitempty"`
	// True if the connection is domain level
	IsDomainConnection *bool `json:"is_domain_connection,omitempty" url:"is_domain_connection,omitempty"`
	// Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD.
	ShowAsButton *bool                `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	Metadata     *ConnectionsMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionForList) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ConnectionForList) GetDisplayName() *string {
	if c == nil {
		return nil
	}
	return c.DisplayName
}

func (c *ConnectionForList) GetOptions() *ConnectionOptions {
	if c == nil {
		return nil
	}
	return c.Options
}

func (c *ConnectionForList) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConnectionForList) GetStrategy() *string {
	if c == nil {
		return nil
	}
	return c.Strategy
}

func (c *ConnectionForList) GetRealms() []string {
	if c == nil {
		return nil
	}
	return c.Realms
}

func (c *ConnectionForList) GetIsDomainConnection() *bool {
	if c == nil {
		return nil
	}
	return c.IsDomainConnection
}

func (c *ConnectionForList) GetShowAsButton() *bool {
	if c == nil {
		return nil
	}
	return c.ShowAsButton
}

func (c *ConnectionForList) GetMetadata() *ConnectionsMetadata {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *ConnectionForList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionForList) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionForList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionForList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionForList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectionKey struct {
	// The key id of the signing key
	Kid string `json:"kid" url:"kid"`
	// The public certificate of the signing key
	Cert string `json:"cert" url:"cert"`
	// The public certificate of the signing key in pkcs7 format
	Pkcs *string `json:"pkcs,omitempty" url:"pkcs,omitempty"`
	// True if the key is the the current key
	Current *bool `json:"current,omitempty" url:"current,omitempty"`
	// True if the key is the the next key
	Next *bool `json:"next,omitempty" url:"next,omitempty"`
	// True if the key is the the previous key
	Previous *bool `json:"previous,omitempty" url:"previous,omitempty"`
	// The date and time when the key became the current key
	CurrentSince *string `json:"current_since,omitempty" url:"current_since,omitempty"`
	// The cert fingerprint
	Fingerprint string `json:"fingerprint" url:"fingerprint"`
	// The cert thumbprint
	Thumbprint string `json:"thumbprint" url:"thumbprint"`
	// Signing key algorithm
	Algorithm *string               `json:"algorithm,omitempty" url:"algorithm,omitempty"`
	KeyUse    *ConnectionKeyUseEnum `json:"key_use,omitempty" url:"key_use,omitempty"`
	SubjectDn *string               `json:"subject_dn,omitempty" url:"subject_dn,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *ConnectionKey) GetKid() string {
	if c == nil {
		return ""
	}
	return c.Kid
}

func (c *ConnectionKey) GetCert() string {
	if c == nil {
		return ""
	}
	return c.Cert
}

func (c *ConnectionKey) GetPkcs() *string {
	if c == nil {
		return nil
	}
	return c.Pkcs
}

func (c *ConnectionKey) GetCurrent() *bool {
	if c == nil {
		return nil
	}
	return c.Current
}

func (c *ConnectionKey) GetNext() *bool {
	if c == nil {
		return nil
	}
	return c.Next
}

func (c *ConnectionKey) GetPrevious() *bool {
	if c == nil {
		return nil
	}
	return c.Previous
}

func (c *ConnectionKey) GetCurrentSince() *string {
	if c == nil {
		return nil
	}
	return c.CurrentSince
}

func (c *ConnectionKey) GetFingerprint() string {
	if c == nil {
		return ""
	}
	return c.Fingerprint
}

func (c *ConnectionKey) GetThumbprint() string {
	if c == nil {
		return ""
	}
	return c.Thumbprint
}

func (c *ConnectionKey) GetAlgorithm() *string {
	if c == nil {
		return nil
	}
	return c.Algorithm
}

func (c *ConnectionKey) GetKeyUse() *ConnectionKeyUseEnum {
	if c == nil {
		return nil
	}
	return c.KeyUse
}

func (c *ConnectionKey) GetSubjectDn() *string {
	if c == nil {
		return nil
	}
	return c.SubjectDn
}

func (c *ConnectionKey) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *ConnectionKey) UnmarshalJSON(data []byte) error {
	type embed ConnectionKey
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConnectionKey(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionKey) MarshalJSON() ([]byte, error) {
	type embed ConnectionKey
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *ConnectionKey) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Signing key use, whether for encryption or signing
type ConnectionKeyUseEnum string

const (
	ConnectionKeyUseEnumEncryption ConnectionKeyUseEnum = "encryption"
	ConnectionKeyUseEnumSigning    ConnectionKeyUseEnum = "signing"
)

func NewConnectionKeyUseEnumFromString(s string) (ConnectionKeyUseEnum, error) {
	switch s {
	case "encryption":
		return ConnectionKeyUseEnumEncryption, nil
	case "signing":
		return ConnectionKeyUseEnumSigning, nil
	}
	var t ConnectionKeyUseEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionKeyUseEnum) Ptr() *ConnectionKeyUseEnum {
	return &c
}

// In order to return options in the response, the `read:connections_options` scope must be present
type ConnectionOptions = map[string]interface{}

type ConnectionStrategyEnum string

const (
	ConnectionStrategyEnumAd                  ConnectionStrategyEnum = "ad"
	ConnectionStrategyEnumAdfs                ConnectionStrategyEnum = "adfs"
	ConnectionStrategyEnumAmazon              ConnectionStrategyEnum = "amazon"
	ConnectionStrategyEnumApple               ConnectionStrategyEnum = "apple"
	ConnectionStrategyEnumDropbox             ConnectionStrategyEnum = "dropbox"
	ConnectionStrategyEnumBitbucket           ConnectionStrategyEnum = "bitbucket"
	ConnectionStrategyEnumAol                 ConnectionStrategyEnum = "aol"
	ConnectionStrategyEnumAuth0Oidc           ConnectionStrategyEnum = "auth0-oidc"
	ConnectionStrategyEnumAuth0               ConnectionStrategyEnum = "auth0"
	ConnectionStrategyEnumBaidu               ConnectionStrategyEnum = "baidu"
	ConnectionStrategyEnumBitly               ConnectionStrategyEnum = "bitly"
	ConnectionStrategyEnumBox                 ConnectionStrategyEnum = "box"
	ConnectionStrategyEnumCustom              ConnectionStrategyEnum = "custom"
	ConnectionStrategyEnumDaccount            ConnectionStrategyEnum = "daccount"
	ConnectionStrategyEnumDwolla              ConnectionStrategyEnum = "dwolla"
	ConnectionStrategyEnumEmail               ConnectionStrategyEnum = "email"
	ConnectionStrategyEnumEvernoteSandbox     ConnectionStrategyEnum = "evernote-sandbox"
	ConnectionStrategyEnumEvernote            ConnectionStrategyEnum = "evernote"
	ConnectionStrategyEnumExact               ConnectionStrategyEnum = "exact"
	ConnectionStrategyEnumFacebook            ConnectionStrategyEnum = "facebook"
	ConnectionStrategyEnumFitbit              ConnectionStrategyEnum = "fitbit"
	ConnectionStrategyEnumFlickr              ConnectionStrategyEnum = "flickr"
	ConnectionStrategyEnumGithub              ConnectionStrategyEnum = "github"
	ConnectionStrategyEnumGoogleApps          ConnectionStrategyEnum = "google-apps"
	ConnectionStrategyEnumGoogleOauth2        ConnectionStrategyEnum = "google-oauth2"
	ConnectionStrategyEnumInstagram           ConnectionStrategyEnum = "instagram"
	ConnectionStrategyEnumIP                  ConnectionStrategyEnum = "ip"
	ConnectionStrategyEnumLine                ConnectionStrategyEnum = "line"
	ConnectionStrategyEnumLinkedin            ConnectionStrategyEnum = "linkedin"
	ConnectionStrategyEnumMiicard             ConnectionStrategyEnum = "miicard"
	ConnectionStrategyEnumOauth1              ConnectionStrategyEnum = "oauth1"
	ConnectionStrategyEnumOauth2              ConnectionStrategyEnum = "oauth2"
	ConnectionStrategyEnumOffice365           ConnectionStrategyEnum = "office365"
	ConnectionStrategyEnumOidc                ConnectionStrategyEnum = "oidc"
	ConnectionStrategyEnumOkta                ConnectionStrategyEnum = "okta"
	ConnectionStrategyEnumPaypal              ConnectionStrategyEnum = "paypal"
	ConnectionStrategyEnumPaypalSandbox       ConnectionStrategyEnum = "paypal-sandbox"
	ConnectionStrategyEnumPingfederate        ConnectionStrategyEnum = "pingfederate"
	ConnectionStrategyEnumPlanningcenter      ConnectionStrategyEnum = "planningcenter"
	ConnectionStrategyEnumRenren              ConnectionStrategyEnum = "renren"
	ConnectionStrategyEnumSalesforceCommunity ConnectionStrategyEnum = "salesforce-community"
	ConnectionStrategyEnumSalesforceSandbox   ConnectionStrategyEnum = "salesforce-sandbox"
	ConnectionStrategyEnumSalesforce          ConnectionStrategyEnum = "salesforce"
	ConnectionStrategyEnumSamlp               ConnectionStrategyEnum = "samlp"
	ConnectionStrategyEnumSharepoint          ConnectionStrategyEnum = "sharepoint"
	ConnectionStrategyEnumShopify             ConnectionStrategyEnum = "shopify"
	ConnectionStrategyEnumShop                ConnectionStrategyEnum = "shop"
	ConnectionStrategyEnumSms                 ConnectionStrategyEnum = "sms"
	ConnectionStrategyEnumSoundcloud          ConnectionStrategyEnum = "soundcloud"
	ConnectionStrategyEnumThecitySandbox      ConnectionStrategyEnum = "thecity-sandbox"
	ConnectionStrategyEnumThecity             ConnectionStrategyEnum = "thecity"
	ConnectionStrategyEnumThirtysevensignals  ConnectionStrategyEnum = "thirtysevensignals"
	ConnectionStrategyEnumTwitter             ConnectionStrategyEnum = "twitter"
	ConnectionStrategyEnumUntappd             ConnectionStrategyEnum = "untappd"
	ConnectionStrategyEnumVkontakte           ConnectionStrategyEnum = "vkontakte"
	ConnectionStrategyEnumWaad                ConnectionStrategyEnum = "waad"
	ConnectionStrategyEnumWeibo               ConnectionStrategyEnum = "weibo"
	ConnectionStrategyEnumWindowslive         ConnectionStrategyEnum = "windowslive"
	ConnectionStrategyEnumWordpress           ConnectionStrategyEnum = "wordpress"
	ConnectionStrategyEnumYahoo               ConnectionStrategyEnum = "yahoo"
	ConnectionStrategyEnumYammer              ConnectionStrategyEnum = "yammer"
	ConnectionStrategyEnumYandex              ConnectionStrategyEnum = "yandex"
	ConnectionStrategyEnumAuth0Adldap         ConnectionStrategyEnum = "auth0-adldap"
)

func NewConnectionStrategyEnumFromString(s string) (ConnectionStrategyEnum, error) {
	switch s {
	case "ad":
		return ConnectionStrategyEnumAd, nil
	case "adfs":
		return ConnectionStrategyEnumAdfs, nil
	case "amazon":
		return ConnectionStrategyEnumAmazon, nil
	case "apple":
		return ConnectionStrategyEnumApple, nil
	case "dropbox":
		return ConnectionStrategyEnumDropbox, nil
	case "bitbucket":
		return ConnectionStrategyEnumBitbucket, nil
	case "aol":
		return ConnectionStrategyEnumAol, nil
	case "auth0-oidc":
		return ConnectionStrategyEnumAuth0Oidc, nil
	case "auth0":
		return ConnectionStrategyEnumAuth0, nil
	case "baidu":
		return ConnectionStrategyEnumBaidu, nil
	case "bitly":
		return ConnectionStrategyEnumBitly, nil
	case "box":
		return ConnectionStrategyEnumBox, nil
	case "custom":
		return ConnectionStrategyEnumCustom, nil
	case "daccount":
		return ConnectionStrategyEnumDaccount, nil
	case "dwolla":
		return ConnectionStrategyEnumDwolla, nil
	case "email":
		return ConnectionStrategyEnumEmail, nil
	case "evernote-sandbox":
		return ConnectionStrategyEnumEvernoteSandbox, nil
	case "evernote":
		return ConnectionStrategyEnumEvernote, nil
	case "exact":
		return ConnectionStrategyEnumExact, nil
	case "facebook":
		return ConnectionStrategyEnumFacebook, nil
	case "fitbit":
		return ConnectionStrategyEnumFitbit, nil
	case "flickr":
		return ConnectionStrategyEnumFlickr, nil
	case "github":
		return ConnectionStrategyEnumGithub, nil
	case "google-apps":
		return ConnectionStrategyEnumGoogleApps, nil
	case "google-oauth2":
		return ConnectionStrategyEnumGoogleOauth2, nil
	case "instagram":
		return ConnectionStrategyEnumInstagram, nil
	case "ip":
		return ConnectionStrategyEnumIP, nil
	case "line":
		return ConnectionStrategyEnumLine, nil
	case "linkedin":
		return ConnectionStrategyEnumLinkedin, nil
	case "miicard":
		return ConnectionStrategyEnumMiicard, nil
	case "oauth1":
		return ConnectionStrategyEnumOauth1, nil
	case "oauth2":
		return ConnectionStrategyEnumOauth2, nil
	case "office365":
		return ConnectionStrategyEnumOffice365, nil
	case "oidc":
		return ConnectionStrategyEnumOidc, nil
	case "okta":
		return ConnectionStrategyEnumOkta, nil
	case "paypal":
		return ConnectionStrategyEnumPaypal, nil
	case "paypal-sandbox":
		return ConnectionStrategyEnumPaypalSandbox, nil
	case "pingfederate":
		return ConnectionStrategyEnumPingfederate, nil
	case "planningcenter":
		return ConnectionStrategyEnumPlanningcenter, nil
	case "renren":
		return ConnectionStrategyEnumRenren, nil
	case "salesforce-community":
		return ConnectionStrategyEnumSalesforceCommunity, nil
	case "salesforce-sandbox":
		return ConnectionStrategyEnumSalesforceSandbox, nil
	case "salesforce":
		return ConnectionStrategyEnumSalesforce, nil
	case "samlp":
		return ConnectionStrategyEnumSamlp, nil
	case "sharepoint":
		return ConnectionStrategyEnumSharepoint, nil
	case "shopify":
		return ConnectionStrategyEnumShopify, nil
	case "shop":
		return ConnectionStrategyEnumShop, nil
	case "sms":
		return ConnectionStrategyEnumSms, nil
	case "soundcloud":
		return ConnectionStrategyEnumSoundcloud, nil
	case "thecity-sandbox":
		return ConnectionStrategyEnumThecitySandbox, nil
	case "thecity":
		return ConnectionStrategyEnumThecity, nil
	case "thirtysevensignals":
		return ConnectionStrategyEnumThirtysevensignals, nil
	case "twitter":
		return ConnectionStrategyEnumTwitter, nil
	case "untappd":
		return ConnectionStrategyEnumUntappd, nil
	case "vkontakte":
		return ConnectionStrategyEnumVkontakte, nil
	case "waad":
		return ConnectionStrategyEnumWaad, nil
	case "weibo":
		return ConnectionStrategyEnumWeibo, nil
	case "windowslive":
		return ConnectionStrategyEnumWindowslive, nil
	case "wordpress":
		return ConnectionStrategyEnumWordpress, nil
	case "yahoo":
		return ConnectionStrategyEnumYahoo, nil
	case "yammer":
		return ConnectionStrategyEnumYammer, nil
	case "yandex":
		return ConnectionStrategyEnumYandex, nil
	case "auth0-adldap":
		return ConnectionStrategyEnumAuth0Adldap, nil
	}
	var t ConnectionStrategyEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionStrategyEnum) Ptr() *ConnectionStrategyEnum {
	return &c
}

// Metadata associated with the connection in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.
type ConnectionsMetadata = map[string]interface{}

// Phone provider configuration schema
type CreateBrandingPhoneProviderResponseContent struct {
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the tenant
	Tenant  *string                   `json:"tenant,omitempty" url:"tenant,omitempty"`
	Name    PhoneProviderNameEnum     `json:"name" url:"name"`
	Channel *PhoneProviderChannelEnum `json:"channel,omitempty" url:"channel,omitempty"`
	// Whether the provider is enabled (false) or disabled (true).
	Disabled      *bool                       `json:"disabled,omitempty" url:"disabled,omitempty"`
	Configuration *PhoneProviderConfiguration `json:"configuration,omitempty" url:"configuration,omitempty"`
	// The provider's creation date and time in ISO 8601 format
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time of the last update to the provider in ISO 8601 format
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateBrandingPhoneProviderResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateBrandingPhoneProviderResponseContent) GetTenant() *string {
	if c == nil {
		return nil
	}
	return c.Tenant
}

func (c *CreateBrandingPhoneProviderResponseContent) GetName() PhoneProviderNameEnum {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateBrandingPhoneProviderResponseContent) GetDisabled() *bool {
	if c == nil {
		return nil
	}
	return c.Disabled
}

func (c *CreateBrandingPhoneProviderResponseContent) GetConfiguration() *PhoneProviderConfiguration {
	if c == nil {
		return nil
	}
	return c.Configuration
}

func (c *CreateBrandingPhoneProviderResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateBrandingPhoneProviderResponseContent) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CreateBrandingPhoneProviderResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateBrandingPhoneProviderResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateBrandingPhoneProviderResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateBrandingPhoneProviderResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateBrandingPhoneProviderResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateBrandingPhoneProviderResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateBrandingPhoneProviderResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateBrandingThemeResponseContent struct {
	Borders *BrandingThemeBorders `json:"borders" url:"borders"`
	Colors  *BrandingThemeColors  `json:"colors" url:"colors"`
	// Display Name
	DisplayName    string                       `json:"displayName" url:"displayName"`
	Fonts          *BrandingThemeFonts          `json:"fonts" url:"fonts"`
	PageBackground *BrandingThemePageBackground `json:"page_background" url:"page_background"`
	// Theme Id
	ThemeID string               `json:"themeId" url:"themeId"`
	Widget  *BrandingThemeWidget `json:"widget" url:"widget"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateBrandingThemeResponseContent) GetBorders() *BrandingThemeBorders {
	if c == nil {
		return nil
	}
	return c.Borders
}

func (c *CreateBrandingThemeResponseContent) GetColors() *BrandingThemeColors {
	if c == nil {
		return nil
	}
	return c.Colors
}

func (c *CreateBrandingThemeResponseContent) GetDisplayName() string {
	if c == nil {
		return ""
	}
	return c.DisplayName
}

func (c *CreateBrandingThemeResponseContent) GetFonts() *BrandingThemeFonts {
	if c == nil {
		return nil
	}
	return c.Fonts
}

func (c *CreateBrandingThemeResponseContent) GetPageBackground() *BrandingThemePageBackground {
	if c == nil {
		return nil
	}
	return c.PageBackground
}

func (c *CreateBrandingThemeResponseContent) GetThemeID() string {
	if c == nil {
		return ""
	}
	return c.ThemeID
}

func (c *CreateBrandingThemeResponseContent) GetWidget() *BrandingThemeWidget {
	if c == nil {
		return nil
	}
	return c.Widget
}

func (c *CreateBrandingThemeResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateBrandingThemeResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBrandingThemeResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateBrandingThemeResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateBrandingThemeResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEmailProviderResponseContent struct {
	// Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether the provider is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Email address to use as "from" when no other address specified.
	DefaultFromAddress *string                   `json:"default_from_address,omitempty" url:"default_from_address,omitempty"`
	Credentials        *EmailProviderCredentials `json:"credentials,omitempty" url:"credentials,omitempty"`
	Settings           *EmailProviderSettings    `json:"settings,omitempty" url:"settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateEmailProviderResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateEmailProviderResponseContent) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CreateEmailProviderResponseContent) GetDefaultFromAddress() *string {
	if c == nil {
		return nil
	}
	return c.DefaultFromAddress
}

func (c *CreateEmailProviderResponseContent) GetCredentials() *EmailProviderCredentials {
	if c == nil {
		return nil
	}
	return c.Credentials
}

func (c *CreateEmailProviderResponseContent) GetSettings() *EmailProviderSettings {
	if c == nil {
		return nil
	}
	return c.Settings
}

func (c *CreateEmailProviderResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEmailProviderResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEmailProviderResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateEmailProviderResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEmailProviderResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEncryptionKeyPublicWrappingResponseContent struct {
	// Public wrapping key in PEM format
	PublicKey string                               `json:"public_key" url:"public_key"`
	Algorithm EncryptionKeyPublicWrappingAlgorithm `json:"algorithm" url:"algorithm"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateEncryptionKeyPublicWrappingResponseContent) GetPublicKey() string {
	if c == nil {
		return ""
	}
	return c.PublicKey
}

func (c *CreateEncryptionKeyPublicWrappingResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateEncryptionKeyPublicWrappingResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateEncryptionKeyPublicWrappingResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateEncryptionKeyPublicWrappingResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEncryptionKeyPublicWrappingResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateEncryptionKeyPublicWrappingResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateEncryptionKeyPublicWrappingResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Encryption key
type CreateEncryptionKeyResponseContent struct {
	// Key ID
	Kid   string             `json:"kid" url:"kid"`
	Type  EncryptionKeyType  `json:"type" url:"type"`
	State EncryptionKeyState `json:"state" url:"state"`
	// Key creation timestamp
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Key update timestamp
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of parent wrapping key
	ParentKid string `json:"parent_kid" url:"parent_kid"`
	// Public key in PEM format
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateEncryptionKeyResponseContent) GetKid() string {
	if c == nil {
		return ""
	}
	return c.Kid
}

func (c *CreateEncryptionKeyResponseContent) GetType() EncryptionKeyType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateEncryptionKeyResponseContent) GetState() EncryptionKeyState {
	if c == nil {
		return ""
	}
	return c.State
}

func (c *CreateEncryptionKeyResponseContent) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreateEncryptionKeyResponseContent) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreateEncryptionKeyResponseContent) GetParentKid() string {
	if c == nil {
		return ""
	}
	return c.ParentKid
}

func (c *CreateEncryptionKeyResponseContent) GetPublicKey() *string {
	if c == nil {
		return nil
	}
	return c.PublicKey
}

func (c *CreateEncryptionKeyResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEncryptionKeyResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateEncryptionKeyResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateEncryptionKeyResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEncryptionKeyResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateEncryptionKeyResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateEncryptionKeyResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Type of the encryption key to be created.
type CreateEncryptionKeyType string

const (
	CreateEncryptionKeyTypeCustomerProvidedRootKey CreateEncryptionKeyType = "customer-provided-root-key"
	CreateEncryptionKeyTypeTenantEncryptionKey     CreateEncryptionKeyType = "tenant-encryption-key"
)

func NewCreateEncryptionKeyTypeFromString(s string) (CreateEncryptionKeyType, error) {
	switch s {
	case "customer-provided-root-key":
		return CreateEncryptionKeyTypeCustomerProvidedRootKey, nil
	case "tenant-encryption-key":
		return CreateEncryptionKeyTypeTenantEncryptionKey, nil
	}
	var t CreateEncryptionKeyType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEncryptionKeyType) Ptr() *CreateEncryptionKeyType {
	return &c
}

type CreateEventStreamRedeliveryResponseContent struct {
	// An RFC-3339 date-time for redelivery start, inclusive. Does not allow sub-second precision.
	DateFrom *time.Time `json:"date_from,omitempty" url:"date_from,omitempty"`
	// An RFC-3339 date-time for redelivery end, exclusive. Does not allow sub-second precision.
	DateTo *time.Time `json:"date_to,omitempty" url:"date_to,omitempty"`
	// Filter by status
	Statuses []EventStreamDeliveryStatusEnum `json:"statuses,omitempty" url:"statuses,omitempty"`
	// Filter by event type
	EventTypes []EventStreamEventTypeEnum `json:"event_types,omitempty" url:"event_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateEventStreamRedeliveryResponseContent) GetDateFrom() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateFrom
}

func (c *CreateEventStreamRedeliveryResponseContent) GetDateTo() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateTo
}

func (c *CreateEventStreamRedeliveryResponseContent) GetStatuses() []EventStreamDeliveryStatusEnum {
	if c == nil {
		return nil
	}
	return c.Statuses
}

func (c *CreateEventStreamRedeliveryResponseContent) GetEventTypes() []EventStreamEventTypeEnum {
	if c == nil {
		return nil
	}
	return c.EventTypes
}

func (c *CreateEventStreamRedeliveryResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEventStreamRedeliveryResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateEventStreamRedeliveryResponseContent
	var unmarshaler = struct {
		embed
		DateFrom *internal.DateTime `json:"date_from,omitempty"`
		DateTo   *internal.DateTime `json:"date_to,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateEventStreamRedeliveryResponseContent(unmarshaler.embed)
	c.DateFrom = unmarshaler.DateFrom.TimePtr()
	c.DateTo = unmarshaler.DateTo.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventStreamRedeliveryResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateEventStreamRedeliveryResponseContent
	var marshaler = struct {
		embed
		DateFrom *internal.DateTime `json:"date_from,omitempty"`
		DateTo   *internal.DateTime `json:"date_to,omitempty"`
	}{
		embed:    embed(*c),
		DateFrom: internal.NewOptionalDateTime(c.DateFrom),
		DateTo:   internal.NewOptionalDateTime(c.DateTo),
	}
	return json.Marshal(marshaler)
}

func (c *CreateEventStreamRedeliveryResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateExportUsersFields struct {
	// Name of the field in the profile.
	Name string `json:"name" url:"name"`
	// Title of the column in the exported CSV.
	ExportAs *string `json:"export_as,omitempty" url:"export_as,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateExportUsersFields) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateExportUsersFields) GetExportAs() *string {
	if c == nil {
		return nil
	}
	return c.ExportAs
}

func (c *CreateExportUsersFields) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateExportUsersFields) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateExportUsersFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateExportUsersFields(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateExportUsersFields) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateExportUsersResponseContent struct {
	// Status of this job.
	Status string `json:"status" url:"status"`
	// Type of job this is.
	Type string `json:"type" url:"type"`
	// When this job was created.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// ID of this job.
	ID string `json:"id" url:"id"`
	// connection_id of the connection from which users will be exported.
	ConnectionID *string            `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	Format       *JobFileFormatEnum `json:"format,omitempty" url:"format,omitempty"`
	// Limit the number of records.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// List of fields to be included in the CSV. Defaults to a predefined set of fields.
	Fields []*CreateExportUsersFields `json:"fields,omitempty" url:"fields,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateExportUsersResponseContent) GetStatus() string {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CreateExportUsersResponseContent) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateExportUsersResponseContent) GetCreatedAt() *string {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateExportUsersResponseContent) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreateExportUsersResponseContent) GetConnectionID() *string {
	if c == nil {
		return nil
	}
	return c.ConnectionID
}

func (c *CreateExportUsersResponseContent) GetFormat() *JobFileFormatEnum {
	if c == nil {
		return nil
	}
	return c.Format
}

func (c *CreateExportUsersResponseContent) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CreateExportUsersResponseContent) GetFields() []*CreateExportUsersFields {
	if c == nil {
		return nil
	}
	return c.Fields
}

func (c *CreateExportUsersResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateExportUsersResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateExportUsersResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateExportUsersResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateExportUsersResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateExportUsersResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateExportUsersResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGuardianEnrollmentTicketResponseContent struct {
	// The ticket_id used to identify the enrollment
	TicketID *string `json:"ticket_id,omitempty" url:"ticket_id,omitempty"`
	// The url you can use to start enrollment
	TicketURL *string `json:"ticket_url,omitempty" url:"ticket_url,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateGuardianEnrollmentTicketResponseContent) GetTicketID() *string {
	if c == nil {
		return nil
	}
	return c.TicketID
}

func (c *CreateGuardianEnrollmentTicketResponseContent) GetTicketURL() *string {
	if c == nil {
		return nil
	}
	return c.TicketURL
}

func (c *CreateGuardianEnrollmentTicketResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateGuardianEnrollmentTicketResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateGuardianEnrollmentTicketResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateGuardianEnrollmentTicketResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGuardianEnrollmentTicketResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateGuardianEnrollmentTicketResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateGuardianEnrollmentTicketResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Hashmap of key-value pairs where the value must be a string.
type CreateHookSecretRequestContent = map[string]interface{}

type CreateImportUsersResponseContent struct {
	// Status of this job.
	Status string `json:"status" url:"status"`
	// Type of job this is.
	Type string `json:"type" url:"type"`
	// When this job was created.
	CreatedAt string `json:"created_at" url:"created_at"`
	// ID of this job.
	ID string `json:"id" url:"id"`
	// connection_id of the connection to which users will be imported.
	ConnectionID string `json:"connection_id" url:"connection_id"`
	// Customer-defined ID.
	ExternalID *string `json:"external_id,omitempty" url:"external_id,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateImportUsersResponseContent) GetStatus() string {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CreateImportUsersResponseContent) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateImportUsersResponseContent) GetCreatedAt() string {
	if c == nil {
		return ""
	}
	return c.CreatedAt
}

func (c *CreateImportUsersResponseContent) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreateImportUsersResponseContent) GetConnectionID() string {
	if c == nil {
		return ""
	}
	return c.ConnectionID
}

func (c *CreateImportUsersResponseContent) GetExternalID() *string {
	if c == nil {
		return nil
	}
	return c.ExternalID
}

func (c *CreateImportUsersResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateImportUsersResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateImportUsersResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateImportUsersResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateImportUsersResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateImportUsersResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateImportUsersResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrganizationInvitationResponseContent struct {
	// The id of the user invitation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Organization identifier.
	OrganizationID *string                        `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Inviter        *OrganizationInvitationInviter `json:"inviter,omitempty" url:"inviter,omitempty"`
	Invitee        *OrganizationInvitationInvitee `json:"invitee,omitempty" url:"invitee,omitempty"`
	// The invitation url to be send to the invitee.
	InvitationURL *string `json:"invitation_url,omitempty" url:"invitation_url,omitempty"`
	// The ISO 8601 formatted timestamp representing the creation time of the invitation.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted timestamp representing the expiration time of the invitation.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// Auth0 client ID. Used to resolve the application's login initiation endpoint.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The id of the connection to force invitee to authenticate with.
	ConnectionID *string       `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	AppMetadata  *AppMetadata  `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadata `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// List of roles IDs to associated with the user.
	Roles []string `json:"roles,omitempty" url:"roles,omitempty"`
	// The id of the invitation ticket
	TicketID *string `json:"ticket_id,omitempty" url:"ticket_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateOrganizationInvitationResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateOrganizationInvitationResponseContent) GetOrganizationID() *string {
	if c == nil {
		return nil
	}
	return c.OrganizationID
}

func (c *CreateOrganizationInvitationResponseContent) GetInviter() *OrganizationInvitationInviter {
	if c == nil {
		return nil
	}
	return c.Inviter
}

func (c *CreateOrganizationInvitationResponseContent) GetInvitee() *OrganizationInvitationInvitee {
	if c == nil {
		return nil
	}
	return c.Invitee
}

func (c *CreateOrganizationInvitationResponseContent) GetInvitationURL() *string {
	if c == nil {
		return nil
	}
	return c.InvitationURL
}

func (c *CreateOrganizationInvitationResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateOrganizationInvitationResponseContent) GetExpiresAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *CreateOrganizationInvitationResponseContent) GetClientID() *string {
	if c == nil {
		return nil
	}
	return c.ClientID
}

func (c *CreateOrganizationInvitationResponseContent) GetConnectionID() *string {
	if c == nil {
		return nil
	}
	return c.ConnectionID
}

func (c *CreateOrganizationInvitationResponseContent) GetAppMetadata() *AppMetadata {
	if c == nil {
		return nil
	}
	return c.AppMetadata
}

func (c *CreateOrganizationInvitationResponseContent) GetUserMetadata() *UserMetadata {
	if c == nil {
		return nil
	}
	return c.UserMetadata
}

func (c *CreateOrganizationInvitationResponseContent) GetRoles() []string {
	if c == nil {
		return nil
	}
	return c.Roles
}

func (c *CreateOrganizationInvitationResponseContent) GetTicketID() *string {
	if c == nil {
		return nil
	}
	return c.TicketID
}

func (c *CreateOrganizationInvitationResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrganizationInvitationResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateOrganizationInvitationResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateOrganizationInvitationResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrganizationInvitationResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateOrganizationInvitationResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateOrganizationInvitationResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreatePhoneProviderSendTestResponseContent struct {
	// The status code of the operation.
	Code *float64 `json:"code,omitempty" url:"code,omitempty"`
	// The description of the operation status.
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreatePhoneProviderSendTestResponseContent) GetCode() *float64 {
	if c == nil {
		return nil
	}
	return c.Code
}

func (c *CreatePhoneProviderSendTestResponseContent) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

func (c *CreatePhoneProviderSendTestResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreatePhoneProviderSendTestResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePhoneProviderSendTestResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreatePhoneProviderSendTestResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePhoneProviderSendTestResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreatePhoneTemplateResponseContent struct {
	ID           string                            `json:"id" url:"id"`
	Channel      *string                           `json:"channel,omitempty" url:"channel,omitempty"`
	Customizable *bool                             `json:"customizable,omitempty" url:"customizable,omitempty"`
	Tenant       *string                           `json:"tenant,omitempty" url:"tenant,omitempty"`
	Content      *PhoneTemplateContent             `json:"content" url:"content"`
	Type         PhoneTemplateNotificationTypeEnum `json:"type" url:"type"`
	// Whether the template is enabled (false) or disabled (true).
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreatePhoneTemplateResponseContent) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreatePhoneTemplateResponseContent) GetChannel() *string {
	if c == nil {
		return nil
	}
	return c.Channel
}

func (c *CreatePhoneTemplateResponseContent) GetCustomizable() *bool {
	if c == nil {
		return nil
	}
	return c.Customizable
}

func (c *CreatePhoneTemplateResponseContent) GetTenant() *string {
	if c == nil {
		return nil
	}
	return c.Tenant
}

func (c *CreatePhoneTemplateResponseContent) GetContent() *PhoneTemplateContent {
	if c == nil {
		return nil
	}
	return c.Content
}

func (c *CreatePhoneTemplateResponseContent) GetType() PhoneTemplateNotificationTypeEnum {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreatePhoneTemplateResponseContent) GetDisabled() bool {
	if c == nil {
		return false
	}
	return c.Disabled
}

func (c *CreatePhoneTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreatePhoneTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePhoneTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreatePhoneTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePhoneTemplateResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreatePhoneTemplateTestNotificationResponseContent struct {
	Message string `json:"message" url:"message"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreatePhoneTemplateTestNotificationResponseContent) GetMessage() string {
	if c == nil {
		return ""
	}
	return c.Message
}

func (c *CreatePhoneTemplateTestNotificationResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreatePhoneTemplateTestNotificationResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreatePhoneTemplateTestNotificationResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreatePhoneTemplateTestNotificationResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePhoneTemplateTestNotificationResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreatePhoneTemplateTestNotificationResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreatePhoneTemplateTestNotificationResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSCIMConfigurationResponseContent struct {
	// The connection's identifier
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// The connection's identifier
	ConnectionName *string `json:"connection_name,omitempty" url:"connection_name,omitempty"`
	// The connection's strategy
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`
	// The tenant's name
	TenantName *string `json:"tenant_name,omitempty" url:"tenant_name,omitempty"`
	// User ID attribute for generating unique user ids
	UserIDAttribute *string `json:"user_id_attribute,omitempty" url:"user_id_attribute,omitempty"`
	// The mapping between auth0 and SCIM
	Mapping []*SCIMMappingItem `json:"mapping,omitempty" url:"mapping,omitempty"`
	// The Date Time Scim Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The Date Time Scim Configuration was last updated
	UpdatedOn *string `json:"updated_on,omitempty" url:"updated_on,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateSCIMConfigurationResponseContent) GetConnectionID() *string {
	if c == nil {
		return nil
	}
	return c.ConnectionID
}

func (c *CreateSCIMConfigurationResponseContent) GetConnectionName() *string {
	if c == nil {
		return nil
	}
	return c.ConnectionName
}

func (c *CreateSCIMConfigurationResponseContent) GetStrategy() *string {
	if c == nil {
		return nil
	}
	return c.Strategy
}

func (c *CreateSCIMConfigurationResponseContent) GetTenantName() *string {
	if c == nil {
		return nil
	}
	return c.TenantName
}

func (c *CreateSCIMConfigurationResponseContent) GetUserIDAttribute() *string {
	if c == nil {
		return nil
	}
	return c.UserIDAttribute
}

func (c *CreateSCIMConfigurationResponseContent) GetMapping() []*SCIMMappingItem {
	if c == nil {
		return nil
	}
	return c.Mapping
}

func (c *CreateSCIMConfigurationResponseContent) GetCreatedAt() *string {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateSCIMConfigurationResponseContent) GetUpdatedOn() *string {
	if c == nil {
		return nil
	}
	return c.UpdatedOn
}

func (c *CreateSCIMConfigurationResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSCIMConfigurationResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSCIMConfigurationResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSCIMConfigurationResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSCIMConfigurationResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSCIMTokenResponseContent struct {
	// The token's identifier
	TokenID *string `json:"token_id,omitempty" url:"token_id,omitempty"`
	// The scim client's token
	Token *string `json:"token,omitempty" url:"token,omitempty"`
	// The scopes of the scim token
	Scopes []string `json:"scopes,omitempty" url:"scopes,omitempty"`
	// The token's created at timestamp
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The token's valid until at timestamp
	ValidUntil *string `json:"valid_until,omitempty" url:"valid_until,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateSCIMTokenResponseContent) GetTokenID() *string {
	if c == nil {
		return nil
	}
	return c.TokenID
}

func (c *CreateSCIMTokenResponseContent) GetToken() *string {
	if c == nil {
		return nil
	}
	return c.Token
}

func (c *CreateSCIMTokenResponseContent) GetScopes() []string {
	if c == nil {
		return nil
	}
	return c.Scopes
}

func (c *CreateSCIMTokenResponseContent) GetCreatedAt() *string {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateSCIMTokenResponseContent) GetValidUntil() *string {
	if c == nil {
		return nil
	}
	return c.ValidUntil
}

func (c *CreateSCIMTokenResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSCIMTokenResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSCIMTokenResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSCIMTokenResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSCIMTokenResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSelfServiceProfileSSOTicketResponseContent struct {
	// The URL for the created ticket.
	Ticket *string `json:"ticket,omitempty" url:"ticket,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateSelfServiceProfileSSOTicketResponseContent) GetTicket() *string {
	if c == nil {
		return nil
	}
	return c.Ticket
}

func (c *CreateSelfServiceProfileSSOTicketResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSelfServiceProfileSSOTicketResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSelfServiceProfileSSOTicketResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSelfServiceProfileSSOTicketResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSelfServiceProfileSSOTicketResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTokenQuota struct {
	ClientCredentials *TokenQuotaClientCredentials `json:"client_credentials" url:"client_credentials"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateTokenQuota) GetClientCredentials() *TokenQuotaClientCredentials {
	if c == nil {
		return nil
	}
	return c.ClientCredentials
}

func (c *CreateTokenQuota) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTokenQuota) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTokenQuota
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTokenQuota(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTokenQuota) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The successfully created authentication method.
type CreateUserAuthenticationMethodResponseContent struct {
	// The ID of the newly created authentication method (automatically generated by the application)
	ID   *string                                 `json:"id,omitempty" url:"id,omitempty"`
	Type CreatedUserAuthenticationMethodTypeEnum `json:"type" url:"type"`
	// A human-readable label to identify the authentication method.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Base32 encoded secret for TOTP generation
	TotpSecret *string `json:"totp_secret,omitempty" url:"totp_secret,omitempty"`
	// Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Applies to email authentication methods only. The email address used to send verification messages.
	Email                         *string                               `json:"email,omitempty" url:"email,omitempty"`
	AuthenticationMethods         []*UserAuthenticationMethodProperties `json:"authentication_methods,omitempty" url:"authentication_methods,omitempty"`
	PreferredAuthenticationMethod *PreferredAuthenticationMethodEnum    `json:"preferred_authentication_method,omitempty" url:"preferred_authentication_method,omitempty"`
	// Applies to webauthn authenticators only. The id of the credential.
	KeyID *string `json:"key_id,omitempty" url:"key_id,omitempty"`
	// Applies to webauthn authenticators only. The public key.
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`
	// Applies to webauthn authenticators only. The relying party identifier.
	RelyingPartyIdentifier *string `json:"relying_party_identifier,omitempty" url:"relying_party_identifier,omitempty"`
	// Authentication method creation date
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateUserAuthenticationMethodResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateUserAuthenticationMethodResponseContent) GetType() CreatedUserAuthenticationMethodTypeEnum {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateUserAuthenticationMethodResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateUserAuthenticationMethodResponseContent) GetTotpSecret() *string {
	if c == nil {
		return nil
	}
	return c.TotpSecret
}

func (c *CreateUserAuthenticationMethodResponseContent) GetPhoneNumber() *string {
	if c == nil {
		return nil
	}
	return c.PhoneNumber
}

func (c *CreateUserAuthenticationMethodResponseContent) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CreateUserAuthenticationMethodResponseContent) GetAuthenticationMethods() []*UserAuthenticationMethodProperties {
	if c == nil {
		return nil
	}
	return c.AuthenticationMethods
}

func (c *CreateUserAuthenticationMethodResponseContent) GetPreferredAuthenticationMethod() *PreferredAuthenticationMethodEnum {
	if c == nil {
		return nil
	}
	return c.PreferredAuthenticationMethod
}

func (c *CreateUserAuthenticationMethodResponseContent) GetKeyID() *string {
	if c == nil {
		return nil
	}
	return c.KeyID
}

func (c *CreateUserAuthenticationMethodResponseContent) GetPublicKey() *string {
	if c == nil {
		return nil
	}
	return c.PublicKey
}

func (c *CreateUserAuthenticationMethodResponseContent) GetRelyingPartyIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.RelyingPartyIdentifier
}

func (c *CreateUserAuthenticationMethodResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateUserAuthenticationMethodResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserAuthenticationMethodResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateUserAuthenticationMethodResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateUserAuthenticationMethodResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserAuthenticationMethodResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateUserAuthenticationMethodResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateUserAuthenticationMethodResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateVerifiableCredentialTemplateResponseContent struct {
	// The id of the template.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the template.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The type of the template.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The dialect of the template.
	Dialect      *string                 `json:"dialect,omitempty" url:"dialect,omitempty"`
	Presentation *MdlPresentationRequest `json:"presentation,omitempty" url:"presentation,omitempty"`
	// The custom certificate authority.
	CustomCertificateAuthority *string `json:"custom_certificate_authority,omitempty" url:"custom_certificate_authority,omitempty"`
	// The well-known trusted issuers, comma separated.
	WellKnownTrustedIssuers *string `json:"well_known_trusted_issuers,omitempty" url:"well_known_trusted_issuers,omitempty"`
	// The date and time the template was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time the template was created.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetDialect() *string {
	if c == nil {
		return nil
	}
	return c.Dialect
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetPresentation() *MdlPresentationRequest {
	if c == nil {
		return nil
	}
	return c.Presentation
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetCustomCertificateAuthority() *string {
	if c == nil {
		return nil
	}
	return c.CustomCertificateAuthority
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetWellKnownTrustedIssuers() *string {
	if c == nil {
		return nil
	}
	return c.WellKnownTrustedIssuers
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CreateVerifiableCredentialTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateVerifiableCredentialTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateVerifiableCredentialTemplateResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateVerifiableCredentialTemplateResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateVerifiableCredentialTemplateResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateVerifiableCredentialTemplateResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateVerifiableCredentialTemplateResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateVerificationEmailResponseContent struct {
	// Status of this job.
	Status string `json:"status" url:"status"`
	// Type of job this is.
	Type string `json:"type" url:"type"`
	// When this job was created.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// ID of this job.
	ID string `json:"id" url:"id"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateVerificationEmailResponseContent) GetStatus() string {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CreateVerificationEmailResponseContent) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateVerificationEmailResponseContent) GetCreatedAt() *string {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateVerificationEmailResponseContent) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreateVerificationEmailResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateVerificationEmailResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateVerificationEmailResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateVerificationEmailResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateVerificationEmailResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateVerificationEmailResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateVerificationEmailResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreatedAuthenticationMethodTypeEnum string

const (
	CreatedAuthenticationMethodTypeEnumPhone           CreatedAuthenticationMethodTypeEnum = "phone"
	CreatedAuthenticationMethodTypeEnumEmail           CreatedAuthenticationMethodTypeEnum = "email"
	CreatedAuthenticationMethodTypeEnumTotp            CreatedAuthenticationMethodTypeEnum = "totp"
	CreatedAuthenticationMethodTypeEnumWebauthnRoaming CreatedAuthenticationMethodTypeEnum = "webauthn-roaming"
)

func NewCreatedAuthenticationMethodTypeEnumFromString(s string) (CreatedAuthenticationMethodTypeEnum, error) {
	switch s {
	case "phone":
		return CreatedAuthenticationMethodTypeEnumPhone, nil
	case "email":
		return CreatedAuthenticationMethodTypeEnumEmail, nil
	case "totp":
		return CreatedAuthenticationMethodTypeEnumTotp, nil
	case "webauthn-roaming":
		return CreatedAuthenticationMethodTypeEnumWebauthnRoaming, nil
	}
	var t CreatedAuthenticationMethodTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreatedAuthenticationMethodTypeEnum) Ptr() *CreatedAuthenticationMethodTypeEnum {
	return &c
}

type CreatedUserAuthenticationMethodTypeEnum string

const (
	CreatedUserAuthenticationMethodTypeEnumPhone           CreatedUserAuthenticationMethodTypeEnum = "phone"
	CreatedUserAuthenticationMethodTypeEnumEmail           CreatedUserAuthenticationMethodTypeEnum = "email"
	CreatedUserAuthenticationMethodTypeEnumTotp            CreatedUserAuthenticationMethodTypeEnum = "totp"
	CreatedUserAuthenticationMethodTypeEnumWebauthnRoaming CreatedUserAuthenticationMethodTypeEnum = "webauthn-roaming"
	CreatedUserAuthenticationMethodTypeEnumPasskey         CreatedUserAuthenticationMethodTypeEnum = "passkey"
)

func NewCreatedUserAuthenticationMethodTypeEnumFromString(s string) (CreatedUserAuthenticationMethodTypeEnum, error) {
	switch s {
	case "phone":
		return CreatedUserAuthenticationMethodTypeEnumPhone, nil
	case "email":
		return CreatedUserAuthenticationMethodTypeEnumEmail, nil
	case "totp":
		return CreatedUserAuthenticationMethodTypeEnumTotp, nil
	case "webauthn-roaming":
		return CreatedUserAuthenticationMethodTypeEnumWebauthnRoaming, nil
	case "passkey":
		return CreatedUserAuthenticationMethodTypeEnumPasskey, nil
	}
	var t CreatedUserAuthenticationMethodTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreatedUserAuthenticationMethodTypeEnum) Ptr() *CreatedUserAuthenticationMethodTypeEnum {
	return &c
}

type CustomProviderConfiguration struct {
	DeliveryMethods []CustomProviderDeliveryMethodEnum `json:"delivery_methods" url:"delivery_methods"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomProviderConfiguration) GetDeliveryMethods() []CustomProviderDeliveryMethodEnum {
	if c == nil {
		return nil
	}
	return c.DeliveryMethods
}

func (c *CustomProviderConfiguration) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomProviderConfiguration) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomProviderConfiguration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomProviderConfiguration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomProviderConfiguration) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomProviderCredentials struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomProviderCredentials) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomProviderCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomProviderCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomProviderCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomProviderCredentials) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomProviderDeliveryMethodEnum string

const (
	CustomProviderDeliveryMethodEnumText  CustomProviderDeliveryMethodEnum = "text"
	CustomProviderDeliveryMethodEnumVoice CustomProviderDeliveryMethodEnum = "voice"
)

func NewCustomProviderDeliveryMethodEnumFromString(s string) (CustomProviderDeliveryMethodEnum, error) {
	switch s {
	case "text":
		return CustomProviderDeliveryMethodEnumText, nil
	case "voice":
		return CustomProviderDeliveryMethodEnumVoice, nil
	}
	var t CustomProviderDeliveryMethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomProviderDeliveryMethodEnum) Ptr() *CustomProviderDeliveryMethodEnum {
	return &c
}

// Key algorithm
type CustomSigningKeyAlgorithmEnum string

const (
	CustomSigningKeyAlgorithmEnumRs256 CustomSigningKeyAlgorithmEnum = "RS256"
	CustomSigningKeyAlgorithmEnumRs384 CustomSigningKeyAlgorithmEnum = "RS384"
	CustomSigningKeyAlgorithmEnumRs512 CustomSigningKeyAlgorithmEnum = "RS512"
	CustomSigningKeyAlgorithmEnumEs256 CustomSigningKeyAlgorithmEnum = "ES256"
	CustomSigningKeyAlgorithmEnumEs384 CustomSigningKeyAlgorithmEnum = "ES384"
	CustomSigningKeyAlgorithmEnumEs512 CustomSigningKeyAlgorithmEnum = "ES512"
	CustomSigningKeyAlgorithmEnumPs256 CustomSigningKeyAlgorithmEnum = "PS256"
	CustomSigningKeyAlgorithmEnumPs384 CustomSigningKeyAlgorithmEnum = "PS384"
	CustomSigningKeyAlgorithmEnumPs512 CustomSigningKeyAlgorithmEnum = "PS512"
)

func NewCustomSigningKeyAlgorithmEnumFromString(s string) (CustomSigningKeyAlgorithmEnum, error) {
	switch s {
	case "RS256":
		return CustomSigningKeyAlgorithmEnumRs256, nil
	case "RS384":
		return CustomSigningKeyAlgorithmEnumRs384, nil
	case "RS512":
		return CustomSigningKeyAlgorithmEnumRs512, nil
	case "ES256":
		return CustomSigningKeyAlgorithmEnumEs256, nil
	case "ES384":
		return CustomSigningKeyAlgorithmEnumEs384, nil
	case "ES512":
		return CustomSigningKeyAlgorithmEnumEs512, nil
	case "PS256":
		return CustomSigningKeyAlgorithmEnumPs256, nil
	case "PS384":
		return CustomSigningKeyAlgorithmEnumPs384, nil
	case "PS512":
		return CustomSigningKeyAlgorithmEnumPs512, nil
	}
	var t CustomSigningKeyAlgorithmEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomSigningKeyAlgorithmEnum) Ptr() *CustomSigningKeyAlgorithmEnum {
	return &c
}

// Curve
type CustomSigningKeyCurveEnum string

const (
	CustomSigningKeyCurveEnumP256 CustomSigningKeyCurveEnum = "P-256"
	CustomSigningKeyCurveEnumP384 CustomSigningKeyCurveEnum = "P-384"
	CustomSigningKeyCurveEnumP521 CustomSigningKeyCurveEnum = "P-521"
)

func NewCustomSigningKeyCurveEnumFromString(s string) (CustomSigningKeyCurveEnum, error) {
	switch s {
	case "P-256":
		return CustomSigningKeyCurveEnumP256, nil
	case "P-384":
		return CustomSigningKeyCurveEnumP384, nil
	case "P-521":
		return CustomSigningKeyCurveEnumP521, nil
	}
	var t CustomSigningKeyCurveEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomSigningKeyCurveEnum) Ptr() *CustomSigningKeyCurveEnum {
	return &c
}

// JWK representing a custom public signing key.
type CustomSigningKeyJwk struct {
	Kty CustomSigningKeyTypeEnum `json:"kty" url:"kty"`
	// Key identifier
	Kid *string                  `json:"kid,omitempty" url:"kid,omitempty"`
	Use *CustomSigningKeyUseEnum `json:"use,omitempty" url:"use,omitempty"`
	// Key operations
	KeyOps []CustomSigningKeyOperationEnum `json:"key_ops,omitempty" url:"key_ops,omitempty"`
	Alg    *CustomSigningKeyAlgorithmEnum  `json:"alg,omitempty" url:"alg,omitempty"`
	// Key modulus
	N *string `json:"n,omitempty" url:"n,omitempty"`
	// Key exponent
	E   *string                    `json:"e,omitempty" url:"e,omitempty"`
	Crv *CustomSigningKeyCurveEnum `json:"crv,omitempty" url:"crv,omitempty"`
	// X coordinate
	X *string `json:"x,omitempty" url:"x,omitempty"`
	// Y coordinate
	Y *string `json:"y,omitempty" url:"y,omitempty"`
	// X.509 URL
	X5U *string `json:"x5u,omitempty" url:"x5u,omitempty"`
	// X.509 certificate chain
	X5C []string `json:"x5c,omitempty" url:"x5c,omitempty"`
	// X.509 certificate SHA-1 thumbprint
	X5T *string `json:"x5t,omitempty" url:"x5t,omitempty"`
	// X.509 certificate SHA-256 thumbprint
	X5TS256 *string `json:"x5t#S256,omitempty" url:"x5t#S256,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomSigningKeyJwk) GetKty() CustomSigningKeyTypeEnum {
	if c == nil {
		return ""
	}
	return c.Kty
}

func (c *CustomSigningKeyJwk) GetKid() *string {
	if c == nil {
		return nil
	}
	return c.Kid
}

func (c *CustomSigningKeyJwk) GetKeyOps() []CustomSigningKeyOperationEnum {
	if c == nil {
		return nil
	}
	return c.KeyOps
}

func (c *CustomSigningKeyJwk) GetAlg() *CustomSigningKeyAlgorithmEnum {
	if c == nil {
		return nil
	}
	return c.Alg
}

func (c *CustomSigningKeyJwk) GetN() *string {
	if c == nil {
		return nil
	}
	return c.N
}

func (c *CustomSigningKeyJwk) GetE() *string {
	if c == nil {
		return nil
	}
	return c.E
}

func (c *CustomSigningKeyJwk) GetCrv() *CustomSigningKeyCurveEnum {
	if c == nil {
		return nil
	}
	return c.Crv
}

func (c *CustomSigningKeyJwk) GetX() *string {
	if c == nil {
		return nil
	}
	return c.X
}

func (c *CustomSigningKeyJwk) GetY() *string {
	if c == nil {
		return nil
	}
	return c.Y
}

func (c *CustomSigningKeyJwk) GetX5U() *string {
	if c == nil {
		return nil
	}
	return c.X5U
}

func (c *CustomSigningKeyJwk) GetX5C() []string {
	if c == nil {
		return nil
	}
	return c.X5C
}

func (c *CustomSigningKeyJwk) GetX5T() *string {
	if c == nil {
		return nil
	}
	return c.X5T
}

func (c *CustomSigningKeyJwk) GetX5TS256() *string {
	if c == nil {
		return nil
	}
	return c.X5TS256
}

func (c *CustomSigningKeyJwk) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomSigningKeyJwk) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomSigningKeyJwk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomSigningKeyJwk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomSigningKeyJwk) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomSigningKeyOperationEnum = string

// Key type
type CustomSigningKeyTypeEnum string

const (
	CustomSigningKeyTypeEnumEc  CustomSigningKeyTypeEnum = "EC"
	CustomSigningKeyTypeEnumRsa CustomSigningKeyTypeEnum = "RSA"
)

func NewCustomSigningKeyTypeEnumFromString(s string) (CustomSigningKeyTypeEnum, error) {
	switch s {
	case "EC":
		return CustomSigningKeyTypeEnumEc, nil
	case "RSA":
		return CustomSigningKeyTypeEnumRsa, nil
	}
	var t CustomSigningKeyTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomSigningKeyTypeEnum) Ptr() *CustomSigningKeyTypeEnum {
	return &c
}

// Key use
type CustomSigningKeyUseEnum = string

// Token Quota configuration, to configure quotas for token issuance for clients and organizations. Applied to all clients and organizations unless overridden in individual client or organization settings.
type DefaultTokenQuota struct {
	Clients       *TokenQuotaConfiguration `json:"clients,omitempty" url:"clients,omitempty"`
	Organizations *TokenQuotaConfiguration `json:"organizations,omitempty" url:"organizations,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DefaultTokenQuota) GetClients() *TokenQuotaConfiguration {
	if d == nil {
		return nil
	}
	return d.Clients
}

func (d *DefaultTokenQuota) GetOrganizations() *TokenQuotaConfiguration {
	if d == nil {
		return nil
	}
	return d.Organizations
}

func (d *DefaultTokenQuota) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DefaultTokenQuota) UnmarshalJSON(data []byte) error {
	type unmarshaler DefaultTokenQuota
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DefaultTokenQuota(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DefaultTokenQuota) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Array of secret names to delete.
type DeleteHookSecretRequestContent = []string

// An array of objects with information about the user's identities.
type DeleteUserIdentityResponseContent = []*DeleteUserIdentityResponseContentItem

type DeleteUserIdentityResponseContentItem struct {
	// The name of the connection for the identity.
	Connection string `json:"connection" url:"connection"`
	// The unique identifier for the user for the identity.
	UserID string `json:"user_id" url:"user_id"`
	// The type of identity provider.
	Provider string `json:"provider" url:"provider"`
	// <code>true</code> if the identity provider is a social provider, <code>false</code>s otherwise
	IsSocial *bool `json:"isSocial,omitempty" url:"isSocial,omitempty"`
	// IDP access token returned only if scope read:user_idp_tokens is defined
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// IDP access token secret returned only if scope read:user_idp_tokens is defined.
	AccessTokenSecret *string `json:"access_token_secret,omitempty" url:"access_token_secret,omitempty"`
	// IDP refresh token returned only if scope read:user_idp_tokens is defined.
	RefreshToken *string          `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`
	ProfileData  *UserProfileData `json:"profileData,omitempty" url:"profileData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteUserIdentityResponseContentItem) GetConnection() string {
	if d == nil {
		return ""
	}
	return d.Connection
}

func (d *DeleteUserIdentityResponseContentItem) GetUserID() string {
	if d == nil {
		return ""
	}
	return d.UserID
}

func (d *DeleteUserIdentityResponseContentItem) GetProvider() string {
	if d == nil {
		return ""
	}
	return d.Provider
}

func (d *DeleteUserIdentityResponseContentItem) GetIsSocial() *bool {
	if d == nil {
		return nil
	}
	return d.IsSocial
}

func (d *DeleteUserIdentityResponseContentItem) GetAccessToken() *string {
	if d == nil {
		return nil
	}
	return d.AccessToken
}

func (d *DeleteUserIdentityResponseContentItem) GetAccessTokenSecret() *string {
	if d == nil {
		return nil
	}
	return d.AccessTokenSecret
}

func (d *DeleteUserIdentityResponseContentItem) GetRefreshToken() *string {
	if d == nil {
		return nil
	}
	return d.RefreshToken
}

func (d *DeleteUserIdentityResponseContentItem) GetProfileData() *UserProfileData {
	if d == nil {
		return nil
	}
	return d.ProfileData
}

func (d *DeleteUserIdentityResponseContentItem) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserIdentityResponseContentItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserIdentityResponseContentItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserIdentityResponseContentItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserIdentityResponseContentItem) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeployActionVersionRequestBodyParams struct {
	// True if the draft of the action should be updated with the reverted version.
	UpdateDraft *bool `json:"update_draft,omitempty" url:"update_draft,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeployActionVersionRequestBodyParams) GetUpdateDraft() *bool {
	if d == nil {
		return nil
	}
	return d.UpdateDraft
}

func (d *DeployActionVersionRequestBodyParams) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeployActionVersionRequestBodyParams) UnmarshalJSON(data []byte) error {
	type unmarshaler DeployActionVersionRequestBodyParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeployActionVersionRequestBodyParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeployActionVersionRequestBodyParams) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeployActionVersionRequestContent = *DeployActionVersionRequestBodyParams

type DeployActionVersionResponseContent struct {
	// The unique id of an action version.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The id of the action to which this version belongs.
	ActionID *string `json:"action_id,omitempty" url:"action_id,omitempty"`
	// The source code of this specific version of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this specific version depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// Indicates if this speciic version is the currently one deployed.
	Deployed *bool `json:"deployed,omitempty" url:"deployed,omitempty"`
	// The Node runtime. For example: `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretResponse       `json:"secrets,omitempty" url:"secrets,omitempty"`
	Status  *ActionVersionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The index of this version in list of versions for the action.
	Number *float64 `json:"number,omitempty" url:"number,omitempty"`
	// Any errors that occurred while the version was being built.
	Errors []*ActionError `json:"errors,omitempty" url:"errors,omitempty"`
	Action *ActionBase    `json:"action,omitempty" url:"action,omitempty"`
	// The time when this version was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// The time when this version was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeployActionVersionResponseContent) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DeployActionVersionResponseContent) GetActionID() *string {
	if d == nil {
		return nil
	}
	return d.ActionID
}

func (d *DeployActionVersionResponseContent) GetCode() *string {
	if d == nil {
		return nil
	}
	return d.Code
}

func (d *DeployActionVersionResponseContent) GetDependencies() []*ActionVersionDependency {
	if d == nil {
		return nil
	}
	return d.Dependencies
}

func (d *DeployActionVersionResponseContent) GetDeployed() *bool {
	if d == nil {
		return nil
	}
	return d.Deployed
}

func (d *DeployActionVersionResponseContent) GetRuntime() *string {
	if d == nil {
		return nil
	}
	return d.Runtime
}

func (d *DeployActionVersionResponseContent) GetSecrets() []*ActionSecretResponse {
	if d == nil {
		return nil
	}
	return d.Secrets
}

func (d *DeployActionVersionResponseContent) GetStatus() *ActionVersionBuildStatusEnum {
	if d == nil {
		return nil
	}
	return d.Status
}

func (d *DeployActionVersionResponseContent) GetNumber() *float64 {
	if d == nil {
		return nil
	}
	return d.Number
}

func (d *DeployActionVersionResponseContent) GetErrors() []*ActionError {
	if d == nil {
		return nil
	}
	return d.Errors
}

func (d *DeployActionVersionResponseContent) GetAction() *ActionBase {
	if d == nil {
		return nil
	}
	return d.Action
}

func (d *DeployActionVersionResponseContent) GetBuiltAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.BuiltAt
}

func (d *DeployActionVersionResponseContent) GetCreatedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.CreatedAt
}

func (d *DeployActionVersionResponseContent) GetUpdatedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.UpdatedAt
}

func (d *DeployActionVersionResponseContent) GetSupportedTriggers() []*ActionTrigger {
	if d == nil {
		return nil
	}
	return d.SupportedTriggers
}

func (d *DeployActionVersionResponseContent) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeployActionVersionResponseContent) UnmarshalJSON(data []byte) error {
	type embed DeployActionVersionResponseContent
	var unmarshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeployActionVersionResponseContent(unmarshaler.embed)
	d.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	d.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	d.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeployActionVersionResponseContent) MarshalJSON() ([]byte, error) {
	type embed DeployActionVersionResponseContent
	var marshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*d),
		BuiltAt:   internal.NewOptionalDateTime(d.BuiltAt),
		CreatedAt: internal.NewOptionalDateTime(d.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(d.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *DeployActionVersionResponseContent) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Set to <code>eu</code> if your domain is provisioned to use Mailgun's EU region. Otherwise, set to <code>null</code>.
type EmailMailgunRegionEnum = string

// Credentials required to use the provider.
type EmailProviderCredentials struct {
	// API User.
	APIUser *string `json:"api_user,omitempty" url:"api_user,omitempty"`
	// AWS or SparkPost region.
	Region *string `json:"region,omitempty" url:"region,omitempty"`
	// SMTP host.
	SMTPHost *string `json:"smtp_host,omitempty" url:"smtp_host,omitempty"`
	// SMTP port.
	SMTPPort *int `json:"smtp_port,omitempty" url:"smtp_port,omitempty"`
	// SMTP username.
	SMTPUser *string `json:"smtp_user,omitempty" url:"smtp_user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentials) GetAPIUser() *string {
	if e == nil {
		return nil
	}
	return e.APIUser
}

func (e *EmailProviderCredentials) GetRegion() *string {
	if e == nil {
		return nil
	}
	return e.Region
}

func (e *EmailProviderCredentials) GetSMTPHost() *string {
	if e == nil {
		return nil
	}
	return e.SMTPHost
}

func (e *EmailProviderCredentials) GetSMTPPort() *int {
	if e == nil {
		return nil
	}
	return e.SMTPPort
}

func (e *EmailProviderCredentials) GetSMTPUser() *string {
	if e == nil {
		return nil
	}
	return e.SMTPUser
}

func (e *EmailProviderCredentials) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentials) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Credentials required to use the provider.
type EmailProviderCredentialsSchema struct {
	EmailProviderCredentialsSchemaZero             *EmailProviderCredentialsSchemaZero
	EmailProviderCredentialsSchemaAccessKeyID      *EmailProviderCredentialsSchemaAccessKeyID
	EmailProviderCredentialsSchemaSMTPHost         *EmailProviderCredentialsSchemaSMTPHost
	EmailProviderCredentialsSchemaThree            *EmailProviderCredentialsSchemaThree
	EmailProviderCredentialsSchemaAPIKey           *EmailProviderCredentialsSchemaAPIKey
	EmailProviderCredentialsSchemaConnectionString *EmailProviderCredentialsSchemaConnectionString
	EmailProviderCredentialsSchemaClientID         *EmailProviderCredentialsSchemaClientID
	ExtensibilityEmailProviderCredentials          *ExtensibilityEmailProviderCredentials

	typ string
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaZero() *EmailProviderCredentialsSchemaZero {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaZero
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaAccessKeyID() *EmailProviderCredentialsSchemaAccessKeyID {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaAccessKeyID
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaSMTPHost() *EmailProviderCredentialsSchemaSMTPHost {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaSMTPHost
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaThree() *EmailProviderCredentialsSchemaThree {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaThree
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaAPIKey() *EmailProviderCredentialsSchemaAPIKey {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaAPIKey
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaConnectionString() *EmailProviderCredentialsSchemaConnectionString {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaConnectionString
}

func (e *EmailProviderCredentialsSchema) GetEmailProviderCredentialsSchemaClientID() *EmailProviderCredentialsSchemaClientID {
	if e == nil {
		return nil
	}
	return e.EmailProviderCredentialsSchemaClientID
}

func (e *EmailProviderCredentialsSchema) GetExtensibilityEmailProviderCredentials() *ExtensibilityEmailProviderCredentials {
	if e == nil {
		return nil
	}
	return e.ExtensibilityEmailProviderCredentials
}

func (e *EmailProviderCredentialsSchema) UnmarshalJSON(data []byte) error {
	valueEmailProviderCredentialsSchemaZero := new(EmailProviderCredentialsSchemaZero)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaZero); err == nil {
		e.typ = "EmailProviderCredentialsSchemaZero"
		e.EmailProviderCredentialsSchemaZero = valueEmailProviderCredentialsSchemaZero
		return nil
	}
	valueEmailProviderCredentialsSchemaAccessKeyID := new(EmailProviderCredentialsSchemaAccessKeyID)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaAccessKeyID); err == nil {
		e.typ = "EmailProviderCredentialsSchemaAccessKeyID"
		e.EmailProviderCredentialsSchemaAccessKeyID = valueEmailProviderCredentialsSchemaAccessKeyID
		return nil
	}
	valueEmailProviderCredentialsSchemaSMTPHost := new(EmailProviderCredentialsSchemaSMTPHost)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaSMTPHost); err == nil {
		e.typ = "EmailProviderCredentialsSchemaSMTPHost"
		e.EmailProviderCredentialsSchemaSMTPHost = valueEmailProviderCredentialsSchemaSMTPHost
		return nil
	}
	valueEmailProviderCredentialsSchemaThree := new(EmailProviderCredentialsSchemaThree)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaThree); err == nil {
		e.typ = "EmailProviderCredentialsSchemaThree"
		e.EmailProviderCredentialsSchemaThree = valueEmailProviderCredentialsSchemaThree
		return nil
	}
	valueEmailProviderCredentialsSchemaAPIKey := new(EmailProviderCredentialsSchemaAPIKey)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaAPIKey); err == nil {
		e.typ = "EmailProviderCredentialsSchemaAPIKey"
		e.EmailProviderCredentialsSchemaAPIKey = valueEmailProviderCredentialsSchemaAPIKey
		return nil
	}
	valueEmailProviderCredentialsSchemaConnectionString := new(EmailProviderCredentialsSchemaConnectionString)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaConnectionString); err == nil {
		e.typ = "EmailProviderCredentialsSchemaConnectionString"
		e.EmailProviderCredentialsSchemaConnectionString = valueEmailProviderCredentialsSchemaConnectionString
		return nil
	}
	valueEmailProviderCredentialsSchemaClientID := new(EmailProviderCredentialsSchemaClientID)
	if err := json.Unmarshal(data, &valueEmailProviderCredentialsSchemaClientID); err == nil {
		e.typ = "EmailProviderCredentialsSchemaClientID"
		e.EmailProviderCredentialsSchemaClientID = valueEmailProviderCredentialsSchemaClientID
		return nil
	}
	valueExtensibilityEmailProviderCredentials := new(ExtensibilityEmailProviderCredentials)
	if err := json.Unmarshal(data, &valueExtensibilityEmailProviderCredentials); err == nil {
		e.typ = "ExtensibilityEmailProviderCredentials"
		e.ExtensibilityEmailProviderCredentials = valueExtensibilityEmailProviderCredentials
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmailProviderCredentialsSchema) MarshalJSON() ([]byte, error) {
	if e.typ == "EmailProviderCredentialsSchemaZero" || e.EmailProviderCredentialsSchemaZero != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaZero)
	}
	if e.typ == "EmailProviderCredentialsSchemaAccessKeyID" || e.EmailProviderCredentialsSchemaAccessKeyID != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaAccessKeyID)
	}
	if e.typ == "EmailProviderCredentialsSchemaSMTPHost" || e.EmailProviderCredentialsSchemaSMTPHost != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaSMTPHost)
	}
	if e.typ == "EmailProviderCredentialsSchemaThree" || e.EmailProviderCredentialsSchemaThree != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaThree)
	}
	if e.typ == "EmailProviderCredentialsSchemaAPIKey" || e.EmailProviderCredentialsSchemaAPIKey != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaAPIKey)
	}
	if e.typ == "EmailProviderCredentialsSchemaConnectionString" || e.EmailProviderCredentialsSchemaConnectionString != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaConnectionString)
	}
	if e.typ == "EmailProviderCredentialsSchemaClientID" || e.EmailProviderCredentialsSchemaClientID != nil {
		return json.Marshal(e.EmailProviderCredentialsSchemaClientID)
	}
	if e.typ == "ExtensibilityEmailProviderCredentials" || e.ExtensibilityEmailProviderCredentials != nil {
		return json.Marshal(e.ExtensibilityEmailProviderCredentials)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmailProviderCredentialsSchemaVisitor interface {
	VisitEmailProviderCredentialsSchemaZero(*EmailProviderCredentialsSchemaZero) error
	VisitEmailProviderCredentialsSchemaAccessKeyID(*EmailProviderCredentialsSchemaAccessKeyID) error
	VisitEmailProviderCredentialsSchemaSMTPHost(*EmailProviderCredentialsSchemaSMTPHost) error
	VisitEmailProviderCredentialsSchemaThree(*EmailProviderCredentialsSchemaThree) error
	VisitEmailProviderCredentialsSchemaAPIKey(*EmailProviderCredentialsSchemaAPIKey) error
	VisitEmailProviderCredentialsSchemaConnectionString(*EmailProviderCredentialsSchemaConnectionString) error
	VisitEmailProviderCredentialsSchemaClientID(*EmailProviderCredentialsSchemaClientID) error
	VisitExtensibilityEmailProviderCredentials(*ExtensibilityEmailProviderCredentials) error
}

func (e *EmailProviderCredentialsSchema) Accept(visitor EmailProviderCredentialsSchemaVisitor) error {
	if e.typ == "EmailProviderCredentialsSchemaZero" || e.EmailProviderCredentialsSchemaZero != nil {
		return visitor.VisitEmailProviderCredentialsSchemaZero(e.EmailProviderCredentialsSchemaZero)
	}
	if e.typ == "EmailProviderCredentialsSchemaAccessKeyID" || e.EmailProviderCredentialsSchemaAccessKeyID != nil {
		return visitor.VisitEmailProviderCredentialsSchemaAccessKeyID(e.EmailProviderCredentialsSchemaAccessKeyID)
	}
	if e.typ == "EmailProviderCredentialsSchemaSMTPHost" || e.EmailProviderCredentialsSchemaSMTPHost != nil {
		return visitor.VisitEmailProviderCredentialsSchemaSMTPHost(e.EmailProviderCredentialsSchemaSMTPHost)
	}
	if e.typ == "EmailProviderCredentialsSchemaThree" || e.EmailProviderCredentialsSchemaThree != nil {
		return visitor.VisitEmailProviderCredentialsSchemaThree(e.EmailProviderCredentialsSchemaThree)
	}
	if e.typ == "EmailProviderCredentialsSchemaAPIKey" || e.EmailProviderCredentialsSchemaAPIKey != nil {
		return visitor.VisitEmailProviderCredentialsSchemaAPIKey(e.EmailProviderCredentialsSchemaAPIKey)
	}
	if e.typ == "EmailProviderCredentialsSchemaConnectionString" || e.EmailProviderCredentialsSchemaConnectionString != nil {
		return visitor.VisitEmailProviderCredentialsSchemaConnectionString(e.EmailProviderCredentialsSchemaConnectionString)
	}
	if e.typ == "EmailProviderCredentialsSchemaClientID" || e.EmailProviderCredentialsSchemaClientID != nil {
		return visitor.VisitEmailProviderCredentialsSchemaClientID(e.EmailProviderCredentialsSchemaClientID)
	}
	if e.typ == "ExtensibilityEmailProviderCredentials" || e.ExtensibilityEmailProviderCredentials != nil {
		return visitor.VisitExtensibilityEmailProviderCredentials(e.ExtensibilityEmailProviderCredentials)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmailProviderCredentialsSchemaAccessKeyID struct {
	// AWS Access Key ID.
	AccessKeyID *string `json:"accessKeyId,omitempty" url:"accessKeyId,omitempty"`
	// AWS Secret Access Key.
	SecretAccessKey *string `json:"secretAccessKey,omitempty" url:"secretAccessKey,omitempty"`
	// AWS region.
	Region *string `json:"region,omitempty" url:"region,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaAccessKeyID) GetAccessKeyID() *string {
	if e == nil {
		return nil
	}
	return e.AccessKeyID
}

func (e *EmailProviderCredentialsSchemaAccessKeyID) GetSecretAccessKey() *string {
	if e == nil {
		return nil
	}
	return e.SecretAccessKey
}

func (e *EmailProviderCredentialsSchemaAccessKeyID) GetRegion() *string {
	if e == nil {
		return nil
	}
	return e.Region
}

func (e *EmailProviderCredentialsSchemaAccessKeyID) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaAccessKeyID) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaAccessKeyID
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaAccessKeyID(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaAccessKeyID) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderCredentialsSchemaAPIKey struct {
	// API Key
	APIKey *string `json:"api_key,omitempty" url:"api_key,omitempty"`
	// Domain
	Domain *string                 `json:"domain,omitempty" url:"domain,omitempty"`
	Region *EmailMailgunRegionEnum `json:"region,omitempty" url:"region,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaAPIKey) GetAPIKey() *string {
	if e == nil {
		return nil
	}
	return e.APIKey
}

func (e *EmailProviderCredentialsSchemaAPIKey) GetDomain() *string {
	if e == nil {
		return nil
	}
	return e.Domain
}

func (e *EmailProviderCredentialsSchemaAPIKey) GetRegion() *EmailMailgunRegionEnum {
	if e == nil {
		return nil
	}
	return e.Region
}

func (e *EmailProviderCredentialsSchemaAPIKey) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaAPIKey) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaAPIKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaAPIKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaAPIKey) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderCredentialsSchemaClientID struct {
	// Microsoft 365 Tenant ID.
	TenantID *string `json:"tenantId,omitempty" url:"tenantId,omitempty"`
	// Microsoft 365 Client ID.
	ClientID *string `json:"clientId,omitempty" url:"clientId,omitempty"`
	// Microsoft 365 Client Secret.
	ClientSecret *string `json:"clientSecret,omitempty" url:"clientSecret,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaClientID) GetTenantID() *string {
	if e == nil {
		return nil
	}
	return e.TenantID
}

func (e *EmailProviderCredentialsSchemaClientID) GetClientID() *string {
	if e == nil {
		return nil
	}
	return e.ClientID
}

func (e *EmailProviderCredentialsSchemaClientID) GetClientSecret() *string {
	if e == nil {
		return nil
	}
	return e.ClientSecret
}

func (e *EmailProviderCredentialsSchemaClientID) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaClientID) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaClientID
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaClientID(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaClientID) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderCredentialsSchemaConnectionString struct {
	// Azure Communication Services Connection String.
	ConnectionString *string `json:"connectionString,omitempty" url:"connectionString,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaConnectionString) GetConnectionString() *string {
	if e == nil {
		return nil
	}
	return e.ConnectionString
}

func (e *EmailProviderCredentialsSchemaConnectionString) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaConnectionString) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaConnectionString
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaConnectionString(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaConnectionString) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderCredentialsSchemaSMTPHost struct {
	SMTPHost *EmailSMTPHost `json:"smtp_host,omitempty" url:"smtp_host,omitempty"`
	// SMTP port.
	SMTPPort *int `json:"smtp_port,omitempty" url:"smtp_port,omitempty"`
	// SMTP username.
	SMTPUser *string `json:"smtp_user,omitempty" url:"smtp_user,omitempty"`
	// SMTP password.
	SMTPPass *string `json:"smtp_pass,omitempty" url:"smtp_pass,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaSMTPHost) GetSMTPHost() *EmailSMTPHost {
	if e == nil {
		return nil
	}
	return e.SMTPHost
}

func (e *EmailProviderCredentialsSchemaSMTPHost) GetSMTPPort() *int {
	if e == nil {
		return nil
	}
	return e.SMTPPort
}

func (e *EmailProviderCredentialsSchemaSMTPHost) GetSMTPUser() *string {
	if e == nil {
		return nil
	}
	return e.SMTPUser
}

func (e *EmailProviderCredentialsSchemaSMTPHost) GetSMTPPass() *string {
	if e == nil {
		return nil
	}
	return e.SMTPPass
}

func (e *EmailProviderCredentialsSchemaSMTPHost) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaSMTPHost) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaSMTPHost
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaSMTPHost(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaSMTPHost) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderCredentialsSchemaThree struct {
	// API Key
	APIKey *string                   `json:"api_key,omitempty" url:"api_key,omitempty"`
	Region *EmailSparkPostRegionEnum `json:"region,omitempty" url:"region,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaThree) GetAPIKey() *string {
	if e == nil {
		return nil
	}
	return e.APIKey
}

func (e *EmailProviderCredentialsSchemaThree) GetRegion() *EmailSparkPostRegionEnum {
	if e == nil {
		return nil
	}
	return e.Region
}

func (e *EmailProviderCredentialsSchemaThree) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaThree) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaThree
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaThree(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaThree) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderCredentialsSchemaZero struct {
	// API Key
	APIKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderCredentialsSchemaZero) GetAPIKey() string {
	if e == nil {
		return ""
	}
	return e.APIKey
}

func (e *EmailProviderCredentialsSchemaZero) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderCredentialsSchemaZero) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderCredentialsSchemaZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderCredentialsSchemaZero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderCredentialsSchemaZero) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.
type EmailProviderNameEnum string

const (
	EmailProviderNameEnumMailgun   EmailProviderNameEnum = "mailgun"
	EmailProviderNameEnumMandrill  EmailProviderNameEnum = "mandrill"
	EmailProviderNameEnumSendgrid  EmailProviderNameEnum = "sendgrid"
	EmailProviderNameEnumSes       EmailProviderNameEnum = "ses"
	EmailProviderNameEnumSparkpost EmailProviderNameEnum = "sparkpost"
	EmailProviderNameEnumSMTP      EmailProviderNameEnum = "smtp"
	EmailProviderNameEnumAzureCs   EmailProviderNameEnum = "azure_cs"
	EmailProviderNameEnumMs365     EmailProviderNameEnum = "ms365"
	EmailProviderNameEnumCustom    EmailProviderNameEnum = "custom"
)

func NewEmailProviderNameEnumFromString(s string) (EmailProviderNameEnum, error) {
	switch s {
	case "mailgun":
		return EmailProviderNameEnumMailgun, nil
	case "mandrill":
		return EmailProviderNameEnumMandrill, nil
	case "sendgrid":
		return EmailProviderNameEnumSendgrid, nil
	case "ses":
		return EmailProviderNameEnumSes, nil
	case "sparkpost":
		return EmailProviderNameEnumSparkpost, nil
	case "smtp":
		return EmailProviderNameEnumSMTP, nil
	case "azure_cs":
		return EmailProviderNameEnumAzureCs, nil
	case "ms365":
		return EmailProviderNameEnumMs365, nil
	case "custom":
		return EmailProviderNameEnumCustom, nil
	}
	var t EmailProviderNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmailProviderNameEnum) Ptr() *EmailProviderNameEnum {
	return &e
}

// Specific provider setting
type EmailProviderSettings = map[string]interface{}

// SMTP host.
type EmailSMTPHost = string

// Set to <code>eu</code> to use SparkPost service hosted in Western Europe. To use SparkPost hosted in North America, set it to <code>null</code>.
type EmailSparkPostRegionEnum = string

// Specific provider setting
type EmailSpecificProviderSettingsWithAdditionalProperties = map[string]interface{}

// Encryption key
type EncryptionKey struct {
	// Key ID
	Kid   string             `json:"kid" url:"kid"`
	Type  EncryptionKeyType  `json:"type" url:"type"`
	State EncryptionKeyState `json:"state" url:"state"`
	// Key creation timestamp
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Key update timestamp
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of parent wrapping key
	ParentKid string `json:"parent_kid" url:"parent_kid"`
	// Public key in PEM format
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EncryptionKey) GetKid() string {
	if e == nil {
		return ""
	}
	return e.Kid
}

func (e *EncryptionKey) GetType() EncryptionKeyType {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *EncryptionKey) GetState() EncryptionKeyState {
	if e == nil {
		return ""
	}
	return e.State
}

func (e *EncryptionKey) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EncryptionKey) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EncryptionKey) GetParentKid() string {
	if e == nil {
		return ""
	}
	return e.ParentKid
}

func (e *EncryptionKey) GetPublicKey() *string {
	if e == nil {
		return nil
	}
	return e.PublicKey
}

func (e *EncryptionKey) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EncryptionKey) UnmarshalJSON(data []byte) error {
	type embed EncryptionKey
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EncryptionKey(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EncryptionKey) MarshalJSON() ([]byte, error) {
	type embed EncryptionKey
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EncryptionKey) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Encryption algorithm that shall be used to wrap your key material
type EncryptionKeyPublicWrappingAlgorithm = string

// Key state
type EncryptionKeyState string

const (
	EncryptionKeyStatePreActivation EncryptionKeyState = "pre-activation"
	EncryptionKeyStateActive        EncryptionKeyState = "active"
	EncryptionKeyStateDeactivated   EncryptionKeyState = "deactivated"
	EncryptionKeyStateDestroyed     EncryptionKeyState = "destroyed"
)

func NewEncryptionKeyStateFromString(s string) (EncryptionKeyState, error) {
	switch s {
	case "pre-activation":
		return EncryptionKeyStatePreActivation, nil
	case "active":
		return EncryptionKeyStateActive, nil
	case "deactivated":
		return EncryptionKeyStateDeactivated, nil
	case "destroyed":
		return EncryptionKeyStateDestroyed, nil
	}
	var t EncryptionKeyState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EncryptionKeyState) Ptr() *EncryptionKeyState {
	return &e
}

// Key type
type EncryptionKeyType string

const (
	EncryptionKeyTypeCustomerProvidedRootKey EncryptionKeyType = "customer-provided-root-key"
	EncryptionKeyTypeEnvironmentRootKey      EncryptionKeyType = "environment-root-key"
	EncryptionKeyTypeTenantMasterKey         EncryptionKeyType = "tenant-master-key"
	EncryptionKeyTypeTenantEncryptionKey     EncryptionKeyType = "tenant-encryption-key"
)

func NewEncryptionKeyTypeFromString(s string) (EncryptionKeyType, error) {
	switch s {
	case "customer-provided-root-key":
		return EncryptionKeyTypeCustomerProvidedRootKey, nil
	case "environment-root-key":
		return EncryptionKeyTypeEnvironmentRootKey, nil
	case "tenant-master-key":
		return EncryptionKeyTypeTenantMasterKey, nil
	case "tenant-encryption-key":
		return EncryptionKeyTypeTenantEncryptionKey, nil
	}
	var t EncryptionKeyType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EncryptionKeyType) Ptr() *EncryptionKeyType {
	return &e
}

// Event content. This will only be set if delivery failed.
type EventStreamCloudEvent struct {
	// Unique identifier for the event
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Where the event originated
	Source *string `json:"source,omitempty" url:"source,omitempty"`
	// Version of CloudEvents spec
	Specversion *string `json:"specversion,omitempty" url:"specversion,omitempty"`
	// Type of the event (e.g., user.created)
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Timestamp at which the event was generated
	Time *time.Time `json:"time,omitempty" url:"time,omitempty"`
	// Event contents encoded as a string.
	Data *string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventStreamCloudEvent) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EventStreamCloudEvent) GetSource() *string {
	if e == nil {
		return nil
	}
	return e.Source
}

func (e *EventStreamCloudEvent) GetSpecversion() *string {
	if e == nil {
		return nil
	}
	return e.Specversion
}

func (e *EventStreamCloudEvent) GetType() *string {
	if e == nil {
		return nil
	}
	return e.Type
}

func (e *EventStreamCloudEvent) GetTime() *time.Time {
	if e == nil {
		return nil
	}
	return e.Time
}

func (e *EventStreamCloudEvent) GetData() *string {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EventStreamCloudEvent) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventStreamCloudEvent) UnmarshalJSON(data []byte) error {
	type embed EventStreamCloudEvent
	var unmarshaler = struct {
		embed
		Time *internal.DateTime `json:"time,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventStreamCloudEvent(unmarshaler.embed)
	e.Time = unmarshaler.Time.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventStreamCloudEvent) MarshalJSON() ([]byte, error) {
	type embed EventStreamCloudEvent
	var marshaler = struct {
		embed
		Time *internal.DateTime `json:"time,omitempty"`
	}{
		embed: embed(*e),
		Time:  internal.NewOptionalDateTime(e.Time),
	}
	return json.Marshal(marshaler)
}

func (e *EventStreamCloudEvent) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Metadata about a specific attempt to deliver an event
type EventStreamDelivery struct {
	// Unique identifier for the delivery
	ID string `json:"id" url:"id"`
	// Unique identifier for the event stream.
	EventStreamID string                           `json:"event_stream_id" url:"event_stream_id"`
	Status        EventStreamDeliveryStatusEnum    `json:"status" url:"status"`
	EventType     EventStreamDeliveryEventTypeEnum `json:"event_type" url:"event_type"`
	// Results of delivery attempts
	Attempts []*EventStreamDeliveryAttempt `json:"attempts" url:"attempts"`
	Event    *EventStreamCloudEvent        `json:"event,omitempty" url:"event,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventStreamDelivery) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *EventStreamDelivery) GetEventStreamID() string {
	if e == nil {
		return ""
	}
	return e.EventStreamID
}

func (e *EventStreamDelivery) GetEventType() EventStreamDeliveryEventTypeEnum {
	if e == nil {
		return ""
	}
	return e.EventType
}

func (e *EventStreamDelivery) GetAttempts() []*EventStreamDeliveryAttempt {
	if e == nil {
		return nil
	}
	return e.Attempts
}

func (e *EventStreamDelivery) GetEvent() *EventStreamCloudEvent {
	if e == nil {
		return nil
	}
	return e.Event
}

func (e *EventStreamDelivery) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventStreamDelivery) UnmarshalJSON(data []byte) error {
	type unmarshaler EventStreamDelivery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventStreamDelivery(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventStreamDelivery) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventStreamDeliveryAttempt struct {
	Status EventStreamDeliveryStatusEnum `json:"status" url:"status"`
	// Timestamp of delivery attempt
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// Delivery error message, if applicable
	ErrorMessage *string `json:"error_message,omitempty" url:"error_message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventStreamDeliveryAttempt) GetTimestamp() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.Timestamp
}

func (e *EventStreamDeliveryAttempt) GetErrorMessage() *string {
	if e == nil {
		return nil
	}
	return e.ErrorMessage
}

func (e *EventStreamDeliveryAttempt) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventStreamDeliveryAttempt) UnmarshalJSON(data []byte) error {
	type embed EventStreamDeliveryAttempt
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventStreamDeliveryAttempt(unmarshaler.embed)
	e.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventStreamDeliveryAttempt) MarshalJSON() ([]byte, error) {
	type embed EventStreamDeliveryAttempt
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*e),
		Timestamp: internal.NewDateTime(e.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (e *EventStreamDeliveryAttempt) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Type of event
type EventStreamDeliveryEventTypeEnum string

const (
	EventStreamDeliveryEventTypeEnumUserCreated                    EventStreamDeliveryEventTypeEnum = "user.created"
	EventStreamDeliveryEventTypeEnumUserDeleted                    EventStreamDeliveryEventTypeEnum = "user.deleted"
	EventStreamDeliveryEventTypeEnumUserUpdated                    EventStreamDeliveryEventTypeEnum = "user.updated"
	EventStreamDeliveryEventTypeEnumOrganizationCreated            EventStreamDeliveryEventTypeEnum = "organization.created"
	EventStreamDeliveryEventTypeEnumOrganizationUpdated            EventStreamDeliveryEventTypeEnum = "organization.updated"
	EventStreamDeliveryEventTypeEnumOrganizationDeleted            EventStreamDeliveryEventTypeEnum = "organization.deleted"
	EventStreamDeliveryEventTypeEnumOrganizationMemberAdded        EventStreamDeliveryEventTypeEnum = "organization.member.added"
	EventStreamDeliveryEventTypeEnumOrganizationMemberDeleted      EventStreamDeliveryEventTypeEnum = "organization.member.deleted"
	EventStreamDeliveryEventTypeEnumOrganizationMemberRoleAssigned EventStreamDeliveryEventTypeEnum = "organization.member.role.assigned"
	EventStreamDeliveryEventTypeEnumOrganizationMemberRoleDeleted  EventStreamDeliveryEventTypeEnum = "organization.member.role.deleted"
	EventStreamDeliveryEventTypeEnumOrganizationConnectionAdded    EventStreamDeliveryEventTypeEnum = "organization.connection.added"
	EventStreamDeliveryEventTypeEnumOrganizationConnectionUpdated  EventStreamDeliveryEventTypeEnum = "organization.connection.updated"
	EventStreamDeliveryEventTypeEnumOrganizationConnectionRemoved  EventStreamDeliveryEventTypeEnum = "organization.connection.removed"
)

func NewEventStreamDeliveryEventTypeEnumFromString(s string) (EventStreamDeliveryEventTypeEnum, error) {
	switch s {
	case "user.created":
		return EventStreamDeliveryEventTypeEnumUserCreated, nil
	case "user.deleted":
		return EventStreamDeliveryEventTypeEnumUserDeleted, nil
	case "user.updated":
		return EventStreamDeliveryEventTypeEnumUserUpdated, nil
	case "organization.created":
		return EventStreamDeliveryEventTypeEnumOrganizationCreated, nil
	case "organization.updated":
		return EventStreamDeliveryEventTypeEnumOrganizationUpdated, nil
	case "organization.deleted":
		return EventStreamDeliveryEventTypeEnumOrganizationDeleted, nil
	case "organization.member.added":
		return EventStreamDeliveryEventTypeEnumOrganizationMemberAdded, nil
	case "organization.member.deleted":
		return EventStreamDeliveryEventTypeEnumOrganizationMemberDeleted, nil
	case "organization.member.role.assigned":
		return EventStreamDeliveryEventTypeEnumOrganizationMemberRoleAssigned, nil
	case "organization.member.role.deleted":
		return EventStreamDeliveryEventTypeEnumOrganizationMemberRoleDeleted, nil
	case "organization.connection.added":
		return EventStreamDeliveryEventTypeEnumOrganizationConnectionAdded, nil
	case "organization.connection.updated":
		return EventStreamDeliveryEventTypeEnumOrganizationConnectionUpdated, nil
	case "organization.connection.removed":
		return EventStreamDeliveryEventTypeEnumOrganizationConnectionRemoved, nil
	}
	var t EventStreamDeliveryEventTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventStreamDeliveryEventTypeEnum) Ptr() *EventStreamDeliveryEventTypeEnum {
	return &e
}

// Delivery status
type EventStreamDeliveryStatusEnum = string

type EventStreamEventTypeEnum string

const (
	EventStreamEventTypeEnumUserCreated                    EventStreamEventTypeEnum = "user.created"
	EventStreamEventTypeEnumUserDeleted                    EventStreamEventTypeEnum = "user.deleted"
	EventStreamEventTypeEnumUserUpdated                    EventStreamEventTypeEnum = "user.updated"
	EventStreamEventTypeEnumOrganizationCreated            EventStreamEventTypeEnum = "organization.created"
	EventStreamEventTypeEnumOrganizationUpdated            EventStreamEventTypeEnum = "organization.updated"
	EventStreamEventTypeEnumOrganizationDeleted            EventStreamEventTypeEnum = "organization.deleted"
	EventStreamEventTypeEnumOrganizationMemberAdded        EventStreamEventTypeEnum = "organization.member.added"
	EventStreamEventTypeEnumOrganizationMemberDeleted      EventStreamEventTypeEnum = "organization.member.deleted"
	EventStreamEventTypeEnumOrganizationMemberRoleAssigned EventStreamEventTypeEnum = "organization.member.role.assigned"
	EventStreamEventTypeEnumOrganizationMemberRoleDeleted  EventStreamEventTypeEnum = "organization.member.role.deleted"
	EventStreamEventTypeEnumOrganizationConnectionAdded    EventStreamEventTypeEnum = "organization.connection.added"
	EventStreamEventTypeEnumOrganizationConnectionUpdated  EventStreamEventTypeEnum = "organization.connection.updated"
	EventStreamEventTypeEnumOrganizationConnectionRemoved  EventStreamEventTypeEnum = "organization.connection.removed"
)

func NewEventStreamEventTypeEnumFromString(s string) (EventStreamEventTypeEnum, error) {
	switch s {
	case "user.created":
		return EventStreamEventTypeEnumUserCreated, nil
	case "user.deleted":
		return EventStreamEventTypeEnumUserDeleted, nil
	case "user.updated":
		return EventStreamEventTypeEnumUserUpdated, nil
	case "organization.created":
		return EventStreamEventTypeEnumOrganizationCreated, nil
	case "organization.updated":
		return EventStreamEventTypeEnumOrganizationUpdated, nil
	case "organization.deleted":
		return EventStreamEventTypeEnumOrganizationDeleted, nil
	case "organization.member.added":
		return EventStreamEventTypeEnumOrganizationMemberAdded, nil
	case "organization.member.deleted":
		return EventStreamEventTypeEnumOrganizationMemberDeleted, nil
	case "organization.member.role.assigned":
		return EventStreamEventTypeEnumOrganizationMemberRoleAssigned, nil
	case "organization.member.role.deleted":
		return EventStreamEventTypeEnumOrganizationMemberRoleDeleted, nil
	case "organization.connection.added":
		return EventStreamEventTypeEnumOrganizationConnectionAdded, nil
	case "organization.connection.updated":
		return EventStreamEventTypeEnumOrganizationConnectionUpdated, nil
	case "organization.connection.removed":
		return EventStreamEventTypeEnumOrganizationConnectionRemoved, nil
	}
	var t EventStreamEventTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventStreamEventTypeEnum) Ptr() *EventStreamEventTypeEnum {
	return &e
}

type ExtensibilityEmailProviderCredentials struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExtensibilityEmailProviderCredentials) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExtensibilityEmailProviderCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler ExtensibilityEmailProviderCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExtensibilityEmailProviderCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExtensibilityEmailProviderCredentials) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type FederatedConnectionTokenSet struct {
	ID         *string    `json:"id,omitempty" url:"id,omitempty"`
	Connection *string    `json:"connection,omitempty" url:"connection,omitempty"`
	Scope      *string    `json:"scope,omitempty" url:"scope,omitempty"`
	ExpiresAt  *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	IssuedAt   *time.Time `json:"issued_at,omitempty" url:"issued_at,omitempty"`
	LastUsedAt *time.Time `json:"last_used_at,omitempty" url:"last_used_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FederatedConnectionTokenSet) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *FederatedConnectionTokenSet) GetConnection() *string {
	if f == nil {
		return nil
	}
	return f.Connection
}

func (f *FederatedConnectionTokenSet) GetScope() *string {
	if f == nil {
		return nil
	}
	return f.Scope
}

func (f *FederatedConnectionTokenSet) GetExpiresAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.ExpiresAt
}

func (f *FederatedConnectionTokenSet) GetIssuedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.IssuedAt
}

func (f *FederatedConnectionTokenSet) GetLastUsedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.LastUsedAt
}

func (f *FederatedConnectionTokenSet) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FederatedConnectionTokenSet) UnmarshalJSON(data []byte) error {
	type embed FederatedConnectionTokenSet
	var unmarshaler = struct {
		embed
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
		IssuedAt   *internal.DateTime `json:"issued_at,omitempty"`
		LastUsedAt *internal.DateTime `json:"last_used_at,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FederatedConnectionTokenSet(unmarshaler.embed)
	f.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	f.IssuedAt = unmarshaler.IssuedAt.TimePtr()
	f.LastUsedAt = unmarshaler.LastUsedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FederatedConnectionTokenSet) MarshalJSON() ([]byte, error) {
	type embed FederatedConnectionTokenSet
	var marshaler = struct {
		embed
		ExpiresAt  *internal.DateTime `json:"expires_at,omitempty"`
		IssuedAt   *internal.DateTime `json:"issued_at,omitempty"`
		LastUsedAt *internal.DateTime `json:"last_used_at,omitempty"`
	}{
		embed:      embed(*f),
		ExpiresAt:  internal.NewOptionalDateTime(f.ExpiresAt),
		IssuedAt:   internal.NewOptionalDateTime(f.IssuedAt),
		LastUsedAt: internal.NewOptionalDateTime(f.LastUsedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, f.ExtraProperties)
}

func (f *FederatedConnectionTokenSet) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// Flow execution debug.
type FlowExecutionDebug = map[string]interface{}

type FlowExecutionSummary struct {
	// Flow execution identifier
	ID string `json:"id" url:"id"`
	// Trace id
	TraceID string `json:"trace_id" url:"trace_id"`
	// Journey id
	JourneyID *string `json:"journey_id,omitempty" url:"journey_id,omitempty"`
	// Execution status
	Status string `json:"status" url:"status"`
	// The ISO 8601 formatted date when this flow execution was created.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The ISO 8601 formatted date when this flow execution was updated.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The ISO 8601 formatted date when this flow execution started.
	StartedAt *time.Time `json:"started_at,omitempty" url:"started_at,omitempty"`
	// The ISO 8601 formatted date when this flow execution ended.
	EndedAt *time.Time `json:"ended_at,omitempty" url:"ended_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlowExecutionSummary) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FlowExecutionSummary) GetTraceID() string {
	if f == nil {
		return ""
	}
	return f.TraceID
}

func (f *FlowExecutionSummary) GetJourneyID() *string {
	if f == nil {
		return nil
	}
	return f.JourneyID
}

func (f *FlowExecutionSummary) GetStatus() string {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FlowExecutionSummary) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FlowExecutionSummary) GetUpdatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.UpdatedAt
}

func (f *FlowExecutionSummary) GetStartedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.StartedAt
}

func (f *FlowExecutionSummary) GetEndedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.EndedAt
}

func (f *FlowExecutionSummary) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlowExecutionSummary) UnmarshalJSON(data []byte) error {
	type embed FlowExecutionSummary
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		StartedAt *internal.DateTime `json:"started_at,omitempty"`
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlowExecutionSummary(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	f.StartedAt = unmarshaler.StartedAt.TimePtr()
	f.EndedAt = unmarshaler.EndedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlowExecutionSummary) MarshalJSON() ([]byte, error) {
	type embed FlowExecutionSummary
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		StartedAt *internal.DateTime `json:"started_at,omitempty"`
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
		UpdatedAt: internal.NewDateTime(f.UpdatedAt),
		StartedAt: internal.NewOptionalDateTime(f.StartedAt),
		EndedAt:   internal.NewOptionalDateTime(f.EndedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FlowExecutionSummary) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The result of a specific execution of a trigger.
type GetActionExecutionResponseContent struct {
	// ID identifies this specific execution simulation. These IDs would resemble real executions in production.
	ID        *string                    `json:"id,omitempty" url:"id,omitempty"`
	TriggerID *ActionTriggerTypeEnum     `json:"trigger_id,omitempty" url:"trigger_id,omitempty"`
	Status    *ActionExecutionStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	Results   []*ActionExecutionResult   `json:"results,omitempty" url:"results,omitempty"`
	// The time that the execution was started.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time that the exeution finished executing.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActionExecutionResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetActionExecutionResponseContent) GetTriggerID() *ActionTriggerTypeEnum {
	if g == nil {
		return nil
	}
	return g.TriggerID
}

func (g *GetActionExecutionResponseContent) GetStatus() *ActionExecutionStatusEnum {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetActionExecutionResponseContent) GetResults() []*ActionExecutionResult {
	if g == nil {
		return nil
	}
	return g.Results
}

func (g *GetActionExecutionResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetActionExecutionResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetActionExecutionResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActionExecutionResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetActionExecutionResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetActionExecutionResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActionExecutionResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetActionExecutionResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetActionExecutionResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetActionVersionResponseContent struct {
	// The unique id of an action version.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The id of the action to which this version belongs.
	ActionID *string `json:"action_id,omitempty" url:"action_id,omitempty"`
	// The source code of this specific version of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this specific version depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// Indicates if this speciic version is the currently one deployed.
	Deployed *bool `json:"deployed,omitempty" url:"deployed,omitempty"`
	// The Node runtime. For example: `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretResponse       `json:"secrets,omitempty" url:"secrets,omitempty"`
	Status  *ActionVersionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The index of this version in list of versions for the action.
	Number *float64 `json:"number,omitempty" url:"number,omitempty"`
	// Any errors that occurred while the version was being built.
	Errors []*ActionError `json:"errors,omitempty" url:"errors,omitempty"`
	Action *ActionBase    `json:"action,omitempty" url:"action,omitempty"`
	// The time when this version was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// The time when this version was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActionVersionResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetActionVersionResponseContent) GetActionID() *string {
	if g == nil {
		return nil
	}
	return g.ActionID
}

func (g *GetActionVersionResponseContent) GetCode() *string {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GetActionVersionResponseContent) GetDependencies() []*ActionVersionDependency {
	if g == nil {
		return nil
	}
	return g.Dependencies
}

func (g *GetActionVersionResponseContent) GetDeployed() *bool {
	if g == nil {
		return nil
	}
	return g.Deployed
}

func (g *GetActionVersionResponseContent) GetRuntime() *string {
	if g == nil {
		return nil
	}
	return g.Runtime
}

func (g *GetActionVersionResponseContent) GetSecrets() []*ActionSecretResponse {
	if g == nil {
		return nil
	}
	return g.Secrets
}

func (g *GetActionVersionResponseContent) GetStatus() *ActionVersionBuildStatusEnum {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetActionVersionResponseContent) GetNumber() *float64 {
	if g == nil {
		return nil
	}
	return g.Number
}

func (g *GetActionVersionResponseContent) GetErrors() []*ActionError {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetActionVersionResponseContent) GetAction() *ActionBase {
	if g == nil {
		return nil
	}
	return g.Action
}

func (g *GetActionVersionResponseContent) GetBuiltAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.BuiltAt
}

func (g *GetActionVersionResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetActionVersionResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetActionVersionResponseContent) GetSupportedTriggers() []*ActionTrigger {
	if g == nil {
		return nil
	}
	return g.SupportedTriggers
}

func (g *GetActionVersionResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActionVersionResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetActionVersionResponseContent
	var unmarshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetActionVersionResponseContent(unmarshaler.embed)
	g.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActionVersionResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetActionVersionResponseContent
	var marshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*g),
		BuiltAt:   internal.NewOptionalDateTime(g.BuiltAt),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetActionVersionResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetAculResponseContent struct {
	// Tenant ID
	Tenant *string `json:"tenant,omitempty" url:"tenant,omitempty"`
	// Name of the prompt
	Prompt *string `json:"prompt,omitempty" url:"prompt,omitempty"`
	// Name of the screen
	Screen        *string                `json:"screen,omitempty" url:"screen,omitempty"`
	RenderingMode *AculRenderingModeEnum `json:"rendering_mode,omitempty" url:"rendering_mode,omitempty"`
	// Context values to make available
	ContextConfiguration []string `json:"context_configuration,omitempty" url:"context_configuration,omitempty"`
	// Override Universal Login default head tags
	DefaultHeadTagsDisabled *bool `json:"default_head_tags_disabled,omitempty" url:"default_head_tags_disabled,omitempty"`
	// An array of head tags
	HeadTags []*AculHeadTag `json:"head_tags,omitempty" url:"head_tags,omitempty"`
	Filters  *AculFilters   `json:"filters,omitempty" url:"filters,omitempty"`
	// Use page template with ACUL
	UsePageTemplate *bool `json:"use_page_template,omitempty" url:"use_page_template,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetAculResponseContent) GetTenant() *string {
	if g == nil {
		return nil
	}
	return g.Tenant
}

func (g *GetAculResponseContent) GetPrompt() *string {
	if g == nil {
		return nil
	}
	return g.Prompt
}

func (g *GetAculResponseContent) GetScreen() *string {
	if g == nil {
		return nil
	}
	return g.Screen
}

func (g *GetAculResponseContent) GetRenderingMode() *AculRenderingModeEnum {
	if g == nil {
		return nil
	}
	return g.RenderingMode
}

func (g *GetAculResponseContent) GetContextConfiguration() []string {
	if g == nil {
		return nil
	}
	return g.ContextConfiguration
}

func (g *GetAculResponseContent) GetDefaultHeadTagsDisabled() *bool {
	if g == nil {
		return nil
	}
	return g.DefaultHeadTagsDisabled
}

func (g *GetAculResponseContent) GetHeadTags() []*AculHeadTag {
	if g == nil {
		return nil
	}
	return g.HeadTags
}

func (g *GetAculResponseContent) GetFilters() *AculFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetAculResponseContent) GetUsePageTemplate() *bool {
	if g == nil {
		return nil
	}
	return g.UsePageTemplate
}

func (g *GetAculResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetAculResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetAculResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetAculResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAculResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetAculResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetAculResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetBrandingDefaultThemeResponseContent struct {
	Borders *BrandingThemeBorders `json:"borders" url:"borders"`
	Colors  *BrandingThemeColors  `json:"colors" url:"colors"`
	// Display Name
	DisplayName    string                       `json:"displayName" url:"displayName"`
	Fonts          *BrandingThemeFonts          `json:"fonts" url:"fonts"`
	PageBackground *BrandingThemePageBackground `json:"page_background" url:"page_background"`
	// Theme Id
	ThemeID string               `json:"themeId" url:"themeId"`
	Widget  *BrandingThemeWidget `json:"widget" url:"widget"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBrandingDefaultThemeResponseContent) GetBorders() *BrandingThemeBorders {
	if g == nil {
		return nil
	}
	return g.Borders
}

func (g *GetBrandingDefaultThemeResponseContent) GetColors() *BrandingThemeColors {
	if g == nil {
		return nil
	}
	return g.Colors
}

func (g *GetBrandingDefaultThemeResponseContent) GetDisplayName() string {
	if g == nil {
		return ""
	}
	return g.DisplayName
}

func (g *GetBrandingDefaultThemeResponseContent) GetFonts() *BrandingThemeFonts {
	if g == nil {
		return nil
	}
	return g.Fonts
}

func (g *GetBrandingDefaultThemeResponseContent) GetPageBackground() *BrandingThemePageBackground {
	if g == nil {
		return nil
	}
	return g.PageBackground
}

func (g *GetBrandingDefaultThemeResponseContent) GetThemeID() string {
	if g == nil {
		return ""
	}
	return g.ThemeID
}

func (g *GetBrandingDefaultThemeResponseContent) GetWidget() *BrandingThemeWidget {
	if g == nil {
		return nil
	}
	return g.Widget
}

func (g *GetBrandingDefaultThemeResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBrandingDefaultThemeResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBrandingDefaultThemeResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBrandingDefaultThemeResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBrandingDefaultThemeResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Phone provider configuration schema
type GetBrandingPhoneProviderResponseContent struct {
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the tenant
	Tenant  *string                   `json:"tenant,omitempty" url:"tenant,omitempty"`
	Name    PhoneProviderNameEnum     `json:"name" url:"name"`
	Channel *PhoneProviderChannelEnum `json:"channel,omitempty" url:"channel,omitempty"`
	// Whether the provider is enabled (false) or disabled (true).
	Disabled      *bool                       `json:"disabled,omitempty" url:"disabled,omitempty"`
	Configuration *PhoneProviderConfiguration `json:"configuration,omitempty" url:"configuration,omitempty"`
	// The provider's creation date and time in ISO 8601 format
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time of the last update to the provider in ISO 8601 format
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBrandingPhoneProviderResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetBrandingPhoneProviderResponseContent) GetTenant() *string {
	if g == nil {
		return nil
	}
	return g.Tenant
}

func (g *GetBrandingPhoneProviderResponseContent) GetName() PhoneProviderNameEnum {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetBrandingPhoneProviderResponseContent) GetDisabled() *bool {
	if g == nil {
		return nil
	}
	return g.Disabled
}

func (g *GetBrandingPhoneProviderResponseContent) GetConfiguration() *PhoneProviderConfiguration {
	if g == nil {
		return nil
	}
	return g.Configuration
}

func (g *GetBrandingPhoneProviderResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetBrandingPhoneProviderResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetBrandingPhoneProviderResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBrandingPhoneProviderResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetBrandingPhoneProviderResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetBrandingPhoneProviderResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBrandingPhoneProviderResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetBrandingPhoneProviderResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetBrandingPhoneProviderResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetBrandingThemeResponseContent struct {
	Borders *BrandingThemeBorders `json:"borders" url:"borders"`
	Colors  *BrandingThemeColors  `json:"colors" url:"colors"`
	// Display Name
	DisplayName    string                       `json:"displayName" url:"displayName"`
	Fonts          *BrandingThemeFonts          `json:"fonts" url:"fonts"`
	PageBackground *BrandingThemePageBackground `json:"page_background" url:"page_background"`
	// Theme Id
	ThemeID string               `json:"themeId" url:"themeId"`
	Widget  *BrandingThemeWidget `json:"widget" url:"widget"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBrandingThemeResponseContent) GetBorders() *BrandingThemeBorders {
	if g == nil {
		return nil
	}
	return g.Borders
}

func (g *GetBrandingThemeResponseContent) GetColors() *BrandingThemeColors {
	if g == nil {
		return nil
	}
	return g.Colors
}

func (g *GetBrandingThemeResponseContent) GetDisplayName() string {
	if g == nil {
		return ""
	}
	return g.DisplayName
}

func (g *GetBrandingThemeResponseContent) GetFonts() *BrandingThemeFonts {
	if g == nil {
		return nil
	}
	return g.Fonts
}

func (g *GetBrandingThemeResponseContent) GetPageBackground() *BrandingThemePageBackground {
	if g == nil {
		return nil
	}
	return g.PageBackground
}

func (g *GetBrandingThemeResponseContent) GetThemeID() string {
	if g == nil {
		return ""
	}
	return g.ThemeID
}

func (g *GetBrandingThemeResponseContent) GetWidget() *BrandingThemeWidget {
	if g == nil {
		return nil
	}
	return g.Widget
}

func (g *GetBrandingThemeResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBrandingThemeResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBrandingThemeResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBrandingThemeResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBrandingThemeResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetBreachedPasswordDetectionSettingsResponseContent struct {
	// Whether or not breached password detection is active.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Action to take when a breached password is detected during a login.
	//
	//	Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.
	Shields []BreachedPasswordDetectionShieldsEnum `json:"shields,omitempty" url:"shields,omitempty"`
	// When "admin_notification" is enabled, determines how often email notifications are sent.
	//
	//	Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.
	AdminNotificationFrequency []BreachedPasswordDetectionAdminNotificationFrequencyEnum `json:"admin_notification_frequency,omitempty" url:"admin_notification_frequency,omitempty"`
	Method                     *BreachedPasswordDetectionMethodEnum                      `json:"method,omitempty" url:"method,omitempty"`
	Stage                      *BreachedPasswordDetectionStage                           `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) GetShields() []BreachedPasswordDetectionShieldsEnum {
	if g == nil {
		return nil
	}
	return g.Shields
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) GetAdminNotificationFrequency() []BreachedPasswordDetectionAdminNotificationFrequencyEnum {
	if g == nil {
		return nil
	}
	return g.AdminNotificationFrequency
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) GetMethod() *BreachedPasswordDetectionMethodEnum {
	if g == nil {
		return nil
	}
	return g.Method
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) GetStage() *BreachedPasswordDetectionStage {
	if g == nil {
		return nil
	}
	return g.Stage
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBreachedPasswordDetectionSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBreachedPasswordDetectionSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBreachedPasswordDetectionSettingsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetBruteForceSettingsResponseContent struct {
	// Whether or not brute force attack protections are active.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Action to take when a brute force protection threshold is violated.
	//
	//	Possible values: <code>block</code>, <code>user_notification</code>.
	Shields []GetBruteForceSettingsResponseContentShieldsItem `json:"shields,omitempty" url:"shields,omitempty"`
	// List of trusted IP addresses that will not have attack protection enforced against them.
	Allowlist []string `json:"allowlist,omitempty" url:"allowlist,omitempty"`
	// Account Lockout: Determines whether or not IP address is used when counting failed attempts.
	//
	//	Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.
	Mode *GetBruteForceSettingsResponseContentMode `json:"mode,omitempty" url:"mode,omitempty"`
	// Maximum number of unsuccessful attempts.
	MaxAttempts *int `json:"max_attempts,omitempty" url:"max_attempts,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBruteForceSettingsResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetBruteForceSettingsResponseContent) GetShields() []GetBruteForceSettingsResponseContentShieldsItem {
	if g == nil {
		return nil
	}
	return g.Shields
}

func (g *GetBruteForceSettingsResponseContent) GetAllowlist() []string {
	if g == nil {
		return nil
	}
	return g.Allowlist
}

func (g *GetBruteForceSettingsResponseContent) GetMode() *GetBruteForceSettingsResponseContentMode {
	if g == nil {
		return nil
	}
	return g.Mode
}

func (g *GetBruteForceSettingsResponseContent) GetMaxAttempts() *int {
	if g == nil {
		return nil
	}
	return g.MaxAttempts
}

func (g *GetBruteForceSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBruteForceSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBruteForceSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBruteForceSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBruteForceSettingsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Account Lockout: Determines whether or not IP address is used when counting failed attempts.
//
//	Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.
type GetBruteForceSettingsResponseContentMode string

const (
	GetBruteForceSettingsResponseContentModeCountPerIdentifierAndIP GetBruteForceSettingsResponseContentMode = "count_per_identifier_and_ip"
	GetBruteForceSettingsResponseContentModeCountPerIdentifier      GetBruteForceSettingsResponseContentMode = "count_per_identifier"
)

func NewGetBruteForceSettingsResponseContentModeFromString(s string) (GetBruteForceSettingsResponseContentMode, error) {
	switch s {
	case "count_per_identifier_and_ip":
		return GetBruteForceSettingsResponseContentModeCountPerIdentifierAndIP, nil
	case "count_per_identifier":
		return GetBruteForceSettingsResponseContentModeCountPerIdentifier, nil
	}
	var t GetBruteForceSettingsResponseContentMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GetBruteForceSettingsResponseContentMode) Ptr() *GetBruteForceSettingsResponseContentMode {
	return &g
}

type GetBruteForceSettingsResponseContentShieldsItem string

const (
	GetBruteForceSettingsResponseContentShieldsItemBlock            GetBruteForceSettingsResponseContentShieldsItem = "block"
	GetBruteForceSettingsResponseContentShieldsItemUserNotification GetBruteForceSettingsResponseContentShieldsItem = "user_notification"
)

func NewGetBruteForceSettingsResponseContentShieldsItemFromString(s string) (GetBruteForceSettingsResponseContentShieldsItem, error) {
	switch s {
	case "block":
		return GetBruteForceSettingsResponseContentShieldsItemBlock, nil
	case "user_notification":
		return GetBruteForceSettingsResponseContentShieldsItemUserNotification, nil
	}
	var t GetBruteForceSettingsResponseContentShieldsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GetBruteForceSettingsResponseContentShieldsItem) Ptr() *GetBruteForceSettingsResponseContentShieldsItem {
	return &g
}

type GetClientCredentialResponseContent struct {
	// ID of the credential. Generated on creation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name given to the credential by the user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The key identifier of the credential, generated on creation.
	Kid            *string                        `json:"kid,omitempty" url:"kid,omitempty"`
	Alg            *ClientCredentialAlgorithmEnum `json:"alg,omitempty" url:"alg,omitempty"`
	CredentialType *ClientCredentialTypeEnum      `json:"credential_type,omitempty" url:"credential_type,omitempty"`
	// The X509 certificate's Subject Distinguished Name
	SubjectDn *string `json:"subject_dn,omitempty" url:"subject_dn,omitempty"`
	// The X509 certificate's SHA256 thumbprint
	ThumbprintSha256 *string `json:"thumbprint_sha256,omitempty" url:"thumbprint_sha256,omitempty"`
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetClientCredentialResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetClientCredentialResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetClientCredentialResponseContent) GetKid() *string {
	if g == nil {
		return nil
	}
	return g.Kid
}

func (g *GetClientCredentialResponseContent) GetAlg() *ClientCredentialAlgorithmEnum {
	if g == nil {
		return nil
	}
	return g.Alg
}

func (g *GetClientCredentialResponseContent) GetCredentialType() *ClientCredentialTypeEnum {
	if g == nil {
		return nil
	}
	return g.CredentialType
}

func (g *GetClientCredentialResponseContent) GetSubjectDn() *string {
	if g == nil {
		return nil
	}
	return g.SubjectDn
}

func (g *GetClientCredentialResponseContent) GetThumbprintSha256() *string {
	if g == nil {
		return nil
	}
	return g.ThumbprintSha256
}

func (g *GetClientCredentialResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetClientCredentialResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetClientCredentialResponseContent) GetExpiresAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ExpiresAt
}

func (g *GetClientCredentialResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetClientCredentialResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetClientCredentialResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetClientCredentialResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	g.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetClientCredentialResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetClientCredentialResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
		ExpiresAt: internal.NewOptionalDateTime(g.ExpiresAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetClientCredentialResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetConnectionEnabledClientsResponseContent struct {
	// Clients for which the connection is enabled
	Clients []*ConnectionEnabledClient `json:"clients" url:"clients"`
	// Encoded next token
	Next *string `json:"next,omitempty" url:"next,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetConnectionEnabledClientsResponseContent) GetClients() []*ConnectionEnabledClient {
	if g == nil {
		return nil
	}
	return g.Clients
}

func (g *GetConnectionEnabledClientsResponseContent) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GetConnectionEnabledClientsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetConnectionEnabledClientsResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetConnectionEnabledClientsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetConnectionEnabledClientsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetConnectionEnabledClientsResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetConnectionEnabledClientsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetConnectionEnabledClientsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// JWKS representing an array of custom public signing keys.
type GetCustomSigningKeysResponseContent struct {
	// An array of custom public signing keys.
	Keys []*CustomSigningKeyJwk `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetCustomSigningKeysResponseContent) GetKeys() []*CustomSigningKeyJwk {
	if g == nil {
		return nil
	}
	return g.Keys
}

func (g *GetCustomSigningKeysResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCustomSigningKeysResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCustomSigningKeysResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCustomSigningKeysResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCustomSigningKeysResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// An object containing custom dictionaries for a group of screens.
type GetCustomTextsByLanguageResponseContent = map[string]interface{}

type GetEmailProviderResponseContent struct {
	// Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether the provider is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Email address to use as "from" when no other address specified.
	DefaultFromAddress *string                   `json:"default_from_address,omitempty" url:"default_from_address,omitempty"`
	Credentials        *EmailProviderCredentials `json:"credentials,omitempty" url:"credentials,omitempty"`
	Settings           *EmailProviderSettings    `json:"settings,omitempty" url:"settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEmailProviderResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetEmailProviderResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetEmailProviderResponseContent) GetDefaultFromAddress() *string {
	if g == nil {
		return nil
	}
	return g.DefaultFromAddress
}

func (g *GetEmailProviderResponseContent) GetCredentials() *EmailProviderCredentials {
	if g == nil {
		return nil
	}
	return g.Credentials
}

func (g *GetEmailProviderResponseContent) GetSettings() *EmailProviderSettings {
	if g == nil {
		return nil
	}
	return g.Settings
}

func (g *GetEmailProviderResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEmailProviderResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEmailProviderResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEmailProviderResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEmailProviderResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Encryption key
type GetEncryptionKeyResponseContent struct {
	// Key ID
	Kid   string             `json:"kid" url:"kid"`
	Type  EncryptionKeyType  `json:"type" url:"type"`
	State EncryptionKeyState `json:"state" url:"state"`
	// Key creation timestamp
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Key update timestamp
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of parent wrapping key
	ParentKid string `json:"parent_kid" url:"parent_kid"`
	// Public key in PEM format
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEncryptionKeyResponseContent) GetKid() string {
	if g == nil {
		return ""
	}
	return g.Kid
}

func (g *GetEncryptionKeyResponseContent) GetType() EncryptionKeyType {
	if g == nil {
		return ""
	}
	return g.Type
}

func (g *GetEncryptionKeyResponseContent) GetState() EncryptionKeyState {
	if g == nil {
		return ""
	}
	return g.State
}

func (g *GetEncryptionKeyResponseContent) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GetEncryptionKeyResponseContent) GetUpdatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.UpdatedAt
}

func (g *GetEncryptionKeyResponseContent) GetParentKid() string {
	if g == nil {
		return ""
	}
	return g.ParentKid
}

func (g *GetEncryptionKeyResponseContent) GetPublicKey() *string {
	if g == nil {
		return nil
	}
	return g.PublicKey
}

func (g *GetEncryptionKeyResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEncryptionKeyResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetEncryptionKeyResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetEncryptionKeyResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEncryptionKeyResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetEncryptionKeyResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewDateTime(g.CreatedAt),
		UpdatedAt: internal.NewDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetEncryptionKeyResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Metadata about a specific attempt to deliver an event
type GetEventStreamDeliveryHistoryResponseContent struct {
	// Unique identifier for the delivery
	ID string `json:"id" url:"id"`
	// Unique identifier for the event stream.
	EventStreamID string                           `json:"event_stream_id" url:"event_stream_id"`
	Status        EventStreamDeliveryStatusEnum    `json:"status" url:"status"`
	EventType     EventStreamDeliveryEventTypeEnum `json:"event_type" url:"event_type"`
	// Results of delivery attempts
	Attempts []*EventStreamDeliveryAttempt `json:"attempts" url:"attempts"`
	Event    *EventStreamCloudEvent        `json:"event,omitempty" url:"event,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEventStreamDeliveryHistoryResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetEventStreamDeliveryHistoryResponseContent) GetEventStreamID() string {
	if g == nil {
		return ""
	}
	return g.EventStreamID
}

func (g *GetEventStreamDeliveryHistoryResponseContent) GetEventType() EventStreamDeliveryEventTypeEnum {
	if g == nil {
		return ""
	}
	return g.EventType
}

func (g *GetEventStreamDeliveryHistoryResponseContent) GetAttempts() []*EventStreamDeliveryAttempt {
	if g == nil {
		return nil
	}
	return g.Attempts
}

func (g *GetEventStreamDeliveryHistoryResponseContent) GetEvent() *EventStreamCloudEvent {
	if g == nil {
		return nil
	}
	return g.Event
}

func (g *GetEventStreamDeliveryHistoryResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEventStreamDeliveryHistoryResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEventStreamDeliveryHistoryResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEventStreamDeliveryHistoryResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEventStreamDeliveryHistoryResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetFlowExecutionResponseContent struct {
	// Flow execution identifier
	ID string `json:"id" url:"id"`
	// Trace id
	TraceID string `json:"trace_id" url:"trace_id"`
	// Journey id
	JourneyID *string `json:"journey_id,omitempty" url:"journey_id,omitempty"`
	// Execution status
	Status string              `json:"status" url:"status"`
	Debug  *FlowExecutionDebug `json:"debug,omitempty" url:"debug,omitempty"`
	// The ISO 8601 formatted date when this flow execution was created.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The ISO 8601 formatted date when this flow execution was updated.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The ISO 8601 formatted date when this flow execution started.
	StartedAt *time.Time `json:"started_at,omitempty" url:"started_at,omitempty"`
	// The ISO 8601 formatted date when this flow execution ended.
	EndedAt *time.Time `json:"ended_at,omitempty" url:"ended_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetFlowExecutionResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetFlowExecutionResponseContent) GetTraceID() string {
	if g == nil {
		return ""
	}
	return g.TraceID
}

func (g *GetFlowExecutionResponseContent) GetJourneyID() *string {
	if g == nil {
		return nil
	}
	return g.JourneyID
}

func (g *GetFlowExecutionResponseContent) GetStatus() string {
	if g == nil {
		return ""
	}
	return g.Status
}

func (g *GetFlowExecutionResponseContent) GetDebug() *FlowExecutionDebug {
	if g == nil {
		return nil
	}
	return g.Debug
}

func (g *GetFlowExecutionResponseContent) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GetFlowExecutionResponseContent) GetUpdatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.UpdatedAt
}

func (g *GetFlowExecutionResponseContent) GetStartedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.StartedAt
}

func (g *GetFlowExecutionResponseContent) GetEndedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.EndedAt
}

func (g *GetFlowExecutionResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFlowExecutionResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetFlowExecutionResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		StartedAt *internal.DateTime `json:"started_at,omitempty"`
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetFlowExecutionResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.UpdatedAt = unmarshaler.UpdatedAt.Time()
	g.StartedAt = unmarshaler.StartedAt.TimePtr()
	g.EndedAt = unmarshaler.EndedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFlowExecutionResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetFlowExecutionResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		StartedAt *internal.DateTime `json:"started_at,omitempty"`
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewDateTime(g.CreatedAt),
		UpdatedAt: internal.NewDateTime(g.UpdatedAt),
		StartedAt: internal.NewOptionalDateTime(g.StartedAt),
		EndedAt:   internal.NewOptionalDateTime(g.EndedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetFlowExecutionResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianEnrollmentResponseContent struct {
	// ID for this enrollment.
	ID     string                    `json:"id" url:"id"`
	Status *GuardianEnrollmentStatus `json:"status,omitempty" url:"status,omitempty"`
	// Device name (only for push notification).
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Device identifier. This is usually the phone identifier.
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// Phone number.
	PhoneNumber *string                 `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	EnrolledAt  *GuardianEnrollmentDate `json:"enrolled_at,omitempty" url:"enrolled_at,omitempty"`
	LastAuth    *GuardianEnrollmentDate `json:"last_auth,omitempty" url:"last_auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianEnrollmentResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetGuardianEnrollmentResponseContent) GetStatus() *GuardianEnrollmentStatus {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetGuardianEnrollmentResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetGuardianEnrollmentResponseContent) GetIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.Identifier
}

func (g *GetGuardianEnrollmentResponseContent) GetPhoneNumber() *string {
	if g == nil {
		return nil
	}
	return g.PhoneNumber
}

func (g *GetGuardianEnrollmentResponseContent) GetEnrolledAt() *GuardianEnrollmentDate {
	if g == nil {
		return nil
	}
	return g.EnrolledAt
}

func (g *GetGuardianEnrollmentResponseContent) GetLastAuth() *GuardianEnrollmentDate {
	if g == nil {
		return nil
	}
	return g.LastAuth
}

func (g *GetGuardianEnrollmentResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianEnrollmentResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianEnrollmentResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianEnrollmentResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianEnrollmentResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorDuoSettingsResponseContent struct {
	Ikey *string `json:"ikey,omitempty" url:"ikey,omitempty"`
	Skey *string `json:"skey,omitempty" url:"skey,omitempty"`
	Host *string `json:"host,omitempty" url:"host,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorDuoSettingsResponseContent) GetIkey() *string {
	if g == nil {
		return nil
	}
	return g.Ikey
}

func (g *GetGuardianFactorDuoSettingsResponseContent) GetSkey() *string {
	if g == nil {
		return nil
	}
	return g.Skey
}

func (g *GetGuardianFactorDuoSettingsResponseContent) GetHost() *string {
	if g == nil {
		return nil
	}
	return g.Host
}

func (g *GetGuardianFactorDuoSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorDuoSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorDuoSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorDuoSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorDuoSettingsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorPhoneMessageTypesResponseContent struct {
	// The list of phone factors to enable on the tenant. Can include `sms` and `voice`.
	MessageTypes []GuardianFactorPhoneFactorMessageTypeEnum `json:"message_types,omitempty" url:"message_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorPhoneMessageTypesResponseContent) GetMessageTypes() []GuardianFactorPhoneFactorMessageTypeEnum {
	if g == nil {
		return nil
	}
	return g.MessageTypes
}

func (g *GetGuardianFactorPhoneMessageTypesResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorPhoneMessageTypesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorPhoneMessageTypesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorPhoneMessageTypesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorPhoneMessageTypesResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorPhoneTemplatesResponseContent struct {
	// Message sent to the user when they are invited to enroll with a phone number.
	EnrollmentMessage string `json:"enrollment_message" url:"enrollment_message"`
	// Message sent to the user when they are prompted to verify their account.
	VerificationMessage string `json:"verification_message" url:"verification_message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorPhoneTemplatesResponseContent) GetEnrollmentMessage() string {
	if g == nil {
		return ""
	}
	return g.EnrollmentMessage
}

func (g *GetGuardianFactorPhoneTemplatesResponseContent) GetVerificationMessage() string {
	if g == nil {
		return ""
	}
	return g.VerificationMessage
}

func (g *GetGuardianFactorPhoneTemplatesResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorPhoneTemplatesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorPhoneTemplatesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorPhoneTemplatesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorPhoneTemplatesResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorSmsTemplatesResponseContent struct {
	// Message sent to the user when they are invited to enroll with a phone number.
	EnrollmentMessage string `json:"enrollment_message" url:"enrollment_message"`
	// Message sent to the user when they are prompted to verify their account.
	VerificationMessage string `json:"verification_message" url:"verification_message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorSmsTemplatesResponseContent) GetEnrollmentMessage() string {
	if g == nil {
		return ""
	}
	return g.EnrollmentMessage
}

func (g *GetGuardianFactorSmsTemplatesResponseContent) GetVerificationMessage() string {
	if g == nil {
		return ""
	}
	return g.VerificationMessage
}

func (g *GetGuardianFactorSmsTemplatesResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorSmsTemplatesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorSmsTemplatesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorSmsTemplatesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorSmsTemplatesResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderApnsResponseContent struct {
	BundleID *string `json:"bundle_id,omitempty" url:"bundle_id,omitempty"`
	Sandbox  *bool   `json:"sandbox,omitempty" url:"sandbox,omitempty"`
	Enabled  *bool   `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderApnsResponseContent) GetBundleID() *string {
	if g == nil {
		return nil
	}
	return g.BundleID
}

func (g *GetGuardianFactorsProviderApnsResponseContent) GetSandbox() *bool {
	if g == nil {
		return nil
	}
	return g.Sandbox
}

func (g *GetGuardianFactorsProviderApnsResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetGuardianFactorsProviderApnsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderApnsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderApnsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderApnsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderApnsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderPhoneResponseContent struct {
	Provider *GuardianFactorsProviderSmsProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderPhoneResponseContent) GetProvider() *GuardianFactorsProviderSmsProviderEnum {
	if g == nil {
		return nil
	}
	return g.Provider
}

func (g *GetGuardianFactorsProviderPhoneResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderPhoneResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderPhoneResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderPhoneResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderPhoneResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderPhoneTwilioResponseContent struct {
	// From number
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// Copilot SID
	MessagingServiceSid *string `json:"messaging_service_sid,omitempty" url:"messaging_service_sid,omitempty"`
	// Twilio Authentication token
	AuthToken *string `json:"auth_token,omitempty" url:"auth_token,omitempty"`
	// Twilio SID
	Sid *string `json:"sid,omitempty" url:"sid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) GetFrom() *string {
	if g == nil {
		return nil
	}
	return g.From
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) GetMessagingServiceSid() *string {
	if g == nil {
		return nil
	}
	return g.MessagingServiceSid
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) GetAuthToken() *string {
	if g == nil {
		return nil
	}
	return g.AuthToken
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) GetSid() *string {
	if g == nil {
		return nil
	}
	return g.Sid
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderPhoneTwilioResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderPhoneTwilioResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderPhoneTwilioResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderPushNotificationResponseContent struct {
	Provider *GuardianFactorsProviderPushNotificationProviderDataEnum `json:"provider,omitempty" url:"provider,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderPushNotificationResponseContent) GetProvider() *GuardianFactorsProviderPushNotificationProviderDataEnum {
	if g == nil {
		return nil
	}
	return g.Provider
}

func (g *GetGuardianFactorsProviderPushNotificationResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderPushNotificationResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderPushNotificationResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderPushNotificationResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderPushNotificationResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderSmsResponseContent struct {
	Provider *GuardianFactorsProviderSmsProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderSmsResponseContent) GetProvider() *GuardianFactorsProviderSmsProviderEnum {
	if g == nil {
		return nil
	}
	return g.Provider
}

func (g *GetGuardianFactorsProviderSmsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderSmsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderSmsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderSmsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderSmsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderSmsTwilioResponseContent struct {
	// From number
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// Copilot SID
	MessagingServiceSid *string `json:"messaging_service_sid,omitempty" url:"messaging_service_sid,omitempty"`
	// Twilio Authentication token
	AuthToken *string `json:"auth_token,omitempty" url:"auth_token,omitempty"`
	// Twilio SID
	Sid *string `json:"sid,omitempty" url:"sid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) GetFrom() *string {
	if g == nil {
		return nil
	}
	return g.From
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) GetMessagingServiceSid() *string {
	if g == nil {
		return nil
	}
	return g.MessagingServiceSid
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) GetAuthToken() *string {
	if g == nil {
		return nil
	}
	return g.AuthToken
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) GetSid() *string {
	if g == nil {
		return nil
	}
	return g.Sid
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderSmsTwilioResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderSmsTwilioResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderSmsTwilioResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGuardianFactorsProviderSnsResponseContent struct {
	AwsAccessKeyID                *string `json:"aws_access_key_id,omitempty" url:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey            *string `json:"aws_secret_access_key,omitempty" url:"aws_secret_access_key,omitempty"`
	AwsRegion                     *string `json:"aws_region,omitempty" url:"aws_region,omitempty"`
	SnsApnsPlatformApplicationArn *string `json:"sns_apns_platform_application_arn,omitempty" url:"sns_apns_platform_application_arn,omitempty"`
	SnsGcmPlatformApplicationArn  *string `json:"sns_gcm_platform_application_arn,omitempty" url:"sns_gcm_platform_application_arn,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetGuardianFactorsProviderSnsResponseContent) GetAwsAccessKeyID() *string {
	if g == nil {
		return nil
	}
	return g.AwsAccessKeyID
}

func (g *GetGuardianFactorsProviderSnsResponseContent) GetAwsSecretAccessKey() *string {
	if g == nil {
		return nil
	}
	return g.AwsSecretAccessKey
}

func (g *GetGuardianFactorsProviderSnsResponseContent) GetAwsRegion() *string {
	if g == nil {
		return nil
	}
	return g.AwsRegion
}

func (g *GetGuardianFactorsProviderSnsResponseContent) GetSnsApnsPlatformApplicationArn() *string {
	if g == nil {
		return nil
	}
	return g.SnsApnsPlatformApplicationArn
}

func (g *GetGuardianFactorsProviderSnsResponseContent) GetSnsGcmPlatformApplicationArn() *string {
	if g == nil {
		return nil
	}
	return g.SnsGcmPlatformApplicationArn
}

func (g *GetGuardianFactorsProviderSnsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetGuardianFactorsProviderSnsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGuardianFactorsProviderSnsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGuardianFactorsProviderSnsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGuardianFactorsProviderSnsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Hashmap of key-value pairs where the value must be a string.
type GetHookSecretResponseContent = map[string]interface{}

type GetJobErrorResponseContent struct {
	User *GetJobUserError `json:"user,omitempty" url:"user,omitempty"`
	// Errors importing the user.
	Errors []*GetJobImportUserError `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetJobErrorResponseContent) GetUser() *GetJobUserError {
	if g == nil {
		return nil
	}
	return g.User
}

func (g *GetJobErrorResponseContent) GetErrors() []*GetJobImportUserError {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetJobErrorResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetJobErrorResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetJobErrorResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetJobErrorResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobErrorResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetJobGenericErrorResponseContent struct {
	// Status of this job.
	Status string `json:"status" url:"status"`
	// Type of job this is.
	Type string `json:"type" url:"type"`
	// When this job was created.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// ID of this job.
	ID string `json:"id" url:"id"`
	// connection_id of the connection this job uses.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// Status details.
	StatusDetails *string `json:"status_details,omitempty" url:"status_details,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetJobGenericErrorResponseContent) GetStatus() string {
	if g == nil {
		return ""
	}
	return g.Status
}

func (g *GetJobGenericErrorResponseContent) GetType() string {
	if g == nil {
		return ""
	}
	return g.Type
}

func (g *GetJobGenericErrorResponseContent) GetCreatedAt() *string {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetJobGenericErrorResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetJobGenericErrorResponseContent) GetConnectionID() *string {
	if g == nil {
		return nil
	}
	return g.ConnectionID
}

func (g *GetJobGenericErrorResponseContent) GetStatusDetails() *string {
	if g == nil {
		return nil
	}
	return g.StatusDetails
}

func (g *GetJobGenericErrorResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetJobGenericErrorResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetJobGenericErrorResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetJobGenericErrorResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobGenericErrorResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetJobGenericErrorResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetJobGenericErrorResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetJobImportUserError struct {
	// Error code.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// Error message.
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Error field.
	Path *string `json:"path,omitempty" url:"path,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetJobImportUserError) GetCode() *string {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GetJobImportUserError) GetMessage() *string {
	if g == nil {
		return nil
	}
	return g.Message
}

func (g *GetJobImportUserError) GetPath() *string {
	if g == nil {
		return nil
	}
	return g.Path
}

func (g *GetJobImportUserError) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetJobImportUserError) UnmarshalJSON(data []byte) error {
	type embed GetJobImportUserError
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetJobImportUserError(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobImportUserError) MarshalJSON() ([]byte, error) {
	type embed GetJobImportUserError
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetJobImportUserError) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// User, as provided in the import file
type GetJobUserError = map[string]interface{}

type GetOrganizationConnectionResponseContent struct {
	// ID of the connection.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled *bool                              `json:"is_signup_enabled,omitempty" url:"is_signup_enabled,omitempty"`
	Connection      *OrganizationConnectionInformation `json:"connection,omitempty" url:"connection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrganizationConnectionResponseContent) GetConnectionID() *string {
	if g == nil {
		return nil
	}
	return g.ConnectionID
}

func (g *GetOrganizationConnectionResponseContent) GetAssignMembershipOnLogin() *bool {
	if g == nil {
		return nil
	}
	return g.AssignMembershipOnLogin
}

func (g *GetOrganizationConnectionResponseContent) GetShowAsButton() *bool {
	if g == nil {
		return nil
	}
	return g.ShowAsButton
}

func (g *GetOrganizationConnectionResponseContent) GetIsSignupEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.IsSignupEnabled
}

func (g *GetOrganizationConnectionResponseContent) GetConnection() *OrganizationConnectionInformation {
	if g == nil {
		return nil
	}
	return g.Connection
}

func (g *GetOrganizationConnectionResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationConnectionResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrganizationConnectionResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrganizationConnectionResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationConnectionResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrganizationInvitationResponseContent struct {
	// The id of the user invitation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Organization identifier.
	OrganizationID *string                        `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Inviter        *OrganizationInvitationInviter `json:"inviter,omitempty" url:"inviter,omitempty"`
	Invitee        *OrganizationInvitationInvitee `json:"invitee,omitempty" url:"invitee,omitempty"`
	// The invitation url to be send to the invitee.
	InvitationURL *string `json:"invitation_url,omitempty" url:"invitation_url,omitempty"`
	// The ISO 8601 formatted timestamp representing the creation time of the invitation.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted timestamp representing the expiration time of the invitation.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// Auth0 client ID. Used to resolve the application's login initiation endpoint.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The id of the connection to force invitee to authenticate with.
	ConnectionID *string       `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	AppMetadata  *AppMetadata  `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadata `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// List of roles IDs to associated with the user.
	Roles []string `json:"roles,omitempty" url:"roles,omitempty"`
	// The id of the invitation ticket
	TicketID *string `json:"ticket_id,omitempty" url:"ticket_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrganizationInvitationResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetOrganizationInvitationResponseContent) GetOrganizationID() *string {
	if g == nil {
		return nil
	}
	return g.OrganizationID
}

func (g *GetOrganizationInvitationResponseContent) GetInviter() *OrganizationInvitationInviter {
	if g == nil {
		return nil
	}
	return g.Inviter
}

func (g *GetOrganizationInvitationResponseContent) GetInvitee() *OrganizationInvitationInvitee {
	if g == nil {
		return nil
	}
	return g.Invitee
}

func (g *GetOrganizationInvitationResponseContent) GetInvitationURL() *string {
	if g == nil {
		return nil
	}
	return g.InvitationURL
}

func (g *GetOrganizationInvitationResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetOrganizationInvitationResponseContent) GetExpiresAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ExpiresAt
}

func (g *GetOrganizationInvitationResponseContent) GetClientID() *string {
	if g == nil {
		return nil
	}
	return g.ClientID
}

func (g *GetOrganizationInvitationResponseContent) GetConnectionID() *string {
	if g == nil {
		return nil
	}
	return g.ConnectionID
}

func (g *GetOrganizationInvitationResponseContent) GetAppMetadata() *AppMetadata {
	if g == nil {
		return nil
	}
	return g.AppMetadata
}

func (g *GetOrganizationInvitationResponseContent) GetUserMetadata() *UserMetadata {
	if g == nil {
		return nil
	}
	return g.UserMetadata
}

func (g *GetOrganizationInvitationResponseContent) GetRoles() []string {
	if g == nil {
		return nil
	}
	return g.Roles
}

func (g *GetOrganizationInvitationResponseContent) GetTicketID() *string {
	if g == nil {
		return nil
	}
	return g.TicketID
}

func (g *GetOrganizationInvitationResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationInvitationResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetOrganizationInvitationResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetOrganizationInvitationResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationInvitationResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetOrganizationInvitationResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		ExpiresAt: internal.NewOptionalDateTime(g.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetOrganizationInvitationResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// An object containing template partials for a group of screens.
type GetPartialsResponseContent = map[string]interface{}

type GetPhoneTemplateResponseContent struct {
	ID           string                            `json:"id" url:"id"`
	Channel      *string                           `json:"channel,omitempty" url:"channel,omitempty"`
	Customizable *bool                             `json:"customizable,omitempty" url:"customizable,omitempty"`
	Tenant       *string                           `json:"tenant,omitempty" url:"tenant,omitempty"`
	Content      *PhoneTemplateContent             `json:"content" url:"content"`
	Type         PhoneTemplateNotificationTypeEnum `json:"type" url:"type"`
	// Whether the template is enabled (false) or disabled (true).
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPhoneTemplateResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetPhoneTemplateResponseContent) GetChannel() *string {
	if g == nil {
		return nil
	}
	return g.Channel
}

func (g *GetPhoneTemplateResponseContent) GetCustomizable() *bool {
	if g == nil {
		return nil
	}
	return g.Customizable
}

func (g *GetPhoneTemplateResponseContent) GetTenant() *string {
	if g == nil {
		return nil
	}
	return g.Tenant
}

func (g *GetPhoneTemplateResponseContent) GetContent() *PhoneTemplateContent {
	if g == nil {
		return nil
	}
	return g.Content
}

func (g *GetPhoneTemplateResponseContent) GetType() PhoneTemplateNotificationTypeEnum {
	if g == nil {
		return ""
	}
	return g.Type
}

func (g *GetPhoneTemplateResponseContent) GetDisabled() bool {
	if g == nil {
		return false
	}
	return g.Disabled
}

func (g *GetPhoneTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPhoneTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPhoneTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPhoneTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPhoneTemplateResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSCIMConfigurationDefaultMappingResponseContent struct {
	// The mapping between auth0 and SCIM
	Mapping []*SCIMMappingItem `json:"mapping,omitempty" url:"mapping,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSCIMConfigurationDefaultMappingResponseContent) GetMapping() []*SCIMMappingItem {
	if g == nil {
		return nil
	}
	return g.Mapping
}

func (g *GetSCIMConfigurationDefaultMappingResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSCIMConfigurationDefaultMappingResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSCIMConfigurationDefaultMappingResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSCIMConfigurationDefaultMappingResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSCIMConfigurationDefaultMappingResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSCIMConfigurationResponseContent struct {
	// The connection's identifier
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// The connection's identifier
	ConnectionName *string `json:"connection_name,omitempty" url:"connection_name,omitempty"`
	// The connection's strategy
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`
	// The tenant's name
	TenantName *string `json:"tenant_name,omitempty" url:"tenant_name,omitempty"`
	// User ID attribute for generating unique user ids
	UserIDAttribute *string `json:"user_id_attribute,omitempty" url:"user_id_attribute,omitempty"`
	// The mapping between auth0 and SCIM
	Mapping []*SCIMMappingItem `json:"mapping,omitempty" url:"mapping,omitempty"`
	// The Date Time Scim Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The Date Time Scim Configuration was last updated
	UpdatedOn *string `json:"updated_on,omitempty" url:"updated_on,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSCIMConfigurationResponseContent) GetConnectionID() *string {
	if g == nil {
		return nil
	}
	return g.ConnectionID
}

func (g *GetSCIMConfigurationResponseContent) GetConnectionName() *string {
	if g == nil {
		return nil
	}
	return g.ConnectionName
}

func (g *GetSCIMConfigurationResponseContent) GetStrategy() *string {
	if g == nil {
		return nil
	}
	return g.Strategy
}

func (g *GetSCIMConfigurationResponseContent) GetTenantName() *string {
	if g == nil {
		return nil
	}
	return g.TenantName
}

func (g *GetSCIMConfigurationResponseContent) GetUserIDAttribute() *string {
	if g == nil {
		return nil
	}
	return g.UserIDAttribute
}

func (g *GetSCIMConfigurationResponseContent) GetMapping() []*SCIMMappingItem {
	if g == nil {
		return nil
	}
	return g.Mapping
}

func (g *GetSCIMConfigurationResponseContent) GetCreatedAt() *string {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetSCIMConfigurationResponseContent) GetUpdatedOn() *string {
	if g == nil {
		return nil
	}
	return g.UpdatedOn
}

func (g *GetSCIMConfigurationResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSCIMConfigurationResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSCIMConfigurationResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSCIMConfigurationResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSCIMConfigurationResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The list of scim tokens for scim clients
type GetSCIMTokensResponseContent = []*SCIMTokenItem

type GetSigningKeysResponseContent struct {
	// The key id of the signing key
	Kid string `json:"kid" url:"kid"`
	// The public certificate of the signing key
	Cert string `json:"cert" url:"cert"`
	// The public certificate of the signing key in pkcs7 format
	Pkcs7 *string `json:"pkcs7,omitempty" url:"pkcs7,omitempty"`
	// True if the key is the the current key
	Current *bool `json:"current,omitempty" url:"current,omitempty"`
	// True if the key is the the next key
	Next *bool `json:"next,omitempty" url:"next,omitempty"`
	// True if the key is the the previous key
	Previous     *bool            `json:"previous,omitempty" url:"previous,omitempty"`
	CurrentSince *SigningKeysDate `json:"current_since,omitempty" url:"current_since,omitempty"`
	CurrentUntil *SigningKeysDate `json:"current_until,omitempty" url:"current_until,omitempty"`
	// The cert fingerprint
	Fingerprint string `json:"fingerprint" url:"fingerprint"`
	// The cert thumbprint
	Thumbprint string `json:"thumbprint" url:"thumbprint"`
	// True if the key is revoked
	Revoked   *bool            `json:"revoked,omitempty" url:"revoked,omitempty"`
	RevokedAt *SigningKeysDate `json:"revoked_at,omitempty" url:"revoked_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSigningKeysResponseContent) GetKid() string {
	if g == nil {
		return ""
	}
	return g.Kid
}

func (g *GetSigningKeysResponseContent) GetCert() string {
	if g == nil {
		return ""
	}
	return g.Cert
}

func (g *GetSigningKeysResponseContent) GetPkcs7() *string {
	if g == nil {
		return nil
	}
	return g.Pkcs7
}

func (g *GetSigningKeysResponseContent) GetCurrent() *bool {
	if g == nil {
		return nil
	}
	return g.Current
}

func (g *GetSigningKeysResponseContent) GetNext() *bool {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GetSigningKeysResponseContent) GetPrevious() *bool {
	if g == nil {
		return nil
	}
	return g.Previous
}

func (g *GetSigningKeysResponseContent) GetCurrentSince() *SigningKeysDate {
	if g == nil {
		return nil
	}
	return g.CurrentSince
}

func (g *GetSigningKeysResponseContent) GetCurrentUntil() *SigningKeysDate {
	if g == nil {
		return nil
	}
	return g.CurrentUntil
}

func (g *GetSigningKeysResponseContent) GetFingerprint() string {
	if g == nil {
		return ""
	}
	return g.Fingerprint
}

func (g *GetSigningKeysResponseContent) GetThumbprint() string {
	if g == nil {
		return ""
	}
	return g.Thumbprint
}

func (g *GetSigningKeysResponseContent) GetRevoked() *bool {
	if g == nil {
		return nil
	}
	return g.Revoked
}

func (g *GetSigningKeysResponseContent) GetRevokedAt() *SigningKeysDate {
	if g == nil {
		return nil
	}
	return g.RevokedAt
}

func (g *GetSigningKeysResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSigningKeysResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSigningKeysResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSigningKeysResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSigningKeysResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSuspiciousIPThrottlingSettingsResponseContent struct {
	// Whether or not suspicious IP throttling attack protections are active.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Action to take when a suspicious IP throttling threshold is violated.
	//
	//	Possible values: <code>block</code>, <code>admin_notification</code>.
	Shields   []SuspiciousIPThrottlingShieldsEnum `json:"shields,omitempty" url:"shields,omitempty"`
	Allowlist *SuspiciousIPThrottlingAllowlist    `json:"allowlist,omitempty" url:"allowlist,omitempty"`
	Stage     *SuspiciousIPThrottlingStage        `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) GetShields() []SuspiciousIPThrottlingShieldsEnum {
	if g == nil {
		return nil
	}
	return g.Shields
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) GetAllowlist() *SuspiciousIPThrottlingAllowlist {
	if g == nil {
		return nil
	}
	return g.Allowlist
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) GetStage() *SuspiciousIPThrottlingStage {
	if g == nil {
		return nil
	}
	return g.Stage
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSuspiciousIPThrottlingSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSuspiciousIPThrottlingSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSuspiciousIPThrottlingSettingsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTenantSettingsResponseContent struct {
	ChangePassword  *TenantSettingsPasswordPage `json:"change_password,omitempty" url:"change_password,omitempty"`
	GuardianMfaPage *TenantSettingsGuardianPage `json:"guardian_mfa_page,omitempty" url:"guardian_mfa_page,omitempty"`
	// Default audience for API authorization.
	DefaultAudience *string `json:"default_audience,omitempty" url:"default_audience,omitempty"`
	// Name of connection used for password grants at the `/token`endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.
	DefaultDirectory  *string                   `json:"default_directory,omitempty" url:"default_directory,omitempty"`
	ErrorPage         *TenantSettingsErrorPage  `json:"error_page,omitempty" url:"error_page,omitempty"`
	DeviceFlow        *TenantSettingsDeviceFlow `json:"device_flow,omitempty" url:"device_flow,omitempty"`
	DefaultTokenQuota *DefaultTokenQuota        `json:"default_token_quota,omitempty" url:"default_token_quota,omitempty"`
	Flags             *TenantSettingsFlags      `json:"flags,omitempty" url:"flags,omitempty"`
	// Friendly name for this tenant.
	FriendlyName *string `json:"friendly_name,omitempty" url:"friendly_name,omitempty"`
	// URL of logo to be shown for this tenant (recommended size: 150x150)
	PictureURL *string `json:"picture_url,omitempty" url:"picture_url,omitempty"`
	// End-user support email address.
	SupportEmail *string `json:"support_email,omitempty" url:"support_email,omitempty"`
	// End-user support URL.
	SupportURL *string `json:"support_url,omitempty" url:"support_url,omitempty"`
	// URLs that are valid to redirect to after logout from Auth0.
	AllowedLogoutURLs []string `json:"allowed_logout_urls,omitempty" url:"allowed_logout_urls,omitempty"`
	// Number of hours a session will stay valid.
	SessionLifetime *float64 `json:"session_lifetime,omitempty" url:"session_lifetime,omitempty"`
	// Number of hours for which a session can be inactive before the user must log in again.
	IdleSessionLifetime *float64 `json:"idle_session_lifetime,omitempty" url:"idle_session_lifetime,omitempty"`
	// Number of hours an ephemeral (non-persistent) session will stay valid.
	EphemeralSessionLifetime *float64 `json:"ephemeral_session_lifetime,omitempty" url:"ephemeral_session_lifetime,omitempty"`
	// Number of hours for which an ephemeral (non-persistent) session can be inactive before the user must log in again.
	IdleEphemeralSessionLifetime *float64 `json:"idle_ephemeral_session_lifetime,omitempty" url:"idle_ephemeral_session_lifetime,omitempty"`
	// Selected sandbox version for the extensibility environment.
	SandboxVersion *string `json:"sandbox_version,omitempty" url:"sandbox_version,omitempty"`
	// Selected sandbox version for rules and hooks extensibility.
	LegacySandboxVersion *string `json:"legacy_sandbox_version,omitempty" url:"legacy_sandbox_version,omitempty"`
	// Available sandbox versions for the extensibility environment.
	SandboxVersionsAvailable []string `json:"sandbox_versions_available,omitempty" url:"sandbox_versions_available,omitempty"`
	// The default absolute redirection uri, must be https
	DefaultRedirectionURI *string `json:"default_redirection_uri,omitempty" url:"default_redirection_uri,omitempty"`
	// Supported locales for the user interface.
	EnabledLocales []SupportedLocales        `json:"enabled_locales,omitempty" url:"enabled_locales,omitempty"`
	SessionCookie  *SessionCookieSchema      `json:"session_cookie,omitempty" url:"session_cookie,omitempty"`
	Sessions       *TenantSettingsSessions   `json:"sessions,omitempty" url:"sessions,omitempty"`
	OidcLogout     *TenantOidcLogoutSettings `json:"oidc_logout,omitempty" url:"oidc_logout,omitempty"`
	// Whether to accept an organization name instead of an ID on auth endpoints
	AllowOrganizationNameInAuthenticationAPI *bool `json:"allow_organization_name_in_authentication_api,omitempty" url:"allow_organization_name_in_authentication_api,omitempty"`
	// Whether to enable flexible factors for MFA in the PostLogin action
	CustomizeMfaInPostloginAction *bool `json:"customize_mfa_in_postlogin_action,omitempty" url:"customize_mfa_in_postlogin_action,omitempty"`
	// Supported ACR values
	AcrValuesSupported []string            `json:"acr_values_supported,omitempty" url:"acr_values_supported,omitempty"`
	Mtls               *TenantSettingsMtls `json:"mtls,omitempty" url:"mtls,omitempty"`
	// Enables the use of Pushed Authorization Requests
	PushedAuthorizationRequestsSupported *bool `json:"pushed_authorization_requests_supported,omitempty" url:"pushed_authorization_requests_supported,omitempty"`
	// Supports iss parameter in authorization responses
	AuthorizationResponseIssParameterSupported *bool `json:"authorization_response_iss_parameter_supported,omitempty" url:"authorization_response_iss_parameter_supported,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTenantSettingsResponseContent) GetChangePassword() *TenantSettingsPasswordPage {
	if g == nil {
		return nil
	}
	return g.ChangePassword
}

func (g *GetTenantSettingsResponseContent) GetGuardianMfaPage() *TenantSettingsGuardianPage {
	if g == nil {
		return nil
	}
	return g.GuardianMfaPage
}

func (g *GetTenantSettingsResponseContent) GetDefaultAudience() *string {
	if g == nil {
		return nil
	}
	return g.DefaultAudience
}

func (g *GetTenantSettingsResponseContent) GetDefaultDirectory() *string {
	if g == nil {
		return nil
	}
	return g.DefaultDirectory
}

func (g *GetTenantSettingsResponseContent) GetErrorPage() *TenantSettingsErrorPage {
	if g == nil {
		return nil
	}
	return g.ErrorPage
}

func (g *GetTenantSettingsResponseContent) GetDeviceFlow() *TenantSettingsDeviceFlow {
	if g == nil {
		return nil
	}
	return g.DeviceFlow
}

func (g *GetTenantSettingsResponseContent) GetDefaultTokenQuota() *DefaultTokenQuota {
	if g == nil {
		return nil
	}
	return g.DefaultTokenQuota
}

func (g *GetTenantSettingsResponseContent) GetFlags() *TenantSettingsFlags {
	if g == nil {
		return nil
	}
	return g.Flags
}

func (g *GetTenantSettingsResponseContent) GetFriendlyName() *string {
	if g == nil {
		return nil
	}
	return g.FriendlyName
}

func (g *GetTenantSettingsResponseContent) GetPictureURL() *string {
	if g == nil {
		return nil
	}
	return g.PictureURL
}

func (g *GetTenantSettingsResponseContent) GetSupportEmail() *string {
	if g == nil {
		return nil
	}
	return g.SupportEmail
}

func (g *GetTenantSettingsResponseContent) GetSupportURL() *string {
	if g == nil {
		return nil
	}
	return g.SupportURL
}

func (g *GetTenantSettingsResponseContent) GetAllowedLogoutURLs() []string {
	if g == nil {
		return nil
	}
	return g.AllowedLogoutURLs
}

func (g *GetTenantSettingsResponseContent) GetSessionLifetime() *float64 {
	if g == nil {
		return nil
	}
	return g.SessionLifetime
}

func (g *GetTenantSettingsResponseContent) GetIdleSessionLifetime() *float64 {
	if g == nil {
		return nil
	}
	return g.IdleSessionLifetime
}

func (g *GetTenantSettingsResponseContent) GetEphemeralSessionLifetime() *float64 {
	if g == nil {
		return nil
	}
	return g.EphemeralSessionLifetime
}

func (g *GetTenantSettingsResponseContent) GetIdleEphemeralSessionLifetime() *float64 {
	if g == nil {
		return nil
	}
	return g.IdleEphemeralSessionLifetime
}

func (g *GetTenantSettingsResponseContent) GetSandboxVersion() *string {
	if g == nil {
		return nil
	}
	return g.SandboxVersion
}

func (g *GetTenantSettingsResponseContent) GetLegacySandboxVersion() *string {
	if g == nil {
		return nil
	}
	return g.LegacySandboxVersion
}

func (g *GetTenantSettingsResponseContent) GetSandboxVersionsAvailable() []string {
	if g == nil {
		return nil
	}
	return g.SandboxVersionsAvailable
}

func (g *GetTenantSettingsResponseContent) GetDefaultRedirectionURI() *string {
	if g == nil {
		return nil
	}
	return g.DefaultRedirectionURI
}

func (g *GetTenantSettingsResponseContent) GetEnabledLocales() []SupportedLocales {
	if g == nil {
		return nil
	}
	return g.EnabledLocales
}

func (g *GetTenantSettingsResponseContent) GetSessionCookie() *SessionCookieSchema {
	if g == nil {
		return nil
	}
	return g.SessionCookie
}

func (g *GetTenantSettingsResponseContent) GetSessions() *TenantSettingsSessions {
	if g == nil {
		return nil
	}
	return g.Sessions
}

func (g *GetTenantSettingsResponseContent) GetOidcLogout() *TenantOidcLogoutSettings {
	if g == nil {
		return nil
	}
	return g.OidcLogout
}

func (g *GetTenantSettingsResponseContent) GetAllowOrganizationNameInAuthenticationAPI() *bool {
	if g == nil {
		return nil
	}
	return g.AllowOrganizationNameInAuthenticationAPI
}

func (g *GetTenantSettingsResponseContent) GetCustomizeMfaInPostloginAction() *bool {
	if g == nil {
		return nil
	}
	return g.CustomizeMfaInPostloginAction
}

func (g *GetTenantSettingsResponseContent) GetAcrValuesSupported() []string {
	if g == nil {
		return nil
	}
	return g.AcrValuesSupported
}

func (g *GetTenantSettingsResponseContent) GetMtls() *TenantSettingsMtls {
	if g == nil {
		return nil
	}
	return g.Mtls
}

func (g *GetTenantSettingsResponseContent) GetPushedAuthorizationRequestsSupported() *bool {
	if g == nil {
		return nil
	}
	return g.PushedAuthorizationRequestsSupported
}

func (g *GetTenantSettingsResponseContent) GetAuthorizationResponseIssParameterSupported() *bool {
	if g == nil {
		return nil
	}
	return g.AuthorizationResponseIssParameterSupported
}

func (g *GetTenantSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTenantSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTenantSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTenantSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTenantSettingsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetUniversalLoginTemplate struct {
	// The custom page template for the New Universal Login Experience
	Body *string `json:"body,omitempty" url:"body,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUniversalLoginTemplate) GetBody() *string {
	if g == nil {
		return nil
	}
	return g.Body
}

func (g *GetUniversalLoginTemplate) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUniversalLoginTemplate) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUniversalLoginTemplate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUniversalLoginTemplate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUniversalLoginTemplate) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetUniversalLoginTemplateResponseContent struct {
	GetUniversalLoginTemplate *GetUniversalLoginTemplate
	// The custom page template for the New Universal Login Experience
	String string

	typ string
}

func (g *GetUniversalLoginTemplateResponseContent) GetGetUniversalLoginTemplate() *GetUniversalLoginTemplate {
	if g == nil {
		return nil
	}
	return g.GetUniversalLoginTemplate
}

func (g *GetUniversalLoginTemplateResponseContent) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GetUniversalLoginTemplateResponseContent) UnmarshalJSON(data []byte) error {
	valueGetUniversalLoginTemplate := new(GetUniversalLoginTemplate)
	if err := json.Unmarshal(data, &valueGetUniversalLoginTemplate); err == nil {
		g.typ = "GetUniversalLoginTemplate"
		g.GetUniversalLoginTemplate = valueGetUniversalLoginTemplate
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GetUniversalLoginTemplateResponseContent) MarshalJSON() ([]byte, error) {
	if g.typ == "GetUniversalLoginTemplate" || g.GetUniversalLoginTemplate != nil {
		return json.Marshal(g.GetUniversalLoginTemplate)
	}
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GetUniversalLoginTemplateResponseContentVisitor interface {
	VisitGetUniversalLoginTemplate(*GetUniversalLoginTemplate) error
	VisitString(string) error
}

func (g *GetUniversalLoginTemplateResponseContent) Accept(visitor GetUniversalLoginTemplateResponseContentVisitor) error {
	if g.typ == "GetUniversalLoginTemplate" || g.GetUniversalLoginTemplate != nil {
		return visitor.VisitGetUniversalLoginTemplate(g.GetUniversalLoginTemplate)
	}
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GetUserAuthenticationMethodResponseContent struct {
	// The ID of the authentication method (auto generated)
	ID   string                       `json:"id" url:"id"`
	Type AuthenticationMethodTypeEnum `json:"type" url:"type"`
	// The authentication method status
	Confirmed *bool `json:"confirmed,omitempty" url:"confirmed,omitempty"`
	// A human-readable label to identify the authentication method
	Name                          *string                               `json:"name,omitempty" url:"name,omitempty"`
	AuthenticationMethods         []*UserAuthenticationMethodProperties `json:"authentication_methods,omitempty" url:"authentication_methods,omitempty"`
	PreferredAuthenticationMethod *PreferredAuthenticationMethodEnum    `json:"preferred_authentication_method,omitempty" url:"preferred_authentication_method,omitempty"`
	// The ID of a linked authentication method. Linked authentication methods will be deleted together.
	LinkID *string `json:"link_id,omitempty" url:"link_id,omitempty"`
	// Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Applies to email and email-verification authentication methods only. The email address used to send verification messages.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Applies to webauthn authentication methods only. The ID of the generated credential.
	KeyID *string `json:"key_id,omitempty" url:"key_id,omitempty"`
	// Applies to webauthn authentication methods only. The public key.
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`
	// Authenticator creation date
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Enrollment date
	EnrolledAt *time.Time `json:"enrolled_at,omitempty" url:"enrolled_at,omitempty"`
	// Last authentication
	LastAuthAt *time.Time `json:"last_auth_at,omitempty" url:"last_auth_at,omitempty"`
	// Applies to passkeys only. The kind of device the credential is stored on as defined by backup eligibility. "single_device" credentials cannot be backed up and synced to another device, "multi_device" credentials can be backed up if enabled by the end-user.
	CredentialDeviceType *string `json:"credential_device_type,omitempty" url:"credential_device_type,omitempty"`
	// Applies to passkeys only. Whether the credential was backed up.
	CredentialBackedUp *bool `json:"credential_backed_up,omitempty" url:"credential_backed_up,omitempty"`
	// Applies to passkeys only. The ID of the user identity linked with the authentication method.
	IdentityUserID *string `json:"identity_user_id,omitempty" url:"identity_user_id,omitempty"`
	// Applies to passkeys only. The user-agent of the browser used to create the passkey.
	UserAgent *string `json:"user_agent,omitempty" url:"user_agent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUserAuthenticationMethodResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetUserAuthenticationMethodResponseContent) GetType() AuthenticationMethodTypeEnum {
	if g == nil {
		return ""
	}
	return g.Type
}

func (g *GetUserAuthenticationMethodResponseContent) GetConfirmed() *bool {
	if g == nil {
		return nil
	}
	return g.Confirmed
}

func (g *GetUserAuthenticationMethodResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetUserAuthenticationMethodResponseContent) GetAuthenticationMethods() []*UserAuthenticationMethodProperties {
	if g == nil {
		return nil
	}
	return g.AuthenticationMethods
}

func (g *GetUserAuthenticationMethodResponseContent) GetPreferredAuthenticationMethod() *PreferredAuthenticationMethodEnum {
	if g == nil {
		return nil
	}
	return g.PreferredAuthenticationMethod
}

func (g *GetUserAuthenticationMethodResponseContent) GetLinkID() *string {
	if g == nil {
		return nil
	}
	return g.LinkID
}

func (g *GetUserAuthenticationMethodResponseContent) GetPhoneNumber() *string {
	if g == nil {
		return nil
	}
	return g.PhoneNumber
}

func (g *GetUserAuthenticationMethodResponseContent) GetEmail() *string {
	if g == nil {
		return nil
	}
	return g.Email
}

func (g *GetUserAuthenticationMethodResponseContent) GetKeyID() *string {
	if g == nil {
		return nil
	}
	return g.KeyID
}

func (g *GetUserAuthenticationMethodResponseContent) GetPublicKey() *string {
	if g == nil {
		return nil
	}
	return g.PublicKey
}

func (g *GetUserAuthenticationMethodResponseContent) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GetUserAuthenticationMethodResponseContent) GetEnrolledAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.EnrolledAt
}

func (g *GetUserAuthenticationMethodResponseContent) GetLastAuthAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastAuthAt
}

func (g *GetUserAuthenticationMethodResponseContent) GetCredentialDeviceType() *string {
	if g == nil {
		return nil
	}
	return g.CredentialDeviceType
}

func (g *GetUserAuthenticationMethodResponseContent) GetCredentialBackedUp() *bool {
	if g == nil {
		return nil
	}
	return g.CredentialBackedUp
}

func (g *GetUserAuthenticationMethodResponseContent) GetIdentityUserID() *string {
	if g == nil {
		return nil
	}
	return g.IdentityUserID
}

func (g *GetUserAuthenticationMethodResponseContent) GetUserAgent() *string {
	if g == nil {
		return nil
	}
	return g.UserAgent
}

func (g *GetUserAuthenticationMethodResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserAuthenticationMethodResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetUserAuthenticationMethodResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		EnrolledAt *internal.DateTime `json:"enrolled_at,omitempty"`
		LastAuthAt *internal.DateTime `json:"last_auth_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetUserAuthenticationMethodResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.EnrolledAt = unmarshaler.EnrolledAt.TimePtr()
	g.LastAuthAt = unmarshaler.LastAuthAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserAuthenticationMethodResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetUserAuthenticationMethodResponseContent
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		EnrolledAt *internal.DateTime `json:"enrolled_at,omitempty"`
		LastAuthAt *internal.DateTime `json:"last_auth_at,omitempty"`
	}{
		embed:      embed(*g),
		CreatedAt:  internal.NewDateTime(g.CreatedAt),
		EnrolledAt: internal.NewOptionalDateTime(g.EnrolledAt),
		LastAuthAt: internal.NewOptionalDateTime(g.LastAuthAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetUserAuthenticationMethodResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetVerifiableCredentialTemplateResponseContent struct {
	// The id of the template.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the template.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The type of the template.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The dialect of the template.
	Dialect      *string                 `json:"dialect,omitempty" url:"dialect,omitempty"`
	Presentation *MdlPresentationRequest `json:"presentation,omitempty" url:"presentation,omitempty"`
	// The custom certificate authority.
	CustomCertificateAuthority *string `json:"custom_certificate_authority,omitempty" url:"custom_certificate_authority,omitempty"`
	// The well-known trusted issuers, comma separated.
	WellKnownTrustedIssuers *string `json:"well_known_trusted_issuers,omitempty" url:"well_known_trusted_issuers,omitempty"`
	// The date and time the template was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time the template was created.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetDialect() *string {
	if g == nil {
		return nil
	}
	return g.Dialect
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetPresentation() *MdlPresentationRequest {
	if g == nil {
		return nil
	}
	return g.Presentation
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetCustomCertificateAuthority() *string {
	if g == nil {
		return nil
	}
	return g.CustomCertificateAuthority
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetWellKnownTrustedIssuers() *string {
	if g == nil {
		return nil
	}
	return g.WellKnownTrustedIssuers
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetVerifiableCredentialTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetVerifiableCredentialTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetVerifiableCredentialTemplateResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetVerifiableCredentialTemplateResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetVerifiableCredentialTemplateResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetVerifiableCredentialTemplateResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetVerifiableCredentialTemplateResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Enrollment date and time.
type GuardianEnrollmentDate = string

// Optional. Specifies which factor the user must enroll with.<br />Note: Parameter can only be used with Universal Login; it cannot be used with Classic Login or custom MFA pages.
type GuardianEnrollmentFactorEnum string

const (
	GuardianEnrollmentFactorEnumPushNotification GuardianEnrollmentFactorEnum = "push-notification"
	GuardianEnrollmentFactorEnumPhone            GuardianEnrollmentFactorEnum = "phone"
	GuardianEnrollmentFactorEnumEmail            GuardianEnrollmentFactorEnum = "email"
	GuardianEnrollmentFactorEnumOtp              GuardianEnrollmentFactorEnum = "otp"
	GuardianEnrollmentFactorEnumWebauthnRoaming  GuardianEnrollmentFactorEnum = "webauthn-roaming"
	GuardianEnrollmentFactorEnumWebauthnPlatform GuardianEnrollmentFactorEnum = "webauthn-platform"
)

func NewGuardianEnrollmentFactorEnumFromString(s string) (GuardianEnrollmentFactorEnum, error) {
	switch s {
	case "push-notification":
		return GuardianEnrollmentFactorEnumPushNotification, nil
	case "phone":
		return GuardianEnrollmentFactorEnumPhone, nil
	case "email":
		return GuardianEnrollmentFactorEnumEmail, nil
	case "otp":
		return GuardianEnrollmentFactorEnumOtp, nil
	case "webauthn-roaming":
		return GuardianEnrollmentFactorEnumWebauthnRoaming, nil
	case "webauthn-platform":
		return GuardianEnrollmentFactorEnumWebauthnPlatform, nil
	}
	var t GuardianEnrollmentFactorEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GuardianEnrollmentFactorEnum) Ptr() *GuardianEnrollmentFactorEnum {
	return &g
}

// Status of this enrollment. Can be `pending` or `confirmed`.
type GuardianEnrollmentStatus string

const (
	GuardianEnrollmentStatusPending   GuardianEnrollmentStatus = "pending"
	GuardianEnrollmentStatusConfirmed GuardianEnrollmentStatus = "confirmed"
)

func NewGuardianEnrollmentStatusFromString(s string) (GuardianEnrollmentStatus, error) {
	switch s {
	case "pending":
		return GuardianEnrollmentStatusPending, nil
	case "confirmed":
		return GuardianEnrollmentStatusConfirmed, nil
	}
	var t GuardianEnrollmentStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GuardianEnrollmentStatus) Ptr() *GuardianEnrollmentStatus {
	return &g
}

type GuardianFactor struct {
	// Whether this factor is enabled (true) or disabled (false).
	Enabled bool `json:"enabled" url:"enabled"`
	// Whether trial limits have been exceeded.
	TrialExpired *bool                   `json:"trial_expired,omitempty" url:"trial_expired,omitempty"`
	Name         *GuardianFactorNameEnum `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuardianFactor) GetEnabled() bool {
	if g == nil {
		return false
	}
	return g.Enabled
}

func (g *GuardianFactor) GetTrialExpired() *bool {
	if g == nil {
		return nil
	}
	return g.TrialExpired
}

func (g *GuardianFactor) GetName() *GuardianFactorNameEnum {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GuardianFactor) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuardianFactor) UnmarshalJSON(data []byte) error {
	type unmarshaler GuardianFactor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuardianFactor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuardianFactor) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.
type GuardianFactorNameEnum string

const (
	GuardianFactorNameEnumPushNotification GuardianFactorNameEnum = "push-notification"
	GuardianFactorNameEnumSms              GuardianFactorNameEnum = "sms"
	GuardianFactorNameEnumEmail            GuardianFactorNameEnum = "email"
	GuardianFactorNameEnumDuo              GuardianFactorNameEnum = "duo"
	GuardianFactorNameEnumOtp              GuardianFactorNameEnum = "otp"
	GuardianFactorNameEnumWebauthnRoaming  GuardianFactorNameEnum = "webauthn-roaming"
	GuardianFactorNameEnumWebauthnPlatform GuardianFactorNameEnum = "webauthn-platform"
	GuardianFactorNameEnumRecoveryCode     GuardianFactorNameEnum = "recovery-code"
)

func NewGuardianFactorNameEnumFromString(s string) (GuardianFactorNameEnum, error) {
	switch s {
	case "push-notification":
		return GuardianFactorNameEnumPushNotification, nil
	case "sms":
		return GuardianFactorNameEnumSms, nil
	case "email":
		return GuardianFactorNameEnumEmail, nil
	case "duo":
		return GuardianFactorNameEnumDuo, nil
	case "otp":
		return GuardianFactorNameEnumOtp, nil
	case "webauthn-roaming":
		return GuardianFactorNameEnumWebauthnRoaming, nil
	case "webauthn-platform":
		return GuardianFactorNameEnumWebauthnPlatform, nil
	case "recovery-code":
		return GuardianFactorNameEnumRecoveryCode, nil
	}
	var t GuardianFactorNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GuardianFactorNameEnum) Ptr() *GuardianFactorNameEnum {
	return &g
}

type GuardianFactorPhoneFactorMessageTypeEnum string

const (
	GuardianFactorPhoneFactorMessageTypeEnumSms   GuardianFactorPhoneFactorMessageTypeEnum = "sms"
	GuardianFactorPhoneFactorMessageTypeEnumVoice GuardianFactorPhoneFactorMessageTypeEnum = "voice"
)

func NewGuardianFactorPhoneFactorMessageTypeEnumFromString(s string) (GuardianFactorPhoneFactorMessageTypeEnum, error) {
	switch s {
	case "sms":
		return GuardianFactorPhoneFactorMessageTypeEnumSms, nil
	case "voice":
		return GuardianFactorPhoneFactorMessageTypeEnumVoice, nil
	}
	var t GuardianFactorPhoneFactorMessageTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GuardianFactorPhoneFactorMessageTypeEnum) Ptr() *GuardianFactorPhoneFactorMessageTypeEnum {
	return &g
}

type GuardianFactorsProviderPushNotificationProviderDataEnum string

const (
	GuardianFactorsProviderPushNotificationProviderDataEnumGuardian GuardianFactorsProviderPushNotificationProviderDataEnum = "guardian"
	GuardianFactorsProviderPushNotificationProviderDataEnumSns      GuardianFactorsProviderPushNotificationProviderDataEnum = "sns"
	GuardianFactorsProviderPushNotificationProviderDataEnumDirect   GuardianFactorsProviderPushNotificationProviderDataEnum = "direct"
)

func NewGuardianFactorsProviderPushNotificationProviderDataEnumFromString(s string) (GuardianFactorsProviderPushNotificationProviderDataEnum, error) {
	switch s {
	case "guardian":
		return GuardianFactorsProviderPushNotificationProviderDataEnumGuardian, nil
	case "sns":
		return GuardianFactorsProviderPushNotificationProviderDataEnumSns, nil
	case "direct":
		return GuardianFactorsProviderPushNotificationProviderDataEnumDirect, nil
	}
	var t GuardianFactorsProviderPushNotificationProviderDataEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GuardianFactorsProviderPushNotificationProviderDataEnum) Ptr() *GuardianFactorsProviderPushNotificationProviderDataEnum {
	return &g
}

type GuardianFactorsProviderSmsProviderEnum string

const (
	GuardianFactorsProviderSmsProviderEnumAuth0            GuardianFactorsProviderSmsProviderEnum = "auth0"
	GuardianFactorsProviderSmsProviderEnumTwilio           GuardianFactorsProviderSmsProviderEnum = "twilio"
	GuardianFactorsProviderSmsProviderEnumPhoneMessageHook GuardianFactorsProviderSmsProviderEnum = "phone-message-hook"
)

func NewGuardianFactorsProviderSmsProviderEnumFromString(s string) (GuardianFactorsProviderSmsProviderEnum, error) {
	switch s {
	case "auth0":
		return GuardianFactorsProviderSmsProviderEnumAuth0, nil
	case "twilio":
		return GuardianFactorsProviderSmsProviderEnumTwilio, nil
	case "phone-message-hook":
		return GuardianFactorsProviderSmsProviderEnumPhoneMessageHook, nil
	}
	var t GuardianFactorsProviderSmsProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GuardianFactorsProviderSmsProviderEnum) Ptr() *GuardianFactorsProviderSmsProviderEnum {
	return &g
}

// This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.
type Identity struct {
	// user_id of the identity to be verified.
	UserID   string               `json:"user_id" url:"user_id"`
	Provider IdentityProviderEnum `json:"provider" url:"provider"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Identity) GetUserID() string {
	if i == nil {
		return ""
	}
	return i.UserID
}

func (i *Identity) GetProvider() IdentityProviderEnum {
	if i == nil {
		return ""
	}
	return i.Provider
}

func (i *Identity) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Identity) UnmarshalJSON(data []byte) error {
	type unmarshaler Identity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Identity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Identity) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Identity provider name of the identity (e.g. `google-oauth2`).
type IdentityProviderEnum string

const (
	IdentityProviderEnumAd                  IdentityProviderEnum = "ad"
	IdentityProviderEnumAdfs                IdentityProviderEnum = "adfs"
	IdentityProviderEnumAmazon              IdentityProviderEnum = "amazon"
	IdentityProviderEnumApple               IdentityProviderEnum = "apple"
	IdentityProviderEnumDropbox             IdentityProviderEnum = "dropbox"
	IdentityProviderEnumBitbucket           IdentityProviderEnum = "bitbucket"
	IdentityProviderEnumAol                 IdentityProviderEnum = "aol"
	IdentityProviderEnumAuth0Oidc           IdentityProviderEnum = "auth0-oidc"
	IdentityProviderEnumAuth0               IdentityProviderEnum = "auth0"
	IdentityProviderEnumBaidu               IdentityProviderEnum = "baidu"
	IdentityProviderEnumBitly               IdentityProviderEnum = "bitly"
	IdentityProviderEnumBox                 IdentityProviderEnum = "box"
	IdentityProviderEnumCustom              IdentityProviderEnum = "custom"
	IdentityProviderEnumDaccount            IdentityProviderEnum = "daccount"
	IdentityProviderEnumDwolla              IdentityProviderEnum = "dwolla"
	IdentityProviderEnumEmail               IdentityProviderEnum = "email"
	IdentityProviderEnumEvernoteSandbox     IdentityProviderEnum = "evernote-sandbox"
	IdentityProviderEnumEvernote            IdentityProviderEnum = "evernote"
	IdentityProviderEnumExact               IdentityProviderEnum = "exact"
	IdentityProviderEnumFacebook            IdentityProviderEnum = "facebook"
	IdentityProviderEnumFitbit              IdentityProviderEnum = "fitbit"
	IdentityProviderEnumFlickr              IdentityProviderEnum = "flickr"
	IdentityProviderEnumGithub              IdentityProviderEnum = "github"
	IdentityProviderEnumGoogleApps          IdentityProviderEnum = "google-apps"
	IdentityProviderEnumGoogleOauth2        IdentityProviderEnum = "google-oauth2"
	IdentityProviderEnumInstagram           IdentityProviderEnum = "instagram"
	IdentityProviderEnumIP                  IdentityProviderEnum = "ip"
	IdentityProviderEnumLine                IdentityProviderEnum = "line"
	IdentityProviderEnumLinkedin            IdentityProviderEnum = "linkedin"
	IdentityProviderEnumMiicard             IdentityProviderEnum = "miicard"
	IdentityProviderEnumOauth1              IdentityProviderEnum = "oauth1"
	IdentityProviderEnumOauth2              IdentityProviderEnum = "oauth2"
	IdentityProviderEnumOffice365           IdentityProviderEnum = "office365"
	IdentityProviderEnumOidc                IdentityProviderEnum = "oidc"
	IdentityProviderEnumOkta                IdentityProviderEnum = "okta"
	IdentityProviderEnumPaypal              IdentityProviderEnum = "paypal"
	IdentityProviderEnumPaypalSandbox       IdentityProviderEnum = "paypal-sandbox"
	IdentityProviderEnumPingfederate        IdentityProviderEnum = "pingfederate"
	IdentityProviderEnumPlanningcenter      IdentityProviderEnum = "planningcenter"
	IdentityProviderEnumRenren              IdentityProviderEnum = "renren"
	IdentityProviderEnumSalesforceCommunity IdentityProviderEnum = "salesforce-community"
	IdentityProviderEnumSalesforceSandbox   IdentityProviderEnum = "salesforce-sandbox"
	IdentityProviderEnumSalesforce          IdentityProviderEnum = "salesforce"
	IdentityProviderEnumSamlp               IdentityProviderEnum = "samlp"
	IdentityProviderEnumSharepoint          IdentityProviderEnum = "sharepoint"
	IdentityProviderEnumShopify             IdentityProviderEnum = "shopify"
	IdentityProviderEnumShop                IdentityProviderEnum = "shop"
	IdentityProviderEnumSms                 IdentityProviderEnum = "sms"
	IdentityProviderEnumSoundcloud          IdentityProviderEnum = "soundcloud"
	IdentityProviderEnumThecitySandbox      IdentityProviderEnum = "thecity-sandbox"
	IdentityProviderEnumThecity             IdentityProviderEnum = "thecity"
	IdentityProviderEnumThirtysevensignals  IdentityProviderEnum = "thirtysevensignals"
	IdentityProviderEnumTwitter             IdentityProviderEnum = "twitter"
	IdentityProviderEnumUntappd             IdentityProviderEnum = "untappd"
	IdentityProviderEnumVkontakte           IdentityProviderEnum = "vkontakte"
	IdentityProviderEnumWaad                IdentityProviderEnum = "waad"
	IdentityProviderEnumWeibo               IdentityProviderEnum = "weibo"
	IdentityProviderEnumWindowslive         IdentityProviderEnum = "windowslive"
	IdentityProviderEnumWordpress           IdentityProviderEnum = "wordpress"
	IdentityProviderEnumYahoo               IdentityProviderEnum = "yahoo"
	IdentityProviderEnumYammer              IdentityProviderEnum = "yammer"
	IdentityProviderEnumYandex              IdentityProviderEnum = "yandex"
)

func NewIdentityProviderEnumFromString(s string) (IdentityProviderEnum, error) {
	switch s {
	case "ad":
		return IdentityProviderEnumAd, nil
	case "adfs":
		return IdentityProviderEnumAdfs, nil
	case "amazon":
		return IdentityProviderEnumAmazon, nil
	case "apple":
		return IdentityProviderEnumApple, nil
	case "dropbox":
		return IdentityProviderEnumDropbox, nil
	case "bitbucket":
		return IdentityProviderEnumBitbucket, nil
	case "aol":
		return IdentityProviderEnumAol, nil
	case "auth0-oidc":
		return IdentityProviderEnumAuth0Oidc, nil
	case "auth0":
		return IdentityProviderEnumAuth0, nil
	case "baidu":
		return IdentityProviderEnumBaidu, nil
	case "bitly":
		return IdentityProviderEnumBitly, nil
	case "box":
		return IdentityProviderEnumBox, nil
	case "custom":
		return IdentityProviderEnumCustom, nil
	case "daccount":
		return IdentityProviderEnumDaccount, nil
	case "dwolla":
		return IdentityProviderEnumDwolla, nil
	case "email":
		return IdentityProviderEnumEmail, nil
	case "evernote-sandbox":
		return IdentityProviderEnumEvernoteSandbox, nil
	case "evernote":
		return IdentityProviderEnumEvernote, nil
	case "exact":
		return IdentityProviderEnumExact, nil
	case "facebook":
		return IdentityProviderEnumFacebook, nil
	case "fitbit":
		return IdentityProviderEnumFitbit, nil
	case "flickr":
		return IdentityProviderEnumFlickr, nil
	case "github":
		return IdentityProviderEnumGithub, nil
	case "google-apps":
		return IdentityProviderEnumGoogleApps, nil
	case "google-oauth2":
		return IdentityProviderEnumGoogleOauth2, nil
	case "instagram":
		return IdentityProviderEnumInstagram, nil
	case "ip":
		return IdentityProviderEnumIP, nil
	case "line":
		return IdentityProviderEnumLine, nil
	case "linkedin":
		return IdentityProviderEnumLinkedin, nil
	case "miicard":
		return IdentityProviderEnumMiicard, nil
	case "oauth1":
		return IdentityProviderEnumOauth1, nil
	case "oauth2":
		return IdentityProviderEnumOauth2, nil
	case "office365":
		return IdentityProviderEnumOffice365, nil
	case "oidc":
		return IdentityProviderEnumOidc, nil
	case "okta":
		return IdentityProviderEnumOkta, nil
	case "paypal":
		return IdentityProviderEnumPaypal, nil
	case "paypal-sandbox":
		return IdentityProviderEnumPaypalSandbox, nil
	case "pingfederate":
		return IdentityProviderEnumPingfederate, nil
	case "planningcenter":
		return IdentityProviderEnumPlanningcenter, nil
	case "renren":
		return IdentityProviderEnumRenren, nil
	case "salesforce-community":
		return IdentityProviderEnumSalesforceCommunity, nil
	case "salesforce-sandbox":
		return IdentityProviderEnumSalesforceSandbox, nil
	case "salesforce":
		return IdentityProviderEnumSalesforce, nil
	case "samlp":
		return IdentityProviderEnumSamlp, nil
	case "sharepoint":
		return IdentityProviderEnumSharepoint, nil
	case "shopify":
		return IdentityProviderEnumShopify, nil
	case "shop":
		return IdentityProviderEnumShop, nil
	case "sms":
		return IdentityProviderEnumSms, nil
	case "soundcloud":
		return IdentityProviderEnumSoundcloud, nil
	case "thecity-sandbox":
		return IdentityProviderEnumThecitySandbox, nil
	case "thecity":
		return IdentityProviderEnumThecity, nil
	case "thirtysevensignals":
		return IdentityProviderEnumThirtysevensignals, nil
	case "twitter":
		return IdentityProviderEnumTwitter, nil
	case "untappd":
		return IdentityProviderEnumUntappd, nil
	case "vkontakte":
		return IdentityProviderEnumVkontakte, nil
	case "waad":
		return IdentityProviderEnumWaad, nil
	case "weibo":
		return IdentityProviderEnumWeibo, nil
	case "windowslive":
		return IdentityProviderEnumWindowslive, nil
	case "wordpress":
		return IdentityProviderEnumWordpress, nil
	case "yahoo":
		return IdentityProviderEnumYahoo, nil
	case "yammer":
		return IdentityProviderEnumYammer, nil
	case "yandex":
		return IdentityProviderEnumYandex, nil
	}
	var t IdentityProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IdentityProviderEnum) Ptr() *IdentityProviderEnum {
	return &i
}

// Encryption key
type ImportEncryptionKeyResponseContent struct {
	// Key ID
	Kid   string             `json:"kid" url:"kid"`
	Type  EncryptionKeyType  `json:"type" url:"type"`
	State EncryptionKeyState `json:"state" url:"state"`
	// Key creation timestamp
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Key update timestamp
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of parent wrapping key
	ParentKid string `json:"parent_kid" url:"parent_kid"`
	// Public key in PEM format
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *ImportEncryptionKeyResponseContent) GetKid() string {
	if i == nil {
		return ""
	}
	return i.Kid
}

func (i *ImportEncryptionKeyResponseContent) GetType() EncryptionKeyType {
	if i == nil {
		return ""
	}
	return i.Type
}

func (i *ImportEncryptionKeyResponseContent) GetState() EncryptionKeyState {
	if i == nil {
		return ""
	}
	return i.State
}

func (i *ImportEncryptionKeyResponseContent) GetCreatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.CreatedAt
}

func (i *ImportEncryptionKeyResponseContent) GetUpdatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.UpdatedAt
}

func (i *ImportEncryptionKeyResponseContent) GetParentKid() string {
	if i == nil {
		return ""
	}
	return i.ParentKid
}

func (i *ImportEncryptionKeyResponseContent) GetPublicKey() *string {
	if i == nil {
		return nil
	}
	return i.PublicKey
}

func (i *ImportEncryptionKeyResponseContent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImportEncryptionKeyResponseContent) UnmarshalJSON(data []byte) error {
	type embed ImportEncryptionKeyResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImportEncryptionKeyResponseContent(unmarshaler.embed)
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	i.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImportEncryptionKeyResponseContent) MarshalJSON() ([]byte, error) {
	type embed ImportEncryptionKeyResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*i),
		CreatedAt: internal.NewDateTime(i.CreatedAt),
		UpdatedAt: internal.NewDateTime(i.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *ImportEncryptionKeyResponseContent) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Integration defines a self contained functioning unit which partners
// publish. A partner may create one or many of these integrations.
type Integration struct {
	// id is a system generated GUID. This same ID is designed to be federated in
	// all the applicable localities.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// catalog_id refers to the ID in the marketplace catalog
	CatalogID *string `json:"catalog_id,omitempty" url:"catalog_id,omitempty"`
	// url_slug refers to the url_slug in the marketplace catalog
	URLSlug *string `json:"url_slug,omitempty" url:"url_slug,omitempty"`
	// partner_id is the foreign key reference to the partner account this
	// integration belongs to.
	PartnerID *string `json:"partner_id,omitempty" url:"partner_id,omitempty"`
	// name is the integration name, which will be used for display purposes in
	// the marketplace.
	//
	// To start we're going to make sure the display name is at least 3
	// characters. Can adjust this easily later.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// description adds more text for the integration name -- also relevant for
	// the marketplace listing.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// short_description is the brief description of the integration, which is used for display purposes in cards
	ShortDescription  *string                     `json:"short_description,omitempty" url:"short_description,omitempty"`
	Logo              *string                     `json:"logo,omitempty" url:"logo,omitempty"`
	FeatureType       *IntegrationFeatureTypeEnum `json:"feature_type,omitempty" url:"feature_type,omitempty"`
	TermsOfUseURL     *string                     `json:"terms_of_use_url,omitempty" url:"terms_of_use_url,omitempty"`
	PrivacyPolicyURL  *string                     `json:"privacy_policy_url,omitempty" url:"privacy_policy_url,omitempty"`
	PublicSupportLink *string                     `json:"public_support_link,omitempty" url:"public_support_link,omitempty"`
	CurrentRelease    *IntegrationRelease         `json:"current_release,omitempty" url:"current_release,omitempty"`
	CreatedAt         *time.Time                  `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt         *time.Time                  `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Integration) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *Integration) GetCatalogID() *string {
	if i == nil {
		return nil
	}
	return i.CatalogID
}

func (i *Integration) GetURLSlug() *string {
	if i == nil {
		return nil
	}
	return i.URLSlug
}

func (i *Integration) GetPartnerID() *string {
	if i == nil {
		return nil
	}
	return i.PartnerID
}

func (i *Integration) GetName() *string {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *Integration) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *Integration) GetShortDescription() *string {
	if i == nil {
		return nil
	}
	return i.ShortDescription
}

func (i *Integration) GetLogo() *string {
	if i == nil {
		return nil
	}
	return i.Logo
}

func (i *Integration) GetFeatureType() *IntegrationFeatureTypeEnum {
	if i == nil {
		return nil
	}
	return i.FeatureType
}

func (i *Integration) GetTermsOfUseURL() *string {
	if i == nil {
		return nil
	}
	return i.TermsOfUseURL
}

func (i *Integration) GetPrivacyPolicyURL() *string {
	if i == nil {
		return nil
	}
	return i.PrivacyPolicyURL
}

func (i *Integration) GetPublicSupportLink() *string {
	if i == nil {
		return nil
	}
	return i.PublicSupportLink
}

func (i *Integration) GetCurrentRelease() *IntegrationRelease {
	if i == nil {
		return nil
	}
	return i.CurrentRelease
}

func (i *Integration) GetCreatedAt() *time.Time {
	if i == nil {
		return nil
	}
	return i.CreatedAt
}

func (i *Integration) GetUpdatedAt() *time.Time {
	if i == nil {
		return nil
	}
	return i.UpdatedAt
}

func (i *Integration) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Integration) UnmarshalJSON(data []byte) error {
	type embed Integration
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Integration(unmarshaler.embed)
	i.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	i.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Integration) MarshalJSON() ([]byte, error) {
	type embed Integration
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*i),
		CreatedAt: internal.NewOptionalDateTime(i.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(i.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *Integration) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// feature_type is the type of the integration.
type IntegrationFeatureTypeEnum string

const (
	IntegrationFeatureTypeEnumUnspecified      IntegrationFeatureTypeEnum = "unspecified"
	IntegrationFeatureTypeEnumAction           IntegrationFeatureTypeEnum = "action"
	IntegrationFeatureTypeEnumSocialConnection IntegrationFeatureTypeEnum = "social_connection"
	IntegrationFeatureTypeEnumLogStream        IntegrationFeatureTypeEnum = "log_stream"
	IntegrationFeatureTypeEnumSSOIntegration   IntegrationFeatureTypeEnum = "sso_integration"
	IntegrationFeatureTypeEnumSmsProvider      IntegrationFeatureTypeEnum = "sms_provider"
)

func NewIntegrationFeatureTypeEnumFromString(s string) (IntegrationFeatureTypeEnum, error) {
	switch s {
	case "unspecified":
		return IntegrationFeatureTypeEnumUnspecified, nil
	case "action":
		return IntegrationFeatureTypeEnumAction, nil
	case "social_connection":
		return IntegrationFeatureTypeEnumSocialConnection, nil
	case "log_stream":
		return IntegrationFeatureTypeEnumLogStream, nil
	case "sso_integration":
		return IntegrationFeatureTypeEnumSSOIntegration, nil
	case "sms_provider":
		return IntegrationFeatureTypeEnumSmsProvider, nil
	}
	var t IntegrationFeatureTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationFeatureTypeEnum) Ptr() *IntegrationFeatureTypeEnum {
	return &i
}

type IntegrationRelease struct {
	// The id of the associated IntegrationRelease
	ID      *string            `json:"id,omitempty" url:"id,omitempty"`
	Trigger *ActionTrigger     `json:"trigger,omitempty" url:"trigger,omitempty"`
	Semver  *IntegrationSemVer `json:"semver,omitempty" url:"semver,omitempty"`
	// required_secrets declares all the necessary secrets for an integration to
	// work.
	RequiredSecrets []*IntegrationRequiredParam `json:"required_secrets,omitempty" url:"required_secrets,omitempty"`
	// required_configuration declares all the necessary configuration fields for an integration to work.
	RequiredConfiguration []*IntegrationRequiredParam `json:"required_configuration,omitempty" url:"required_configuration,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (i *IntegrationRelease) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *IntegrationRelease) GetTrigger() *ActionTrigger {
	if i == nil {
		return nil
	}
	return i.Trigger
}

func (i *IntegrationRelease) GetSemver() *IntegrationSemVer {
	if i == nil {
		return nil
	}
	return i.Semver
}

func (i *IntegrationRelease) GetRequiredSecrets() []*IntegrationRequiredParam {
	if i == nil {
		return nil
	}
	return i.RequiredSecrets
}

func (i *IntegrationRelease) GetRequiredConfiguration() []*IntegrationRequiredParam {
	if i == nil {
		return nil
	}
	return i.RequiredConfiguration
}

func (i *IntegrationRelease) GetExtraProperties() map[string]interface{} {
	return i.ExtraProperties
}

func (i *IntegrationRelease) UnmarshalJSON(data []byte) error {
	type embed IntegrationRelease
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = IntegrationRelease(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.ExtraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationRelease) MarshalJSON() ([]byte, error) {
	type embed IntegrationRelease
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, i.ExtraProperties)
}

func (i *IntegrationRelease) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Param are form input values, primarily utilized when specifying secrets and
// configuration values for actions.
//
// These are especially important for partner integrations -- but can be
// exposed to tenant admins as well if they want to parameterize their custom
// actions.
type IntegrationRequiredParam struct {
	Type *IntegrationRequiredParamTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// The name of the parameter.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The flag for if this parameter is required.
	Required *bool `json:"required,omitempty" url:"required,omitempty"`
	// The temp flag for if this parameter is required (experimental; for Labs use only).
	Optional *bool `json:"optional,omitempty" url:"optional,omitempty"`
	// The short label for this parameter.
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// The lengthier description for this parameter.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The default value for this parameter.
	DefaultValue *string `json:"default_value,omitempty" url:"default_value,omitempty"`
	// Placeholder text for this parameter.
	Placeholder *string `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	// The allowable options for this param.
	Options []*IntegrationRequiredParamOption `json:"options,omitempty" url:"options,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationRequiredParam) GetType() *IntegrationRequiredParamTypeEnum {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *IntegrationRequiredParam) GetName() *string {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *IntegrationRequiredParam) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *IntegrationRequiredParam) GetOptional() *bool {
	if i == nil {
		return nil
	}
	return i.Optional
}

func (i *IntegrationRequiredParam) GetLabel() *string {
	if i == nil {
		return nil
	}
	return i.Label
}

func (i *IntegrationRequiredParam) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *IntegrationRequiredParam) GetDefaultValue() *string {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *IntegrationRequiredParam) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *IntegrationRequiredParam) GetOptions() []*IntegrationRequiredParamOption {
	if i == nil {
		return nil
	}
	return i.Options
}

func (i *IntegrationRequiredParam) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationRequiredParam) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationRequiredParam
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationRequiredParam(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationRequiredParam) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntegrationRequiredParamOption struct {
	// The value of an option that will be used within the application.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	// The display value of an option suitable for displaying in a UI.
	Label *string `json:"label,omitempty" url:"label,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationRequiredParamOption) GetValue() *string {
	if i == nil {
		return nil
	}
	return i.Value
}

func (i *IntegrationRequiredParamOption) GetLabel() *string {
	if i == nil {
		return nil
	}
	return i.Label
}

func (i *IntegrationRequiredParamOption) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationRequiredParamOption) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationRequiredParamOption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationRequiredParamOption(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationRequiredParamOption) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntegrationRequiredParamTypeEnum string

const (
	IntegrationRequiredParamTypeEnumUnspecified IntegrationRequiredParamTypeEnum = "UNSPECIFIED"
	IntegrationRequiredParamTypeEnumString      IntegrationRequiredParamTypeEnum = "STRING"
)

func NewIntegrationRequiredParamTypeEnumFromString(s string) (IntegrationRequiredParamTypeEnum, error) {
	switch s {
	case "UNSPECIFIED":
		return IntegrationRequiredParamTypeEnumUnspecified, nil
	case "STRING":
		return IntegrationRequiredParamTypeEnumString, nil
	}
	var t IntegrationRequiredParamTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationRequiredParamTypeEnum) Ptr() *IntegrationRequiredParamTypeEnum {
	return &i
}

// Semver denotes the major.minor version of an integration release
type IntegrationSemVer struct {
	// Major is the major number of a semver
	Major *int `json:"major,omitempty" url:"major,omitempty"`
	// Minior is the minior number of a semver
	Minor *int `json:"minor,omitempty" url:"minor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationSemVer) GetMajor() *int {
	if i == nil {
		return nil
	}
	return i.Major
}

func (i *IntegrationSemVer) GetMinor() *int {
	if i == nil {
		return nil
	}
	return i.Minor
}

func (i *IntegrationSemVer) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationSemVer) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationSemVer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationSemVer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationSemVer) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Format of the file. Must be `json` or `csv`.
type JobFileFormatEnum string

const (
	JobFileFormatEnumJSON JobFileFormatEnum = "json"
	JobFileFormatEnumCsv  JobFileFormatEnum = "csv"
)

func NewJobFileFormatEnumFromString(s string) (JobFileFormatEnum, error) {
	switch s {
	case "json":
		return JobFileFormatEnumJSON, nil
	case "csv":
		return JobFileFormatEnumCsv, nil
	}
	var t JobFileFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JobFileFormatEnum) Ptr() *JobFileFormatEnum {
	return &j
}

type ListActionBindingsPaginatedResponseContent struct {
	// The total result count.
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	// Page index of the results being returned. First page is 0.
	Page *float64 `json:"page,omitempty" url:"page,omitempty"`
	// Number of results per page.
	PerPage *float64 `json:"per_page,omitempty" url:"per_page,omitempty"`
	// The list of actions that are bound to this trigger in the order in which they will be executed.
	Bindings []*ActionBinding `json:"bindings,omitempty" url:"bindings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListActionBindingsPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListActionBindingsPaginatedResponseContent) GetPage() *float64 {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListActionBindingsPaginatedResponseContent) GetPerPage() *float64 {
	if l == nil {
		return nil
	}
	return l.PerPage
}

func (l *ListActionBindingsPaginatedResponseContent) GetBindings() []*ActionBinding {
	if l == nil {
		return nil
	}
	return l.Bindings
}

func (l *ListActionBindingsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListActionBindingsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListActionBindingsPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListActionBindingsPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListActionBindingsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListActionTriggersResponseContent struct {
	Triggers []*ActionTrigger `json:"triggers,omitempty" url:"triggers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListActionTriggersResponseContent) GetTriggers() []*ActionTrigger {
	if l == nil {
		return nil
	}
	return l.Triggers
}

func (l *ListActionTriggersResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListActionTriggersResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListActionTriggersResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListActionTriggersResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListActionTriggersResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListActionVersionsPaginatedResponseContent struct {
	// The total result count.
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	// Page index of the results being returned. First page is 0.
	Page *float64 `json:"page,omitempty" url:"page,omitempty"`
	// Number of results per page.
	PerPage  *float64         `json:"per_page,omitempty" url:"per_page,omitempty"`
	Versions []*ActionVersion `json:"versions,omitempty" url:"versions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListActionVersionsPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListActionVersionsPaginatedResponseContent) GetPage() *float64 {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListActionVersionsPaginatedResponseContent) GetPerPage() *float64 {
	if l == nil {
		return nil
	}
	return l.PerPage
}

func (l *ListActionVersionsPaginatedResponseContent) GetVersions() []*ActionVersion {
	if l == nil {
		return nil
	}
	return l.Versions
}

func (l *ListActionVersionsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListActionVersionsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListActionVersionsPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListActionVersionsPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListActionVersionsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListAculsOffsetPaginatedResponseContent struct {
	Configs []*AculResponseContent `json:"configs,omitempty" url:"configs,omitempty"`
	// the index of the first configuration in the response (before filtering)
	Start *float64 `json:"start,omitempty" url:"start,omitempty"`
	// the maximum number of configurations shown per page (before filtering)
	Limit *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	// the total number of configurations on this tenant
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListAculsOffsetPaginatedResponseContent) GetConfigs() []*AculResponseContent {
	if l == nil {
		return nil
	}
	return l.Configs
}

func (l *ListAculsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListAculsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListAculsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListAculsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAculsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAculsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAculsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAculsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListBrandingPhoneProvidersResponseContent struct {
	Providers []*PhoneProviderSchemaMasked `json:"providers,omitempty" url:"providers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBrandingPhoneProvidersResponseContent) GetProviders() []*PhoneProviderSchemaMasked {
	if l == nil {
		return nil
	}
	return l.Providers
}

func (l *ListBrandingPhoneProvidersResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBrandingPhoneProvidersResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBrandingPhoneProvidersResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBrandingPhoneProvidersResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBrandingPhoneProvidersResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListClientConnectionsResponseContent struct {
	Connections []*ConnectionForList `json:"connections" url:"connections"`
	// Encoded next token
	Next *string `json:"next,omitempty" url:"next,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *ListClientConnectionsResponseContent) GetConnections() []*ConnectionForList {
	if l == nil {
		return nil
	}
	return l.Connections
}

func (l *ListClientConnectionsResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListClientConnectionsResponseContent) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *ListClientConnectionsResponseContent) UnmarshalJSON(data []byte) error {
	type embed ListClientConnectionsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListClientConnectionsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListClientConnectionsResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListClientConnectionsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *ListClientConnectionsResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListClientGrantOrganizationsPaginatedResponseContent struct {
	// Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours.
	Next          *string         `json:"next,omitempty" url:"next,omitempty"`
	Organizations []*Organization `json:"organizations,omitempty" url:"organizations,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListClientGrantOrganizationsPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListClientGrantOrganizationsPaginatedResponseContent) GetOrganizations() []*Organization {
	if l == nil {
		return nil
	}
	return l.Organizations
}

func (l *ListClientGrantOrganizationsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListClientGrantOrganizationsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListClientGrantOrganizationsPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListClientGrantOrganizationsPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListClientGrantOrganizationsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEncryptionKeyOffsetPaginatedResponseContent struct {
	// Page index of the results to return. First page is 0.
	Start *int `json:"start,omitempty" url:"start,omitempty"`
	// Number of results per page.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Total amount of encryption keys.
	Total *int `json:"total,omitempty" url:"total,omitempty"`
	// Encryption keys.
	Keys []*EncryptionKey `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) GetStart() *int {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) GetTotal() *int {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) GetKeys() []*EncryptionKey {
	if l == nil {
		return nil
	}
	return l.Keys
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEncryptionKeyOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEncryptionKeyOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEncryptionKeyOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListFlowExecutionsPaginatedResponseContent struct {
	// Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours.
	Next       *string                 `json:"next,omitempty" url:"next,omitempty"`
	Executions []*FlowExecutionSummary `json:"executions,omitempty" url:"executions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListFlowExecutionsPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListFlowExecutionsPaginatedResponseContent) GetExecutions() []*FlowExecutionSummary {
	if l == nil {
		return nil
	}
	return l.Executions
}

func (l *ListFlowExecutionsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFlowExecutionsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFlowExecutionsPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFlowExecutionsPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFlowExecutionsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListGuardianPoliciesResponseContent = []MfaPolicyEnum

type ListOrganizationClientGrantsOffsetPaginatedResponseContent struct {
	Start        *float64                   `json:"start,omitempty" url:"start,omitempty"`
	Limit        *float64                   `json:"limit,omitempty" url:"limit,omitempty"`
	Total        *float64                   `json:"total,omitempty" url:"total,omitempty"`
	ClientGrants []*OrganizationClientGrant `json:"client_grants,omitempty" url:"client_grants,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) GetClientGrants() []*OrganizationClientGrant {
	if l == nil {
		return nil
	}
	return l.ClientGrants
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationClientGrantsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationClientGrantsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationClientGrantsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListOrganizationConnectionsOffsetPaginatedResponseContent struct {
	Start              *float64                  `json:"start,omitempty" url:"start,omitempty"`
	Limit              *float64                  `json:"limit,omitempty" url:"limit,omitempty"`
	Total              *float64                  `json:"total,omitempty" url:"total,omitempty"`
	EnabledConnections []*OrganizationConnection `json:"enabled_connections,omitempty" url:"enabled_connections,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) GetEnabledConnections() []*OrganizationConnection {
	if l == nil {
		return nil
	}
	return l.EnabledConnections
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationConnectionsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationConnectionsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationConnectionsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListOrganizationInvitationsOffsetPaginatedResponseContent struct {
	Start       *float64                  `json:"start,omitempty" url:"start,omitempty"`
	Limit       *float64                  `json:"limit,omitempty" url:"limit,omitempty"`
	Invitations []*OrganizationInvitation `json:"invitations,omitempty" url:"invitations,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationInvitationsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListOrganizationInvitationsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListOrganizationInvitationsOffsetPaginatedResponseContent) GetInvitations() []*OrganizationInvitation {
	if l == nil {
		return nil
	}
	return l.Invitations
}

func (l *ListOrganizationInvitationsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationInvitationsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationInvitationsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationInvitationsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationInvitationsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListOrganizationMemberRolesOffsetPaginatedResponseContent struct {
	Start *float64 `json:"start,omitempty" url:"start,omitempty"`
	Limit *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	Roles []*Role  `json:"roles,omitempty" url:"roles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) GetRoles() []*Role {
	if l == nil {
		return nil
	}
	return l.Roles
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationMemberRolesOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationMemberRolesOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationMemberRolesOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListOrganizationMembersPaginatedResponseContent struct {
	Next    *string               `json:"next,omitempty" url:"next,omitempty"`
	Members []*OrganizationMember `json:"members,omitempty" url:"members,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *ListOrganizationMembersPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListOrganizationMembersPaginatedResponseContent) GetMembers() []*OrganizationMember {
	if l == nil {
		return nil
	}
	return l.Members
}

func (l *ListOrganizationMembersPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *ListOrganizationMembersPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type embed ListOrganizationMembersPaginatedResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListOrganizationMembersPaginatedResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationMembersPaginatedResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListOrganizationMembersPaginatedResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *ListOrganizationMembersPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListPhoneTemplatesResponseContent struct {
	Templates []*PhoneTemplate `json:"templates,omitempty" url:"templates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPhoneTemplatesResponseContent) GetTemplates() []*PhoneTemplate {
	if l == nil {
		return nil
	}
	return l.Templates
}

func (l *ListPhoneTemplatesResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPhoneTemplatesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPhoneTemplatesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPhoneTemplatesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPhoneTemplatesResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRefreshTokensPaginatedResponseContent struct {
	Tokens []*RefreshTokenResponseContent `json:"tokens,omitempty" url:"tokens,omitempty"`
	// A cursor to be used as the "from" query parameter for the next page of results.
	Next *string `json:"next,omitempty" url:"next,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *ListRefreshTokensPaginatedResponseContent) GetTokens() []*RefreshTokenResponseContent {
	if l == nil {
		return nil
	}
	return l.Tokens
}

func (l *ListRefreshTokensPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListRefreshTokensPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *ListRefreshTokensPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type embed ListRefreshTokensPaginatedResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListRefreshTokensPaginatedResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRefreshTokensPaginatedResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListRefreshTokensPaginatedResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *ListRefreshTokensPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRolePermissionsOffsetPaginatedResponseContent struct {
	Start       *float64                      `json:"start,omitempty" url:"start,omitempty"`
	Limit       *float64                      `json:"limit,omitempty" url:"limit,omitempty"`
	Total       *float64                      `json:"total,omitempty" url:"total,omitempty"`
	Permissions []*PermissionsResponsePayload `json:"permissions,omitempty" url:"permissions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) GetPermissions() []*PermissionsResponsePayload {
	if l == nil {
		return nil
	}
	return l.Permissions
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRolePermissionsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRolePermissionsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRolePermissionsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRoleUsersPaginatedResponseContent struct {
	Next  *string     `json:"next,omitempty" url:"next,omitempty"`
	Users []*RoleUser `json:"users,omitempty" url:"users,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRoleUsersPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListRoleUsersPaginatedResponseContent) GetUsers() []*RoleUser {
	if l == nil {
		return nil
	}
	return l.Users
}

func (l *ListRoleUsersPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRoleUsersPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRoleUsersPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRoleUsersPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRoleUsersPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The list of custom text keys and values.
type ListSelfServiceProfileCustomTextResponseContent = map[string]interface{}

type ListUserAuthenticationMethodsOffsetPaginatedResponseContent struct {
	// Index of the starting record. Derived from the page and per_page parameters.
	Start *float64 `json:"start,omitempty" url:"start,omitempty"`
	// Maximum amount of records to return.
	Limit *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	// Total number of pageable records.
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	// The paginated authentication methods. Returned in this structure when include_totals is true.
	Authenticators []*UserAuthenticationMethod `json:"authenticators,omitempty" url:"authenticators,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) GetAuthenticators() []*UserAuthenticationMethod {
	if l == nil {
		return nil
	}
	return l.Authenticators
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserAuthenticationMethodsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserAuthenticationMethodsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserAuthenticationMethodsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUserOrganizationsOffsetPaginatedResponseContent struct {
	Start         *float64        `json:"start,omitempty" url:"start,omitempty"`
	Limit         *float64        `json:"limit,omitempty" url:"limit,omitempty"`
	Total         *float64        `json:"total,omitempty" url:"total,omitempty"`
	Organizations []*Organization `json:"organizations,omitempty" url:"organizations,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) GetOrganizations() []*Organization {
	if l == nil {
		return nil
	}
	return l.Organizations
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserOrganizationsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserOrganizationsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserOrganizationsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUserPermissionsOffsetPaginatedResponseContent struct {
	Start       *float64                `json:"start,omitempty" url:"start,omitempty"`
	Limit       *float64                `json:"limit,omitempty" url:"limit,omitempty"`
	Total       *float64                `json:"total,omitempty" url:"total,omitempty"`
	Permissions []*UserPermissionSchema `json:"permissions,omitempty" url:"permissions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) GetPermissions() []*UserPermissionSchema {
	if l == nil {
		return nil
	}
	return l.Permissions
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserPermissionsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserPermissionsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserPermissionsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUserRolesOffsetPaginatedResponseContent struct {
	Start *float64 `json:"start,omitempty" url:"start,omitempty"`
	Limit *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	Roles []*Role  `json:"roles,omitempty" url:"roles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserRolesOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListUserRolesOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUserRolesOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListUserRolesOffsetPaginatedResponseContent) GetRoles() []*Role {
	if l == nil {
		return nil
	}
	return l.Roles
}

func (l *ListUserRolesOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserRolesOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserRolesOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserRolesOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserRolesOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUserSessionsPaginatedResponseContent struct {
	Sessions []*SessionResponseContent `json:"sessions,omitempty" url:"sessions,omitempty"`
	// A cursor to be used as the "from" query parameter for the next page of results.
	Next *string `json:"next,omitempty" url:"next,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *ListUserSessionsPaginatedResponseContent) GetSessions() []*SessionResponseContent {
	if l == nil {
		return nil
	}
	return l.Sessions
}

func (l *ListUserSessionsPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListUserSessionsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *ListUserSessionsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type embed ListUserSessionsPaginatedResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListUserSessionsPaginatedResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserSessionsPaginatedResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListUserSessionsPaginatedResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *ListUserSessionsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListVerifiableCredentialTemplatesPaginatedResponseContent struct {
	// Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours.
	Next      *string                                 `json:"next,omitempty" url:"next,omitempty"`
	Templates []*VerifiableCredentialTemplateResponse `json:"templates,omitempty" url:"templates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListVerifiableCredentialTemplatesPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListVerifiableCredentialTemplatesPaginatedResponseContent) GetTemplates() []*VerifiableCredentialTemplateResponse {
	if l == nil {
		return nil
	}
	return l.Templates
}

func (l *ListVerifiableCredentialTemplatesPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListVerifiableCredentialTemplatesPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListVerifiableCredentialTemplatesPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListVerifiableCredentialTemplatesPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListVerifiableCredentialTemplatesPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Log struct {
	Date *LogDate `json:"date,omitempty" url:"date,omitempty"`
	// Type of event.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Description of this event.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Name of the connection the event relates to.
	Connection *string `json:"connection,omitempty" url:"connection,omitempty"`
	// ID of the connection the event relates to.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// ID of the client (application).
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// Name of the client (application).
	ClientName *string `json:"client_name,omitempty" url:"client_name,omitempty"`
	// IP address of the log event source.
	IP *string `json:"ip,omitempty" url:"ip,omitempty"`
	// Hostname the event applies to.
	Hostname *string `json:"hostname,omitempty" url:"hostname,omitempty"`
	// ID of the user involved in the event.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Name of the user involved in the event.
	UserName *string `json:"user_name,omitempty" url:"user_name,omitempty"`
	// API audience the event applies to.
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scope permissions applied to the event.
	Scope *string `json:"scope,omitempty" url:"scope,omitempty"`
	// Name of the strategy involved in the event.
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`
	// Type of strategy involved in the event.
	StrategyType *string `json:"strategy_type,omitempty" url:"strategy_type,omitempty"`
	// Unique ID of the event.
	LogID *string `json:"log_id,omitempty" url:"log_id,omitempty"`
	// Whether the client was a mobile device (true) or desktop/laptop/server (false).
	IsMobile *bool       `json:"isMobile,omitempty" url:"isMobile,omitempty"`
	Details  *LogDetails `json:"details,omitempty" url:"details,omitempty"`
	// User agent string from the client device that caused the event.
	UserAgent       *string             `json:"user_agent,omitempty" url:"user_agent,omitempty"`
	SecurityContext *LogSecurityContext `json:"security_context,omitempty" url:"security_context,omitempty"`
	LocationInfo    *LogLocationInfo    `json:"location_info,omitempty" url:"location_info,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *Log) GetDate() *LogDate {
	if l == nil {
		return nil
	}
	return l.Date
}

func (l *Log) GetType() *string {
	if l == nil {
		return nil
	}
	return l.Type
}

func (l *Log) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *Log) GetConnection() *string {
	if l == nil {
		return nil
	}
	return l.Connection
}

func (l *Log) GetConnectionID() *string {
	if l == nil {
		return nil
	}
	return l.ConnectionID
}

func (l *Log) GetClientID() *string {
	if l == nil {
		return nil
	}
	return l.ClientID
}

func (l *Log) GetClientName() *string {
	if l == nil {
		return nil
	}
	return l.ClientName
}

func (l *Log) GetIP() *string {
	if l == nil {
		return nil
	}
	return l.IP
}

func (l *Log) GetHostname() *string {
	if l == nil {
		return nil
	}
	return l.Hostname
}

func (l *Log) GetUserID() *string {
	if l == nil {
		return nil
	}
	return l.UserID
}

func (l *Log) GetUserName() *string {
	if l == nil {
		return nil
	}
	return l.UserName
}

func (l *Log) GetAudience() *string {
	if l == nil {
		return nil
	}
	return l.Audience
}

func (l *Log) GetScope() *string {
	if l == nil {
		return nil
	}
	return l.Scope
}

func (l *Log) GetStrategy() *string {
	if l == nil {
		return nil
	}
	return l.Strategy
}

func (l *Log) GetStrategyType() *string {
	if l == nil {
		return nil
	}
	return l.StrategyType
}

func (l *Log) GetLogID() *string {
	if l == nil {
		return nil
	}
	return l.LogID
}

func (l *Log) GetIsMobile() *bool {
	if l == nil {
		return nil
	}
	return l.IsMobile
}

func (l *Log) GetDetails() *LogDetails {
	if l == nil {
		return nil
	}
	return l.Details
}

func (l *Log) GetUserAgent() *string {
	if l == nil {
		return nil
	}
	return l.UserAgent
}

func (l *Log) GetSecurityContext() *LogSecurityContext {
	if l == nil {
		return nil
	}
	return l.SecurityContext
}

func (l *Log) GetLocationInfo() *LogLocationInfo {
	if l == nil {
		return nil
	}
	return l.LocationInfo
}

func (l *Log) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *Log) UnmarshalJSON(data []byte) error {
	type embed Log
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = Log(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Log) MarshalJSON() ([]byte, error) {
	type embed Log
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *Log) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LogDate struct {
	// Date when the event occurred in ISO 8601 format.
	String        string
	LogDateObject LogDateObject

	typ string
}

func (l *LogDate) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LogDate) GetLogDateObject() LogDateObject {
	if l == nil {
		return nil
	}
	return l.LogDateObject
}

func (l *LogDate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueLogDateObject LogDateObject
	if err := json.Unmarshal(data, &valueLogDateObject); err == nil {
		l.typ = "LogDateObject"
		l.LogDateObject = valueLogDateObject
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LogDate) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "LogDateObject" || l.LogDateObject != nil {
		return json.Marshal(l.LogDateObject)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LogDateVisitor interface {
	VisitString(string) error
	VisitLogDateObject(LogDateObject) error
}

func (l *LogDate) Accept(visitor LogDateVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "LogDateObject" || l.LogDateObject != nil {
		return visitor.VisitLogDateObject(l.LogDateObject)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

// Date when the event occurred in ISO 8601 format.
type LogDateObject = map[string]interface{}

// Additional useful details about this event (structure is dependent upon event type).
type LogDetails = map[string]interface{}

// Information about the location that triggered this event based on the `ip`.
type LogLocationInfo struct {
	// Two-letter <a href="https://www.iso.org/iso-3166-country-codes.html">Alpha-2 ISO 3166-1</a> country code.
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`
	// Three-letter <a href="https://www.iso.org/iso-3166-country-codes.html">Alpha-3 ISO 3166-1</a> country code.
	CountryCode3 *string `json:"country_code3,omitempty" url:"country_code3,omitempty"`
	// Full country name in English.
	CountryName *string `json:"country_name,omitempty" url:"country_name,omitempty"`
	// Full city name in English.
	CityName *string `json:"city_name,omitempty" url:"city_name,omitempty"`
	// Global latitude (horizontal) position.
	Latitude *string `json:"latitude,omitempty" url:"latitude,omitempty"`
	// Global longitude (vertical) position.
	Longitude *string `json:"longitude,omitempty" url:"longitude,omitempty"`
	// Time zone name as found in the <a href="https://www.iana.org/time-zones">tz database</a>.
	TimeZone *string `json:"time_zone,omitempty" url:"time_zone,omitempty"`
	// Continent the country is located within. Can be `AF` (Africa), `AN` (Antarctica), `AS` (Asia), `EU` (Europe), `NA` (North America), `OC` (Oceania) or `SA` (South America).
	ContinentCode *string `json:"continent_code,omitempty" url:"continent_code,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *LogLocationInfo) GetCountryCode() *string {
	if l == nil {
		return nil
	}
	return l.CountryCode
}

func (l *LogLocationInfo) GetCountryCode3() *string {
	if l == nil {
		return nil
	}
	return l.CountryCode3
}

func (l *LogLocationInfo) GetCountryName() *string {
	if l == nil {
		return nil
	}
	return l.CountryName
}

func (l *LogLocationInfo) GetCityName() *string {
	if l == nil {
		return nil
	}
	return l.CityName
}

func (l *LogLocationInfo) GetLatitude() *string {
	if l == nil {
		return nil
	}
	return l.Latitude
}

func (l *LogLocationInfo) GetLongitude() *string {
	if l == nil {
		return nil
	}
	return l.Longitude
}

func (l *LogLocationInfo) GetTimeZone() *string {
	if l == nil {
		return nil
	}
	return l.TimeZone
}

func (l *LogLocationInfo) GetContinentCode() *string {
	if l == nil {
		return nil
	}
	return l.ContinentCode
}

func (l *LogLocationInfo) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *LogLocationInfo) UnmarshalJSON(data []byte) error {
	type embed LogLocationInfo
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = LogLocationInfo(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogLocationInfo) MarshalJSON() ([]byte, error) {
	type embed LogLocationInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *LogLocationInfo) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Information about security-related signals.
type LogSecurityContext struct {
	// JA3 fingerprint value.
	Ja3 *string `json:"ja3,omitempty" url:"ja3,omitempty"`
	// JA4 fingerprint value.
	Ja4 *string `json:"ja4,omitempty" url:"ja4,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (l *LogSecurityContext) GetJa3() *string {
	if l == nil {
		return nil
	}
	return l.Ja3
}

func (l *LogSecurityContext) GetJa4() *string {
	if l == nil {
		return nil
	}
	return l.Ja4
}

func (l *LogSecurityContext) GetExtraProperties() map[string]interface{} {
	return l.ExtraProperties
}

func (l *LogSecurityContext) UnmarshalJSON(data []byte) error {
	type embed LogSecurityContext
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = LogSecurityContext(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.ExtraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogSecurityContext) MarshalJSON() ([]byte, error) {
	type embed LogSecurityContext
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, l.ExtraProperties)
}

func (l *LogSecurityContext) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MdlPresentationProperties struct {
	// Family Name
	FamilyName *bool `json:"family_name,omitempty" url:"family_name,omitempty"`
	// Given Name
	GivenName *bool `json:"given_name,omitempty" url:"given_name,omitempty"`
	// Birth Date
	BirthDate *bool `json:"birth_date,omitempty" url:"birth_date,omitempty"`
	// Issue Date
	IssueDate *bool `json:"issue_date,omitempty" url:"issue_date,omitempty"`
	// Expiry Date
	ExpiryDate *bool `json:"expiry_date,omitempty" url:"expiry_date,omitempty"`
	// Issuing Country
	IssuingCountry *bool `json:"issuing_country,omitempty" url:"issuing_country,omitempty"`
	// Issuing Authority
	IssuingAuthority *bool `json:"issuing_authority,omitempty" url:"issuing_authority,omitempty"`
	// Portrait
	Portrait *bool `json:"portrait,omitempty" url:"portrait,omitempty"`
	// Driving Privileges
	DrivingPrivileges *bool `json:"driving_privileges,omitempty" url:"driving_privileges,omitempty"`
	// Resident Address
	ResidentAddress *bool `json:"resident_address,omitempty" url:"resident_address,omitempty"`
	// Portrait Capture Date
	PortraitCaptureDate *bool `json:"portrait_capture_date,omitempty" url:"portrait_capture_date,omitempty"`
	// Age in Years
	AgeInYears *bool `json:"age_in_years,omitempty" url:"age_in_years,omitempty"`
	// Age Birth Year
	AgeBirthYear *bool `json:"age_birth_year,omitempty" url:"age_birth_year,omitempty"`
	// Issuing Jurisdiction
	IssuingJurisdiction *bool `json:"issuing_jurisdiction,omitempty" url:"issuing_jurisdiction,omitempty"`
	// Nationality
	Nationality *bool `json:"nationality,omitempty" url:"nationality,omitempty"`
	// Resident City
	ResidentCity *bool `json:"resident_city,omitempty" url:"resident_city,omitempty"`
	// Resident State
	ResidentState *bool `json:"resident_state,omitempty" url:"resident_state,omitempty"`
	// Resident Postal Code
	ResidentPostalCode *bool `json:"resident_postal_code,omitempty" url:"resident_postal_code,omitempty"`
	// Resident Country
	ResidentCountry *bool `json:"resident_country,omitempty" url:"resident_country,omitempty"`
	// Family Name National Character
	FamilyNameNationalCharacter *bool `json:"family_name_national_character,omitempty" url:"family_name_national_character,omitempty"`
	// Given Name National Character
	GivenNameNationalCharacter *bool `json:"given_name_national_character,omitempty" url:"given_name_national_character,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (m *MdlPresentationProperties) GetFamilyName() *bool {
	if m == nil {
		return nil
	}
	return m.FamilyName
}

func (m *MdlPresentationProperties) GetGivenName() *bool {
	if m == nil {
		return nil
	}
	return m.GivenName
}

func (m *MdlPresentationProperties) GetBirthDate() *bool {
	if m == nil {
		return nil
	}
	return m.BirthDate
}

func (m *MdlPresentationProperties) GetIssueDate() *bool {
	if m == nil {
		return nil
	}
	return m.IssueDate
}

func (m *MdlPresentationProperties) GetExpiryDate() *bool {
	if m == nil {
		return nil
	}
	return m.ExpiryDate
}

func (m *MdlPresentationProperties) GetIssuingCountry() *bool {
	if m == nil {
		return nil
	}
	return m.IssuingCountry
}

func (m *MdlPresentationProperties) GetIssuingAuthority() *bool {
	if m == nil {
		return nil
	}
	return m.IssuingAuthority
}

func (m *MdlPresentationProperties) GetPortrait() *bool {
	if m == nil {
		return nil
	}
	return m.Portrait
}

func (m *MdlPresentationProperties) GetDrivingPrivileges() *bool {
	if m == nil {
		return nil
	}
	return m.DrivingPrivileges
}

func (m *MdlPresentationProperties) GetResidentAddress() *bool {
	if m == nil {
		return nil
	}
	return m.ResidentAddress
}

func (m *MdlPresentationProperties) GetPortraitCaptureDate() *bool {
	if m == nil {
		return nil
	}
	return m.PortraitCaptureDate
}

func (m *MdlPresentationProperties) GetAgeInYears() *bool {
	if m == nil {
		return nil
	}
	return m.AgeInYears
}

func (m *MdlPresentationProperties) GetAgeBirthYear() *bool {
	if m == nil {
		return nil
	}
	return m.AgeBirthYear
}

func (m *MdlPresentationProperties) GetIssuingJurisdiction() *bool {
	if m == nil {
		return nil
	}
	return m.IssuingJurisdiction
}

func (m *MdlPresentationProperties) GetNationality() *bool {
	if m == nil {
		return nil
	}
	return m.Nationality
}

func (m *MdlPresentationProperties) GetResidentCity() *bool {
	if m == nil {
		return nil
	}
	return m.ResidentCity
}

func (m *MdlPresentationProperties) GetResidentState() *bool {
	if m == nil {
		return nil
	}
	return m.ResidentState
}

func (m *MdlPresentationProperties) GetResidentPostalCode() *bool {
	if m == nil {
		return nil
	}
	return m.ResidentPostalCode
}

func (m *MdlPresentationProperties) GetResidentCountry() *bool {
	if m == nil {
		return nil
	}
	return m.ResidentCountry
}

func (m *MdlPresentationProperties) GetFamilyNameNationalCharacter() *bool {
	if m == nil {
		return nil
	}
	return m.FamilyNameNationalCharacter
}

func (m *MdlPresentationProperties) GetGivenNameNationalCharacter() *bool {
	if m == nil {
		return nil
	}
	return m.GivenNameNationalCharacter
}

func (m *MdlPresentationProperties) GetExtraProperties() map[string]interface{} {
	return m.ExtraProperties
}

func (m *MdlPresentationProperties) UnmarshalJSON(data []byte) error {
	type embed MdlPresentationProperties
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MdlPresentationProperties(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.ExtraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MdlPresentationProperties) MarshalJSON() ([]byte, error) {
	type embed MdlPresentationProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, m.ExtraProperties)
}

func (m *MdlPresentationProperties) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A simplified presentation request
type MdlPresentationRequest struct {
	OrgIso1801351MDl *MdlPresentationRequestProperties `json:"org.iso.18013.5.1.mDL" url:"org.iso.18013.5.1.mDL"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MdlPresentationRequest) GetOrgIso1801351MDl() *MdlPresentationRequestProperties {
	if m == nil {
		return nil
	}
	return m.OrgIso1801351MDl
}

func (m *MdlPresentationRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MdlPresentationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MdlPresentationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MdlPresentationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MdlPresentationRequest) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MdlPresentationRequestProperties struct {
	OrgIso1801351 *MdlPresentationProperties `json:"org.iso.18013.5.1" url:"org.iso.18013.5.1"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MdlPresentationRequestProperties) GetOrgIso1801351() *MdlPresentationProperties {
	if m == nil {
		return nil
	}
	return m.OrgIso1801351
}

func (m *MdlPresentationRequestProperties) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MdlPresentationRequestProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler MdlPresentationRequestProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MdlPresentationRequestProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MdlPresentationRequestProperties) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The MFA policy
type MfaPolicyEnum string

const (
	MfaPolicyEnumAllApplications MfaPolicyEnum = "all-applications"
	MfaPolicyEnumConfidenceScore MfaPolicyEnum = "confidence-score"
)

func NewMfaPolicyEnumFromString(s string) (MfaPolicyEnum, error) {
	switch s {
	case "all-applications":
		return MfaPolicyEnumAllApplications, nil
	case "confidence-score":
		return MfaPolicyEnumConfidenceScore, nil
	}
	var t MfaPolicyEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MfaPolicyEnum) Ptr() *MfaPolicyEnum {
	return &m
}

type OauthScope string

const (
	// Read Actions
	OauthScopeReadActions OauthScope = "read:actions"
	// Create Actions
	OauthScopeCreateActions OauthScope = "create:actions"
	// Delete Actions
	OauthScopeDeleteActions OauthScope = "delete:actions"
	// Update Actions
	OauthScopeUpdateActions OauthScope = "update:actions"
	// Read Anomaly Blocks
	OauthScopeReadAnomalyBlocks OauthScope = "read:anomaly_blocks"
	// Delete Anomaly Blocks
	OauthScopeDeleteAnomalyBlocks OauthScope = "delete:anomaly_blocks"
	// Read Shields
	OauthScopeReadShields OauthScope = "read:shields"
	// Create Shields
	OauthScopeCreateShields OauthScope = "create:shields"
	// Update Shields
	OauthScopeUpdateShields OauthScope = "update:shields"
	// Read Attack Protection
	OauthScopeReadAttackProtection OauthScope = "read:attack_protection"
	// Update Attack Protection
	OauthScopeUpdateAttackProtection OauthScope = "update:attack_protection"
	// Read Branding
	OauthScopeReadBranding OauthScope = "read:branding"
	// Update Branding
	OauthScopeUpdateBranding OauthScope = "update:branding"
	// Read Phone Providers
	OauthScopeReadPhoneProviders OauthScope = "read:phone_providers"
	// Create Phone Providers
	OauthScopeCreatePhoneProviders OauthScope = "create:phone_providers"
	// Update Phone Providers
	OauthScopeUpdatePhoneProviders OauthScope = "update:phone_providers"
	// Delete Phone Providers
	OauthScopeDeletePhoneProviders OauthScope = "delete:phone_providers"
	// Read Phone Templates
	OauthScopeReadPhoneTemplates OauthScope = "read:phone_templates"
	// Create Phone Templates
	OauthScopeCreatePhoneTemplates OauthScope = "create:phone_templates"
	// Update Phone Templates
	OauthScopeUpdatePhoneTemplates OauthScope = "update:phone_templates"
	// Delete Phone Templates
	OauthScopeDeletePhoneTemplates OauthScope = "delete:phone_templates"
	// Delete Branding
	OauthScopeDeleteBranding OauthScope = "delete:branding"
	// Read Client Grants
	OauthScopeReadClientGrants OauthScope = "read:client_grants"
	// Create Client Grants
	OauthScopeCreateClientGrants OauthScope = "create:client_grants"
	// Update Client Grants
	OauthScopeUpdateClientGrants OauthScope = "update:client_grants"
	// Delete Client Grants
	OauthScopeDeleteClientGrants OauthScope = "delete:client_grants"
	// Read Organization Client Grants
	OauthScopeReadOrganizationClientGrants OauthScope = "read:organization_client_grants"
	// Read Clients
	OauthScopeReadClients OauthScope = "read:clients"
	// Read Client Keys
	OauthScopeReadClientKeys OauthScope = "read:client_keys"
	// Read Client Credentials
	OauthScopeReadClientCredentials OauthScope = "read:client_credentials"
	// Read Client Summary
	OauthScopeReadClientSummary OauthScope = "read:client_summary"
	// Create Clients
	OauthScopeCreateClients OauthScope = "create:clients"
	// Create Client Credentials
	OauthScopeCreateClientCredentials OauthScope = "create:client_credentials"
	// Update Client Credentials
	OauthScopeUpdateClientCredentials OauthScope = "update:client_credentials"
	// Delete Client Credentials
	OauthScopeDeleteClientCredentials OauthScope = "delete:client_credentials"
	// Update Clients
	OauthScopeUpdateClients OauthScope = "update:clients"
	// Update Client Keys
	OauthScopeUpdateClientKeys OauthScope = "update:client_keys"
	// Delete Clients
	OauthScopeDeleteClients OauthScope = "delete:clients"
	// Read Connections
	OauthScopeReadConnections OauthScope = "read:connections"
	// Read Connection Profiles
	OauthScopeReadConnectionProfiles OauthScope = "read:connection_profiles"
	// Create Connection Profiles
	OauthScopeCreateConnectionProfiles OauthScope = "create:connection_profiles"
	// Update Connection Profiles
	OauthScopeUpdateConnectionProfiles OauthScope = "update:connection_profiles"
	// Delete Connection Profiles
	OauthScopeDeleteConnectionProfiles OauthScope = "delete:connection_profiles"
	// Create Connections
	OauthScopeCreateConnections OauthScope = "create:connections"
	// Update Connections
	OauthScopeUpdateConnections OauthScope = "update:connections"
	// Delete Connections
	OauthScopeDeleteConnections OauthScope = "delete:connections"
	// Read Users
	OauthScopeReadUsers OauthScope = "read:users"
	// Read Connections Keys
	OauthScopeReadConnectionsKeys OauthScope = "read:connections_keys"
	// Create Connections Keys
	OauthScopeCreateConnectionsKeys OauthScope = "create:connections_keys"
	// Update Connections Keys
	OauthScopeUpdateConnectionsKeys OauthScope = "update:connections_keys"
	// Read Scim Config
	OauthScopeReadSCIMConfig OauthScope = "read:scim_config"
	// Create Scim Config
	OauthScopeCreateSCIMConfig OauthScope = "create:scim_config"
	// Update Scim Config
	OauthScopeUpdateSCIMConfig OauthScope = "update:scim_config"
	// Delete Scim Config
	OauthScopeDeleteSCIMConfig OauthScope = "delete:scim_config"
	// Read Scim Token
	OauthScopeReadSCIMToken OauthScope = "read:scim_token"
	// Create Scim Token
	OauthScopeCreateSCIMToken OauthScope = "create:scim_token"
	// Delete Scim Token
	OauthScopeDeleteSCIMToken OauthScope = "delete:scim_token"
	// Delete Users
	OauthScopeDeleteUsers OauthScope = "delete:users"
	// Read Custom Domains
	OauthScopeReadCustomDomains OauthScope = "read:custom_domains"
	// Create Custom Domains
	OauthScopeCreateCustomDomains OauthScope = "create:custom_domains"
	// Update Custom Domains
	OauthScopeUpdateCustomDomains OauthScope = "update:custom_domains"
	// Delete Custom Domains
	OauthScopeDeleteCustomDomains OauthScope = "delete:custom_domains"
	// Read Device Credentials
	OauthScopeReadDeviceCredentials OauthScope = "read:device_credentials"
	// Create Current User Device Credentials
	OauthScopeCreateCurrentUserDeviceCredentials OauthScope = "create:current_user_device_credentials"
	// Delete Device Credentials
	OauthScopeDeleteDeviceCredentials OauthScope = "delete:device_credentials"
	// Delete Current User Device Credentials
	OauthScopeDeleteCurrentUserDeviceCredentials OauthScope = "delete:current_user_device_credentials"
	// Update Device Codes
	OauthScopeUpdateDeviceCodes OauthScope = "update:device_codes"
	// Read Device Codes
	OauthScopeReadDeviceCodes OauthScope = "read:device_codes"
	// Create Test Email Dispatch
	OauthScopeCreateTestEmailDispatch OauthScope = "create:test_email_dispatch"
	// Create Email Templates
	OauthScopeCreateEmailTemplates OauthScope = "create:email_templates"
	// Read Email Templates
	OauthScopeReadEmailTemplates OauthScope = "read:email_templates"
	// Update Email Templates
	OauthScopeUpdateEmailTemplates OauthScope = "update:email_templates"
	// Read Email Provider
	OauthScopeReadEmailProvider OauthScope = "read:email_provider"
	// Create Email Provider
	OauthScopeCreateEmailProvider OauthScope = "create:email_provider"
	// Update Email Provider
	OauthScopeUpdateEmailProvider OauthScope = "update:email_provider"
	// Delete Email Provider
	OauthScopeDeleteEmailProvider OauthScope = "delete:email_provider"
	// Read Entitlements
	OauthScopeReadEntitlements OauthScope = "read:entitlements"
	// Read Event Streams
	OauthScopeReadEventStreams OauthScope = "read:event_streams"
	// Create Event Streams
	OauthScopeCreateEventStreams OauthScope = "create:event_streams"
	// Update Event Streams
	OauthScopeUpdateEventStreams OauthScope = "update:event_streams"
	// Delete Event Streams
	OauthScopeDeleteEventStreams OauthScope = "delete:event_streams"
	// Read Event Deliveries
	OauthScopeReadEventDeliveries OauthScope = "read:event_deliveries"
	// Update Event Deliveries
	OauthScopeUpdateEventDeliveries OauthScope = "update:event_deliveries"
	// Read Extensions
	OauthScopeReadExtensions OauthScope = "read:extensions"
	// Read Flows
	OauthScopeReadFlows OauthScope = "read:flows"
	// Create Flows
	OauthScopeCreateFlows OauthScope = "create:flows"
	// Read Flows Vault Connections
	OauthScopeReadFlowsVaultConnections OauthScope = "read:flows_vault_connections"
	// Create Flows Vault Connections
	OauthScopeCreateFlowsVaultConnections OauthScope = "create:flows_vault_connections"
	// Update Flows Vault Connections
	OauthScopeUpdateFlowsVaultConnections OauthScope = "update:flows_vault_connections"
	// Delete Flows Vault Connections
	OauthScopeDeleteFlowsVaultConnections OauthScope = "delete:flows_vault_connections"
	// Read Flows Executions
	OauthScopeReadFlowsExecutions OauthScope = "read:flows_executions"
	// Delete Flows Executions
	OauthScopeDeleteFlowsExecutions OauthScope = "delete:flows_executions"
	// Update Flows
	OauthScopeUpdateFlows OauthScope = "update:flows"
	// Delete Flows
	OauthScopeDeleteFlows OauthScope = "delete:flows"
	// Read Forms
	OauthScopeReadForms OauthScope = "read:forms"
	// Create Forms
	OauthScopeCreateForms OauthScope = "create:forms"
	// Update Forms
	OauthScopeUpdateForms OauthScope = "update:forms"
	// Delete Forms
	OauthScopeDeleteForms OauthScope = "delete:forms"
	// Read Grants
	OauthScopeReadGrants OauthScope = "read:grants"
	// Delete Grants
	OauthScopeDeleteGrants OauthScope = "delete:grants"
	// Create Guardian Enrollment Tickets
	OauthScopeCreateGuardianEnrollmentTickets OauthScope = "create:guardian_enrollment_tickets"
	// Read Guardian Enrollments
	OauthScopeReadGuardianEnrollments OauthScope = "read:guardian_enrollments"
	// Delete Guardian Enrollments
	OauthScopeDeleteGuardianEnrollments OauthScope = "delete:guardian_enrollments"
	// Read Guardian Factors
	OauthScopeReadGuardianFactors OauthScope = "read:guardian_factors"
	// Update Guardian Factors
	OauthScopeUpdateGuardianFactors OauthScope = "update:guardian_factors"
	// Read Mfa Policies
	OauthScopeReadMfaPolicies OauthScope = "read:mfa_policies"
	// Update Mfa Policies
	OauthScopeUpdateMfaPolicies OauthScope = "update:mfa_policies"
	// Read Hooks
	OauthScopeReadHooks OauthScope = "read:hooks"
	// Create Hooks
	OauthScopeCreateHooks OauthScope = "create:hooks"
	// Update Hooks
	OauthScopeUpdateHooks OauthScope = "update:hooks"
	// Delete Hooks
	OauthScopeDeleteHooks OauthScope = "delete:hooks"
	// Read Insights
	OauthScopeReadInsights OauthScope = "read:insights"
	// Read Stats
	OauthScopeReadStats OauthScope = "read:stats"
	// Read Integrations
	OauthScopeReadIntegrations OauthScope = "read:integrations"
	// Create Integrations
	OauthScopeCreateIntegrations OauthScope = "create:integrations"
	// Update Integrations
	OauthScopeUpdateIntegrations OauthScope = "update:integrations"
	// Delete Integrations
	OauthScopeDeleteIntegrations OauthScope = "delete:integrations"
	// Create Users
	OauthScopeCreateUsers OauthScope = "create:users"
	// Update Users
	OauthScopeUpdateUsers OauthScope = "update:users"
	// Read Custom Signing Keys
	OauthScopeReadCustomSigningKeys OauthScope = "read:custom_signing_keys"
	// Create Custom Signing Keys
	OauthScopeCreateCustomSigningKeys OauthScope = "create:custom_signing_keys"
	// Update Custom Signing Keys
	OauthScopeUpdateCustomSigningKeys OauthScope = "update:custom_signing_keys"
	// Delete Custom Signing Keys
	OauthScopeDeleteCustomSigningKeys OauthScope = "delete:custom_signing_keys"
	// Read Encryption Keys
	OauthScopeReadEncryptionKeys OauthScope = "read:encryption_keys"
	// Create Encryption Keys
	OauthScopeCreateEncryptionKeys OauthScope = "create:encryption_keys"
	// Update Encryption Keys
	OauthScopeUpdateEncryptionKeys OauthScope = "update:encryption_keys"
	// Delete Encryption Keys
	OauthScopeDeleteEncryptionKeys OauthScope = "delete:encryption_keys"
	// Read Signing Keys
	OauthScopeReadSigningKeys OauthScope = "read:signing_keys"
	// Create Signing Keys
	OauthScopeCreateSigningKeys OauthScope = "create:signing_keys"
	// Update Signing Keys
	OauthScopeUpdateSigningKeys OauthScope = "update:signing_keys"
	// Read Log Streams
	OauthScopeReadLogStreams OauthScope = "read:log_streams"
	// Create Log Streams
	OauthScopeCreateLogStreams OauthScope = "create:log_streams"
	// Update Log Streams
	OauthScopeUpdateLogStreams OauthScope = "update:log_streams"
	// Delete Log Streams
	OauthScopeDeleteLogStreams OauthScope = "delete:log_streams"
	// Read Logs
	OauthScopeReadLogs OauthScope = "read:logs"
	// Read Logs Users
	OauthScopeReadLogsUsers OauthScope = "read:logs_users"
	// Read Tenant Settings
	OauthScopeReadTenantSettings OauthScope = "read:tenant_settings"
	// Update Tenant Settings
	OauthScopeUpdateTenantSettings OauthScope = "update:tenant_settings"
	// Read Network Acls
	OauthScopeReadNetworkACLs OauthScope = "read:network_acls"
	// Create Network Acls
	OauthScopeCreateNetworkACLs OauthScope = "create:network_acls"
	// Update Network Acls
	OauthScopeUpdateNetworkACLs OauthScope = "update:network_acls"
	// Delete Network Acls
	OauthScopeDeleteNetworkACLs OauthScope = "delete:network_acls"
	// Read Organizations
	OauthScopeReadOrganizations OauthScope = "read:organizations"
	// Read Organizations Summary
	OauthScopeReadOrganizationsSummary OauthScope = "read:organizations_summary"
	// Create Organizations
	OauthScopeCreateOrganizations OauthScope = "create:organizations"
	// Create Organization Connections
	OauthScopeCreateOrganizationConnections OauthScope = "create:organization_connections"
	// Update Organizations
	OauthScopeUpdateOrganizations OauthScope = "update:organizations"
	// Delete Organizations
	OauthScopeDeleteOrganizations OauthScope = "delete:organizations"
	// Create Organization Client Grants
	OauthScopeCreateOrganizationClientGrants OauthScope = "create:organization_client_grants"
	// Delete Organization Client Grants
	OauthScopeDeleteOrganizationClientGrants OauthScope = "delete:organization_client_grants"
	// Read Organization Connections
	OauthScopeReadOrganizationConnections OauthScope = "read:organization_connections"
	// Create Organization Discovery Domains
	OauthScopeCreateOrganizationDiscoveryDomains OauthScope = "create:organization_discovery_domains"
	// Update Organization Discovery Domains
	OauthScopeUpdateOrganizationDiscoveryDomains OauthScope = "update:organization_discovery_domains"
	// Update Organization Connections
	OauthScopeUpdateOrganizationConnections OauthScope = "update:organization_connections"
	// Delete Organization Connections
	OauthScopeDeleteOrganizationConnections OauthScope = "delete:organization_connections"
	// Read Organization Invitations
	OauthScopeReadOrganizationInvitations OauthScope = "read:organization_invitations"
	// Create Organization Invitations
	OauthScopeCreateOrganizationInvitations OauthScope = "create:organization_invitations"
	// Delete Organization Invitations
	OauthScopeDeleteOrganizationInvitations OauthScope = "delete:organization_invitations"
	// Read Organization Members
	OauthScopeReadOrganizationMembers OauthScope = "read:organization_members"
	// Create Organization Members
	OauthScopeCreateOrganizationMembers OauthScope = "create:organization_members"
	// Delete Organization Members
	OauthScopeDeleteOrganizationMembers OauthScope = "delete:organization_members"
	// Read Organization Member Roles
	OauthScopeReadOrganizationMemberRoles OauthScope = "read:organization_member_roles"
	// Create Organization Member Roles
	OauthScopeCreateOrganizationMemberRoles OauthScope = "create:organization_member_roles"
	// Delete Organization Member Roles
	OauthScopeDeleteOrganizationMemberRoles OauthScope = "delete:organization_member_roles"
	// Read Prompts
	OauthScopeReadPrompts OauthScope = "read:prompts"
	// Update Prompts
	OauthScopeUpdatePrompts OauthScope = "update:prompts"
	// Read Resource Servers
	OauthScopeReadResourceServers OauthScope = "read:resource_servers"
	// Update Resource Servers
	OauthScopeUpdateResourceServers OauthScope = "update:resource_servers"
	// Read Refresh Tokens
	OauthScopeReadRefreshTokens OauthScope = "read:refresh_tokens"
	// Delete Refresh Tokens
	OauthScopeDeleteRefreshTokens OauthScope = "delete:refresh_tokens"
	// Create Resource Servers
	OauthScopeCreateResourceServers OauthScope = "create:resource_servers"
	// Delete Resource Servers
	OauthScopeDeleteResourceServers OauthScope = "delete:resource_servers"
	// Read Roles
	OauthScopeReadRoles OauthScope = "read:roles"
	// Create Roles
	OauthScopeCreateRoles OauthScope = "create:roles"
	// Update Roles
	OauthScopeUpdateRoles OauthScope = "update:roles"
	// Delete Roles
	OauthScopeDeleteRoles OauthScope = "delete:roles"
	// Read Role Members
	OauthScopeReadRoleMembers OauthScope = "read:role_members"
	// Create Role Members
	OauthScopeCreateRoleMembers OauthScope = "create:role_members"
	// Read Rules
	OauthScopeReadRules OauthScope = "read:rules"
	// Create Rules
	OauthScopeCreateRules OauthScope = "create:rules"
	// Update Rules
	OauthScopeUpdateRules OauthScope = "update:rules"
	// Read Rules Configs
	OauthScopeReadRulesConfigs OauthScope = "read:rules_configs"
	// Update Rules Configs
	OauthScopeUpdateRulesConfigs OauthScope = "update:rules_configs"
	// Delete Rules Configs
	OauthScopeDeleteRulesConfigs OauthScope = "delete:rules_configs"
	// Delete Rules
	OauthScopeDeleteRules OauthScope = "delete:rules"
	// Read Security Metrics
	OauthScopeReadSecurityMetrics OauthScope = "read:security_metrics"
	// Read Self Service Profiles
	OauthScopeReadSelfServiceProfiles OauthScope = "read:self_service_profiles"
	// Create Self Service Profiles
	OauthScopeCreateSelfServiceProfiles OauthScope = "create:self_service_profiles"
	// Update Self Service Profiles
	OauthScopeUpdateSelfServiceProfiles OauthScope = "update:self_service_profiles"
	// Delete Self Service Profiles
	OauthScopeDeleteSelfServiceProfiles OauthScope = "delete:self_service_profiles"
	// Read Self Service Profile Custom Texts
	OauthScopeReadSelfServiceProfileCustomTexts OauthScope = "read:self_service_profile_custom_texts"
	// Update Self Service Profile Custom Texts
	OauthScopeUpdateSelfServiceProfileCustomTexts OauthScope = "update:self_service_profile_custom_texts"
	// Create Sso Access Tickets
	OauthScopeCreateSSOAccessTickets OauthScope = "create:sso_access_tickets"
	// Delete Sso Access Tickets
	OauthScopeDeleteSSOAccessTickets OauthScope = "delete:sso_access_tickets"
	// Read Sessions
	OauthScopeReadSessions OauthScope = "read:sessions"
	// Delete Sessions
	OauthScopeDeleteSessions OauthScope = "delete:sessions"
	// Delete Tenants
	OauthScopeDeleteTenants OauthScope = "delete:tenants"
	// Run Checks
	OauthScopeRunChecks OauthScope = "run:checks"
	// Read Checks
	OauthScopeReadChecks OauthScope = "read:checks"
	// Read Tenant Feature Flags
	OauthScopeReadTenantFeatureFlags OauthScope = "read:tenant_feature_flags"
	// Read Tenant Invitations
	OauthScopeReadTenantInvitations OauthScope = "read:tenant_invitations"
	// Create Tenant Invitations
	OauthScopeCreateTenantInvitations OauthScope = "create:tenant_invitations"
	// Update Tenant Invitations
	OauthScopeUpdateTenantInvitations OauthScope = "update:tenant_invitations"
	// Delete Tenant Invitations
	OauthScopeDeleteTenantInvitations OauthScope = "delete:tenant_invitations"
	// Read Tenant Members
	OauthScopeReadTenantMembers OauthScope = "read:tenant_members"
	// Update Tenant Members
	OauthScopeUpdateTenantMembers OauthScope = "update:tenant_members"
	// Delete Tenant Members
	OauthScopeDeleteTenantMembers OauthScope = "delete:tenant_members"
	// Read Owners
	OauthScopeReadOwners OauthScope = "read:owners"
	// Delete Owners
	OauthScopeDeleteOwners OauthScope = "delete:owners"
	// Create User Tickets
	OauthScopeCreateUserTickets OauthScope = "create:user_tickets"
	// Read Token Exchange Profiles
	OauthScopeReadTokenExchangeProfiles OauthScope = "read:token_exchange_profiles"
	// Create Token Exchange Profiles
	OauthScopeCreateTokenExchangeProfiles OauthScope = "create:token_exchange_profiles"
	// Update Token Exchange Profiles
	OauthScopeUpdateTokenExchangeProfiles OauthScope = "update:token_exchange_profiles"
	// Delete Token Exchange Profiles
	OauthScopeDeleteTokenExchangeProfiles OauthScope = "delete:token_exchange_profiles"
	// Read Entity Counts
	OauthScopeReadEntityCounts OauthScope = "read:entity_counts"
	// Read User Attribute Profiles
	OauthScopeReadUserAttributeProfiles OauthScope = "read:user_attribute_profiles"
	// Create User Attribute Profiles
	OauthScopeCreateUserAttributeProfiles OauthScope = "create:user_attribute_profiles"
	// Update User Attribute Profiles
	OauthScopeUpdateUserAttributeProfiles OauthScope = "update:user_attribute_profiles"
	// Delete User Attribute Profiles
	OauthScopeDeleteUserAttributeProfiles OauthScope = "delete:user_attribute_profiles"
	// Read User Idp Tokens
	OauthScopeReadUserIdpTokens OauthScope = "read:user_idp_tokens"
	// Read Current User
	OauthScopeReadCurrentUser OauthScope = "read:current_user"
	// Update Users App Metadata
	OauthScopeUpdateUsersAppMetadata OauthScope = "update:users_app_metadata"
	// Update Current User Metadata
	OauthScopeUpdateCurrentUserMetadata OauthScope = "update:current_user_metadata"
	// Delete Current User
	OauthScopeDeleteCurrentUser OauthScope = "delete:current_user"
	// Read User Application Passwords
	OauthScopeReadUserApplicationPasswords OauthScope = "read:user_application_passwords"
	// Create User Application Passwords
	OauthScopeCreateUserApplicationPasswords OauthScope = "create:user_application_passwords"
	// Delete User Application Passwords
	OauthScopeDeleteUserApplicationPasswords OauthScope = "delete:user_application_passwords"
	// Read Authentication Methods
	OauthScopeReadAuthenticationMethods OauthScope = "read:authentication_methods"
	// Update Authentication Methods
	OauthScopeUpdateAuthenticationMethods OauthScope = "update:authentication_methods"
	// Create Authentication Methods
	OauthScopeCreateAuthenticationMethods OauthScope = "create:authentication_methods"
	// Delete Authentication Methods
	OauthScopeDeleteAuthenticationMethods OauthScope = "delete:authentication_methods"
	// Read Federated Connections Tokens
	OauthScopeReadFederatedConnectionsTokens OauthScope = "read:federated_connections_tokens"
	// Delete Federated Connections Tokens
	OauthScopeDeleteFederatedConnectionsTokens OauthScope = "delete:federated_connections_tokens"
	// Update Current User Identities
	OauthScopeUpdateCurrentUserIdentities OauthScope = "update:current_user_identities"
	// Delete Role Members
	OauthScopeDeleteRoleMembers OauthScope = "delete:role_members"
	// Read Vdcs Templates
	OauthScopeReadVdcsTemplates OauthScope = "read:vdcs_templates"
	// Create Vdcs Templates
	OauthScopeCreateVdcsTemplates OauthScope = "create:vdcs_templates"
	// Update Vdcs Templates
	OauthScopeUpdateVdcsTemplates OauthScope = "update:vdcs_templates"
	// Delete Vdcs Templates
	OauthScopeDeleteVdcsTemplates OauthScope = "delete:vdcs_templates"
)

func NewOauthScopeFromString(s string) (OauthScope, error) {
	switch s {
	case "read:actions":
		return OauthScopeReadActions, nil
	case "create:actions":
		return OauthScopeCreateActions, nil
	case "delete:actions":
		return OauthScopeDeleteActions, nil
	case "update:actions":
		return OauthScopeUpdateActions, nil
	case "read:anomaly_blocks":
		return OauthScopeReadAnomalyBlocks, nil
	case "delete:anomaly_blocks":
		return OauthScopeDeleteAnomalyBlocks, nil
	case "read:shields":
		return OauthScopeReadShields, nil
	case "create:shields":
		return OauthScopeCreateShields, nil
	case "update:shields":
		return OauthScopeUpdateShields, nil
	case "read:attack_protection":
		return OauthScopeReadAttackProtection, nil
	case "update:attack_protection":
		return OauthScopeUpdateAttackProtection, nil
	case "read:branding":
		return OauthScopeReadBranding, nil
	case "update:branding":
		return OauthScopeUpdateBranding, nil
	case "read:phone_providers":
		return OauthScopeReadPhoneProviders, nil
	case "create:phone_providers":
		return OauthScopeCreatePhoneProviders, nil
	case "update:phone_providers":
		return OauthScopeUpdatePhoneProviders, nil
	case "delete:phone_providers":
		return OauthScopeDeletePhoneProviders, nil
	case "read:phone_templates":
		return OauthScopeReadPhoneTemplates, nil
	case "create:phone_templates":
		return OauthScopeCreatePhoneTemplates, nil
	case "update:phone_templates":
		return OauthScopeUpdatePhoneTemplates, nil
	case "delete:phone_templates":
		return OauthScopeDeletePhoneTemplates, nil
	case "delete:branding":
		return OauthScopeDeleteBranding, nil
	case "read:client_grants":
		return OauthScopeReadClientGrants, nil
	case "create:client_grants":
		return OauthScopeCreateClientGrants, nil
	case "update:client_grants":
		return OauthScopeUpdateClientGrants, nil
	case "delete:client_grants":
		return OauthScopeDeleteClientGrants, nil
	case "read:organization_client_grants":
		return OauthScopeReadOrganizationClientGrants, nil
	case "read:clients":
		return OauthScopeReadClients, nil
	case "read:client_keys":
		return OauthScopeReadClientKeys, nil
	case "read:client_credentials":
		return OauthScopeReadClientCredentials, nil
	case "read:client_summary":
		return OauthScopeReadClientSummary, nil
	case "create:clients":
		return OauthScopeCreateClients, nil
	case "create:client_credentials":
		return OauthScopeCreateClientCredentials, nil
	case "update:client_credentials":
		return OauthScopeUpdateClientCredentials, nil
	case "delete:client_credentials":
		return OauthScopeDeleteClientCredentials, nil
	case "update:clients":
		return OauthScopeUpdateClients, nil
	case "update:client_keys":
		return OauthScopeUpdateClientKeys, nil
	case "delete:clients":
		return OauthScopeDeleteClients, nil
	case "read:connections":
		return OauthScopeReadConnections, nil
	case "read:connection_profiles":
		return OauthScopeReadConnectionProfiles, nil
	case "create:connection_profiles":
		return OauthScopeCreateConnectionProfiles, nil
	case "update:connection_profiles":
		return OauthScopeUpdateConnectionProfiles, nil
	case "delete:connection_profiles":
		return OauthScopeDeleteConnectionProfiles, nil
	case "create:connections":
		return OauthScopeCreateConnections, nil
	case "update:connections":
		return OauthScopeUpdateConnections, nil
	case "delete:connections":
		return OauthScopeDeleteConnections, nil
	case "read:users":
		return OauthScopeReadUsers, nil
	case "read:connections_keys":
		return OauthScopeReadConnectionsKeys, nil
	case "create:connections_keys":
		return OauthScopeCreateConnectionsKeys, nil
	case "update:connections_keys":
		return OauthScopeUpdateConnectionsKeys, nil
	case "read:scim_config":
		return OauthScopeReadSCIMConfig, nil
	case "create:scim_config":
		return OauthScopeCreateSCIMConfig, nil
	case "update:scim_config":
		return OauthScopeUpdateSCIMConfig, nil
	case "delete:scim_config":
		return OauthScopeDeleteSCIMConfig, nil
	case "read:scim_token":
		return OauthScopeReadSCIMToken, nil
	case "create:scim_token":
		return OauthScopeCreateSCIMToken, nil
	case "delete:scim_token":
		return OauthScopeDeleteSCIMToken, nil
	case "delete:users":
		return OauthScopeDeleteUsers, nil
	case "read:custom_domains":
		return OauthScopeReadCustomDomains, nil
	case "create:custom_domains":
		return OauthScopeCreateCustomDomains, nil
	case "update:custom_domains":
		return OauthScopeUpdateCustomDomains, nil
	case "delete:custom_domains":
		return OauthScopeDeleteCustomDomains, nil
	case "read:device_credentials":
		return OauthScopeReadDeviceCredentials, nil
	case "create:current_user_device_credentials":
		return OauthScopeCreateCurrentUserDeviceCredentials, nil
	case "delete:device_credentials":
		return OauthScopeDeleteDeviceCredentials, nil
	case "delete:current_user_device_credentials":
		return OauthScopeDeleteCurrentUserDeviceCredentials, nil
	case "update:device_codes":
		return OauthScopeUpdateDeviceCodes, nil
	case "read:device_codes":
		return OauthScopeReadDeviceCodes, nil
	case "create:test_email_dispatch":
		return OauthScopeCreateTestEmailDispatch, nil
	case "create:email_templates":
		return OauthScopeCreateEmailTemplates, nil
	case "read:email_templates":
		return OauthScopeReadEmailTemplates, nil
	case "update:email_templates":
		return OauthScopeUpdateEmailTemplates, nil
	case "read:email_provider":
		return OauthScopeReadEmailProvider, nil
	case "create:email_provider":
		return OauthScopeCreateEmailProvider, nil
	case "update:email_provider":
		return OauthScopeUpdateEmailProvider, nil
	case "delete:email_provider":
		return OauthScopeDeleteEmailProvider, nil
	case "read:entitlements":
		return OauthScopeReadEntitlements, nil
	case "read:event_streams":
		return OauthScopeReadEventStreams, nil
	case "create:event_streams":
		return OauthScopeCreateEventStreams, nil
	case "update:event_streams":
		return OauthScopeUpdateEventStreams, nil
	case "delete:event_streams":
		return OauthScopeDeleteEventStreams, nil
	case "read:event_deliveries":
		return OauthScopeReadEventDeliveries, nil
	case "update:event_deliveries":
		return OauthScopeUpdateEventDeliveries, nil
	case "read:extensions":
		return OauthScopeReadExtensions, nil
	case "read:flows":
		return OauthScopeReadFlows, nil
	case "create:flows":
		return OauthScopeCreateFlows, nil
	case "read:flows_vault_connections":
		return OauthScopeReadFlowsVaultConnections, nil
	case "create:flows_vault_connections":
		return OauthScopeCreateFlowsVaultConnections, nil
	case "update:flows_vault_connections":
		return OauthScopeUpdateFlowsVaultConnections, nil
	case "delete:flows_vault_connections":
		return OauthScopeDeleteFlowsVaultConnections, nil
	case "read:flows_executions":
		return OauthScopeReadFlowsExecutions, nil
	case "delete:flows_executions":
		return OauthScopeDeleteFlowsExecutions, nil
	case "update:flows":
		return OauthScopeUpdateFlows, nil
	case "delete:flows":
		return OauthScopeDeleteFlows, nil
	case "read:forms":
		return OauthScopeReadForms, nil
	case "create:forms":
		return OauthScopeCreateForms, nil
	case "update:forms":
		return OauthScopeUpdateForms, nil
	case "delete:forms":
		return OauthScopeDeleteForms, nil
	case "read:grants":
		return OauthScopeReadGrants, nil
	case "delete:grants":
		return OauthScopeDeleteGrants, nil
	case "create:guardian_enrollment_tickets":
		return OauthScopeCreateGuardianEnrollmentTickets, nil
	case "read:guardian_enrollments":
		return OauthScopeReadGuardianEnrollments, nil
	case "delete:guardian_enrollments":
		return OauthScopeDeleteGuardianEnrollments, nil
	case "read:guardian_factors":
		return OauthScopeReadGuardianFactors, nil
	case "update:guardian_factors":
		return OauthScopeUpdateGuardianFactors, nil
	case "read:mfa_policies":
		return OauthScopeReadMfaPolicies, nil
	case "update:mfa_policies":
		return OauthScopeUpdateMfaPolicies, nil
	case "read:hooks":
		return OauthScopeReadHooks, nil
	case "create:hooks":
		return OauthScopeCreateHooks, nil
	case "update:hooks":
		return OauthScopeUpdateHooks, nil
	case "delete:hooks":
		return OauthScopeDeleteHooks, nil
	case "read:insights":
		return OauthScopeReadInsights, nil
	case "read:stats":
		return OauthScopeReadStats, nil
	case "read:integrations":
		return OauthScopeReadIntegrations, nil
	case "create:integrations":
		return OauthScopeCreateIntegrations, nil
	case "update:integrations":
		return OauthScopeUpdateIntegrations, nil
	case "delete:integrations":
		return OauthScopeDeleteIntegrations, nil
	case "create:users":
		return OauthScopeCreateUsers, nil
	case "update:users":
		return OauthScopeUpdateUsers, nil
	case "read:custom_signing_keys":
		return OauthScopeReadCustomSigningKeys, nil
	case "create:custom_signing_keys":
		return OauthScopeCreateCustomSigningKeys, nil
	case "update:custom_signing_keys":
		return OauthScopeUpdateCustomSigningKeys, nil
	case "delete:custom_signing_keys":
		return OauthScopeDeleteCustomSigningKeys, nil
	case "read:encryption_keys":
		return OauthScopeReadEncryptionKeys, nil
	case "create:encryption_keys":
		return OauthScopeCreateEncryptionKeys, nil
	case "update:encryption_keys":
		return OauthScopeUpdateEncryptionKeys, nil
	case "delete:encryption_keys":
		return OauthScopeDeleteEncryptionKeys, nil
	case "read:signing_keys":
		return OauthScopeReadSigningKeys, nil
	case "create:signing_keys":
		return OauthScopeCreateSigningKeys, nil
	case "update:signing_keys":
		return OauthScopeUpdateSigningKeys, nil
	case "read:log_streams":
		return OauthScopeReadLogStreams, nil
	case "create:log_streams":
		return OauthScopeCreateLogStreams, nil
	case "update:log_streams":
		return OauthScopeUpdateLogStreams, nil
	case "delete:log_streams":
		return OauthScopeDeleteLogStreams, nil
	case "read:logs":
		return OauthScopeReadLogs, nil
	case "read:logs_users":
		return OauthScopeReadLogsUsers, nil
	case "read:tenant_settings":
		return OauthScopeReadTenantSettings, nil
	case "update:tenant_settings":
		return OauthScopeUpdateTenantSettings, nil
	case "read:network_acls":
		return OauthScopeReadNetworkACLs, nil
	case "create:network_acls":
		return OauthScopeCreateNetworkACLs, nil
	case "update:network_acls":
		return OauthScopeUpdateNetworkACLs, nil
	case "delete:network_acls":
		return OauthScopeDeleteNetworkACLs, nil
	case "read:organizations":
		return OauthScopeReadOrganizations, nil
	case "read:organizations_summary":
		return OauthScopeReadOrganizationsSummary, nil
	case "create:organizations":
		return OauthScopeCreateOrganizations, nil
	case "create:organization_connections":
		return OauthScopeCreateOrganizationConnections, nil
	case "update:organizations":
		return OauthScopeUpdateOrganizations, nil
	case "delete:organizations":
		return OauthScopeDeleteOrganizations, nil
	case "create:organization_client_grants":
		return OauthScopeCreateOrganizationClientGrants, nil
	case "delete:organization_client_grants":
		return OauthScopeDeleteOrganizationClientGrants, nil
	case "read:organization_connections":
		return OauthScopeReadOrganizationConnections, nil
	case "create:organization_discovery_domains":
		return OauthScopeCreateOrganizationDiscoveryDomains, nil
	case "update:organization_discovery_domains":
		return OauthScopeUpdateOrganizationDiscoveryDomains, nil
	case "update:organization_connections":
		return OauthScopeUpdateOrganizationConnections, nil
	case "delete:organization_connections":
		return OauthScopeDeleteOrganizationConnections, nil
	case "read:organization_invitations":
		return OauthScopeReadOrganizationInvitations, nil
	case "create:organization_invitations":
		return OauthScopeCreateOrganizationInvitations, nil
	case "delete:organization_invitations":
		return OauthScopeDeleteOrganizationInvitations, nil
	case "read:organization_members":
		return OauthScopeReadOrganizationMembers, nil
	case "create:organization_members":
		return OauthScopeCreateOrganizationMembers, nil
	case "delete:organization_members":
		return OauthScopeDeleteOrganizationMembers, nil
	case "read:organization_member_roles":
		return OauthScopeReadOrganizationMemberRoles, nil
	case "create:organization_member_roles":
		return OauthScopeCreateOrganizationMemberRoles, nil
	case "delete:organization_member_roles":
		return OauthScopeDeleteOrganizationMemberRoles, nil
	case "read:prompts":
		return OauthScopeReadPrompts, nil
	case "update:prompts":
		return OauthScopeUpdatePrompts, nil
	case "read:resource_servers":
		return OauthScopeReadResourceServers, nil
	case "update:resource_servers":
		return OauthScopeUpdateResourceServers, nil
	case "read:refresh_tokens":
		return OauthScopeReadRefreshTokens, nil
	case "delete:refresh_tokens":
		return OauthScopeDeleteRefreshTokens, nil
	case "create:resource_servers":
		return OauthScopeCreateResourceServers, nil
	case "delete:resource_servers":
		return OauthScopeDeleteResourceServers, nil
	case "read:roles":
		return OauthScopeReadRoles, nil
	case "create:roles":
		return OauthScopeCreateRoles, nil
	case "update:roles":
		return OauthScopeUpdateRoles, nil
	case "delete:roles":
		return OauthScopeDeleteRoles, nil
	case "read:role_members":
		return OauthScopeReadRoleMembers, nil
	case "create:role_members":
		return OauthScopeCreateRoleMembers, nil
	case "read:rules":
		return OauthScopeReadRules, nil
	case "create:rules":
		return OauthScopeCreateRules, nil
	case "update:rules":
		return OauthScopeUpdateRules, nil
	case "read:rules_configs":
		return OauthScopeReadRulesConfigs, nil
	case "update:rules_configs":
		return OauthScopeUpdateRulesConfigs, nil
	case "delete:rules_configs":
		return OauthScopeDeleteRulesConfigs, nil
	case "delete:rules":
		return OauthScopeDeleteRules, nil
	case "read:security_metrics":
		return OauthScopeReadSecurityMetrics, nil
	case "read:self_service_profiles":
		return OauthScopeReadSelfServiceProfiles, nil
	case "create:self_service_profiles":
		return OauthScopeCreateSelfServiceProfiles, nil
	case "update:self_service_profiles":
		return OauthScopeUpdateSelfServiceProfiles, nil
	case "delete:self_service_profiles":
		return OauthScopeDeleteSelfServiceProfiles, nil
	case "read:self_service_profile_custom_texts":
		return OauthScopeReadSelfServiceProfileCustomTexts, nil
	case "update:self_service_profile_custom_texts":
		return OauthScopeUpdateSelfServiceProfileCustomTexts, nil
	case "create:sso_access_tickets":
		return OauthScopeCreateSSOAccessTickets, nil
	case "delete:sso_access_tickets":
		return OauthScopeDeleteSSOAccessTickets, nil
	case "read:sessions":
		return OauthScopeReadSessions, nil
	case "delete:sessions":
		return OauthScopeDeleteSessions, nil
	case "delete:tenants":
		return OauthScopeDeleteTenants, nil
	case "run:checks":
		return OauthScopeRunChecks, nil
	case "read:checks":
		return OauthScopeReadChecks, nil
	case "read:tenant_feature_flags":
		return OauthScopeReadTenantFeatureFlags, nil
	case "read:tenant_invitations":
		return OauthScopeReadTenantInvitations, nil
	case "create:tenant_invitations":
		return OauthScopeCreateTenantInvitations, nil
	case "update:tenant_invitations":
		return OauthScopeUpdateTenantInvitations, nil
	case "delete:tenant_invitations":
		return OauthScopeDeleteTenantInvitations, nil
	case "read:tenant_members":
		return OauthScopeReadTenantMembers, nil
	case "update:tenant_members":
		return OauthScopeUpdateTenantMembers, nil
	case "delete:tenant_members":
		return OauthScopeDeleteTenantMembers, nil
	case "read:owners":
		return OauthScopeReadOwners, nil
	case "delete:owners":
		return OauthScopeDeleteOwners, nil
	case "create:user_tickets":
		return OauthScopeCreateUserTickets, nil
	case "read:token_exchange_profiles":
		return OauthScopeReadTokenExchangeProfiles, nil
	case "create:token_exchange_profiles":
		return OauthScopeCreateTokenExchangeProfiles, nil
	case "update:token_exchange_profiles":
		return OauthScopeUpdateTokenExchangeProfiles, nil
	case "delete:token_exchange_profiles":
		return OauthScopeDeleteTokenExchangeProfiles, nil
	case "read:entity_counts":
		return OauthScopeReadEntityCounts, nil
	case "read:user_attribute_profiles":
		return OauthScopeReadUserAttributeProfiles, nil
	case "create:user_attribute_profiles":
		return OauthScopeCreateUserAttributeProfiles, nil
	case "update:user_attribute_profiles":
		return OauthScopeUpdateUserAttributeProfiles, nil
	case "delete:user_attribute_profiles":
		return OauthScopeDeleteUserAttributeProfiles, nil
	case "read:user_idp_tokens":
		return OauthScopeReadUserIdpTokens, nil
	case "read:current_user":
		return OauthScopeReadCurrentUser, nil
	case "update:users_app_metadata":
		return OauthScopeUpdateUsersAppMetadata, nil
	case "update:current_user_metadata":
		return OauthScopeUpdateCurrentUserMetadata, nil
	case "delete:current_user":
		return OauthScopeDeleteCurrentUser, nil
	case "read:user_application_passwords":
		return OauthScopeReadUserApplicationPasswords, nil
	case "create:user_application_passwords":
		return OauthScopeCreateUserApplicationPasswords, nil
	case "delete:user_application_passwords":
		return OauthScopeDeleteUserApplicationPasswords, nil
	case "read:authentication_methods":
		return OauthScopeReadAuthenticationMethods, nil
	case "update:authentication_methods":
		return OauthScopeUpdateAuthenticationMethods, nil
	case "create:authentication_methods":
		return OauthScopeCreateAuthenticationMethods, nil
	case "delete:authentication_methods":
		return OauthScopeDeleteAuthenticationMethods, nil
	case "read:federated_connections_tokens":
		return OauthScopeReadFederatedConnectionsTokens, nil
	case "delete:federated_connections_tokens":
		return OauthScopeDeleteFederatedConnectionsTokens, nil
	case "update:current_user_identities":
		return OauthScopeUpdateCurrentUserIdentities, nil
	case "delete:role_members":
		return OauthScopeDeleteRoleMembers, nil
	case "read:vdcs_templates":
		return OauthScopeReadVdcsTemplates, nil
	case "create:vdcs_templates":
		return OauthScopeCreateVdcsTemplates, nil
	case "update:vdcs_templates":
		return OauthScopeUpdateVdcsTemplates, nil
	case "delete:vdcs_templates":
		return OauthScopeDeleteVdcsTemplates, nil
	}
	var t OauthScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OauthScope) Ptr() *OauthScope {
	return &o
}

type Organization struct {
	// Organization identifier.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of this organization.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Friendly name of this organization.
	DisplayName *string               `json:"display_name,omitempty" url:"display_name,omitempty"`
	Branding    *OrganizationBranding `json:"branding,omitempty" url:"branding,omitempty"`
	Metadata    *OrganizationMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`
	TokenQuota  *TokenQuota           `json:"token_quota,omitempty" url:"token_quota,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (o *Organization) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Organization) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Organization) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Organization) GetBranding() *OrganizationBranding {
	if o == nil {
		return nil
	}
	return o.Branding
}

func (o *Organization) GetMetadata() *OrganizationMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *Organization) GetTokenQuota() *TokenQuota {
	if o == nil {
		return nil
	}
	return o.TokenQuota
}

func (o *Organization) GetExtraProperties() map[string]interface{} {
	return o.ExtraProperties
}

func (o *Organization) UnmarshalJSON(data []byte) error {
	type embed Organization
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = Organization(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.ExtraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *Organization) MarshalJSON() ([]byte, error) {
	type embed Organization
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, o.ExtraProperties)
}

func (o *Organization) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Access level for the organization (e.g., "none", "full").
type OrganizationAccessLevelEnum string

const (
	OrganizationAccessLevelEnumNone     OrganizationAccessLevelEnum = "none"
	OrganizationAccessLevelEnumReadonly OrganizationAccessLevelEnum = "readonly"
	OrganizationAccessLevelEnumLimited  OrganizationAccessLevelEnum = "limited"
	OrganizationAccessLevelEnumFull     OrganizationAccessLevelEnum = "full"
)

func NewOrganizationAccessLevelEnumFromString(s string) (OrganizationAccessLevelEnum, error) {
	switch s {
	case "none":
		return OrganizationAccessLevelEnumNone, nil
	case "readonly":
		return OrganizationAccessLevelEnumReadonly, nil
	case "limited":
		return OrganizationAccessLevelEnumLimited, nil
	case "full":
		return OrganizationAccessLevelEnumFull, nil
	}
	var t OrganizationAccessLevelEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrganizationAccessLevelEnum) Ptr() *OrganizationAccessLevelEnum {
	return &o
}

// Theme defines how to style the login pages.
type OrganizationBranding struct {
	// URL of logo to display on login page.
	LogoURL *string                     `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Colors  *OrganizationBrandingColors `json:"colors,omitempty" url:"colors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationBranding) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *OrganizationBranding) GetColors() *OrganizationBrandingColors {
	if o == nil {
		return nil
	}
	return o.Colors
}

func (o *OrganizationBranding) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationBranding) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationBranding
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationBranding(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationBranding) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Color scheme used to customize the login pages.
type OrganizationBrandingColors struct {
	// HEX Color for primary elements.
	Primary string `json:"primary" url:"primary"`
	// HEX Color for background.
	PageBackground string `json:"page_background" url:"page_background"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationBrandingColors) GetPrimary() string {
	if o == nil {
		return ""
	}
	return o.Primary
}

func (o *OrganizationBrandingColors) GetPageBackground() string {
	if o == nil {
		return ""
	}
	return o.PageBackground
}

func (o *OrganizationBrandingColors) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationBrandingColors) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationBrandingColors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationBrandingColors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationBrandingColors) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationClientGrant struct {
	// ID of the client grant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the client.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The audience (API identifier) of this client grant
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scopes allowed for this client grant.
	Scope             []string               `json:"scope,omitempty" url:"scope,omitempty"`
	OrganizationUsage *OrganizationUsageEnum `json:"organization_usage,omitempty" url:"organization_usage,omitempty"`
	// If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
	AllowAnyOrganization *bool `json:"allow_any_organization,omitempty" url:"allow_any_organization,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationClientGrant) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrganizationClientGrant) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *OrganizationClientGrant) GetAudience() *string {
	if o == nil {
		return nil
	}
	return o.Audience
}

func (o *OrganizationClientGrant) GetScope() []string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *OrganizationClientGrant) GetOrganizationUsage() *OrganizationUsageEnum {
	if o == nil {
		return nil
	}
	return o.OrganizationUsage
}

func (o *OrganizationClientGrant) GetAllowAnyOrganization() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAnyOrganization
}

func (o *OrganizationClientGrant) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationClientGrant) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationClientGrant
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationClientGrant(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationClientGrant) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationConnection struct {
	// ID of the connection.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// Name of the connection in the scope of this organization.
	OrganizationConnectionName *string `json:"organization_connection_name,omitempty" url:"organization_connection_name,omitempty"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled         *bool                              `json:"is_signup_enabled,omitempty" url:"is_signup_enabled,omitempty"`
	Connection              *OrganizationConnectionInformation `json:"connection,omitempty" url:"connection,omitempty"`
	OrganizationAccessLevel *OrganizationAccessLevelEnum       `json:"organization_access_level,omitempty" url:"organization_access_level,omitempty"`
	// Whether the connection is enabled for the organization.
	IsEnabled *bool `json:"is_enabled,omitempty" url:"is_enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationConnection) GetConnectionID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *OrganizationConnection) GetOrganizationConnectionName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationConnectionName
}

func (o *OrganizationConnection) GetAssignMembershipOnLogin() *bool {
	if o == nil {
		return nil
	}
	return o.AssignMembershipOnLogin
}

func (o *OrganizationConnection) GetShowAsButton() *bool {
	if o == nil {
		return nil
	}
	return o.ShowAsButton
}

func (o *OrganizationConnection) GetIsSignupEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsSignupEnabled
}

func (o *OrganizationConnection) GetConnection() *OrganizationConnectionInformation {
	if o == nil {
		return nil
	}
	return o.Connection
}

func (o *OrganizationConnection) GetOrganizationAccessLevel() *OrganizationAccessLevelEnum {
	if o == nil {
		return nil
	}
	return o.OrganizationAccessLevel
}

func (o *OrganizationConnection) GetIsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

func (o *OrganizationConnection) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationConnection) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationConnection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationConnection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationConnection) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationConnectionInformation struct {
	// The name of the enabled connection.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The strategy of the enabled connection.
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (o *OrganizationConnectionInformation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OrganizationConnectionInformation) GetStrategy() *string {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *OrganizationConnectionInformation) GetExtraProperties() map[string]interface{} {
	return o.ExtraProperties
}

func (o *OrganizationConnectionInformation) UnmarshalJSON(data []byte) error {
	type embed OrganizationConnectionInformation
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OrganizationConnectionInformation(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.ExtraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationConnectionInformation) MarshalJSON() ([]byte, error) {
	type embed OrganizationConnectionInformation
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, o.ExtraProperties)
}

func (o *OrganizationConnectionInformation) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationInvitation struct {
	// The id of the user invitation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Organization identifier.
	OrganizationID *string                        `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Inviter        *OrganizationInvitationInviter `json:"inviter,omitempty" url:"inviter,omitempty"`
	Invitee        *OrganizationInvitationInvitee `json:"invitee,omitempty" url:"invitee,omitempty"`
	// The invitation url to be send to the invitee.
	InvitationURL *string `json:"invitation_url,omitempty" url:"invitation_url,omitempty"`
	// The ISO 8601 formatted timestamp representing the creation time of the invitation.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted timestamp representing the expiration time of the invitation.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// Auth0 client ID. Used to resolve the application's login initiation endpoint.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The id of the connection to force invitee to authenticate with.
	ConnectionID *string       `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	AppMetadata  *AppMetadata  `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadata `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// List of roles IDs to associated with the user.
	Roles []string `json:"roles,omitempty" url:"roles,omitempty"`
	// The id of the invitation ticket
	TicketID *string `json:"ticket_id,omitempty" url:"ticket_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationInvitation) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrganizationInvitation) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *OrganizationInvitation) GetInviter() *OrganizationInvitationInviter {
	if o == nil {
		return nil
	}
	return o.Inviter
}

func (o *OrganizationInvitation) GetInvitee() *OrganizationInvitationInvitee {
	if o == nil {
		return nil
	}
	return o.Invitee
}

func (o *OrganizationInvitation) GetInvitationURL() *string {
	if o == nil {
		return nil
	}
	return o.InvitationURL
}

func (o *OrganizationInvitation) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *OrganizationInvitation) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *OrganizationInvitation) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *OrganizationInvitation) GetConnectionID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *OrganizationInvitation) GetAppMetadata() *AppMetadata {
	if o == nil {
		return nil
	}
	return o.AppMetadata
}

func (o *OrganizationInvitation) GetUserMetadata() *UserMetadata {
	if o == nil {
		return nil
	}
	return o.UserMetadata
}

func (o *OrganizationInvitation) GetRoles() []string {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *OrganizationInvitation) GetTicketID() *string {
	if o == nil {
		return nil
	}
	return o.TicketID
}

func (o *OrganizationInvitation) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationInvitation) UnmarshalJSON(data []byte) error {
	type embed OrganizationInvitation
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OrganizationInvitation(unmarshaler.embed)
	o.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	o.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationInvitation) MarshalJSON() ([]byte, error) {
	type embed OrganizationInvitation
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*o),
		CreatedAt: internal.NewOptionalDateTime(o.CreatedAt),
		ExpiresAt: internal.NewOptionalDateTime(o.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (o *OrganizationInvitation) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationInvitationInvitee struct {
	// The invitee's email.
	Email string `json:"email" url:"email"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationInvitationInvitee) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *OrganizationInvitationInvitee) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationInvitationInvitee) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationInvitationInvitee
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationInvitationInvitee(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationInvitationInvitee) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationInvitationInviter struct {
	// The inviter's name.
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationInvitationInviter) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrganizationInvitationInviter) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationInvitationInviter) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationInvitationInviter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationInvitationInviter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationInvitationInviter) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationMember struct {
	// ID of this user.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// URL to a picture for this user.
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Email address of this user.
	Email *string                   `json:"email,omitempty" url:"email,omitempty"`
	Roles []*OrganizationMemberRole `json:"roles,omitempty" url:"roles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationMember) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *OrganizationMember) GetPicture() *string {
	if o == nil {
		return nil
	}
	return o.Picture
}

func (o *OrganizationMember) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OrganizationMember) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *OrganizationMember) GetRoles() []*OrganizationMemberRole {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *OrganizationMember) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationMember) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationMember
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationMember(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationMember) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationMemberRole struct {
	// ID for this role.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of this role.
	Name *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationMemberRole) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrganizationMemberRole) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OrganizationMemberRole) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationMemberRole) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationMemberRole
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationMemberRole(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationMemberRole) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Metadata associated with the organization, in the form of an object with string values (max 255 chars). Maximum of 25 metadata properties allowed.
type OrganizationMetadata = map[string]interface{}

// Defines whether organizations can be used with client credentials exchanges for this grant.
type OrganizationUsageEnum string

const (
	OrganizationUsageEnumDeny    OrganizationUsageEnum = "deny"
	OrganizationUsageEnumAllow   OrganizationUsageEnum = "allow"
	OrganizationUsageEnumRequire OrganizationUsageEnum = "require"
)

func NewOrganizationUsageEnumFromString(s string) (OrganizationUsageEnum, error) {
	switch s {
	case "deny":
		return OrganizationUsageEnumDeny, nil
	case "allow":
		return OrganizationUsageEnumAllow, nil
	case "require":
		return OrganizationUsageEnumRequire, nil
	}
	var t OrganizationUsageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrganizationUsageEnum) Ptr() *OrganizationUsageEnum {
	return &o
}

type PartialGroupsEnum string

const (
	PartialGroupsEnumLogin             PartialGroupsEnum = "login"
	PartialGroupsEnumLoginID           PartialGroupsEnum = "login-id"
	PartialGroupsEnumLoginPassword     PartialGroupsEnum = "login-password"
	PartialGroupsEnumLoginPasswordless PartialGroupsEnum = "login-passwordless"
	PartialGroupsEnumSignup            PartialGroupsEnum = "signup"
	PartialGroupsEnumSignupID          PartialGroupsEnum = "signup-id"
	PartialGroupsEnumSignupPassword    PartialGroupsEnum = "signup-password"
	PartialGroupsEnumCustomizedConsent PartialGroupsEnum = "customized-consent"
)

func NewPartialGroupsEnumFromString(s string) (PartialGroupsEnum, error) {
	switch s {
	case "login":
		return PartialGroupsEnumLogin, nil
	case "login-id":
		return PartialGroupsEnumLoginID, nil
	case "login-password":
		return PartialGroupsEnumLoginPassword, nil
	case "login-passwordless":
		return PartialGroupsEnumLoginPasswordless, nil
	case "signup":
		return PartialGroupsEnumSignup, nil
	case "signup-id":
		return PartialGroupsEnumSignupID, nil
	case "signup-password":
		return PartialGroupsEnumSignupPassword, nil
	case "customized-consent":
		return PartialGroupsEnumCustomizedConsent, nil
	}
	var t PartialGroupsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PartialGroupsEnum) Ptr() *PartialGroupsEnum {
	return &p
}

type PartialPhoneTemplateContent struct {
	// Default phone number to be used as 'from' when sending a phone notification
	From *string            `json:"from,omitempty" url:"from,omitempty"`
	Body *PhoneTemplateBody `json:"body,omitempty" url:"body,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PartialPhoneTemplateContent) GetFrom() *string {
	if p == nil {
		return nil
	}
	return p.From
}

func (p *PartialPhoneTemplateContent) GetBody() *PhoneTemplateBody {
	if p == nil {
		return nil
	}
	return p.Body
}

func (p *PartialPhoneTemplateContent) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PartialPhoneTemplateContent) UnmarshalJSON(data []byte) error {
	type unmarshaler PartialPhoneTemplateContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PartialPhoneTemplateContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PartialPhoneTemplateContent) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PatchClientCredentialResponseContent struct {
	// ID of the credential. Generated on creation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name given to the credential by the user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The key identifier of the credential, generated on creation.
	Kid            *string                        `json:"kid,omitempty" url:"kid,omitempty"`
	Alg            *ClientCredentialAlgorithmEnum `json:"alg,omitempty" url:"alg,omitempty"`
	CredentialType *ClientCredentialTypeEnum      `json:"credential_type,omitempty" url:"credential_type,omitempty"`
	// The X509 certificate's Subject Distinguished Name
	SubjectDn *string `json:"subject_dn,omitempty" url:"subject_dn,omitempty"`
	// The X509 certificate's SHA256 thumbprint
	ThumbprintSha256 *string `json:"thumbprint_sha256,omitempty" url:"thumbprint_sha256,omitempty"`
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (p *PatchClientCredentialResponseContent) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PatchClientCredentialResponseContent) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PatchClientCredentialResponseContent) GetKid() *string {
	if p == nil {
		return nil
	}
	return p.Kid
}

func (p *PatchClientCredentialResponseContent) GetAlg() *ClientCredentialAlgorithmEnum {
	if p == nil {
		return nil
	}
	return p.Alg
}

func (p *PatchClientCredentialResponseContent) GetCredentialType() *ClientCredentialTypeEnum {
	if p == nil {
		return nil
	}
	return p.CredentialType
}

func (p *PatchClientCredentialResponseContent) GetSubjectDn() *string {
	if p == nil {
		return nil
	}
	return p.SubjectDn
}

func (p *PatchClientCredentialResponseContent) GetThumbprintSha256() *string {
	if p == nil {
		return nil
	}
	return p.ThumbprintSha256
}

func (p *PatchClientCredentialResponseContent) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PatchClientCredentialResponseContent) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *PatchClientCredentialResponseContent) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PatchClientCredentialResponseContent) GetExtraProperties() map[string]interface{} {
	return p.ExtraProperties
}

func (p *PatchClientCredentialResponseContent) UnmarshalJSON(data []byte) error {
	type embed PatchClientCredentialResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchClientCredentialResponseContent(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	p.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	p.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.ExtraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchClientCredentialResponseContent) MarshalJSON() ([]byte, error) {
	type embed PatchClientCredentialResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewOptionalDateTime(p.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(p.UpdatedAt),
		ExpiresAt: internal.NewOptionalDateTime(p.ExpiresAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, p.ExtraProperties)
}

func (p *PatchClientCredentialResponseContent) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PermissionRequestPayload struct {
	// Resource server (API) identifier that this permission is for.
	ResourceServerIdentifier string `json:"resource_server_identifier" url:"resource_server_identifier"`
	// Name of this permission.
	PermissionName string `json:"permission_name" url:"permission_name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PermissionRequestPayload) GetResourceServerIdentifier() string {
	if p == nil {
		return ""
	}
	return p.ResourceServerIdentifier
}

func (p *PermissionRequestPayload) GetPermissionName() string {
	if p == nil {
		return ""
	}
	return p.PermissionName
}

func (p *PermissionRequestPayload) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PermissionRequestPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler PermissionRequestPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PermissionRequestPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PermissionRequestPayload) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PermissionsResponsePayload struct {
	// Resource server (API) identifier that this permission is for.
	ResourceServerIdentifier *string `json:"resource_server_identifier,omitempty" url:"resource_server_identifier,omitempty"`
	// Name of this permission.
	PermissionName *string `json:"permission_name,omitempty" url:"permission_name,omitempty"`
	// Resource server (API) name this permission is for.
	ResourceServerName *string `json:"resource_server_name,omitempty" url:"resource_server_name,omitempty"`
	// Description of this permission.
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PermissionsResponsePayload) GetResourceServerIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.ResourceServerIdentifier
}

func (p *PermissionsResponsePayload) GetPermissionName() *string {
	if p == nil {
		return nil
	}
	return p.PermissionName
}

func (p *PermissionsResponsePayload) GetResourceServerName() *string {
	if p == nil {
		return nil
	}
	return p.ResourceServerName
}

func (p *PermissionsResponsePayload) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PermissionsResponsePayload) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PermissionsResponsePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler PermissionsResponsePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PermissionsResponsePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PermissionsResponsePayload) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// This depicts the type of notifications this provider can receive.
type PhoneProviderChannelEnum = string

type PhoneProviderConfiguration struct {
	TwilioProviderConfiguration *TwilioProviderConfiguration
	CustomProviderConfiguration *CustomProviderConfiguration

	typ string
}

func (p *PhoneProviderConfiguration) GetTwilioProviderConfiguration() *TwilioProviderConfiguration {
	if p == nil {
		return nil
	}
	return p.TwilioProviderConfiguration
}

func (p *PhoneProviderConfiguration) GetCustomProviderConfiguration() *CustomProviderConfiguration {
	if p == nil {
		return nil
	}
	return p.CustomProviderConfiguration
}

func (p *PhoneProviderConfiguration) UnmarshalJSON(data []byte) error {
	valueTwilioProviderConfiguration := new(TwilioProviderConfiguration)
	if err := json.Unmarshal(data, &valueTwilioProviderConfiguration); err == nil {
		p.typ = "TwilioProviderConfiguration"
		p.TwilioProviderConfiguration = valueTwilioProviderConfiguration
		return nil
	}
	valueCustomProviderConfiguration := new(CustomProviderConfiguration)
	if err := json.Unmarshal(data, &valueCustomProviderConfiguration); err == nil {
		p.typ = "CustomProviderConfiguration"
		p.CustomProviderConfiguration = valueCustomProviderConfiguration
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneProviderConfiguration) MarshalJSON() ([]byte, error) {
	if p.typ == "TwilioProviderConfiguration" || p.TwilioProviderConfiguration != nil {
		return json.Marshal(p.TwilioProviderConfiguration)
	}
	if p.typ == "CustomProviderConfiguration" || p.CustomProviderConfiguration != nil {
		return json.Marshal(p.CustomProviderConfiguration)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneProviderConfigurationVisitor interface {
	VisitTwilioProviderConfiguration(*TwilioProviderConfiguration) error
	VisitCustomProviderConfiguration(*CustomProviderConfiguration) error
}

func (p *PhoneProviderConfiguration) Accept(visitor PhoneProviderConfigurationVisitor) error {
	if p.typ == "TwilioProviderConfiguration" || p.TwilioProviderConfiguration != nil {
		return visitor.VisitTwilioProviderConfiguration(p.TwilioProviderConfiguration)
	}
	if p.typ == "CustomProviderConfiguration" || p.CustomProviderConfiguration != nil {
		return visitor.VisitCustomProviderConfiguration(p.CustomProviderConfiguration)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// Provider credentials required to use authenticate to the provider.
type PhoneProviderCredentials struct {
	TwilioProviderCredentials *TwilioProviderCredentials
	CustomProviderCredentials *CustomProviderCredentials

	typ string
}

func (p *PhoneProviderCredentials) GetTwilioProviderCredentials() *TwilioProviderCredentials {
	if p == nil {
		return nil
	}
	return p.TwilioProviderCredentials
}

func (p *PhoneProviderCredentials) GetCustomProviderCredentials() *CustomProviderCredentials {
	if p == nil {
		return nil
	}
	return p.CustomProviderCredentials
}

func (p *PhoneProviderCredentials) UnmarshalJSON(data []byte) error {
	valueTwilioProviderCredentials := new(TwilioProviderCredentials)
	if err := json.Unmarshal(data, &valueTwilioProviderCredentials); err == nil {
		p.typ = "TwilioProviderCredentials"
		p.TwilioProviderCredentials = valueTwilioProviderCredentials
		return nil
	}
	valueCustomProviderCredentials := new(CustomProviderCredentials)
	if err := json.Unmarshal(data, &valueCustomProviderCredentials); err == nil {
		p.typ = "CustomProviderCredentials"
		p.CustomProviderCredentials = valueCustomProviderCredentials
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneProviderCredentials) MarshalJSON() ([]byte, error) {
	if p.typ == "TwilioProviderCredentials" || p.TwilioProviderCredentials != nil {
		return json.Marshal(p.TwilioProviderCredentials)
	}
	if p.typ == "CustomProviderCredentials" || p.CustomProviderCredentials != nil {
		return json.Marshal(p.CustomProviderCredentials)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneProviderCredentialsVisitor interface {
	VisitTwilioProviderCredentials(*TwilioProviderCredentials) error
	VisitCustomProviderCredentials(*CustomProviderCredentials) error
}

func (p *PhoneProviderCredentials) Accept(visitor PhoneProviderCredentialsVisitor) error {
	if p.typ == "TwilioProviderCredentials" || p.TwilioProviderCredentials != nil {
		return visitor.VisitTwilioProviderCredentials(p.TwilioProviderCredentials)
	}
	if p.typ == "CustomProviderCredentials" || p.CustomProviderCredentials != nil {
		return visitor.VisitCustomProviderCredentials(p.CustomProviderCredentials)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The delivery method for the notification
type PhoneProviderDeliveryMethodEnum string

const (
	PhoneProviderDeliveryMethodEnumText  PhoneProviderDeliveryMethodEnum = "text"
	PhoneProviderDeliveryMethodEnumVoice PhoneProviderDeliveryMethodEnum = "voice"
)

func NewPhoneProviderDeliveryMethodEnumFromString(s string) (PhoneProviderDeliveryMethodEnum, error) {
	switch s {
	case "text":
		return PhoneProviderDeliveryMethodEnumText, nil
	case "voice":
		return PhoneProviderDeliveryMethodEnumVoice, nil
	}
	var t PhoneProviderDeliveryMethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneProviderDeliveryMethodEnum) Ptr() *PhoneProviderDeliveryMethodEnum {
	return &p
}

// Name of the phone notification provider
type PhoneProviderNameEnum string

const (
	PhoneProviderNameEnumTwilio PhoneProviderNameEnum = "twilio"
	PhoneProviderNameEnumCustom PhoneProviderNameEnum = "custom"
)

func NewPhoneProviderNameEnumFromString(s string) (PhoneProviderNameEnum, error) {
	switch s {
	case "twilio":
		return PhoneProviderNameEnumTwilio, nil
	case "custom":
		return PhoneProviderNameEnumCustom, nil
	}
	var t PhoneProviderNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneProviderNameEnum) Ptr() *PhoneProviderNameEnum {
	return &p
}

// Phone provider configuration schema
type PhoneProviderSchemaMasked struct {
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the tenant
	Tenant  *string                   `json:"tenant,omitempty" url:"tenant,omitempty"`
	Name    PhoneProviderNameEnum     `json:"name" url:"name"`
	Channel *PhoneProviderChannelEnum `json:"channel,omitempty" url:"channel,omitempty"`
	// Whether the provider is enabled (false) or disabled (true).
	Disabled      *bool                       `json:"disabled,omitempty" url:"disabled,omitempty"`
	Configuration *PhoneProviderConfiguration `json:"configuration,omitempty" url:"configuration,omitempty"`
	// The provider's creation date and time in ISO 8601 format
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time of the last update to the provider in ISO 8601 format
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneProviderSchemaMasked) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PhoneProviderSchemaMasked) GetTenant() *string {
	if p == nil {
		return nil
	}
	return p.Tenant
}

func (p *PhoneProviderSchemaMasked) GetName() PhoneProviderNameEnum {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PhoneProviderSchemaMasked) GetDisabled() *bool {
	if p == nil {
		return nil
	}
	return p.Disabled
}

func (p *PhoneProviderSchemaMasked) GetConfiguration() *PhoneProviderConfiguration {
	if p == nil {
		return nil
	}
	return p.Configuration
}

func (p *PhoneProviderSchemaMasked) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PhoneProviderSchemaMasked) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *PhoneProviderSchemaMasked) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneProviderSchemaMasked) UnmarshalJSON(data []byte) error {
	type embed PhoneProviderSchemaMasked
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PhoneProviderSchemaMasked(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	p.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneProviderSchemaMasked) MarshalJSON() ([]byte, error) {
	type embed PhoneProviderSchemaMasked
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewOptionalDateTime(p.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PhoneProviderSchemaMasked) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneTemplate struct {
	ID           string                            `json:"id" url:"id"`
	Channel      *string                           `json:"channel,omitempty" url:"channel,omitempty"`
	Customizable *bool                             `json:"customizable,omitempty" url:"customizable,omitempty"`
	Tenant       *string                           `json:"tenant,omitempty" url:"tenant,omitempty"`
	Content      *PhoneTemplateContent             `json:"content" url:"content"`
	Type         PhoneTemplateNotificationTypeEnum `json:"type" url:"type"`
	// Whether the template is enabled (false) or disabled (true).
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneTemplate) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PhoneTemplate) GetChannel() *string {
	if p == nil {
		return nil
	}
	return p.Channel
}

func (p *PhoneTemplate) GetCustomizable() *bool {
	if p == nil {
		return nil
	}
	return p.Customizable
}

func (p *PhoneTemplate) GetTenant() *string {
	if p == nil {
		return nil
	}
	return p.Tenant
}

func (p *PhoneTemplate) GetContent() *PhoneTemplateContent {
	if p == nil {
		return nil
	}
	return p.Content
}

func (p *PhoneTemplate) GetType() PhoneTemplateNotificationTypeEnum {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PhoneTemplate) GetDisabled() bool {
	if p == nil {
		return false
	}
	return p.Disabled
}

func (p *PhoneTemplate) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneTemplate) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneTemplate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneTemplate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneTemplate) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneTemplateBody struct {
	// Content of the phone template for text notifications
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// Content of the phone template for voice notifications
	Voice *string `json:"voice,omitempty" url:"voice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneTemplateBody) GetText() *string {
	if p == nil {
		return nil
	}
	return p.Text
}

func (p *PhoneTemplateBody) GetVoice() *string {
	if p == nil {
		return nil
	}
	return p.Voice
}

func (p *PhoneTemplateBody) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneTemplateBody) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneTemplateBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneTemplateBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneTemplateBody) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneTemplateContent struct {
	Syntax *string `json:"syntax,omitempty" url:"syntax,omitempty"`
	// Default phone number to be used as 'from' when sending a phone notification
	From *string            `json:"from,omitempty" url:"from,omitempty"`
	Body *PhoneTemplateBody `json:"body,omitempty" url:"body,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneTemplateContent) GetSyntax() *string {
	if p == nil {
		return nil
	}
	return p.Syntax
}

func (p *PhoneTemplateContent) GetFrom() *string {
	if p == nil {
		return nil
	}
	return p.From
}

func (p *PhoneTemplateContent) GetBody() *PhoneTemplateBody {
	if p == nil {
		return nil
	}
	return p.Body
}

func (p *PhoneTemplateContent) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneTemplateContent) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneTemplateContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneTemplateContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneTemplateContent) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneTemplateNotificationTypeEnum string

const (
	PhoneTemplateNotificationTypeEnumOtpVerify      PhoneTemplateNotificationTypeEnum = "otp_verify"
	PhoneTemplateNotificationTypeEnumOtpEnroll      PhoneTemplateNotificationTypeEnum = "otp_enroll"
	PhoneTemplateNotificationTypeEnumChangePassword PhoneTemplateNotificationTypeEnum = "change_password"
	PhoneTemplateNotificationTypeEnumBlockedAccount PhoneTemplateNotificationTypeEnum = "blocked_account"
	PhoneTemplateNotificationTypeEnumPasswordBreach PhoneTemplateNotificationTypeEnum = "password_breach"
)

func NewPhoneTemplateNotificationTypeEnumFromString(s string) (PhoneTemplateNotificationTypeEnum, error) {
	switch s {
	case "otp_verify":
		return PhoneTemplateNotificationTypeEnumOtpVerify, nil
	case "otp_enroll":
		return PhoneTemplateNotificationTypeEnumOtpEnroll, nil
	case "change_password":
		return PhoneTemplateNotificationTypeEnumChangePassword, nil
	case "blocked_account":
		return PhoneTemplateNotificationTypeEnumBlockedAccount, nil
	case "password_breach":
		return PhoneTemplateNotificationTypeEnumPasswordBreach, nil
	}
	var t PhoneTemplateNotificationTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneTemplateNotificationTypeEnum) Ptr() *PhoneTemplateNotificationTypeEnum {
	return &p
}

type PostClientCredentialResponseContent struct {
	// ID of the credential. Generated on creation.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name given to the credential by the user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The key identifier of the credential, generated on creation.
	Kid            *string                        `json:"kid,omitempty" url:"kid,omitempty"`
	Alg            *ClientCredentialAlgorithmEnum `json:"alg,omitempty" url:"alg,omitempty"`
	CredentialType *ClientCredentialTypeEnum      `json:"credential_type,omitempty" url:"credential_type,omitempty"`
	// The X509 certificate's Subject Distinguished Name
	SubjectDn *string `json:"subject_dn,omitempty" url:"subject_dn,omitempty"`
	// The X509 certificate's SHA256 thumbprint
	ThumbprintSha256 *string `json:"thumbprint_sha256,omitempty" url:"thumbprint_sha256,omitempty"`
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (p *PostClientCredentialResponseContent) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PostClientCredentialResponseContent) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PostClientCredentialResponseContent) GetKid() *string {
	if p == nil {
		return nil
	}
	return p.Kid
}

func (p *PostClientCredentialResponseContent) GetAlg() *ClientCredentialAlgorithmEnum {
	if p == nil {
		return nil
	}
	return p.Alg
}

func (p *PostClientCredentialResponseContent) GetCredentialType() *ClientCredentialTypeEnum {
	if p == nil {
		return nil
	}
	return p.CredentialType
}

func (p *PostClientCredentialResponseContent) GetSubjectDn() *string {
	if p == nil {
		return nil
	}
	return p.SubjectDn
}

func (p *PostClientCredentialResponseContent) GetThumbprintSha256() *string {
	if p == nil {
		return nil
	}
	return p.ThumbprintSha256
}

func (p *PostClientCredentialResponseContent) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PostClientCredentialResponseContent) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *PostClientCredentialResponseContent) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PostClientCredentialResponseContent) GetExtraProperties() map[string]interface{} {
	return p.ExtraProperties
}

func (p *PostClientCredentialResponseContent) UnmarshalJSON(data []byte) error {
	type embed PostClientCredentialResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PostClientCredentialResponseContent(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	p.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	p.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.ExtraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PostClientCredentialResponseContent) MarshalJSON() ([]byte, error) {
	type embed PostClientCredentialResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewOptionalDateTime(p.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(p.UpdatedAt),
		ExpiresAt: internal.NewOptionalDateTime(p.ExpiresAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, p.ExtraProperties)
}

func (p *PostClientCredentialResponseContent) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Applies to phone authentication methods only. The preferred communication method.
type PreferredAuthenticationMethodEnum string

const (
	PreferredAuthenticationMethodEnumVoice PreferredAuthenticationMethodEnum = "voice"
	PreferredAuthenticationMethodEnumSms   PreferredAuthenticationMethodEnum = "sms"
)

func NewPreferredAuthenticationMethodEnumFromString(s string) (PreferredAuthenticationMethodEnum, error) {
	switch s {
	case "voice":
		return PreferredAuthenticationMethodEnumVoice, nil
	case "sms":
		return PreferredAuthenticationMethodEnumSms, nil
	}
	var t PreferredAuthenticationMethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PreferredAuthenticationMethodEnum) Ptr() *PreferredAuthenticationMethodEnum {
	return &p
}

type PromptGroupNameEnum string

const (
	PromptGroupNameEnumLogin                     PromptGroupNameEnum = "login"
	PromptGroupNameEnumLoginID                   PromptGroupNameEnum = "login-id"
	PromptGroupNameEnumLoginPassword             PromptGroupNameEnum = "login-password"
	PromptGroupNameEnumLoginPasswordless         PromptGroupNameEnum = "login-passwordless"
	PromptGroupNameEnumLoginEmailVerification    PromptGroupNameEnum = "login-email-verification"
	PromptGroupNameEnumSignup                    PromptGroupNameEnum = "signup"
	PromptGroupNameEnumSignupID                  PromptGroupNameEnum = "signup-id"
	PromptGroupNameEnumSignupPassword            PromptGroupNameEnum = "signup-password"
	PromptGroupNameEnumPhoneIdentifierEnrollment PromptGroupNameEnum = "phone-identifier-enrollment"
	PromptGroupNameEnumPhoneIdentifierChallenge  PromptGroupNameEnum = "phone-identifier-challenge"
	PromptGroupNameEnumEmailIdentifierChallenge  PromptGroupNameEnum = "email-identifier-challenge"
	PromptGroupNameEnumResetPassword             PromptGroupNameEnum = "reset-password"
	PromptGroupNameEnumCustomForm                PromptGroupNameEnum = "custom-form"
	PromptGroupNameEnumConsent                   PromptGroupNameEnum = "consent"
	PromptGroupNameEnumCustomizedConsent         PromptGroupNameEnum = "customized-consent"
	PromptGroupNameEnumLogout                    PromptGroupNameEnum = "logout"
	PromptGroupNameEnumMfaPush                   PromptGroupNameEnum = "mfa-push"
	PromptGroupNameEnumMfaOtp                    PromptGroupNameEnum = "mfa-otp"
	PromptGroupNameEnumMfaVoice                  PromptGroupNameEnum = "mfa-voice"
	PromptGroupNameEnumMfaPhone                  PromptGroupNameEnum = "mfa-phone"
	PromptGroupNameEnumMfaWebauthn               PromptGroupNameEnum = "mfa-webauthn"
	PromptGroupNameEnumMfaSms                    PromptGroupNameEnum = "mfa-sms"
	PromptGroupNameEnumMfaEmail                  PromptGroupNameEnum = "mfa-email"
	PromptGroupNameEnumMfaRecoveryCode           PromptGroupNameEnum = "mfa-recovery-code"
	PromptGroupNameEnumMfa                       PromptGroupNameEnum = "mfa"
	PromptGroupNameEnumStatus                    PromptGroupNameEnum = "status"
	PromptGroupNameEnumDeviceFlow                PromptGroupNameEnum = "device-flow"
	PromptGroupNameEnumEmailVerification         PromptGroupNameEnum = "email-verification"
	PromptGroupNameEnumEmailOtpChallenge         PromptGroupNameEnum = "email-otp-challenge"
	PromptGroupNameEnumOrganizations             PromptGroupNameEnum = "organizations"
	PromptGroupNameEnumInvitation                PromptGroupNameEnum = "invitation"
	PromptGroupNameEnumCommon                    PromptGroupNameEnum = "common"
	PromptGroupNameEnumPasskeys                  PromptGroupNameEnum = "passkeys"
	PromptGroupNameEnumCaptcha                   PromptGroupNameEnum = "captcha"
	PromptGroupNameEnumBruteForceProtection      PromptGroupNameEnum = "brute-force-protection"
)

func NewPromptGroupNameEnumFromString(s string) (PromptGroupNameEnum, error) {
	switch s {
	case "login":
		return PromptGroupNameEnumLogin, nil
	case "login-id":
		return PromptGroupNameEnumLoginID, nil
	case "login-password":
		return PromptGroupNameEnumLoginPassword, nil
	case "login-passwordless":
		return PromptGroupNameEnumLoginPasswordless, nil
	case "login-email-verification":
		return PromptGroupNameEnumLoginEmailVerification, nil
	case "signup":
		return PromptGroupNameEnumSignup, nil
	case "signup-id":
		return PromptGroupNameEnumSignupID, nil
	case "signup-password":
		return PromptGroupNameEnumSignupPassword, nil
	case "phone-identifier-enrollment":
		return PromptGroupNameEnumPhoneIdentifierEnrollment, nil
	case "phone-identifier-challenge":
		return PromptGroupNameEnumPhoneIdentifierChallenge, nil
	case "email-identifier-challenge":
		return PromptGroupNameEnumEmailIdentifierChallenge, nil
	case "reset-password":
		return PromptGroupNameEnumResetPassword, nil
	case "custom-form":
		return PromptGroupNameEnumCustomForm, nil
	case "consent":
		return PromptGroupNameEnumConsent, nil
	case "customized-consent":
		return PromptGroupNameEnumCustomizedConsent, nil
	case "logout":
		return PromptGroupNameEnumLogout, nil
	case "mfa-push":
		return PromptGroupNameEnumMfaPush, nil
	case "mfa-otp":
		return PromptGroupNameEnumMfaOtp, nil
	case "mfa-voice":
		return PromptGroupNameEnumMfaVoice, nil
	case "mfa-phone":
		return PromptGroupNameEnumMfaPhone, nil
	case "mfa-webauthn":
		return PromptGroupNameEnumMfaWebauthn, nil
	case "mfa-sms":
		return PromptGroupNameEnumMfaSms, nil
	case "mfa-email":
		return PromptGroupNameEnumMfaEmail, nil
	case "mfa-recovery-code":
		return PromptGroupNameEnumMfaRecoveryCode, nil
	case "mfa":
		return PromptGroupNameEnumMfa, nil
	case "status":
		return PromptGroupNameEnumStatus, nil
	case "device-flow":
		return PromptGroupNameEnumDeviceFlow, nil
	case "email-verification":
		return PromptGroupNameEnumEmailVerification, nil
	case "email-otp-challenge":
		return PromptGroupNameEnumEmailOtpChallenge, nil
	case "organizations":
		return PromptGroupNameEnumOrganizations, nil
	case "invitation":
		return PromptGroupNameEnumInvitation, nil
	case "common":
		return PromptGroupNameEnumCommon, nil
	case "passkeys":
		return PromptGroupNameEnumPasskeys, nil
	case "captcha":
		return PromptGroupNameEnumCaptcha, nil
	case "brute-force-protection":
		return PromptGroupNameEnumBruteForceProtection, nil
	}
	var t PromptGroupNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PromptGroupNameEnum) Ptr() *PromptGroupNameEnum {
	return &p
}

type PromptLanguageEnum string

const (
	PromptLanguageEnumAm    PromptLanguageEnum = "am"
	PromptLanguageEnumAr    PromptLanguageEnum = "ar"
	PromptLanguageEnumArEg  PromptLanguageEnum = "ar-EG"
	PromptLanguageEnumArSa  PromptLanguageEnum = "ar-SA"
	PromptLanguageEnumAz    PromptLanguageEnum = "az"
	PromptLanguageEnumBg    PromptLanguageEnum = "bg"
	PromptLanguageEnumBn    PromptLanguageEnum = "bn"
	PromptLanguageEnumBs    PromptLanguageEnum = "bs"
	PromptLanguageEnumCaEs  PromptLanguageEnum = "ca-ES"
	PromptLanguageEnumCnr   PromptLanguageEnum = "cnr"
	PromptLanguageEnumCs    PromptLanguageEnum = "cs"
	PromptLanguageEnumCy    PromptLanguageEnum = "cy"
	PromptLanguageEnumDa    PromptLanguageEnum = "da"
	PromptLanguageEnumDe    PromptLanguageEnum = "de"
	PromptLanguageEnumEl    PromptLanguageEnum = "el"
	PromptLanguageEnumEn    PromptLanguageEnum = "en"
	PromptLanguageEnumEnCa  PromptLanguageEnum = "en-CA"
	PromptLanguageEnumEs    PromptLanguageEnum = "es"
	PromptLanguageEnumEs419 PromptLanguageEnum = "es-419"
	PromptLanguageEnumEsAr  PromptLanguageEnum = "es-AR"
	PromptLanguageEnumEsMx  PromptLanguageEnum = "es-MX"
	PromptLanguageEnumEt    PromptLanguageEnum = "et"
	PromptLanguageEnumEuEs  PromptLanguageEnum = "eu-ES"
	PromptLanguageEnumFa    PromptLanguageEnum = "fa"
	PromptLanguageEnumFi    PromptLanguageEnum = "fi"
	PromptLanguageEnumFr    PromptLanguageEnum = "fr"
	PromptLanguageEnumFrCa  PromptLanguageEnum = "fr-CA"
	PromptLanguageEnumFrFr  PromptLanguageEnum = "fr-FR"
	PromptLanguageEnumGlEs  PromptLanguageEnum = "gl-ES"
	PromptLanguageEnumGu    PromptLanguageEnum = "gu"
	PromptLanguageEnumHe    PromptLanguageEnum = "he"
	PromptLanguageEnumHi    PromptLanguageEnum = "hi"
	PromptLanguageEnumHr    PromptLanguageEnum = "hr"
	PromptLanguageEnumHu    PromptLanguageEnum = "hu"
	PromptLanguageEnumHy    PromptLanguageEnum = "hy"
	PromptLanguageEnumID    PromptLanguageEnum = "id"
	PromptLanguageEnumIs    PromptLanguageEnum = "is"
	PromptLanguageEnumIt    PromptLanguageEnum = "it"
	PromptLanguageEnumJa    PromptLanguageEnum = "ja"
	PromptLanguageEnumKa    PromptLanguageEnum = "ka"
	PromptLanguageEnumKk    PromptLanguageEnum = "kk"
	PromptLanguageEnumKn    PromptLanguageEnum = "kn"
	PromptLanguageEnumKo    PromptLanguageEnum = "ko"
	PromptLanguageEnumLt    PromptLanguageEnum = "lt"
	PromptLanguageEnumLv    PromptLanguageEnum = "lv"
	PromptLanguageEnumMk    PromptLanguageEnum = "mk"
	PromptLanguageEnumMl    PromptLanguageEnum = "ml"
	PromptLanguageEnumMn    PromptLanguageEnum = "mn"
	PromptLanguageEnumMr    PromptLanguageEnum = "mr"
	PromptLanguageEnumMs    PromptLanguageEnum = "ms"
	PromptLanguageEnumMy    PromptLanguageEnum = "my"
	PromptLanguageEnumNb    PromptLanguageEnum = "nb"
	PromptLanguageEnumNl    PromptLanguageEnum = "nl"
	PromptLanguageEnumNn    PromptLanguageEnum = "nn"
	PromptLanguageEnumNo    PromptLanguageEnum = "no"
	PromptLanguageEnumPa    PromptLanguageEnum = "pa"
	PromptLanguageEnumPl    PromptLanguageEnum = "pl"
	PromptLanguageEnumPt    PromptLanguageEnum = "pt"
	PromptLanguageEnumPtBr  PromptLanguageEnum = "pt-BR"
	PromptLanguageEnumPtPt  PromptLanguageEnum = "pt-PT"
	PromptLanguageEnumRo    PromptLanguageEnum = "ro"
	PromptLanguageEnumRu    PromptLanguageEnum = "ru"
	PromptLanguageEnumSk    PromptLanguageEnum = "sk"
	PromptLanguageEnumSl    PromptLanguageEnum = "sl"
	PromptLanguageEnumSo    PromptLanguageEnum = "so"
	PromptLanguageEnumSq    PromptLanguageEnum = "sq"
	PromptLanguageEnumSr    PromptLanguageEnum = "sr"
	PromptLanguageEnumSv    PromptLanguageEnum = "sv"
	PromptLanguageEnumSw    PromptLanguageEnum = "sw"
	PromptLanguageEnumTa    PromptLanguageEnum = "ta"
	PromptLanguageEnumTe    PromptLanguageEnum = "te"
	PromptLanguageEnumTh    PromptLanguageEnum = "th"
	PromptLanguageEnumTl    PromptLanguageEnum = "tl"
	PromptLanguageEnumTr    PromptLanguageEnum = "tr"
	PromptLanguageEnumUk    PromptLanguageEnum = "uk"
	PromptLanguageEnumUr    PromptLanguageEnum = "ur"
	PromptLanguageEnumVi    PromptLanguageEnum = "vi"
	PromptLanguageEnumZgh   PromptLanguageEnum = "zgh"
	PromptLanguageEnumZhCn  PromptLanguageEnum = "zh-CN"
	PromptLanguageEnumZhHk  PromptLanguageEnum = "zh-HK"
	PromptLanguageEnumZhTw  PromptLanguageEnum = "zh-TW"
)

func NewPromptLanguageEnumFromString(s string) (PromptLanguageEnum, error) {
	switch s {
	case "am":
		return PromptLanguageEnumAm, nil
	case "ar":
		return PromptLanguageEnumAr, nil
	case "ar-EG":
		return PromptLanguageEnumArEg, nil
	case "ar-SA":
		return PromptLanguageEnumArSa, nil
	case "az":
		return PromptLanguageEnumAz, nil
	case "bg":
		return PromptLanguageEnumBg, nil
	case "bn":
		return PromptLanguageEnumBn, nil
	case "bs":
		return PromptLanguageEnumBs, nil
	case "ca-ES":
		return PromptLanguageEnumCaEs, nil
	case "cnr":
		return PromptLanguageEnumCnr, nil
	case "cs":
		return PromptLanguageEnumCs, nil
	case "cy":
		return PromptLanguageEnumCy, nil
	case "da":
		return PromptLanguageEnumDa, nil
	case "de":
		return PromptLanguageEnumDe, nil
	case "el":
		return PromptLanguageEnumEl, nil
	case "en":
		return PromptLanguageEnumEn, nil
	case "en-CA":
		return PromptLanguageEnumEnCa, nil
	case "es":
		return PromptLanguageEnumEs, nil
	case "es-419":
		return PromptLanguageEnumEs419, nil
	case "es-AR":
		return PromptLanguageEnumEsAr, nil
	case "es-MX":
		return PromptLanguageEnumEsMx, nil
	case "et":
		return PromptLanguageEnumEt, nil
	case "eu-ES":
		return PromptLanguageEnumEuEs, nil
	case "fa":
		return PromptLanguageEnumFa, nil
	case "fi":
		return PromptLanguageEnumFi, nil
	case "fr":
		return PromptLanguageEnumFr, nil
	case "fr-CA":
		return PromptLanguageEnumFrCa, nil
	case "fr-FR":
		return PromptLanguageEnumFrFr, nil
	case "gl-ES":
		return PromptLanguageEnumGlEs, nil
	case "gu":
		return PromptLanguageEnumGu, nil
	case "he":
		return PromptLanguageEnumHe, nil
	case "hi":
		return PromptLanguageEnumHi, nil
	case "hr":
		return PromptLanguageEnumHr, nil
	case "hu":
		return PromptLanguageEnumHu, nil
	case "hy":
		return PromptLanguageEnumHy, nil
	case "id":
		return PromptLanguageEnumID, nil
	case "is":
		return PromptLanguageEnumIs, nil
	case "it":
		return PromptLanguageEnumIt, nil
	case "ja":
		return PromptLanguageEnumJa, nil
	case "ka":
		return PromptLanguageEnumKa, nil
	case "kk":
		return PromptLanguageEnumKk, nil
	case "kn":
		return PromptLanguageEnumKn, nil
	case "ko":
		return PromptLanguageEnumKo, nil
	case "lt":
		return PromptLanguageEnumLt, nil
	case "lv":
		return PromptLanguageEnumLv, nil
	case "mk":
		return PromptLanguageEnumMk, nil
	case "ml":
		return PromptLanguageEnumMl, nil
	case "mn":
		return PromptLanguageEnumMn, nil
	case "mr":
		return PromptLanguageEnumMr, nil
	case "ms":
		return PromptLanguageEnumMs, nil
	case "my":
		return PromptLanguageEnumMy, nil
	case "nb":
		return PromptLanguageEnumNb, nil
	case "nl":
		return PromptLanguageEnumNl, nil
	case "nn":
		return PromptLanguageEnumNn, nil
	case "no":
		return PromptLanguageEnumNo, nil
	case "pa":
		return PromptLanguageEnumPa, nil
	case "pl":
		return PromptLanguageEnumPl, nil
	case "pt":
		return PromptLanguageEnumPt, nil
	case "pt-BR":
		return PromptLanguageEnumPtBr, nil
	case "pt-PT":
		return PromptLanguageEnumPtPt, nil
	case "ro":
		return PromptLanguageEnumRo, nil
	case "ru":
		return PromptLanguageEnumRu, nil
	case "sk":
		return PromptLanguageEnumSk, nil
	case "sl":
		return PromptLanguageEnumSl, nil
	case "so":
		return PromptLanguageEnumSo, nil
	case "sq":
		return PromptLanguageEnumSq, nil
	case "sr":
		return PromptLanguageEnumSr, nil
	case "sv":
		return PromptLanguageEnumSv, nil
	case "sw":
		return PromptLanguageEnumSw, nil
	case "ta":
		return PromptLanguageEnumTa, nil
	case "te":
		return PromptLanguageEnumTe, nil
	case "th":
		return PromptLanguageEnumTh, nil
	case "tl":
		return PromptLanguageEnumTl, nil
	case "tr":
		return PromptLanguageEnumTr, nil
	case "uk":
		return PromptLanguageEnumUk, nil
	case "ur":
		return PromptLanguageEnumUr, nil
	case "vi":
		return PromptLanguageEnumVi, nil
	case "zgh":
		return PromptLanguageEnumZgh, nil
	case "zh-CN":
		return PromptLanguageEnumZhCn, nil
	case "zh-HK":
		return PromptLanguageEnumZhHk, nil
	case "zh-TW":
		return PromptLanguageEnumZhTw, nil
	}
	var t PromptLanguageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PromptLanguageEnum) Ptr() *PromptLanguageEnum {
	return &p
}

// Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used. Applies to `public_key` credential type.
type PublicKeyCredentialAlgorithmEnum string

const (
	PublicKeyCredentialAlgorithmEnumRs256 PublicKeyCredentialAlgorithmEnum = "RS256"
	PublicKeyCredentialAlgorithmEnumRs384 PublicKeyCredentialAlgorithmEnum = "RS384"
	PublicKeyCredentialAlgorithmEnumPs256 PublicKeyCredentialAlgorithmEnum = "PS256"
)

func NewPublicKeyCredentialAlgorithmEnumFromString(s string) (PublicKeyCredentialAlgorithmEnum, error) {
	switch s {
	case "RS256":
		return PublicKeyCredentialAlgorithmEnumRs256, nil
	case "RS384":
		return PublicKeyCredentialAlgorithmEnumRs384, nil
	case "PS256":
		return PublicKeyCredentialAlgorithmEnumPs256, nil
	}
	var t PublicKeyCredentialAlgorithmEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PublicKeyCredentialAlgorithmEnum) Ptr() *PublicKeyCredentialAlgorithmEnum {
	return &p
}

type RefreshTokenDate struct {
	// The date and time when the refresh token was created
	DateTime               time.Time
	RefreshTokenDateObject RefreshTokenDateObject

	typ string
}

func (r *RefreshTokenDate) GetDateTime() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.DateTime
}

func (r *RefreshTokenDate) GetRefreshTokenDateObject() RefreshTokenDateObject {
	if r == nil {
		return nil
	}
	return r.RefreshTokenDateObject
}

func (r *RefreshTokenDate) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		r.typ = "DateTime"
		r.DateTime = valueDateTime.Time()
		return nil
	}
	var valueRefreshTokenDateObject RefreshTokenDateObject
	if err := json.Unmarshal(data, &valueRefreshTokenDateObject); err == nil {
		r.typ = "RefreshTokenDateObject"
		r.RefreshTokenDateObject = valueRefreshTokenDateObject
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RefreshTokenDate) MarshalJSON() ([]byte, error) {
	if r.typ == "DateTime" || !r.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(r.DateTime))
	}
	if r.typ == "RefreshTokenDateObject" || r.RefreshTokenDateObject != nil {
		return json.Marshal(r.RefreshTokenDateObject)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RefreshTokenDateVisitor interface {
	VisitDateTime(time.Time) error
	VisitRefreshTokenDateObject(RefreshTokenDateObject) error
}

func (r *RefreshTokenDate) Accept(visitor RefreshTokenDateVisitor) error {
	if r.typ == "DateTime" || !r.DateTime.IsZero() {
		return visitor.VisitDateTime(r.DateTime)
	}
	if r.typ == "RefreshTokenDateObject" || r.RefreshTokenDateObject != nil {
		return visitor.VisitRefreshTokenDateObject(r.RefreshTokenDateObject)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// The date and time when the refresh token was created
type RefreshTokenDateObject = map[string]interface{}

// Device used while issuing/exchanging the refresh token
type RefreshTokenDevice struct {
	// First IP address associated with the refresh token
	InitialIP *string `json:"initial_ip,omitempty" url:"initial_ip,omitempty"`
	// First autonomous system number associated with the refresh token
	InitialAsn *string `json:"initial_asn,omitempty" url:"initial_asn,omitempty"`
	// First user agent associated with the refresh token
	InitialUserAgent *string `json:"initial_user_agent,omitempty" url:"initial_user_agent,omitempty"`
	// Last IP address associated with the refresh token
	LastIP *string `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	// Last autonomous system number associated with the refresh token
	LastAsn *string `json:"last_asn,omitempty" url:"last_asn,omitempty"`
	// Last user agent associated with the refresh token
	LastUserAgent *string `json:"last_user_agent,omitempty" url:"last_user_agent,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RefreshTokenDevice) GetInitialIP() *string {
	if r == nil {
		return nil
	}
	return r.InitialIP
}

func (r *RefreshTokenDevice) GetInitialAsn() *string {
	if r == nil {
		return nil
	}
	return r.InitialAsn
}

func (r *RefreshTokenDevice) GetInitialUserAgent() *string {
	if r == nil {
		return nil
	}
	return r.InitialUserAgent
}

func (r *RefreshTokenDevice) GetLastIP() *string {
	if r == nil {
		return nil
	}
	return r.LastIP
}

func (r *RefreshTokenDevice) GetLastAsn() *string {
	if r == nil {
		return nil
	}
	return r.LastAsn
}

func (r *RefreshTokenDevice) GetLastUserAgent() *string {
	if r == nil {
		return nil
	}
	return r.LastUserAgent
}

func (r *RefreshTokenDevice) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RefreshTokenDevice) UnmarshalJSON(data []byte) error {
	type embed RefreshTokenDevice
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RefreshTokenDevice(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefreshTokenDevice) MarshalJSON() ([]byte, error) {
	type embed RefreshTokenDevice
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RefreshTokenDevice) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RefreshTokenResourceServer struct {
	// Resource server ID
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// List of scopes for the refresh token
	Scopes *string `json:"scopes,omitempty" url:"scopes,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RefreshTokenResourceServer) GetAudience() *string {
	if r == nil {
		return nil
	}
	return r.Audience
}

func (r *RefreshTokenResourceServer) GetScopes() *string {
	if r == nil {
		return nil
	}
	return r.Scopes
}

func (r *RefreshTokenResourceServer) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RefreshTokenResourceServer) UnmarshalJSON(data []byte) error {
	type embed RefreshTokenResourceServer
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RefreshTokenResourceServer(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefreshTokenResourceServer) MarshalJSON() ([]byte, error) {
	type embed RefreshTokenResourceServer
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RefreshTokenResourceServer) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RefreshTokenResponseContent struct {
	// The ID of the refresh token
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the user which can be used when interacting with other APIs.
	UserID        *string             `json:"user_id,omitempty" url:"user_id,omitempty"`
	CreatedAt     *RefreshTokenDate   `json:"created_at,omitempty" url:"created_at,omitempty"`
	IdleExpiresAt *RefreshTokenDate   `json:"idle_expires_at,omitempty" url:"idle_expires_at,omitempty"`
	ExpiresAt     *RefreshTokenDate   `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	Device        *RefreshTokenDevice `json:"device,omitempty" url:"device,omitempty"`
	// ID of the client application granted with this refresh token
	ClientID  *string                `json:"client_id,omitempty" url:"client_id,omitempty"`
	SessionID *RefreshTokenSessionID `json:"session_id,omitempty" url:"session_id,omitempty"`
	// True if the token is a rotating refresh token
	Rotating *bool `json:"rotating,omitempty" url:"rotating,omitempty"`
	// A list of the resource server IDs associated to this refresh-token and their granted scopes
	ResourceServers []*RefreshTokenResourceServer `json:"resource_servers,omitempty" url:"resource_servers,omitempty"`
	LastExchangedAt *RefreshTokenDate             `json:"last_exchanged_at,omitempty" url:"last_exchanged_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RefreshTokenResponseContent) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RefreshTokenResponseContent) GetUserID() *string {
	if r == nil {
		return nil
	}
	return r.UserID
}

func (r *RefreshTokenResponseContent) GetCreatedAt() *RefreshTokenDate {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RefreshTokenResponseContent) GetIdleExpiresAt() *RefreshTokenDate {
	if r == nil {
		return nil
	}
	return r.IdleExpiresAt
}

func (r *RefreshTokenResponseContent) GetExpiresAt() *RefreshTokenDate {
	if r == nil {
		return nil
	}
	return r.ExpiresAt
}

func (r *RefreshTokenResponseContent) GetDevice() *RefreshTokenDevice {
	if r == nil {
		return nil
	}
	return r.Device
}

func (r *RefreshTokenResponseContent) GetClientID() *string {
	if r == nil {
		return nil
	}
	return r.ClientID
}

func (r *RefreshTokenResponseContent) GetSessionID() *RefreshTokenSessionID {
	if r == nil {
		return nil
	}
	return r.SessionID
}

func (r *RefreshTokenResponseContent) GetRotating() *bool {
	if r == nil {
		return nil
	}
	return r.Rotating
}

func (r *RefreshTokenResponseContent) GetResourceServers() []*RefreshTokenResourceServer {
	if r == nil {
		return nil
	}
	return r.ResourceServers
}

func (r *RefreshTokenResponseContent) GetLastExchangedAt() *RefreshTokenDate {
	if r == nil {
		return nil
	}
	return r.LastExchangedAt
}

func (r *RefreshTokenResponseContent) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RefreshTokenResponseContent) UnmarshalJSON(data []byte) error {
	type embed RefreshTokenResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RefreshTokenResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefreshTokenResponseContent) MarshalJSON() ([]byte, error) {
	type embed RefreshTokenResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RefreshTokenResponseContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// ID of the authenticated session used to obtain this refresh-token
type RefreshTokenSessionID = *string

type ResetPhoneTemplateRequestContent = interface{}

type ResetPhoneTemplateResponseContent struct {
	ID           string                            `json:"id" url:"id"`
	Channel      *string                           `json:"channel,omitempty" url:"channel,omitempty"`
	Customizable *bool                             `json:"customizable,omitempty" url:"customizable,omitempty"`
	Tenant       *string                           `json:"tenant,omitempty" url:"tenant,omitempty"`
	Content      *PhoneTemplateContent             `json:"content" url:"content"`
	Type         PhoneTemplateNotificationTypeEnum `json:"type" url:"type"`
	// Whether the template is enabled (false) or disabled (true).
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResetPhoneTemplateResponseContent) GetID() string {
	if r == nil {
		return ""
	}
	return r.ID
}

func (r *ResetPhoneTemplateResponseContent) GetChannel() *string {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *ResetPhoneTemplateResponseContent) GetCustomizable() *bool {
	if r == nil {
		return nil
	}
	return r.Customizable
}

func (r *ResetPhoneTemplateResponseContent) GetTenant() *string {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *ResetPhoneTemplateResponseContent) GetContent() *PhoneTemplateContent {
	if r == nil {
		return nil
	}
	return r.Content
}

func (r *ResetPhoneTemplateResponseContent) GetType() PhoneTemplateNotificationTypeEnum {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *ResetPhoneTemplateResponseContent) GetDisabled() bool {
	if r == nil {
		return false
	}
	return r.Disabled
}

func (r *ResetPhoneTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResetPhoneTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ResetPhoneTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResetPhoneTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResetPhoneTemplateResponseContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// PEM-encoded certificate
type ResourceServerVerificationKeyPemCertificate = string

type RevokedSigningKeysResponseContent struct {
	// Revoked key certificate
	Cert string `json:"cert" url:"cert"`
	// Revoked key id
	Kid string `json:"kid" url:"kid"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RevokedSigningKeysResponseContent) GetCert() string {
	if r == nil {
		return ""
	}
	return r.Cert
}

func (r *RevokedSigningKeysResponseContent) GetKid() string {
	if r == nil {
		return ""
	}
	return r.Kid
}

func (r *RevokedSigningKeysResponseContent) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RevokedSigningKeysResponseContent) UnmarshalJSON(data []byte) error {
	type embed RevokedSigningKeysResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RevokedSigningKeysResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevokedSigningKeysResponseContent) MarshalJSON() ([]byte, error) {
	type embed RevokedSigningKeysResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RevokedSigningKeysResponseContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type Role struct {
	// ID for this role.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of this role.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Description of this role.
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Role) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *Role) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *Role) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *Role) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Role) UnmarshalJSON(data []byte) error {
	type unmarshaler Role
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Role(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Role) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RoleUser struct {
	// ID of this user.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// URL to a picture for this user.
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RoleUser) GetUserID() *string {
	if r == nil {
		return nil
	}
	return r.UserID
}

func (r *RoleUser) GetPicture() *string {
	if r == nil {
		return nil
	}
	return r.Picture
}

func (r *RoleUser) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RoleUser) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *RoleUser) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RoleUser) UnmarshalJSON(data []byte) error {
	type unmarshaler RoleUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RoleUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RoleUser) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RotateConnectionKeysRequestContent struct {
	SigningAlg *RotateConnectionKeysSigningAlgEnum `json:"signing_alg,omitempty" url:"signing_alg,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RotateConnectionKeysRequestContent) GetSigningAlg() *RotateConnectionKeysSigningAlgEnum {
	if r == nil {
		return nil
	}
	return r.SigningAlg
}

func (r *RotateConnectionKeysRequestContent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RotateConnectionKeysRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler RotateConnectionKeysRequestContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RotateConnectionKeysRequestContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotateConnectionKeysRequestContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Selected Signing Algorithm
type RotateConnectionKeysSigningAlgEnum string

const (
	RotateConnectionKeysSigningAlgEnumRs256 RotateConnectionKeysSigningAlgEnum = "RS256"
	RotateConnectionKeysSigningAlgEnumRs512 RotateConnectionKeysSigningAlgEnum = "RS512"
	RotateConnectionKeysSigningAlgEnumPs256 RotateConnectionKeysSigningAlgEnum = "PS256"
	RotateConnectionKeysSigningAlgEnumEs256 RotateConnectionKeysSigningAlgEnum = "ES256"
)

func NewRotateConnectionKeysSigningAlgEnumFromString(s string) (RotateConnectionKeysSigningAlgEnum, error) {
	switch s {
	case "RS256":
		return RotateConnectionKeysSigningAlgEnumRs256, nil
	case "RS512":
		return RotateConnectionKeysSigningAlgEnumRs512, nil
	case "PS256":
		return RotateConnectionKeysSigningAlgEnumPs256, nil
	case "ES256":
		return RotateConnectionKeysSigningAlgEnumEs256, nil
	}
	var t RotateConnectionKeysSigningAlgEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RotateConnectionKeysSigningAlgEnum) Ptr() *RotateConnectionKeysSigningAlgEnum {
	return &r
}

type RotateConnectionsKeysResponseContent struct {
	// The key id of the signing key
	Kid string `json:"kid" url:"kid"`
	// The public certificate of the signing key
	Cert string `json:"cert" url:"cert"`
	// The public certificate of the signing key in pkcs7 format
	Pkcs *string `json:"pkcs,omitempty" url:"pkcs,omitempty"`
	// True if the key is the the next key
	Next *bool `json:"next,omitempty" url:"next,omitempty"`
	// The cert fingerprint
	Fingerprint string `json:"fingerprint" url:"fingerprint"`
	// The cert thumbprint
	Thumbprint string `json:"thumbprint" url:"thumbprint"`
	// Signing key algorithm
	Algorithm *string               `json:"algorithm,omitempty" url:"algorithm,omitempty"`
	KeyUse    *ConnectionKeyUseEnum `json:"key_use,omitempty" url:"key_use,omitempty"`
	SubjectDn *string               `json:"subject_dn,omitempty" url:"subject_dn,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RotateConnectionsKeysResponseContent) GetKid() string {
	if r == nil {
		return ""
	}
	return r.Kid
}

func (r *RotateConnectionsKeysResponseContent) GetCert() string {
	if r == nil {
		return ""
	}
	return r.Cert
}

func (r *RotateConnectionsKeysResponseContent) GetPkcs() *string {
	if r == nil {
		return nil
	}
	return r.Pkcs
}

func (r *RotateConnectionsKeysResponseContent) GetNext() *bool {
	if r == nil {
		return nil
	}
	return r.Next
}

func (r *RotateConnectionsKeysResponseContent) GetFingerprint() string {
	if r == nil {
		return ""
	}
	return r.Fingerprint
}

func (r *RotateConnectionsKeysResponseContent) GetThumbprint() string {
	if r == nil {
		return ""
	}
	return r.Thumbprint
}

func (r *RotateConnectionsKeysResponseContent) GetAlgorithm() *string {
	if r == nil {
		return nil
	}
	return r.Algorithm
}

func (r *RotateConnectionsKeysResponseContent) GetKeyUse() *ConnectionKeyUseEnum {
	if r == nil {
		return nil
	}
	return r.KeyUse
}

func (r *RotateConnectionsKeysResponseContent) GetSubjectDn() *string {
	if r == nil {
		return nil
	}
	return r.SubjectDn
}

func (r *RotateConnectionsKeysResponseContent) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RotateConnectionsKeysResponseContent) UnmarshalJSON(data []byte) error {
	type embed RotateConnectionsKeysResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RotateConnectionsKeysResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotateConnectionsKeysResponseContent) MarshalJSON() ([]byte, error) {
	type embed RotateConnectionsKeysResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RotateConnectionsKeysResponseContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RotateSigningKeysResponseContent struct {
	// Next key certificate
	Cert string `json:"cert" url:"cert"`
	// Next key id
	Kid string `json:"kid" url:"kid"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RotateSigningKeysResponseContent) GetCert() string {
	if r == nil {
		return ""
	}
	return r.Cert
}

func (r *RotateSigningKeysResponseContent) GetKid() string {
	if r == nil {
		return ""
	}
	return r.Kid
}

func (r *RotateSigningKeysResponseContent) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RotateSigningKeysResponseContent) UnmarshalJSON(data []byte) error {
	type embed RotateSigningKeysResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RotateSigningKeysResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotateSigningKeysResponseContent) MarshalJSON() ([]byte, error) {
	type embed RotateSigningKeysResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RotateSigningKeysResponseContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SCIMMappingItem struct {
	// The field location in the auth0 schema
	Auth0 *string `json:"auth0,omitempty" url:"auth0,omitempty"`
	// The field location in the SCIM schema
	SCIM *string `json:"scim,omitempty" url:"scim,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SCIMMappingItem) GetAuth0() *string {
	if s == nil {
		return nil
	}
	return s.Auth0
}

func (s *SCIMMappingItem) GetSCIM() *string {
	if s == nil {
		return nil
	}
	return s.SCIM
}

func (s *SCIMMappingItem) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SCIMMappingItem) UnmarshalJSON(data []byte) error {
	type embed SCIMMappingItem
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SCIMMappingItem(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SCIMMappingItem) MarshalJSON() ([]byte, error) {
	type embed SCIMMappingItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SCIMMappingItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SCIMTokenItem struct {
	// The token's identifier
	TokenID *string `json:"token_id,omitempty" url:"token_id,omitempty"`
	// The scopes of the scim token
	Scopes []string `json:"scopes,omitempty" url:"scopes,omitempty"`
	// The token's created at timestamp
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The token's valid until timestamp
	ValidUntil *string `json:"valid_until,omitempty" url:"valid_until,omitempty"`
	// The token's last used at timestamp
	LastUsedAt *string `json:"last_used_at,omitempty" url:"last_used_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SCIMTokenItem) GetTokenID() *string {
	if s == nil {
		return nil
	}
	return s.TokenID
}

func (s *SCIMTokenItem) GetScopes() []string {
	if s == nil {
		return nil
	}
	return s.Scopes
}

func (s *SCIMTokenItem) GetCreatedAt() *string {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SCIMTokenItem) GetValidUntil() *string {
	if s == nil {
		return nil
	}
	return s.ValidUntil
}

func (s *SCIMTokenItem) GetLastUsedAt() *string {
	if s == nil {
		return nil
	}
	return s.LastUsedAt
}

func (s *SCIMTokenItem) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SCIMTokenItem) UnmarshalJSON(data []byte) error {
	type embed SCIMTokenItem
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SCIMTokenItem(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SCIMTokenItem) MarshalJSON() ([]byte, error) {
	type embed SCIMTokenItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SCIMTokenItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScreenGroupNameEnum string

const (
	ScreenGroupNameEnumLogin                                     ScreenGroupNameEnum = "login"
	ScreenGroupNameEnumLoginID                                   ScreenGroupNameEnum = "login-id"
	ScreenGroupNameEnumLoginPassword                             ScreenGroupNameEnum = "login-password"
	ScreenGroupNameEnumLoginPasswordlessEmailCode                ScreenGroupNameEnum = "login-passwordless-email-code"
	ScreenGroupNameEnumLoginPasswordlessEmailLink                ScreenGroupNameEnum = "login-passwordless-email-link"
	ScreenGroupNameEnumLoginPasswordlessSmsOtp                   ScreenGroupNameEnum = "login-passwordless-sms-otp"
	ScreenGroupNameEnumLoginEmailVerification                    ScreenGroupNameEnum = "login-email-verification"
	ScreenGroupNameEnumSignup                                    ScreenGroupNameEnum = "signup"
	ScreenGroupNameEnumSignupID                                  ScreenGroupNameEnum = "signup-id"
	ScreenGroupNameEnumSignupPassword                            ScreenGroupNameEnum = "signup-password"
	ScreenGroupNameEnumPhoneIdentifierEnrollment                 ScreenGroupNameEnum = "phone-identifier-enrollment"
	ScreenGroupNameEnumPhoneIdentifierChallenge                  ScreenGroupNameEnum = "phone-identifier-challenge"
	ScreenGroupNameEnumEmailIdentifierChallenge                  ScreenGroupNameEnum = "email-identifier-challenge"
	ScreenGroupNameEnumResetPasswordRequest                      ScreenGroupNameEnum = "reset-password-request"
	ScreenGroupNameEnumResetPasswordEmail                        ScreenGroupNameEnum = "reset-password-email"
	ScreenGroupNameEnumResetPassword                             ScreenGroupNameEnum = "reset-password"
	ScreenGroupNameEnumResetPasswordSuccess                      ScreenGroupNameEnum = "reset-password-success"
	ScreenGroupNameEnumResetPasswordError                        ScreenGroupNameEnum = "reset-password-error"
	ScreenGroupNameEnumResetPasswordMfaEmailChallenge            ScreenGroupNameEnum = "reset-password-mfa-email-challenge"
	ScreenGroupNameEnumResetPasswordMfaOtpChallenge              ScreenGroupNameEnum = "reset-password-mfa-otp-challenge"
	ScreenGroupNameEnumResetPasswordMfaPhoneChallenge            ScreenGroupNameEnum = "reset-password-mfa-phone-challenge"
	ScreenGroupNameEnumResetPasswordMfaPushChallengePush         ScreenGroupNameEnum = "reset-password-mfa-push-challenge-push"
	ScreenGroupNameEnumResetPasswordMfaRecoveryCodeChallenge     ScreenGroupNameEnum = "reset-password-mfa-recovery-code-challenge"
	ScreenGroupNameEnumResetPasswordMfaSmsChallenge              ScreenGroupNameEnum = "reset-password-mfa-sms-challenge"
	ScreenGroupNameEnumResetPasswordMfaVoiceChallenge            ScreenGroupNameEnum = "reset-password-mfa-voice-challenge"
	ScreenGroupNameEnumResetPasswordMfaWebauthnPlatformChallenge ScreenGroupNameEnum = "reset-password-mfa-webauthn-platform-challenge"
	ScreenGroupNameEnumResetPasswordMfaWebauthnRoamingChallenge  ScreenGroupNameEnum = "reset-password-mfa-webauthn-roaming-challenge"
	ScreenGroupNameEnumCustomForm                                ScreenGroupNameEnum = "custom-form"
	ScreenGroupNameEnumConsent                                   ScreenGroupNameEnum = "consent"
	ScreenGroupNameEnumCustomizedConsent                         ScreenGroupNameEnum = "customized-consent"
	ScreenGroupNameEnumLogout                                    ScreenGroupNameEnum = "logout"
	ScreenGroupNameEnumLogoutComplete                            ScreenGroupNameEnum = "logout-complete"
	ScreenGroupNameEnumLogoutAborted                             ScreenGroupNameEnum = "logout-aborted"
	ScreenGroupNameEnumMfaPushWelcome                            ScreenGroupNameEnum = "mfa-push-welcome"
	ScreenGroupNameEnumMfaPushEnrollmentQr                       ScreenGroupNameEnum = "mfa-push-enrollment-qr"
	ScreenGroupNameEnumMfaPushEnrollmentCode                     ScreenGroupNameEnum = "mfa-push-enrollment-code"
	ScreenGroupNameEnumMfaPushSuccess                            ScreenGroupNameEnum = "mfa-push-success"
	ScreenGroupNameEnumMfaPushChallengePush                      ScreenGroupNameEnum = "mfa-push-challenge-push"
	ScreenGroupNameEnumMfaPushList                               ScreenGroupNameEnum = "mfa-push-list"
	ScreenGroupNameEnumMfaOtpEnrollmentQr                        ScreenGroupNameEnum = "mfa-otp-enrollment-qr"
	ScreenGroupNameEnumMfaOtpEnrollmentCode                      ScreenGroupNameEnum = "mfa-otp-enrollment-code"
	ScreenGroupNameEnumMfaOtpChallenge                           ScreenGroupNameEnum = "mfa-otp-challenge"
	ScreenGroupNameEnumMfaVoiceEnrollment                        ScreenGroupNameEnum = "mfa-voice-enrollment"
	ScreenGroupNameEnumMfaVoiceChallenge                         ScreenGroupNameEnum = "mfa-voice-challenge"
	ScreenGroupNameEnumMfaPhoneChallenge                         ScreenGroupNameEnum = "mfa-phone-challenge"
	ScreenGroupNameEnumMfaPhoneEnrollment                        ScreenGroupNameEnum = "mfa-phone-enrollment"
	ScreenGroupNameEnumMfaWebauthnPlatformEnrollment             ScreenGroupNameEnum = "mfa-webauthn-platform-enrollment"
	ScreenGroupNameEnumMfaWebauthnRoamingEnrollment              ScreenGroupNameEnum = "mfa-webauthn-roaming-enrollment"
	ScreenGroupNameEnumMfaWebauthnPlatformChallenge              ScreenGroupNameEnum = "mfa-webauthn-platform-challenge"
	ScreenGroupNameEnumMfaWebauthnRoamingChallenge               ScreenGroupNameEnum = "mfa-webauthn-roaming-challenge"
	ScreenGroupNameEnumMfaWebauthnChangeKeyNickname              ScreenGroupNameEnum = "mfa-webauthn-change-key-nickname"
	ScreenGroupNameEnumMfaWebauthnEnrollmentSuccess              ScreenGroupNameEnum = "mfa-webauthn-enrollment-success"
	ScreenGroupNameEnumMfaWebauthnError                          ScreenGroupNameEnum = "mfa-webauthn-error"
	ScreenGroupNameEnumMfaWebauthnNotAvailableError              ScreenGroupNameEnum = "mfa-webauthn-not-available-error"
	ScreenGroupNameEnumMfaCountryCodes                           ScreenGroupNameEnum = "mfa-country-codes"
	ScreenGroupNameEnumMfaSmsEnrollment                          ScreenGroupNameEnum = "mfa-sms-enrollment"
	ScreenGroupNameEnumMfaSmsChallenge                           ScreenGroupNameEnum = "mfa-sms-challenge"
	ScreenGroupNameEnumMfaSmsList                                ScreenGroupNameEnum = "mfa-sms-list"
	ScreenGroupNameEnumMfaEmailChallenge                         ScreenGroupNameEnum = "mfa-email-challenge"
	ScreenGroupNameEnumMfaEmailList                              ScreenGroupNameEnum = "mfa-email-list"
	ScreenGroupNameEnumMfaRecoveryCodeEnrollment                 ScreenGroupNameEnum = "mfa-recovery-code-enrollment"
	ScreenGroupNameEnumMfaRecoveryCodeChallengeNewCode           ScreenGroupNameEnum = "mfa-recovery-code-challenge-new-code"
	ScreenGroupNameEnumMfaRecoveryCodeChallenge                  ScreenGroupNameEnum = "mfa-recovery-code-challenge"
	ScreenGroupNameEnumMfaDetectBrowserCapabilities              ScreenGroupNameEnum = "mfa-detect-browser-capabilities"
	ScreenGroupNameEnumMfaEnrollResult                           ScreenGroupNameEnum = "mfa-enroll-result"
	ScreenGroupNameEnumMfaLoginOptions                           ScreenGroupNameEnum = "mfa-login-options"
	ScreenGroupNameEnumMfaBeginEnrollOptions                     ScreenGroupNameEnum = "mfa-begin-enroll-options"
	ScreenGroupNameEnumStatus                                    ScreenGroupNameEnum = "status"
	ScreenGroupNameEnumDeviceCodeActivation                      ScreenGroupNameEnum = "device-code-activation"
	ScreenGroupNameEnumDeviceCodeActivationAllowed               ScreenGroupNameEnum = "device-code-activation-allowed"
	ScreenGroupNameEnumDeviceCodeActivationDenied                ScreenGroupNameEnum = "device-code-activation-denied"
	ScreenGroupNameEnumDeviceCodeConfirmation                    ScreenGroupNameEnum = "device-code-confirmation"
	ScreenGroupNameEnumEmailVerificationResult                   ScreenGroupNameEnum = "email-verification-result"
	ScreenGroupNameEnumEmailOtpChallenge                         ScreenGroupNameEnum = "email-otp-challenge"
	ScreenGroupNameEnumOrganizationSelection                     ScreenGroupNameEnum = "organization-selection"
	ScreenGroupNameEnumOrganizationPicker                        ScreenGroupNameEnum = "organization-picker"
	ScreenGroupNameEnumAcceptInvitation                          ScreenGroupNameEnum = "accept-invitation"
	ScreenGroupNameEnumRedeemTicket                              ScreenGroupNameEnum = "redeem-ticket"
	ScreenGroupNameEnumPasskeyEnrollment                         ScreenGroupNameEnum = "passkey-enrollment"
	ScreenGroupNameEnumPasskeyEnrollmentLocal                    ScreenGroupNameEnum = "passkey-enrollment-local"
	ScreenGroupNameEnumInterstitialCaptcha                       ScreenGroupNameEnum = "interstitial-captcha"
	ScreenGroupNameEnumBruteForceProtectionUnblock               ScreenGroupNameEnum = "brute-force-protection-unblock"
	ScreenGroupNameEnumBruteForceProtectionUnblockSuccess        ScreenGroupNameEnum = "brute-force-protection-unblock-success"
	ScreenGroupNameEnumBruteForceProtectionUnblockFailure        ScreenGroupNameEnum = "brute-force-protection-unblock-failure"
)

func NewScreenGroupNameEnumFromString(s string) (ScreenGroupNameEnum, error) {
	switch s {
	case "login":
		return ScreenGroupNameEnumLogin, nil
	case "login-id":
		return ScreenGroupNameEnumLoginID, nil
	case "login-password":
		return ScreenGroupNameEnumLoginPassword, nil
	case "login-passwordless-email-code":
		return ScreenGroupNameEnumLoginPasswordlessEmailCode, nil
	case "login-passwordless-email-link":
		return ScreenGroupNameEnumLoginPasswordlessEmailLink, nil
	case "login-passwordless-sms-otp":
		return ScreenGroupNameEnumLoginPasswordlessSmsOtp, nil
	case "login-email-verification":
		return ScreenGroupNameEnumLoginEmailVerification, nil
	case "signup":
		return ScreenGroupNameEnumSignup, nil
	case "signup-id":
		return ScreenGroupNameEnumSignupID, nil
	case "signup-password":
		return ScreenGroupNameEnumSignupPassword, nil
	case "phone-identifier-enrollment":
		return ScreenGroupNameEnumPhoneIdentifierEnrollment, nil
	case "phone-identifier-challenge":
		return ScreenGroupNameEnumPhoneIdentifierChallenge, nil
	case "email-identifier-challenge":
		return ScreenGroupNameEnumEmailIdentifierChallenge, nil
	case "reset-password-request":
		return ScreenGroupNameEnumResetPasswordRequest, nil
	case "reset-password-email":
		return ScreenGroupNameEnumResetPasswordEmail, nil
	case "reset-password":
		return ScreenGroupNameEnumResetPassword, nil
	case "reset-password-success":
		return ScreenGroupNameEnumResetPasswordSuccess, nil
	case "reset-password-error":
		return ScreenGroupNameEnumResetPasswordError, nil
	case "reset-password-mfa-email-challenge":
		return ScreenGroupNameEnumResetPasswordMfaEmailChallenge, nil
	case "reset-password-mfa-otp-challenge":
		return ScreenGroupNameEnumResetPasswordMfaOtpChallenge, nil
	case "reset-password-mfa-phone-challenge":
		return ScreenGroupNameEnumResetPasswordMfaPhoneChallenge, nil
	case "reset-password-mfa-push-challenge-push":
		return ScreenGroupNameEnumResetPasswordMfaPushChallengePush, nil
	case "reset-password-mfa-recovery-code-challenge":
		return ScreenGroupNameEnumResetPasswordMfaRecoveryCodeChallenge, nil
	case "reset-password-mfa-sms-challenge":
		return ScreenGroupNameEnumResetPasswordMfaSmsChallenge, nil
	case "reset-password-mfa-voice-challenge":
		return ScreenGroupNameEnumResetPasswordMfaVoiceChallenge, nil
	case "reset-password-mfa-webauthn-platform-challenge":
		return ScreenGroupNameEnumResetPasswordMfaWebauthnPlatformChallenge, nil
	case "reset-password-mfa-webauthn-roaming-challenge":
		return ScreenGroupNameEnumResetPasswordMfaWebauthnRoamingChallenge, nil
	case "custom-form":
		return ScreenGroupNameEnumCustomForm, nil
	case "consent":
		return ScreenGroupNameEnumConsent, nil
	case "customized-consent":
		return ScreenGroupNameEnumCustomizedConsent, nil
	case "logout":
		return ScreenGroupNameEnumLogout, nil
	case "logout-complete":
		return ScreenGroupNameEnumLogoutComplete, nil
	case "logout-aborted":
		return ScreenGroupNameEnumLogoutAborted, nil
	case "mfa-push-welcome":
		return ScreenGroupNameEnumMfaPushWelcome, nil
	case "mfa-push-enrollment-qr":
		return ScreenGroupNameEnumMfaPushEnrollmentQr, nil
	case "mfa-push-enrollment-code":
		return ScreenGroupNameEnumMfaPushEnrollmentCode, nil
	case "mfa-push-success":
		return ScreenGroupNameEnumMfaPushSuccess, nil
	case "mfa-push-challenge-push":
		return ScreenGroupNameEnumMfaPushChallengePush, nil
	case "mfa-push-list":
		return ScreenGroupNameEnumMfaPushList, nil
	case "mfa-otp-enrollment-qr":
		return ScreenGroupNameEnumMfaOtpEnrollmentQr, nil
	case "mfa-otp-enrollment-code":
		return ScreenGroupNameEnumMfaOtpEnrollmentCode, nil
	case "mfa-otp-challenge":
		return ScreenGroupNameEnumMfaOtpChallenge, nil
	case "mfa-voice-enrollment":
		return ScreenGroupNameEnumMfaVoiceEnrollment, nil
	case "mfa-voice-challenge":
		return ScreenGroupNameEnumMfaVoiceChallenge, nil
	case "mfa-phone-challenge":
		return ScreenGroupNameEnumMfaPhoneChallenge, nil
	case "mfa-phone-enrollment":
		return ScreenGroupNameEnumMfaPhoneEnrollment, nil
	case "mfa-webauthn-platform-enrollment":
		return ScreenGroupNameEnumMfaWebauthnPlatformEnrollment, nil
	case "mfa-webauthn-roaming-enrollment":
		return ScreenGroupNameEnumMfaWebauthnRoamingEnrollment, nil
	case "mfa-webauthn-platform-challenge":
		return ScreenGroupNameEnumMfaWebauthnPlatformChallenge, nil
	case "mfa-webauthn-roaming-challenge":
		return ScreenGroupNameEnumMfaWebauthnRoamingChallenge, nil
	case "mfa-webauthn-change-key-nickname":
		return ScreenGroupNameEnumMfaWebauthnChangeKeyNickname, nil
	case "mfa-webauthn-enrollment-success":
		return ScreenGroupNameEnumMfaWebauthnEnrollmentSuccess, nil
	case "mfa-webauthn-error":
		return ScreenGroupNameEnumMfaWebauthnError, nil
	case "mfa-webauthn-not-available-error":
		return ScreenGroupNameEnumMfaWebauthnNotAvailableError, nil
	case "mfa-country-codes":
		return ScreenGroupNameEnumMfaCountryCodes, nil
	case "mfa-sms-enrollment":
		return ScreenGroupNameEnumMfaSmsEnrollment, nil
	case "mfa-sms-challenge":
		return ScreenGroupNameEnumMfaSmsChallenge, nil
	case "mfa-sms-list":
		return ScreenGroupNameEnumMfaSmsList, nil
	case "mfa-email-challenge":
		return ScreenGroupNameEnumMfaEmailChallenge, nil
	case "mfa-email-list":
		return ScreenGroupNameEnumMfaEmailList, nil
	case "mfa-recovery-code-enrollment":
		return ScreenGroupNameEnumMfaRecoveryCodeEnrollment, nil
	case "mfa-recovery-code-challenge-new-code":
		return ScreenGroupNameEnumMfaRecoveryCodeChallengeNewCode, nil
	case "mfa-recovery-code-challenge":
		return ScreenGroupNameEnumMfaRecoveryCodeChallenge, nil
	case "mfa-detect-browser-capabilities":
		return ScreenGroupNameEnumMfaDetectBrowserCapabilities, nil
	case "mfa-enroll-result":
		return ScreenGroupNameEnumMfaEnrollResult, nil
	case "mfa-login-options":
		return ScreenGroupNameEnumMfaLoginOptions, nil
	case "mfa-begin-enroll-options":
		return ScreenGroupNameEnumMfaBeginEnrollOptions, nil
	case "status":
		return ScreenGroupNameEnumStatus, nil
	case "device-code-activation":
		return ScreenGroupNameEnumDeviceCodeActivation, nil
	case "device-code-activation-allowed":
		return ScreenGroupNameEnumDeviceCodeActivationAllowed, nil
	case "device-code-activation-denied":
		return ScreenGroupNameEnumDeviceCodeActivationDenied, nil
	case "device-code-confirmation":
		return ScreenGroupNameEnumDeviceCodeConfirmation, nil
	case "email-verification-result":
		return ScreenGroupNameEnumEmailVerificationResult, nil
	case "email-otp-challenge":
		return ScreenGroupNameEnumEmailOtpChallenge, nil
	case "organization-selection":
		return ScreenGroupNameEnumOrganizationSelection, nil
	case "organization-picker":
		return ScreenGroupNameEnumOrganizationPicker, nil
	case "accept-invitation":
		return ScreenGroupNameEnumAcceptInvitation, nil
	case "redeem-ticket":
		return ScreenGroupNameEnumRedeemTicket, nil
	case "passkey-enrollment":
		return ScreenGroupNameEnumPasskeyEnrollment, nil
	case "passkey-enrollment-local":
		return ScreenGroupNameEnumPasskeyEnrollmentLocal, nil
	case "interstitial-captcha":
		return ScreenGroupNameEnumInterstitialCaptcha, nil
	case "brute-force-protection-unblock":
		return ScreenGroupNameEnumBruteForceProtectionUnblock, nil
	case "brute-force-protection-unblock-success":
		return ScreenGroupNameEnumBruteForceProtectionUnblockSuccess, nil
	case "brute-force-protection-unblock-failure":
		return ScreenGroupNameEnumBruteForceProtectionUnblockFailure, nil
	}
	var t ScreenGroupNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScreenGroupNameEnum) Ptr() *ScreenGroupNameEnum {
	return &s
}

type SelfServiceProfileCustomTextLanguageEnum = string

type SelfServiceProfileCustomTextPageEnum = string

// If provided, this will create a new connection for the SSO flow with the given configuration
type SelfServiceProfileSSOTicketConnectionConfig struct {
	// The name of the connection that will be created as a part of the SSO flow.
	Name string `json:"name" url:"name"`
	// Connection name used in the new universal login experience
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	// <code>true</code> promotes to a domain-level connection so that third-party applications can use it. <code>false</code> does not promote the connection, so only first-party applications with the connection enabled can use it. (Defaults to <code>false</code>.)
	IsDomainConnection *bool `json:"is_domain_connection,omitempty" url:"is_domain_connection,omitempty"`
	// Enables showing a button for the connection in the login page (new experience only). If false, it will be usable only by HRD. (Defaults to <code>false</code>.)
	ShowAsButton *bool                                         `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	Metadata     *ConnectionsMetadata                          `json:"metadata,omitempty" url:"metadata,omitempty"`
	Options      *SelfServiceProfileSSOTicketConnectionOptions `json:"options,omitempty" url:"options,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetDisplayName() *string {
	if s == nil {
		return nil
	}
	return s.DisplayName
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetIsDomainConnection() *bool {
	if s == nil {
		return nil
	}
	return s.IsDomainConnection
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetShowAsButton() *bool {
	if s == nil {
		return nil
	}
	return s.ShowAsButton
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetMetadata() *ConnectionsMetadata {
	if s == nil {
		return nil
	}
	return s.Metadata
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetOptions() *SelfServiceProfileSSOTicketConnectionOptions {
	if s == nil {
		return nil
	}
	return s.Options
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileSSOTicketConnectionConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileSSOTicketConnectionConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileSSOTicketConnectionConfig) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The connection's options (depend on the connection strategy)
type SelfServiceProfileSSOTicketConnectionOptions struct {
	// URL for the icon. Must use HTTPS.
	IconURL *string `json:"icon_url,omitempty" url:"icon_url,omitempty"`
	// List of domain_aliases that can be authenticated in the Identity Provider
	DomainAliases []string                                        `json:"domain_aliases,omitempty" url:"domain_aliases,omitempty"`
	Idpinitiated  *SelfServiceProfileSSOTicketIdpInitiatedOptions `json:"idpinitiated,omitempty" url:"idpinitiated,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileSSOTicketConnectionOptions) GetIconURL() *string {
	if s == nil {
		return nil
	}
	return s.IconURL
}

func (s *SelfServiceProfileSSOTicketConnectionOptions) GetDomainAliases() []string {
	if s == nil {
		return nil
	}
	return s.DomainAliases
}

func (s *SelfServiceProfileSSOTicketConnectionOptions) GetIdpinitiated() *SelfServiceProfileSSOTicketIdpInitiatedOptions {
	if s == nil {
		return nil
	}
	return s.Idpinitiated
}

func (s *SelfServiceProfileSSOTicketConnectionOptions) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileSSOTicketConnectionOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileSSOTicketConnectionOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileSSOTicketConnectionOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileSSOTicketConnectionOptions) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration for the setup of the connection’s domain_aliases in the self-service SSO flow.
type SelfServiceProfileSSOTicketDomainAliasesConfig struct {
	DomainVerification SelfServiceProfileSSOTicketDomainVerificationEnum `json:"domain_verification" url:"domain_verification"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileSSOTicketDomainAliasesConfig) GetDomainVerification() SelfServiceProfileSSOTicketDomainVerificationEnum {
	if s == nil {
		return ""
	}
	return s.DomainVerification
}

func (s *SelfServiceProfileSSOTicketDomainAliasesConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileSSOTicketDomainAliasesConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileSSOTicketDomainAliasesConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileSSOTicketDomainAliasesConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileSSOTicketDomainAliasesConfig) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Whether the end user should complete the domain verification step. Possible values are 'none' (the step is not shown to the user), 'optional' (the user may add a domain alias in the domain verification step) or 'required' (the user must add a domain alias in order to enable the connection). Defaults to 'none'.
type SelfServiceProfileSSOTicketDomainVerificationEnum string

const (
	SelfServiceProfileSSOTicketDomainVerificationEnumNone     SelfServiceProfileSSOTicketDomainVerificationEnum = "none"
	SelfServiceProfileSSOTicketDomainVerificationEnumOptional SelfServiceProfileSSOTicketDomainVerificationEnum = "optional"
	SelfServiceProfileSSOTicketDomainVerificationEnumRequired SelfServiceProfileSSOTicketDomainVerificationEnum = "required"
)

func NewSelfServiceProfileSSOTicketDomainVerificationEnumFromString(s string) (SelfServiceProfileSSOTicketDomainVerificationEnum, error) {
	switch s {
	case "none":
		return SelfServiceProfileSSOTicketDomainVerificationEnumNone, nil
	case "optional":
		return SelfServiceProfileSSOTicketDomainVerificationEnumOptional, nil
	case "required":
		return SelfServiceProfileSSOTicketDomainVerificationEnumRequired, nil
	}
	var t SelfServiceProfileSSOTicketDomainVerificationEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelfServiceProfileSSOTicketDomainVerificationEnum) Ptr() *SelfServiceProfileSSOTicketDomainVerificationEnum {
	return &s
}

type SelfServiceProfileSSOTicketEnabledOrganization struct {
	// Organization identifier.
	OrganizationID string `json:"organization_id" url:"organization_id"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileSSOTicketEnabledOrganization) GetOrganizationID() string {
	if s == nil {
		return ""
	}
	return s.OrganizationID
}

func (s *SelfServiceProfileSSOTicketEnabledOrganization) GetAssignMembershipOnLogin() *bool {
	if s == nil {
		return nil
	}
	return s.AssignMembershipOnLogin
}

func (s *SelfServiceProfileSSOTicketEnabledOrganization) GetShowAsButton() *bool {
	if s == nil {
		return nil
	}
	return s.ShowAsButton
}

func (s *SelfServiceProfileSSOTicketEnabledOrganization) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileSSOTicketEnabledOrganization) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileSSOTicketEnabledOrganization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileSSOTicketEnabledOrganization(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileSSOTicketEnabledOrganization) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The protocol used to connect to the the default application
type SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum string

const (
	SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumSamlp  SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum = "samlp"
	SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumWsfed  SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum = "wsfed"
	SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumOauth2 SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum = "oauth2"
)

func NewSelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumFromString(s string) (SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum, error) {
	switch s {
	case "samlp":
		return SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumSamlp, nil
	case "wsfed":
		return SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumWsfed, nil
	case "oauth2":
		return SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnumOauth2, nil
	}
	var t SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum) Ptr() *SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum {
	return &s
}

// Allows IdP-initiated login
type SelfServiceProfileSSOTicketIdpInitiatedOptions struct {
	// Enables IdP-initiated login for this connection
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Default application <code>client_id</code> user is redirected to after validated SAML response
	ClientID       *string                                                    `json:"client_id,omitempty" url:"client_id,omitempty"`
	ClientProtocol *SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum `json:"client_protocol,omitempty" url:"client_protocol,omitempty"`
	// Query string options to customize the behaviour for OpenID Connect when <code>idpinitiated.client_protocol</code> is <code>oauth2</code>. Allowed parameters: <code>redirect_uri</code>, <code>scope</code>, <code>response_type</code>. For example, <code>redirect_uri=https://jwt.io&scope=openid email&response_type=token</code>
	ClientAuthorizequery *string `json:"client_authorizequery,omitempty" url:"client_authorizequery,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) GetClientID() *string {
	if s == nil {
		return nil
	}
	return s.ClientID
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) GetClientProtocol() *SelfServiceProfileSSOTicketIdpInitiatedClientProtocolEnum {
	if s == nil {
		return nil
	}
	return s.ClientProtocol
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) GetClientAuthorizequery() *string {
	if s == nil {
		return nil
	}
	return s.ClientAuthorizequery
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileSSOTicketIdpInitiatedOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileSSOTicketIdpInitiatedOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileSSOTicketIdpInitiatedOptions) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration for the setup of Provisioning in the self-service flow.
type SelfServiceProfileSSOTicketProvisioningConfig struct {
	// The scopes of the SCIM tokens generated during the self-service flow.
	Scopes []SelfServiceProfileSSOTicketProvisioningScopeEnum `json:"scopes" url:"scopes"`
	// Lifetime of the tokens in seconds. Must be greater than 900. If not provided, the tokens don't expire.
	TokenLifetime *int `json:"token_lifetime,omitempty" url:"token_lifetime,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SelfServiceProfileSSOTicketProvisioningConfig) GetScopes() []SelfServiceProfileSSOTicketProvisioningScopeEnum {
	if s == nil {
		return nil
	}
	return s.Scopes
}

func (s *SelfServiceProfileSSOTicketProvisioningConfig) GetTokenLifetime() *int {
	if s == nil {
		return nil
	}
	return s.TokenLifetime
}

func (s *SelfServiceProfileSSOTicketProvisioningConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SelfServiceProfileSSOTicketProvisioningConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SelfServiceProfileSSOTicketProvisioningConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SelfServiceProfileSSOTicketProvisioningConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SelfServiceProfileSSOTicketProvisioningConfig) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SelfServiceProfileSSOTicketProvisioningScopeEnum string

const (
	SelfServiceProfileSSOTicketProvisioningScopeEnumGetUsers    SelfServiceProfileSSOTicketProvisioningScopeEnum = "get:users"
	SelfServiceProfileSSOTicketProvisioningScopeEnumPostUsers   SelfServiceProfileSSOTicketProvisioningScopeEnum = "post:users"
	SelfServiceProfileSSOTicketProvisioningScopeEnumPutUsers    SelfServiceProfileSSOTicketProvisioningScopeEnum = "put:users"
	SelfServiceProfileSSOTicketProvisioningScopeEnumPatchUsers  SelfServiceProfileSSOTicketProvisioningScopeEnum = "patch:users"
	SelfServiceProfileSSOTicketProvisioningScopeEnumDeleteUsers SelfServiceProfileSSOTicketProvisioningScopeEnum = "delete:users"
)

func NewSelfServiceProfileSSOTicketProvisioningScopeEnumFromString(s string) (SelfServiceProfileSSOTicketProvisioningScopeEnum, error) {
	switch s {
	case "get:users":
		return SelfServiceProfileSSOTicketProvisioningScopeEnumGetUsers, nil
	case "post:users":
		return SelfServiceProfileSSOTicketProvisioningScopeEnumPostUsers, nil
	case "put:users":
		return SelfServiceProfileSSOTicketProvisioningScopeEnumPutUsers, nil
	case "patch:users":
		return SelfServiceProfileSSOTicketProvisioningScopeEnumPatchUsers, nil
	case "delete:users":
		return SelfServiceProfileSSOTicketProvisioningScopeEnumDeleteUsers, nil
	}
	var t SelfServiceProfileSSOTicketProvisioningScopeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelfServiceProfileSSOTicketProvisioningScopeEnum) Ptr() *SelfServiceProfileSSOTicketProvisioningScopeEnum {
	return &s
}

// Authentication signal details
type SessionAuthenticationSignal struct {
	// One of: "federated", "passkey", "pwd", "sms", "email", "mfa", "mock" or a custom method denoted by a URL
	Name      *string      `json:"name,omitempty" url:"name,omitempty"`
	Timestamp *SessionDate `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// A specific MFA factor. Only present when "name" is set to "mfa"
	Type *string `json:"^type$,omitempty" url:"^type$,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SessionAuthenticationSignal) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SessionAuthenticationSignal) GetTimestamp() *SessionDate {
	if s == nil {
		return nil
	}
	return s.Timestamp
}

func (s *SessionAuthenticationSignal) GetType() *string {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *SessionAuthenticationSignal) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SessionAuthenticationSignal) UnmarshalJSON(data []byte) error {
	type embed SessionAuthenticationSignal
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SessionAuthenticationSignal(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionAuthenticationSignal) MarshalJSON() ([]byte, error) {
	type embed SessionAuthenticationSignal
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SessionAuthenticationSignal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Details about authentication signals obtained during the login flow
type SessionAuthenticationSignals struct {
	// Contains the authentication methods a user has completed during their session
	Methods []*SessionAuthenticationSignal `json:"methods,omitempty" url:"methods,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SessionAuthenticationSignals) GetMethods() []*SessionAuthenticationSignal {
	if s == nil {
		return nil
	}
	return s.Methods
}

func (s *SessionAuthenticationSignals) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SessionAuthenticationSignals) UnmarshalJSON(data []byte) error {
	type embed SessionAuthenticationSignals
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SessionAuthenticationSignals(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionAuthenticationSignals) MarshalJSON() ([]byte, error) {
	type embed SessionAuthenticationSignals
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SessionAuthenticationSignals) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Client details
type SessionClientMetadata struct {
	// ID of client for the session
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SessionClientMetadata) GetClientID() *string {
	if s == nil {
		return nil
	}
	return s.ClientID
}

func (s *SessionClientMetadata) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SessionClientMetadata) UnmarshalJSON(data []byte) error {
	type embed SessionClientMetadata
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SessionClientMetadata(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionClientMetadata) MarshalJSON() ([]byte, error) {
	type embed SessionClientMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SessionClientMetadata) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// [Private Early Access] Session cookie configuration.
type SessionCookieMetadata struct {
	Mode *SessionCookieMetadataModeEnum `json:"mode,omitempty" url:"mode,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SessionCookieMetadata) GetMode() *SessionCookieMetadataModeEnum {
	if s == nil {
		return nil
	}
	return s.Mode
}

func (s *SessionCookieMetadata) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SessionCookieMetadata) UnmarshalJSON(data []byte) error {
	type embed SessionCookieMetadata
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SessionCookieMetadata(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionCookieMetadata) MarshalJSON() ([]byte, error) {
	type embed SessionCookieMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SessionCookieMetadata) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// [Private Early Access] The persistence mode of the session cookie. When set to "non-persistent" (ephemeral), the cookie will be deleted when the browser is closed. When set to "persistent", the cookie will be stored until it expires or is deleted by the user.
type SessionCookieMetadataModeEnum string

const (
	SessionCookieMetadataModeEnumNonPersistent SessionCookieMetadataModeEnum = "non-persistent"
	SessionCookieMetadataModeEnumPersistent    SessionCookieMetadataModeEnum = "persistent"
)

func NewSessionCookieMetadataModeEnumFromString(s string) (SessionCookieMetadataModeEnum, error) {
	switch s {
	case "non-persistent":
		return SessionCookieMetadataModeEnumNonPersistent, nil
	case "persistent":
		return SessionCookieMetadataModeEnumPersistent, nil
	}
	var t SessionCookieMetadataModeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SessionCookieMetadataModeEnum) Ptr() *SessionCookieMetadataModeEnum {
	return &s
}

// Behavior of the session cookie
type SessionCookieModeEnum string

const (
	SessionCookieModeEnumPersistent    SessionCookieModeEnum = "persistent"
	SessionCookieModeEnumNonPersistent SessionCookieModeEnum = "non-persistent"
)

func NewSessionCookieModeEnumFromString(s string) (SessionCookieModeEnum, error) {
	switch s {
	case "persistent":
		return SessionCookieModeEnumPersistent, nil
	case "non-persistent":
		return SessionCookieModeEnumNonPersistent, nil
	}
	var t SessionCookieModeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SessionCookieModeEnum) Ptr() *SessionCookieModeEnum {
	return &s
}

// Session cookie configuration
type SessionCookieSchema struct {
	Mode SessionCookieModeEnum `json:"mode" url:"mode"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionCookieSchema) GetMode() SessionCookieModeEnum {
	if s == nil {
		return ""
	}
	return s.Mode
}

func (s *SessionCookieSchema) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionCookieSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionCookieSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionCookieSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionCookieSchema) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionDate struct {
	// The date and time when the session was created
	DateTime time.Time
	// The date and time when the session was created
	StringUnknownMap map[string]interface{}

	typ string
}

func (s *SessionDate) GetDateTime() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.DateTime
}

func (s *SessionDate) GetStringUnknownMap() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.StringUnknownMap
}

func (s *SessionDate) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		s.typ = "DateTime"
		s.DateTime = valueDateTime.Time()
		return nil
	}
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		s.typ = "StringUnknownMap"
		s.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SessionDate) MarshalJSON() ([]byte, error) {
	if s.typ == "DateTime" || !s.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(s.DateTime))
	}
	if s.typ == "StringUnknownMap" || s.StringUnknownMap != nil {
		return json.Marshal(s.StringUnknownMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SessionDateVisitor interface {
	VisitDateTime(time.Time) error
	VisitStringUnknownMap(map[string]interface{}) error
}

func (s *SessionDate) Accept(visitor SessionDateVisitor) error {
	if s.typ == "DateTime" || !s.DateTime.IsZero() {
		return visitor.VisitDateTime(s.DateTime)
	}
	if s.typ == "StringUnknownMap" || s.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(s.StringUnknownMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// Metadata related to the device used in the session
type SessionDeviceMetadata struct {
	// First user agent of the device from which this user logged in
	InitialUserAgent *string    `json:"initial_user_agent,omitempty" url:"initial_user_agent,omitempty"`
	InitialIP        *SessionIP `json:"initial_ip,omitempty" url:"initial_ip,omitempty"`
	// First autonomous system number associated with this session
	InitialAsn *string `json:"initial_asn,omitempty" url:"initial_asn,omitempty"`
	// Last user agent of the device from which this user logged in
	LastUserAgent *string    `json:"last_user_agent,omitempty" url:"last_user_agent,omitempty"`
	LastIP        *SessionIP `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	// Last autonomous system number from which this user logged in
	LastAsn *string `json:"last_asn,omitempty" url:"last_asn,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SessionDeviceMetadata) GetInitialUserAgent() *string {
	if s == nil {
		return nil
	}
	return s.InitialUserAgent
}

func (s *SessionDeviceMetadata) GetInitialIP() *SessionIP {
	if s == nil {
		return nil
	}
	return s.InitialIP
}

func (s *SessionDeviceMetadata) GetInitialAsn() *string {
	if s == nil {
		return nil
	}
	return s.InitialAsn
}

func (s *SessionDeviceMetadata) GetLastUserAgent() *string {
	if s == nil {
		return nil
	}
	return s.LastUserAgent
}

func (s *SessionDeviceMetadata) GetLastIP() *SessionIP {
	if s == nil {
		return nil
	}
	return s.LastIP
}

func (s *SessionDeviceMetadata) GetLastAsn() *string {
	if s == nil {
		return nil
	}
	return s.LastAsn
}

func (s *SessionDeviceMetadata) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SessionDeviceMetadata) UnmarshalJSON(data []byte) error {
	type embed SessionDeviceMetadata
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SessionDeviceMetadata(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionDeviceMetadata) MarshalJSON() ([]byte, error) {
	type embed SessionDeviceMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SessionDeviceMetadata) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// First IP address associated with this session
type SessionIP = *string

type SessionResponseContent struct {
	// The ID of the session
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// ID of the user which can be used when interacting with other APIs.
	UserID           *string                `json:"user_id,omitempty" url:"user_id,omitempty"`
	CreatedAt        *SessionDate           `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt        *SessionDate           `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	AuthenticatedAt  *SessionDate           `json:"authenticated_at,omitempty" url:"authenticated_at,omitempty"`
	IdleExpiresAt    *SessionDate           `json:"idle_expires_at,omitempty" url:"idle_expires_at,omitempty"`
	ExpiresAt        *SessionDate           `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	LastInteractedAt *SessionDate           `json:"last_interacted_at,omitempty" url:"last_interacted_at,omitempty"`
	Device           *SessionDeviceMetadata `json:"device,omitempty" url:"device,omitempty"`
	// List of client details for the session
	Clients        []*SessionClientMetadata      `json:"clients,omitempty" url:"clients,omitempty"`
	Authentication *SessionAuthenticationSignals `json:"authentication,omitempty" url:"authentication,omitempty"`
	Cookie         *SessionCookieMetadata        `json:"cookie,omitempty" url:"cookie,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SessionResponseContent) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SessionResponseContent) GetUserID() *string {
	if s == nil {
		return nil
	}
	return s.UserID
}

func (s *SessionResponseContent) GetCreatedAt() *SessionDate {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SessionResponseContent) GetUpdatedAt() *SessionDate {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SessionResponseContent) GetAuthenticatedAt() *SessionDate {
	if s == nil {
		return nil
	}
	return s.AuthenticatedAt
}

func (s *SessionResponseContent) GetIdleExpiresAt() *SessionDate {
	if s == nil {
		return nil
	}
	return s.IdleExpiresAt
}

func (s *SessionResponseContent) GetExpiresAt() *SessionDate {
	if s == nil {
		return nil
	}
	return s.ExpiresAt
}

func (s *SessionResponseContent) GetLastInteractedAt() *SessionDate {
	if s == nil {
		return nil
	}
	return s.LastInteractedAt
}

func (s *SessionResponseContent) GetDevice() *SessionDeviceMetadata {
	if s == nil {
		return nil
	}
	return s.Device
}

func (s *SessionResponseContent) GetClients() []*SessionClientMetadata {
	if s == nil {
		return nil
	}
	return s.Clients
}

func (s *SessionResponseContent) GetAuthentication() *SessionAuthenticationSignals {
	if s == nil {
		return nil
	}
	return s.Authentication
}

func (s *SessionResponseContent) GetCookie() *SessionCookieMetadata {
	if s == nil {
		return nil
	}
	return s.Cookie
}

func (s *SessionResponseContent) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SessionResponseContent) UnmarshalJSON(data []byte) error {
	type embed SessionResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SessionResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionResponseContent) MarshalJSON() ([]byte, error) {
	type embed SessionResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, s.ExtraProperties)
}

func (s *SessionResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// JWKS representing an array of custom public signing keys.
type SetCustomSigningKeysResponseContent struct {
	// An array of custom public signing keys.
	Keys []*CustomSigningKeyJwk `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetCustomSigningKeysResponseContent) GetKeys() []*CustomSigningKeyJwk {
	if s == nil {
		return nil
	}
	return s.Keys
}

func (s *SetCustomSigningKeysResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetCustomSigningKeysResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetCustomSigningKeysResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetCustomSigningKeysResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetCustomSigningKeysResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorDuoSettingsResponseContent struct {
	Ikey *string `json:"ikey,omitempty" url:"ikey,omitempty"`
	Skey *string `json:"skey,omitempty" url:"skey,omitempty"`
	Host *string `json:"host,omitempty" url:"host,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorDuoSettingsResponseContent) GetIkey() *string {
	if s == nil {
		return nil
	}
	return s.Ikey
}

func (s *SetGuardianFactorDuoSettingsResponseContent) GetSkey() *string {
	if s == nil {
		return nil
	}
	return s.Skey
}

func (s *SetGuardianFactorDuoSettingsResponseContent) GetHost() *string {
	if s == nil {
		return nil
	}
	return s.Host
}

func (s *SetGuardianFactorDuoSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorDuoSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorDuoSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorDuoSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorDuoSettingsResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorPhoneMessageTypesResponseContent struct {
	// The list of phone factors to enable on the tenant. Can include `sms` and `voice`.
	MessageTypes []GuardianFactorPhoneFactorMessageTypeEnum `json:"message_types,omitempty" url:"message_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorPhoneMessageTypesResponseContent) GetMessageTypes() []GuardianFactorPhoneFactorMessageTypeEnum {
	if s == nil {
		return nil
	}
	return s.MessageTypes
}

func (s *SetGuardianFactorPhoneMessageTypesResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorPhoneMessageTypesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorPhoneMessageTypesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorPhoneMessageTypesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorPhoneMessageTypesResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorPhoneTemplatesResponseContent struct {
	// Message sent to the user when they are invited to enroll with a phone number.
	EnrollmentMessage string `json:"enrollment_message" url:"enrollment_message"`
	// Message sent to the user when they are prompted to verify their account.
	VerificationMessage string `json:"verification_message" url:"verification_message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorPhoneTemplatesResponseContent) GetEnrollmentMessage() string {
	if s == nil {
		return ""
	}
	return s.EnrollmentMessage
}

func (s *SetGuardianFactorPhoneTemplatesResponseContent) GetVerificationMessage() string {
	if s == nil {
		return ""
	}
	return s.VerificationMessage
}

func (s *SetGuardianFactorPhoneTemplatesResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorPhoneTemplatesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorPhoneTemplatesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorPhoneTemplatesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorPhoneTemplatesResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorResponseContent struct {
	// Whether this factor is enabled (true) or disabled (false).
	Enabled bool `json:"enabled" url:"enabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorResponseContent) GetEnabled() bool {
	if s == nil {
		return false
	}
	return s.Enabled
}

func (s *SetGuardianFactorResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorSmsTemplatesResponseContent struct {
	// Message sent to the user when they are invited to enroll with a phone number.
	EnrollmentMessage string `json:"enrollment_message" url:"enrollment_message"`
	// Message sent to the user when they are prompted to verify their account.
	VerificationMessage string `json:"verification_message" url:"verification_message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorSmsTemplatesResponseContent) GetEnrollmentMessage() string {
	if s == nil {
		return ""
	}
	return s.EnrollmentMessage
}

func (s *SetGuardianFactorSmsTemplatesResponseContent) GetVerificationMessage() string {
	if s == nil {
		return ""
	}
	return s.VerificationMessage
}

func (s *SetGuardianFactorSmsTemplatesResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorSmsTemplatesResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorSmsTemplatesResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorSmsTemplatesResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorSmsTemplatesResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPhoneResponseContent struct {
	Provider *GuardianFactorsProviderSmsProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPhoneResponseContent) GetProvider() *GuardianFactorsProviderSmsProviderEnum {
	if s == nil {
		return nil
	}
	return s.Provider
}

func (s *SetGuardianFactorsProviderPhoneResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPhoneResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPhoneResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPhoneResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPhoneResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPhoneTwilioResponseContent struct {
	// From number
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// Copilot SID
	MessagingServiceSid *string `json:"messaging_service_sid,omitempty" url:"messaging_service_sid,omitempty"`
	// Twilio Authentication token
	AuthToken *string `json:"auth_token,omitempty" url:"auth_token,omitempty"`
	// Twilio SID
	Sid *string `json:"sid,omitempty" url:"sid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) GetFrom() *string {
	if s == nil {
		return nil
	}
	return s.From
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) GetMessagingServiceSid() *string {
	if s == nil {
		return nil
	}
	return s.MessagingServiceSid
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) GetAuthToken() *string {
	if s == nil {
		return nil
	}
	return s.AuthToken
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) GetSid() *string {
	if s == nil {
		return nil
	}
	return s.Sid
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPhoneTwilioResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPhoneTwilioResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPhoneTwilioResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPushNotificationApnsRequestContent struct {
	Sandbox  *bool   `json:"sandbox,omitempty" url:"sandbox,omitempty"`
	BundleID *string `json:"bundle_id,omitempty" url:"bundle_id,omitempty"`
	P12      *string `json:"p12,omitempty" url:"p12,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPushNotificationApnsRequestContent) GetSandbox() *bool {
	if s == nil {
		return nil
	}
	return s.Sandbox
}

func (s *SetGuardianFactorsProviderPushNotificationApnsRequestContent) GetBundleID() *string {
	if s == nil {
		return nil
	}
	return s.BundleID
}

func (s *SetGuardianFactorsProviderPushNotificationApnsRequestContent) GetP12() *string {
	if s == nil {
		return nil
	}
	return s.P12
}

func (s *SetGuardianFactorsProviderPushNotificationApnsRequestContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPushNotificationApnsRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPushNotificationApnsRequestContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPushNotificationApnsRequestContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPushNotificationApnsRequestContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPushNotificationApnsResponseContent struct {
	Sandbox  *bool   `json:"sandbox,omitempty" url:"sandbox,omitempty"`
	BundleID *string `json:"bundle_id,omitempty" url:"bundle_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPushNotificationApnsResponseContent) GetSandbox() *bool {
	if s == nil {
		return nil
	}
	return s.Sandbox
}

func (s *SetGuardianFactorsProviderPushNotificationApnsResponseContent) GetBundleID() *string {
	if s == nil {
		return nil
	}
	return s.BundleID
}

func (s *SetGuardianFactorsProviderPushNotificationApnsResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPushNotificationApnsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPushNotificationApnsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPushNotificationApnsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPushNotificationApnsResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPushNotificationFcmRequestContent struct {
	ServerKey *string `json:"server_key,omitempty" url:"server_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPushNotificationFcmRequestContent) GetServerKey() *string {
	if s == nil {
		return nil
	}
	return s.ServerKey
}

func (s *SetGuardianFactorsProviderPushNotificationFcmRequestContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPushNotificationFcmRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPushNotificationFcmRequestContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPushNotificationFcmRequestContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPushNotificationFcmRequestContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPushNotificationFcmResponseContent = map[string]interface{}

type SetGuardianFactorsProviderPushNotificationFcmv1RequestContent struct {
	ServerCredentials *string `json:"server_credentials,omitempty" url:"server_credentials,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPushNotificationFcmv1RequestContent) GetServerCredentials() *string {
	if s == nil {
		return nil
	}
	return s.ServerCredentials
}

func (s *SetGuardianFactorsProviderPushNotificationFcmv1RequestContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPushNotificationFcmv1RequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPushNotificationFcmv1RequestContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPushNotificationFcmv1RequestContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPushNotificationFcmv1RequestContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPushNotificationFcmv1ResponseContent = map[string]interface{}

type SetGuardianFactorsProviderPushNotificationResponseContent struct {
	Provider *GuardianFactorsProviderPushNotificationProviderDataEnum `json:"provider,omitempty" url:"provider,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPushNotificationResponseContent) GetProvider() *GuardianFactorsProviderPushNotificationProviderDataEnum {
	if s == nil {
		return nil
	}
	return s.Provider
}

func (s *SetGuardianFactorsProviderPushNotificationResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPushNotificationResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPushNotificationResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPushNotificationResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPushNotificationResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderPushNotificationSnsResponseContent struct {
	AwsAccessKeyID                *string `json:"aws_access_key_id,omitempty" url:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey            *string `json:"aws_secret_access_key,omitempty" url:"aws_secret_access_key,omitempty"`
	AwsRegion                     *string `json:"aws_region,omitempty" url:"aws_region,omitempty"`
	SnsApnsPlatformApplicationArn *string `json:"sns_apns_platform_application_arn,omitempty" url:"sns_apns_platform_application_arn,omitempty"`
	SnsGcmPlatformApplicationArn  *string `json:"sns_gcm_platform_application_arn,omitempty" url:"sns_gcm_platform_application_arn,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) GetAwsAccessKeyID() *string {
	if s == nil {
		return nil
	}
	return s.AwsAccessKeyID
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) GetAwsSecretAccessKey() *string {
	if s == nil {
		return nil
	}
	return s.AwsSecretAccessKey
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) GetAwsRegion() *string {
	if s == nil {
		return nil
	}
	return s.AwsRegion
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) GetSnsApnsPlatformApplicationArn() *string {
	if s == nil {
		return nil
	}
	return s.SnsApnsPlatformApplicationArn
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) GetSnsGcmPlatformApplicationArn() *string {
	if s == nil {
		return nil
	}
	return s.SnsGcmPlatformApplicationArn
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderPushNotificationSnsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderPushNotificationSnsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderPushNotificationSnsResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderSmsResponseContent struct {
	Provider *GuardianFactorsProviderSmsProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderSmsResponseContent) GetProvider() *GuardianFactorsProviderSmsProviderEnum {
	if s == nil {
		return nil
	}
	return s.Provider
}

func (s *SetGuardianFactorsProviderSmsResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderSmsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderSmsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderSmsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderSmsResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianFactorsProviderSmsTwilioResponseContent struct {
	// From number
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// Copilot SID
	MessagingServiceSid *string `json:"messaging_service_sid,omitempty" url:"messaging_service_sid,omitempty"`
	// Twilio Authentication token
	AuthToken *string `json:"auth_token,omitempty" url:"auth_token,omitempty"`
	// Twilio SID
	Sid *string `json:"sid,omitempty" url:"sid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) GetFrom() *string {
	if s == nil {
		return nil
	}
	return s.From
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) GetMessagingServiceSid() *string {
	if s == nil {
		return nil
	}
	return s.MessagingServiceSid
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) GetAuthToken() *string {
	if s == nil {
		return nil
	}
	return s.AuthToken
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) GetSid() *string {
	if s == nil {
		return nil
	}
	return s.Sid
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetGuardianFactorsProviderSmsTwilioResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetGuardianFactorsProviderSmsTwilioResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetGuardianFactorsProviderSmsTwilioResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetGuardianPoliciesRequestContent = []MfaPolicyEnum

type SetGuardianPoliciesResponseContent = []MfaPolicyEnum

// An object containing template partials for a group of screens.
type SetPartialsRequestContent = map[string]interface{}

// The list of text keys and values to customize the self-service SSO page. Values can be plain text or rich HTML content limited to basic styling tags and hyperlinks.
type SetSelfServiceProfileCustomTextRequestContent = map[string]interface{}

// The resulting list of custom text keys and values.
type SetSelfServiceProfileCustomTextResponseContent = map[string]interface{}

// The successfully created authentication method.
type SetUserAuthenticationMethodResponseContent struct {
	// The ID of the newly created authentication method (automatically generated by the application)
	ID   *string                             `json:"id,omitempty" url:"id,omitempty"`
	Type CreatedAuthenticationMethodTypeEnum `json:"type" url:"type"`
	// A human-readable label to identify the authentication method.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Base32 encoded secret for TOTP generation
	TotpSecret *string `json:"totp_secret,omitempty" url:"totp_secret,omitempty"`
	// Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Applies to email authentication methods only. The email address used to send verification messages.
	Email                         *string                               `json:"email,omitempty" url:"email,omitempty"`
	AuthenticationMethods         []*UserAuthenticationMethodProperties `json:"authentication_methods,omitempty" url:"authentication_methods,omitempty"`
	PreferredAuthenticationMethod *PreferredAuthenticationMethodEnum    `json:"preferred_authentication_method,omitempty" url:"preferred_authentication_method,omitempty"`
	// Applies to webauthn authenticators only. The id of the credential.
	KeyID *string `json:"key_id,omitempty" url:"key_id,omitempty"`
	// Applies to webauthn authenticators only. The public key.
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`
	// Applies to webauthn authenticators only. The relying party identifier.
	RelyingPartyIdentifier *string `json:"relying_party_identifier,omitempty" url:"relying_party_identifier,omitempty"`
	// Authentication method creation date
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetUserAuthenticationMethodResponseContent) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SetUserAuthenticationMethodResponseContent) GetType() CreatedAuthenticationMethodTypeEnum {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SetUserAuthenticationMethodResponseContent) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SetUserAuthenticationMethodResponseContent) GetTotpSecret() *string {
	if s == nil {
		return nil
	}
	return s.TotpSecret
}

func (s *SetUserAuthenticationMethodResponseContent) GetPhoneNumber() *string {
	if s == nil {
		return nil
	}
	return s.PhoneNumber
}

func (s *SetUserAuthenticationMethodResponseContent) GetEmail() *string {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SetUserAuthenticationMethodResponseContent) GetAuthenticationMethods() []*UserAuthenticationMethodProperties {
	if s == nil {
		return nil
	}
	return s.AuthenticationMethods
}

func (s *SetUserAuthenticationMethodResponseContent) GetPreferredAuthenticationMethod() *PreferredAuthenticationMethodEnum {
	if s == nil {
		return nil
	}
	return s.PreferredAuthenticationMethod
}

func (s *SetUserAuthenticationMethodResponseContent) GetKeyID() *string {
	if s == nil {
		return nil
	}
	return s.KeyID
}

func (s *SetUserAuthenticationMethodResponseContent) GetPublicKey() *string {
	if s == nil {
		return nil
	}
	return s.PublicKey
}

func (s *SetUserAuthenticationMethodResponseContent) GetRelyingPartyIdentifier() *string {
	if s == nil {
		return nil
	}
	return s.RelyingPartyIdentifier
}

func (s *SetUserAuthenticationMethodResponseContent) GetCreatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SetUserAuthenticationMethodResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetUserAuthenticationMethodResponseContent) UnmarshalJSON(data []byte) error {
	type embed SetUserAuthenticationMethodResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SetUserAuthenticationMethodResponseContent(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetUserAuthenticationMethodResponseContent) MarshalJSON() ([]byte, error) {
	type embed SetUserAuthenticationMethodResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*s),
		CreatedAt: internal.NewOptionalDateTime(s.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SetUserAuthenticationMethodResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetUserAuthenticationMethods struct {
	Type                          AuthenticationTypeEnum             `json:"type" url:"type"`
	PreferredAuthenticationMethod *PreferredAuthenticationMethodEnum `json:"preferred_authentication_method,omitempty" url:"preferred_authentication_method,omitempty"`
	// AA human-readable label to identify the authentication method.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Applies to email authentication methods only. The email address used to send verification messages.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Applies to totp authentication methods only. The base32 encoded secret for TOTP generation.
	TotpSecret *string `json:"totp_secret,omitempty" url:"totp_secret,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetUserAuthenticationMethods) GetType() AuthenticationTypeEnum {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SetUserAuthenticationMethods) GetPreferredAuthenticationMethod() *PreferredAuthenticationMethodEnum {
	if s == nil {
		return nil
	}
	return s.PreferredAuthenticationMethod
}

func (s *SetUserAuthenticationMethods) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SetUserAuthenticationMethods) GetPhoneNumber() *string {
	if s == nil {
		return nil
	}
	return s.PhoneNumber
}

func (s *SetUserAuthenticationMethods) GetEmail() *string {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SetUserAuthenticationMethods) GetTotpSecret() *string {
	if s == nil {
		return nil
	}
	return s.TotpSecret
}

func (s *SetUserAuthenticationMethods) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetUserAuthenticationMethods) UnmarshalJSON(data []byte) error {
	type unmarshaler SetUserAuthenticationMethods
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetUserAuthenticationMethods(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetUserAuthenticationMethods) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SetUserAuthenticationMethodsRequestContent = []*SetUserAuthenticationMethods

// An object containing custom dictionaries for a group of screens.
type SetsCustomTextsByLanguageRequestContent = map[string]interface{}

// Algorithm used to sign JWTs. Can be `HS256` or `RS256`. `PS256` available via addon.
type SigningAlgorithmEnum string

const (
	SigningAlgorithmEnumHs256 SigningAlgorithmEnum = "HS256"
	SigningAlgorithmEnumRs256 SigningAlgorithmEnum = "RS256"
	SigningAlgorithmEnumRs512 SigningAlgorithmEnum = "RS512"
	SigningAlgorithmEnumPs256 SigningAlgorithmEnum = "PS256"
)

func NewSigningAlgorithmEnumFromString(s string) (SigningAlgorithmEnum, error) {
	switch s {
	case "HS256":
		return SigningAlgorithmEnumHs256, nil
	case "RS256":
		return SigningAlgorithmEnumRs256, nil
	case "RS512":
		return SigningAlgorithmEnumRs512, nil
	case "PS256":
		return SigningAlgorithmEnumPs256, nil
	}
	var t SigningAlgorithmEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SigningAlgorithmEnum) Ptr() *SigningAlgorithmEnum {
	return &s
}

type SigningKeys struct {
	// The key id of the signing key
	Kid string `json:"kid" url:"kid"`
	// The public certificate of the signing key
	Cert string `json:"cert" url:"cert"`
	// The public certificate of the signing key in pkcs7 format
	Pkcs7 *string `json:"pkcs7,omitempty" url:"pkcs7,omitempty"`
	// True if the key is the the current key
	Current *bool `json:"current,omitempty" url:"current,omitempty"`
	// True if the key is the the next key
	Next *bool `json:"next,omitempty" url:"next,omitempty"`
	// True if the key is the the previous key
	Previous     *bool            `json:"previous,omitempty" url:"previous,omitempty"`
	CurrentSince *SigningKeysDate `json:"current_since,omitempty" url:"current_since,omitempty"`
	CurrentUntil *SigningKeysDate `json:"current_until,omitempty" url:"current_until,omitempty"`
	// The cert fingerprint
	Fingerprint string `json:"fingerprint" url:"fingerprint"`
	// The cert thumbprint
	Thumbprint string `json:"thumbprint" url:"thumbprint"`
	// True if the key is revoked
	Revoked   *bool            `json:"revoked,omitempty" url:"revoked,omitempty"`
	RevokedAt *SigningKeysDate `json:"revoked_at,omitempty" url:"revoked_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SigningKeys) GetKid() string {
	if s == nil {
		return ""
	}
	return s.Kid
}

func (s *SigningKeys) GetCert() string {
	if s == nil {
		return ""
	}
	return s.Cert
}

func (s *SigningKeys) GetPkcs7() *string {
	if s == nil {
		return nil
	}
	return s.Pkcs7
}

func (s *SigningKeys) GetCurrent() *bool {
	if s == nil {
		return nil
	}
	return s.Current
}

func (s *SigningKeys) GetNext() *bool {
	if s == nil {
		return nil
	}
	return s.Next
}

func (s *SigningKeys) GetPrevious() *bool {
	if s == nil {
		return nil
	}
	return s.Previous
}

func (s *SigningKeys) GetCurrentSince() *SigningKeysDate {
	if s == nil {
		return nil
	}
	return s.CurrentSince
}

func (s *SigningKeys) GetCurrentUntil() *SigningKeysDate {
	if s == nil {
		return nil
	}
	return s.CurrentUntil
}

func (s *SigningKeys) GetFingerprint() string {
	if s == nil {
		return ""
	}
	return s.Fingerprint
}

func (s *SigningKeys) GetThumbprint() string {
	if s == nil {
		return ""
	}
	return s.Thumbprint
}

func (s *SigningKeys) GetRevoked() *bool {
	if s == nil {
		return nil
	}
	return s.Revoked
}

func (s *SigningKeys) GetRevokedAt() *SigningKeysDate {
	if s == nil {
		return nil
	}
	return s.RevokedAt
}

func (s *SigningKeys) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SigningKeys) UnmarshalJSON(data []byte) error {
	type unmarshaler SigningKeys
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SigningKeys(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SigningKeys) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SigningKeysDate struct {
	// The date and time when the key became the current key
	String string
	// The date and time when the key became the current key
	StringUnknownMap map[string]interface{}

	typ string
}

func (s *SigningKeysDate) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SigningKeysDate) GetStringUnknownMap() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.StringUnknownMap
}

func (s *SigningKeysDate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		s.typ = "StringUnknownMap"
		s.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SigningKeysDate) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "StringUnknownMap" || s.StringUnknownMap != nil {
		return json.Marshal(s.StringUnknownMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SigningKeysDateVisitor interface {
	VisitString(string) error
	VisitStringUnknownMap(map[string]interface{}) error
}

func (s *SigningKeysDate) Accept(visitor SigningKeysDateVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "StringUnknownMap" || s.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(s.StringUnknownMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SupportedLocales string

const (
	SupportedLocalesAm    SupportedLocales = "am"
	SupportedLocalesAr    SupportedLocales = "ar"
	SupportedLocalesArEg  SupportedLocales = "ar-EG"
	SupportedLocalesArSa  SupportedLocales = "ar-SA"
	SupportedLocalesAz    SupportedLocales = "az"
	SupportedLocalesBg    SupportedLocales = "bg"
	SupportedLocalesBn    SupportedLocales = "bn"
	SupportedLocalesBs    SupportedLocales = "bs"
	SupportedLocalesCaEs  SupportedLocales = "ca-ES"
	SupportedLocalesCnr   SupportedLocales = "cnr"
	SupportedLocalesCs    SupportedLocales = "cs"
	SupportedLocalesCy    SupportedLocales = "cy"
	SupportedLocalesDa    SupportedLocales = "da"
	SupportedLocalesDe    SupportedLocales = "de"
	SupportedLocalesEl    SupportedLocales = "el"
	SupportedLocalesEn    SupportedLocales = "en"
	SupportedLocalesEnCa  SupportedLocales = "en-CA"
	SupportedLocalesEs    SupportedLocales = "es"
	SupportedLocalesEs419 SupportedLocales = "es-419"
	SupportedLocalesEsAr  SupportedLocales = "es-AR"
	SupportedLocalesEsMx  SupportedLocales = "es-MX"
	SupportedLocalesEt    SupportedLocales = "et"
	SupportedLocalesEuEs  SupportedLocales = "eu-ES"
	SupportedLocalesFa    SupportedLocales = "fa"
	SupportedLocalesFi    SupportedLocales = "fi"
	SupportedLocalesFr    SupportedLocales = "fr"
	SupportedLocalesFrCa  SupportedLocales = "fr-CA"
	SupportedLocalesFrFr  SupportedLocales = "fr-FR"
	SupportedLocalesGlEs  SupportedLocales = "gl-ES"
	SupportedLocalesGu    SupportedLocales = "gu"
	SupportedLocalesHe    SupportedLocales = "he"
	SupportedLocalesHi    SupportedLocales = "hi"
	SupportedLocalesHr    SupportedLocales = "hr"
	SupportedLocalesHu    SupportedLocales = "hu"
	SupportedLocalesHy    SupportedLocales = "hy"
	SupportedLocalesID    SupportedLocales = "id"
	SupportedLocalesIs    SupportedLocales = "is"
	SupportedLocalesIt    SupportedLocales = "it"
	SupportedLocalesJa    SupportedLocales = "ja"
	SupportedLocalesKa    SupportedLocales = "ka"
	SupportedLocalesKk    SupportedLocales = "kk"
	SupportedLocalesKn    SupportedLocales = "kn"
	SupportedLocalesKo    SupportedLocales = "ko"
	SupportedLocalesLt    SupportedLocales = "lt"
	SupportedLocalesLv    SupportedLocales = "lv"
	SupportedLocalesMk    SupportedLocales = "mk"
	SupportedLocalesMl    SupportedLocales = "ml"
	SupportedLocalesMn    SupportedLocales = "mn"
	SupportedLocalesMr    SupportedLocales = "mr"
	SupportedLocalesMs    SupportedLocales = "ms"
	SupportedLocalesMy    SupportedLocales = "my"
	SupportedLocalesNb    SupportedLocales = "nb"
	SupportedLocalesNl    SupportedLocales = "nl"
	SupportedLocalesNn    SupportedLocales = "nn"
	SupportedLocalesNo    SupportedLocales = "no"
	SupportedLocalesPa    SupportedLocales = "pa"
	SupportedLocalesPl    SupportedLocales = "pl"
	SupportedLocalesPt    SupportedLocales = "pt"
	SupportedLocalesPtBr  SupportedLocales = "pt-BR"
	SupportedLocalesPtPt  SupportedLocales = "pt-PT"
	SupportedLocalesRo    SupportedLocales = "ro"
	SupportedLocalesRu    SupportedLocales = "ru"
	SupportedLocalesSk    SupportedLocales = "sk"
	SupportedLocalesSl    SupportedLocales = "sl"
	SupportedLocalesSo    SupportedLocales = "so"
	SupportedLocalesSq    SupportedLocales = "sq"
	SupportedLocalesSr    SupportedLocales = "sr"
	SupportedLocalesSv    SupportedLocales = "sv"
	SupportedLocalesSw    SupportedLocales = "sw"
	SupportedLocalesTa    SupportedLocales = "ta"
	SupportedLocalesTe    SupportedLocales = "te"
	SupportedLocalesTh    SupportedLocales = "th"
	SupportedLocalesTl    SupportedLocales = "tl"
	SupportedLocalesTr    SupportedLocales = "tr"
	SupportedLocalesUk    SupportedLocales = "uk"
	SupportedLocalesUr    SupportedLocales = "ur"
	SupportedLocalesVi    SupportedLocales = "vi"
	SupportedLocalesZgh   SupportedLocales = "zgh"
	SupportedLocalesZhCn  SupportedLocales = "zh-CN"
	SupportedLocalesZhHk  SupportedLocales = "zh-HK"
	SupportedLocalesZhTw  SupportedLocales = "zh-TW"
)

func NewSupportedLocalesFromString(s string) (SupportedLocales, error) {
	switch s {
	case "am":
		return SupportedLocalesAm, nil
	case "ar":
		return SupportedLocalesAr, nil
	case "ar-EG":
		return SupportedLocalesArEg, nil
	case "ar-SA":
		return SupportedLocalesArSa, nil
	case "az":
		return SupportedLocalesAz, nil
	case "bg":
		return SupportedLocalesBg, nil
	case "bn":
		return SupportedLocalesBn, nil
	case "bs":
		return SupportedLocalesBs, nil
	case "ca-ES":
		return SupportedLocalesCaEs, nil
	case "cnr":
		return SupportedLocalesCnr, nil
	case "cs":
		return SupportedLocalesCs, nil
	case "cy":
		return SupportedLocalesCy, nil
	case "da":
		return SupportedLocalesDa, nil
	case "de":
		return SupportedLocalesDe, nil
	case "el":
		return SupportedLocalesEl, nil
	case "en":
		return SupportedLocalesEn, nil
	case "en-CA":
		return SupportedLocalesEnCa, nil
	case "es":
		return SupportedLocalesEs, nil
	case "es-419":
		return SupportedLocalesEs419, nil
	case "es-AR":
		return SupportedLocalesEsAr, nil
	case "es-MX":
		return SupportedLocalesEsMx, nil
	case "et":
		return SupportedLocalesEt, nil
	case "eu-ES":
		return SupportedLocalesEuEs, nil
	case "fa":
		return SupportedLocalesFa, nil
	case "fi":
		return SupportedLocalesFi, nil
	case "fr":
		return SupportedLocalesFr, nil
	case "fr-CA":
		return SupportedLocalesFrCa, nil
	case "fr-FR":
		return SupportedLocalesFrFr, nil
	case "gl-ES":
		return SupportedLocalesGlEs, nil
	case "gu":
		return SupportedLocalesGu, nil
	case "he":
		return SupportedLocalesHe, nil
	case "hi":
		return SupportedLocalesHi, nil
	case "hr":
		return SupportedLocalesHr, nil
	case "hu":
		return SupportedLocalesHu, nil
	case "hy":
		return SupportedLocalesHy, nil
	case "id":
		return SupportedLocalesID, nil
	case "is":
		return SupportedLocalesIs, nil
	case "it":
		return SupportedLocalesIt, nil
	case "ja":
		return SupportedLocalesJa, nil
	case "ka":
		return SupportedLocalesKa, nil
	case "kk":
		return SupportedLocalesKk, nil
	case "kn":
		return SupportedLocalesKn, nil
	case "ko":
		return SupportedLocalesKo, nil
	case "lt":
		return SupportedLocalesLt, nil
	case "lv":
		return SupportedLocalesLv, nil
	case "mk":
		return SupportedLocalesMk, nil
	case "ml":
		return SupportedLocalesMl, nil
	case "mn":
		return SupportedLocalesMn, nil
	case "mr":
		return SupportedLocalesMr, nil
	case "ms":
		return SupportedLocalesMs, nil
	case "my":
		return SupportedLocalesMy, nil
	case "nb":
		return SupportedLocalesNb, nil
	case "nl":
		return SupportedLocalesNl, nil
	case "nn":
		return SupportedLocalesNn, nil
	case "no":
		return SupportedLocalesNo, nil
	case "pa":
		return SupportedLocalesPa, nil
	case "pl":
		return SupportedLocalesPl, nil
	case "pt":
		return SupportedLocalesPt, nil
	case "pt-BR":
		return SupportedLocalesPtBr, nil
	case "pt-PT":
		return SupportedLocalesPtPt, nil
	case "ro":
		return SupportedLocalesRo, nil
	case "ru":
		return SupportedLocalesRu, nil
	case "sk":
		return SupportedLocalesSk, nil
	case "sl":
		return SupportedLocalesSl, nil
	case "so":
		return SupportedLocalesSo, nil
	case "sq":
		return SupportedLocalesSq, nil
	case "sr":
		return SupportedLocalesSr, nil
	case "sv":
		return SupportedLocalesSv, nil
	case "sw":
		return SupportedLocalesSw, nil
	case "ta":
		return SupportedLocalesTa, nil
	case "te":
		return SupportedLocalesTe, nil
	case "th":
		return SupportedLocalesTh, nil
	case "tl":
		return SupportedLocalesTl, nil
	case "tr":
		return SupportedLocalesTr, nil
	case "uk":
		return SupportedLocalesUk, nil
	case "ur":
		return SupportedLocalesUr, nil
	case "vi":
		return SupportedLocalesVi, nil
	case "zgh":
		return SupportedLocalesZgh, nil
	case "zh-CN":
		return SupportedLocalesZhCn, nil
	case "zh-HK":
		return SupportedLocalesZhHk, nil
	case "zh-TW":
		return SupportedLocalesZhTw, nil
	}
	var t SupportedLocales
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SupportedLocales) Ptr() *SupportedLocales {
	return &s
}

// List of trusted IP addresses that will not have attack protection enforced against them.
type SuspiciousIPThrottlingAllowlist = []SuspiciousIPThrottlingAllowlistItem

type SuspiciousIPThrottlingAllowlistItem = string

// Configuration options that apply before every login attempt.
type SuspiciousIPThrottlingPreLoginStage struct {
	// Total number of attempts allowed per day.
	MaxAttempts *int `json:"max_attempts,omitempty" url:"max_attempts,omitempty"`
	// Interval of time, given in milliseconds, at which new attempts are granted.
	Rate *int `json:"rate,omitempty" url:"rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SuspiciousIPThrottlingPreLoginStage) GetMaxAttempts() *int {
	if s == nil {
		return nil
	}
	return s.MaxAttempts
}

func (s *SuspiciousIPThrottlingPreLoginStage) GetRate() *int {
	if s == nil {
		return nil
	}
	return s.Rate
}

func (s *SuspiciousIPThrottlingPreLoginStage) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SuspiciousIPThrottlingPreLoginStage) UnmarshalJSON(data []byte) error {
	type unmarshaler SuspiciousIPThrottlingPreLoginStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SuspiciousIPThrottlingPreLoginStage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SuspiciousIPThrottlingPreLoginStage) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration options that apply before every user registration attempt.
type SuspiciousIPThrottlingPreUserRegistrationStage struct {
	// Total number of attempts allowed.
	MaxAttempts *int `json:"max_attempts,omitempty" url:"max_attempts,omitempty"`
	// Interval of time, given in milliseconds, at which new attempts are granted.
	Rate *int `json:"rate,omitempty" url:"rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SuspiciousIPThrottlingPreUserRegistrationStage) GetMaxAttempts() *int {
	if s == nil {
		return nil
	}
	return s.MaxAttempts
}

func (s *SuspiciousIPThrottlingPreUserRegistrationStage) GetRate() *int {
	if s == nil {
		return nil
	}
	return s.Rate
}

func (s *SuspiciousIPThrottlingPreUserRegistrationStage) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SuspiciousIPThrottlingPreUserRegistrationStage) UnmarshalJSON(data []byte) error {
	type unmarshaler SuspiciousIPThrottlingPreUserRegistrationStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SuspiciousIPThrottlingPreUserRegistrationStage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SuspiciousIPThrottlingPreUserRegistrationStage) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SuspiciousIPThrottlingShieldsEnum string

const (
	SuspiciousIPThrottlingShieldsEnumBlock             SuspiciousIPThrottlingShieldsEnum = "block"
	SuspiciousIPThrottlingShieldsEnumAdminNotification SuspiciousIPThrottlingShieldsEnum = "admin_notification"
)

func NewSuspiciousIPThrottlingShieldsEnumFromString(s string) (SuspiciousIPThrottlingShieldsEnum, error) {
	switch s {
	case "block":
		return SuspiciousIPThrottlingShieldsEnumBlock, nil
	case "admin_notification":
		return SuspiciousIPThrottlingShieldsEnumAdminNotification, nil
	}
	var t SuspiciousIPThrottlingShieldsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SuspiciousIPThrottlingShieldsEnum) Ptr() *SuspiciousIPThrottlingShieldsEnum {
	return &s
}

// Holds per-stage configuration options (max_attempts and rate).
type SuspiciousIPThrottlingStage struct {
	PreLogin            *SuspiciousIPThrottlingPreLoginStage            `json:"pre-login,omitempty" url:"pre-login,omitempty"`
	PreUserRegistration *SuspiciousIPThrottlingPreUserRegistrationStage `json:"pre-user-registration,omitempty" url:"pre-user-registration,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SuspiciousIPThrottlingStage) GetPreLogin() *SuspiciousIPThrottlingPreLoginStage {
	if s == nil {
		return nil
	}
	return s.PreLogin
}

func (s *SuspiciousIPThrottlingStage) GetPreUserRegistration() *SuspiciousIPThrottlingPreUserRegistrationStage {
	if s == nil {
		return nil
	}
	return s.PreUserRegistration
}

func (s *SuspiciousIPThrottlingStage) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SuspiciousIPThrottlingStage) UnmarshalJSON(data []byte) error {
	type unmarshaler SuspiciousIPThrottlingStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SuspiciousIPThrottlingStage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SuspiciousIPThrottlingStage) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Settings related to OIDC RP-initiated Logout
type TenantOidcLogoutSettings struct {
	// Enable the end_session_endpoint URL in the .well-known discovery configuration
	RpLogoutEndSessionEndpointDiscovery *bool `json:"rp_logout_end_session_endpoint_discovery,omitempty" url:"rp_logout_end_session_endpoint_discovery,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantOidcLogoutSettings) GetRpLogoutEndSessionEndpointDiscovery() *bool {
	if t == nil {
		return nil
	}
	return t.RpLogoutEndSessionEndpointDiscovery
}

func (t *TenantOidcLogoutSettings) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantOidcLogoutSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantOidcLogoutSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantOidcLogoutSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantOidcLogoutSettings) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Device Flow configuration
type TenantSettingsDeviceFlow struct {
	Charset *TenantSettingsDeviceFlowCharset `json:"charset,omitempty" url:"charset,omitempty"`
	// Mask used to format a generated User Code into a friendly, readable format.
	Mask *string `json:"mask,omitempty" url:"mask,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsDeviceFlow) GetCharset() *TenantSettingsDeviceFlowCharset {
	if t == nil {
		return nil
	}
	return t.Charset
}

func (t *TenantSettingsDeviceFlow) GetMask() *string {
	if t == nil {
		return nil
	}
	return t.Mask
}

func (t *TenantSettingsDeviceFlow) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsDeviceFlow) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsDeviceFlow
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsDeviceFlow(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsDeviceFlow) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Character set used to generate a User Code. Can be `base20` or `digits`.
type TenantSettingsDeviceFlowCharset string

const (
	TenantSettingsDeviceFlowCharsetBase20 TenantSettingsDeviceFlowCharset = "base20"
	TenantSettingsDeviceFlowCharsetDigits TenantSettingsDeviceFlowCharset = "digits"
)

func NewTenantSettingsDeviceFlowCharsetFromString(s string) (TenantSettingsDeviceFlowCharset, error) {
	switch s {
	case "base20":
		return TenantSettingsDeviceFlowCharsetBase20, nil
	case "digits":
		return TenantSettingsDeviceFlowCharsetDigits, nil
	}
	var t TenantSettingsDeviceFlowCharset
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TenantSettingsDeviceFlowCharset) Ptr() *TenantSettingsDeviceFlowCharset {
	return &t
}

// Error page customization.
type TenantSettingsErrorPage struct {
	// Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).
	HTML *string `json:"html,omitempty" url:"html,omitempty"`
	// Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).
	ShowLogLink *bool `json:"show_log_link,omitempty" url:"show_log_link,omitempty"`
	// URL to redirect to when an error occurs instead of showing the default error page.
	URL *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsErrorPage) GetHTML() *string {
	if t == nil {
		return nil
	}
	return t.HTML
}

func (t *TenantSettingsErrorPage) GetShowLogLink() *bool {
	if t == nil {
		return nil
	}
	return t.ShowLogLink
}

func (t *TenantSettingsErrorPage) GetURL() *string {
	if t == nil {
		return nil
	}
	return t.URL
}

func (t *TenantSettingsErrorPage) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsErrorPage) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsErrorPage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsErrorPage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsErrorPage) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Flags used to change the behavior of this tenant.
type TenantSettingsFlags struct {
	// Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).
	ChangePwdFlowV1 *bool `json:"change_pwd_flow_v1,omitempty" url:"change_pwd_flow_v1,omitempty"`
	// Whether the APIs section is enabled (true) or disabled (false).
	EnableAPIsSection *bool `json:"enable_apis_section,omitempty" url:"enable_apis_section,omitempty"`
	// Whether the impersonation functionality has been disabled (true) or not (false). Read-only.
	DisableImpersonation *bool `json:"disable_impersonation,omitempty" url:"disable_impersonation,omitempty"`
	// Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false).
	EnableClientConnections *bool `json:"enable_client_connections,omitempty" url:"enable_client_connections,omitempty"`
	// Whether advanced API Authorization scenarios are enabled (true) or disabled (false).
	EnablePipeline2 *bool `json:"enable_pipeline2,omitempty" url:"enable_pipeline2,omitempty"`
	// If enabled, clients are able to add legacy delegation grants.
	AllowLegacyDelegationGrantTypes *bool `json:"allow_legacy_delegation_grant_types,omitempty" url:"allow_legacy_delegation_grant_types,omitempty"`
	// If enabled, clients are able to add legacy RO grants.
	AllowLegacyRoGrantTypes *bool `json:"allow_legacy_ro_grant_types,omitempty" url:"allow_legacy_ro_grant_types,omitempty"`
	// Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false).
	AllowLegacyTokeninfoEndpoint *bool `json:"allow_legacy_tokeninfo_endpoint,omitempty" url:"allow_legacy_tokeninfo_endpoint,omitempty"`
	// Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
	EnableLegacyProfile *bool `json:"enable_legacy_profile,omitempty" url:"enable_legacy_profile,omitempty"`
	// Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false).
	EnableIdtokenAPI2 *bool `json:"enable_idtoken_api2,omitempty" url:"enable_idtoken_api2,omitempty"`
	// Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists.
	EnablePublicSignupUserExistsError *bool `json:"enable_public_signup_user_exists_error,omitempty" url:"enable_public_signup_user_exists_error,omitempty"`
	// Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true).
	EnableSSO *bool `json:"enable_sso,omitempty" url:"enable_sso,omitempty"`
	// Whether the `enable_sso` setting can be changed (true) or not (false).
	AllowChangingEnableSSO *bool `json:"allow_changing_enable_sso,omitempty" url:"allow_changing_enable_sso,omitempty"`
	// Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false).
	DisableClickjackProtectionHeaders *bool `json:"disable_clickjack_protection_headers,omitempty" url:"disable_clickjack_protection_headers,omitempty"`
	// Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
	NoDiscloseEnterpriseConnections *bool `json:"no_disclose_enterprise_connections,omitempty" url:"no_disclose_enterprise_connections,omitempty"`
	// Enforce client authentication for passwordless start.
	EnforceClientAuthenticationOnPasswordlessStart *bool `json:"enforce_client_authentication_on_passwordless_start,omitempty" url:"enforce_client_authentication_on_passwordless_start,omitempty"`
	// Enables the email verification flow during login for Azure AD and ADFS connections
	EnableAdfsWaadEmailVerification *bool `json:"enable_adfs_waad_email_verification,omitempty" url:"enable_adfs_waad_email_verification,omitempty"`
	// Delete underlying grant when a Refresh Token is revoked via the Authentication API.
	RevokeRefreshTokenGrant *bool `json:"revoke_refresh_token_grant,omitempty" url:"revoke_refresh_token_grant,omitempty"`
	// Enables beta access to log streaming changes
	DashboardLogStreamsNext *bool `json:"dashboard_log_streams_next,omitempty" url:"dashboard_log_streams_next,omitempty"`
	// Enables new insights activity page view
	DashboardInsightsView *bool `json:"dashboard_insights_view,omitempty" url:"dashboard_insights_view,omitempty"`
	// Disables SAML fields map fix for bad mappings with repeated attributes
	DisableFieldsMapFix *bool `json:"disable_fields_map_fix,omitempty" url:"disable_fields_map_fix,omitempty"`
	// Used to allow users to pick what factor to enroll of the available MFA factors.
	MfaShowFactorListOnEnrollment *bool `json:"mfa_show_factor_list_on_enrollment,omitempty" url:"mfa_show_factor_list_on_enrollment,omitempty"`
	// Removes alg property from jwks .well-known endpoint
	RemoveAlgFromJwks *bool `json:"remove_alg_from_jwks,omitempty" url:"remove_alg_from_jwks,omitempty"`
	// Improves bot detection during signup in classic universal login
	ImprovedSignupBotDetectionInClassic *bool `json:"improved_signup_bot_detection_in_classic,omitempty" url:"improved_signup_bot_detection_in_classic,omitempty"`
	// This tenant signed up for the Auth4GenAI trail
	GenaiTrial *bool `json:"genai_trial,omitempty" url:"genai_trial,omitempty"`
	// Whether third-party developers can <a href="https://auth0.com/docs/api-auth/dynamic-client-registration">dynamically register</a> applications for your APIs (true) or not (false). This flag enables dynamic client registration.
	EnableDynamicClientRegistration *bool `json:"enable_dynamic_client_registration,omitempty" url:"enable_dynamic_client_registration,omitempty"`
	// If true, SMS phone numbers will not be obfuscated in Management API GET calls.
	DisableManagementAPISmsObfuscation *bool `json:"disable_management_api_sms_obfuscation,omitempty" url:"disable_management_api_sms_obfuscation,omitempty"`
	// Changes email_verified behavior for Azure AD/ADFS connections when enabled. Sets email_verified to false otherwise.
	TrustAzureAdfsEmailVerifiedConnectionProperty *bool `json:"trust_azure_adfs_email_verified_connection_property,omitempty" url:"trust_azure_adfs_email_verified_connection_property,omitempty"`
	// If true, custom domains feature will be enabled for tenant.
	CustomDomainsProvisioning *bool `json:"custom_domains_provisioning,omitempty" url:"custom_domains_provisioning,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsFlags) GetChangePwdFlowV1() *bool {
	if t == nil {
		return nil
	}
	return t.ChangePwdFlowV1
}

func (t *TenantSettingsFlags) GetEnableAPIsSection() *bool {
	if t == nil {
		return nil
	}
	return t.EnableAPIsSection
}

func (t *TenantSettingsFlags) GetDisableImpersonation() *bool {
	if t == nil {
		return nil
	}
	return t.DisableImpersonation
}

func (t *TenantSettingsFlags) GetEnableClientConnections() *bool {
	if t == nil {
		return nil
	}
	return t.EnableClientConnections
}

func (t *TenantSettingsFlags) GetEnablePipeline2() *bool {
	if t == nil {
		return nil
	}
	return t.EnablePipeline2
}

func (t *TenantSettingsFlags) GetAllowLegacyDelegationGrantTypes() *bool {
	if t == nil {
		return nil
	}
	return t.AllowLegacyDelegationGrantTypes
}

func (t *TenantSettingsFlags) GetAllowLegacyRoGrantTypes() *bool {
	if t == nil {
		return nil
	}
	return t.AllowLegacyRoGrantTypes
}

func (t *TenantSettingsFlags) GetAllowLegacyTokeninfoEndpoint() *bool {
	if t == nil {
		return nil
	}
	return t.AllowLegacyTokeninfoEndpoint
}

func (t *TenantSettingsFlags) GetEnableLegacyProfile() *bool {
	if t == nil {
		return nil
	}
	return t.EnableLegacyProfile
}

func (t *TenantSettingsFlags) GetEnableIdtokenAPI2() *bool {
	if t == nil {
		return nil
	}
	return t.EnableIdtokenAPI2
}

func (t *TenantSettingsFlags) GetEnablePublicSignupUserExistsError() *bool {
	if t == nil {
		return nil
	}
	return t.EnablePublicSignupUserExistsError
}

func (t *TenantSettingsFlags) GetEnableSSO() *bool {
	if t == nil {
		return nil
	}
	return t.EnableSSO
}

func (t *TenantSettingsFlags) GetAllowChangingEnableSSO() *bool {
	if t == nil {
		return nil
	}
	return t.AllowChangingEnableSSO
}

func (t *TenantSettingsFlags) GetDisableClickjackProtectionHeaders() *bool {
	if t == nil {
		return nil
	}
	return t.DisableClickjackProtectionHeaders
}

func (t *TenantSettingsFlags) GetNoDiscloseEnterpriseConnections() *bool {
	if t == nil {
		return nil
	}
	return t.NoDiscloseEnterpriseConnections
}

func (t *TenantSettingsFlags) GetEnforceClientAuthenticationOnPasswordlessStart() *bool {
	if t == nil {
		return nil
	}
	return t.EnforceClientAuthenticationOnPasswordlessStart
}

func (t *TenantSettingsFlags) GetEnableAdfsWaadEmailVerification() *bool {
	if t == nil {
		return nil
	}
	return t.EnableAdfsWaadEmailVerification
}

func (t *TenantSettingsFlags) GetRevokeRefreshTokenGrant() *bool {
	if t == nil {
		return nil
	}
	return t.RevokeRefreshTokenGrant
}

func (t *TenantSettingsFlags) GetDashboardLogStreamsNext() *bool {
	if t == nil {
		return nil
	}
	return t.DashboardLogStreamsNext
}

func (t *TenantSettingsFlags) GetDashboardInsightsView() *bool {
	if t == nil {
		return nil
	}
	return t.DashboardInsightsView
}

func (t *TenantSettingsFlags) GetDisableFieldsMapFix() *bool {
	if t == nil {
		return nil
	}
	return t.DisableFieldsMapFix
}

func (t *TenantSettingsFlags) GetMfaShowFactorListOnEnrollment() *bool {
	if t == nil {
		return nil
	}
	return t.MfaShowFactorListOnEnrollment
}

func (t *TenantSettingsFlags) GetRemoveAlgFromJwks() *bool {
	if t == nil {
		return nil
	}
	return t.RemoveAlgFromJwks
}

func (t *TenantSettingsFlags) GetImprovedSignupBotDetectionInClassic() *bool {
	if t == nil {
		return nil
	}
	return t.ImprovedSignupBotDetectionInClassic
}

func (t *TenantSettingsFlags) GetGenaiTrial() *bool {
	if t == nil {
		return nil
	}
	return t.GenaiTrial
}

func (t *TenantSettingsFlags) GetEnableDynamicClientRegistration() *bool {
	if t == nil {
		return nil
	}
	return t.EnableDynamicClientRegistration
}

func (t *TenantSettingsFlags) GetDisableManagementAPISmsObfuscation() *bool {
	if t == nil {
		return nil
	}
	return t.DisableManagementAPISmsObfuscation
}

func (t *TenantSettingsFlags) GetTrustAzureAdfsEmailVerifiedConnectionProperty() *bool {
	if t == nil {
		return nil
	}
	return t.TrustAzureAdfsEmailVerifiedConnectionProperty
}

func (t *TenantSettingsFlags) GetCustomDomainsProvisioning() *bool {
	if t == nil {
		return nil
	}
	return t.CustomDomainsProvisioning
}

func (t *TenantSettingsFlags) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsFlags) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsFlags
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsFlags(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsFlags) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Guardian page customization.
type TenantSettingsGuardianPage struct {
	// Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).
	HTML *string `json:"html,omitempty" url:"html,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsGuardianPage) GetEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.Enabled
}

func (t *TenantSettingsGuardianPage) GetHTML() *string {
	if t == nil {
		return nil
	}
	return t.HTML
}

func (t *TenantSettingsGuardianPage) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsGuardianPage) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsGuardianPage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsGuardianPage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsGuardianPage) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// mTLS configuration.
type TenantSettingsMtls struct {
	// If true, enables mTLS endpoint aliases
	EnableEndpointAliases *bool `json:"enable_endpoint_aliases,omitempty" url:"enable_endpoint_aliases,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsMtls) GetEnableEndpointAliases() *bool {
	if t == nil {
		return nil
	}
	return t.EnableEndpointAliases
}

func (t *TenantSettingsMtls) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsMtls) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsMtls
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsMtls(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsMtls) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Change Password page customization.
type TenantSettingsPasswordPage struct {
	// Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).
	HTML *string `json:"html,omitempty" url:"html,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsPasswordPage) GetEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.Enabled
}

func (t *TenantSettingsPasswordPage) GetHTML() *string {
	if t == nil {
		return nil
	}
	return t.HTML
}

func (t *TenantSettingsPasswordPage) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsPasswordPage) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsPasswordPage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsPasswordPage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsPasswordPage) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Sessions related settings for tenant
type TenantSettingsSessions struct {
	// Whether to bypass prompting logic (false) when performing OIDC Logout
	OidcLogoutPromptEnabled *bool `json:"oidc_logout_prompt_enabled,omitempty" url:"oidc_logout_prompt_enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantSettingsSessions) GetOidcLogoutPromptEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.OidcLogoutPromptEnabled
}

func (t *TenantSettingsSessions) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantSettingsSessions) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantSettingsSessions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantSettingsSessions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantSettingsSessions) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenQuota struct {
	ClientCredentials *TokenQuotaClientCredentials `json:"client_credentials" url:"client_credentials"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenQuota) GetClientCredentials() *TokenQuotaClientCredentials {
	if t == nil {
		return nil
	}
	return t.ClientCredentials
}

func (t *TokenQuota) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenQuota) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenQuota
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenQuota(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenQuota) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The token quota configuration
type TokenQuotaClientCredentials struct {
	// If enabled, the quota will be enforced and requests in excess of the quota will fail. If disabled, the quota will not be enforced, but notifications for requests exceeding the quota will be available in logs.
	Enforce *bool `json:"enforce,omitempty" url:"enforce,omitempty"`
	// Maximum number of issued tokens per day
	PerDay *int `json:"per_day,omitempty" url:"per_day,omitempty"`
	// Maximum number of issued tokens per hour
	PerHour *int `json:"per_hour,omitempty" url:"per_hour,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenQuotaClientCredentials) GetEnforce() *bool {
	if t == nil {
		return nil
	}
	return t.Enforce
}

func (t *TokenQuotaClientCredentials) GetPerDay() *int {
	if t == nil {
		return nil
	}
	return t.PerDay
}

func (t *TokenQuotaClientCredentials) GetPerHour() *int {
	if t == nil {
		return nil
	}
	return t.PerHour
}

func (t *TokenQuotaClientCredentials) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenQuotaClientCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenQuotaClientCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenQuotaClientCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenQuotaClientCredentials) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenQuotaConfiguration struct {
	ClientCredentials *TokenQuotaClientCredentials `json:"client_credentials" url:"client_credentials"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (t *TokenQuotaConfiguration) GetClientCredentials() *TokenQuotaClientCredentials {
	if t == nil {
		return nil
	}
	return t.ClientCredentials
}

func (t *TokenQuotaConfiguration) GetExtraProperties() map[string]interface{} {
	return t.ExtraProperties
}

func (t *TokenQuotaConfiguration) UnmarshalJSON(data []byte) error {
	type embed TokenQuotaConfiguration
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenQuotaConfiguration(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.ExtraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenQuotaConfiguration) MarshalJSON() ([]byte, error) {
	type embed TokenQuotaConfiguration
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, t.ExtraProperties)
}

func (t *TokenQuotaConfiguration) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TwilioProviderConfiguration struct {
	DefaultFrom     *string                            `json:"default_from,omitempty" url:"default_from,omitempty"`
	Mssid           *string                            `json:"mssid,omitempty" url:"mssid,omitempty"`
	Sid             string                             `json:"sid" url:"sid"`
	DeliveryMethods []TwilioProviderDeliveryMethodEnum `json:"delivery_methods" url:"delivery_methods"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TwilioProviderConfiguration) GetDefaultFrom() *string {
	if t == nil {
		return nil
	}
	return t.DefaultFrom
}

func (t *TwilioProviderConfiguration) GetMssid() *string {
	if t == nil {
		return nil
	}
	return t.Mssid
}

func (t *TwilioProviderConfiguration) GetSid() string {
	if t == nil {
		return ""
	}
	return t.Sid
}

func (t *TwilioProviderConfiguration) GetDeliveryMethods() []TwilioProviderDeliveryMethodEnum {
	if t == nil {
		return nil
	}
	return t.DeliveryMethods
}

func (t *TwilioProviderConfiguration) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TwilioProviderConfiguration) UnmarshalJSON(data []byte) error {
	type unmarshaler TwilioProviderConfiguration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TwilioProviderConfiguration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TwilioProviderConfiguration) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TwilioProviderCredentials struct {
	AuthToken string `json:"auth_token" url:"auth_token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TwilioProviderCredentials) GetAuthToken() string {
	if t == nil {
		return ""
	}
	return t.AuthToken
}

func (t *TwilioProviderCredentials) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TwilioProviderCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler TwilioProviderCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TwilioProviderCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TwilioProviderCredentials) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TwilioProviderDeliveryMethodEnum string

const (
	TwilioProviderDeliveryMethodEnumText  TwilioProviderDeliveryMethodEnum = "text"
	TwilioProviderDeliveryMethodEnumVoice TwilioProviderDeliveryMethodEnum = "voice"
)

func NewTwilioProviderDeliveryMethodEnumFromString(s string) (TwilioProviderDeliveryMethodEnum, error) {
	switch s {
	case "text":
		return TwilioProviderDeliveryMethodEnumText, nil
	case "voice":
		return TwilioProviderDeliveryMethodEnumVoice, nil
	}
	var t TwilioProviderDeliveryMethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TwilioProviderDeliveryMethodEnum) Ptr() *TwilioProviderDeliveryMethodEnum {
	return &t
}

type UpdateActionBindingsResponseContent struct {
	Bindings []*ActionBinding `json:"bindings,omitempty" url:"bindings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateActionBindingsResponseContent) GetBindings() []*ActionBinding {
	if u == nil {
		return nil
	}
	return u.Bindings
}

func (u *UpdateActionBindingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateActionBindingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateActionBindingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateActionBindingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateActionBindingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateAculResponseContent struct {
	RenderingMode *AculRenderingModeEnum `json:"rendering_mode,omitempty" url:"rendering_mode,omitempty"`
	// Context values to make available
	ContextConfiguration []string `json:"context_configuration,omitempty" url:"context_configuration,omitempty"`
	// Override Universal Login default head tags
	DefaultHeadTagsDisabled *bool `json:"default_head_tags_disabled,omitempty" url:"default_head_tags_disabled,omitempty"`
	// An array of head tags
	HeadTags []*AculHeadTag `json:"head_tags,omitempty" url:"head_tags,omitempty"`
	Filters  *AculFilters   `json:"filters,omitempty" url:"filters,omitempty"`
	// Use page template with ACUL
	UsePageTemplate *bool `json:"use_page_template,omitempty" url:"use_page_template,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateAculResponseContent) GetRenderingMode() *AculRenderingModeEnum {
	if u == nil {
		return nil
	}
	return u.RenderingMode
}

func (u *UpdateAculResponseContent) GetContextConfiguration() []string {
	if u == nil {
		return nil
	}
	return u.ContextConfiguration
}

func (u *UpdateAculResponseContent) GetDefaultHeadTagsDisabled() *bool {
	if u == nil {
		return nil
	}
	return u.DefaultHeadTagsDisabled
}

func (u *UpdateAculResponseContent) GetHeadTags() []*AculHeadTag {
	if u == nil {
		return nil
	}
	return u.HeadTags
}

func (u *UpdateAculResponseContent) GetFilters() *AculFilters {
	if u == nil {
		return nil
	}
	return u.Filters
}

func (u *UpdateAculResponseContent) GetUsePageTemplate() *bool {
	if u == nil {
		return nil
	}
	return u.UsePageTemplate
}

func (u *UpdateAculResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateAculResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateAculResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateAculResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAculResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateAculResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UpdateAculResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Phone provider configuration schema
type UpdateBrandingPhoneProviderResponseContent struct {
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the tenant
	Tenant  *string                   `json:"tenant,omitempty" url:"tenant,omitempty"`
	Name    PhoneProviderNameEnum     `json:"name" url:"name"`
	Channel *PhoneProviderChannelEnum `json:"channel,omitempty" url:"channel,omitempty"`
	// Whether the provider is enabled (false) or disabled (true).
	Disabled      *bool                       `json:"disabled,omitempty" url:"disabled,omitempty"`
	Configuration *PhoneProviderConfiguration `json:"configuration,omitempty" url:"configuration,omitempty"`
	// The provider's creation date and time in ISO 8601 format
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time of the last update to the provider in ISO 8601 format
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetTenant() *string {
	if u == nil {
		return nil
	}
	return u.Tenant
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetName() PhoneProviderNameEnum {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetDisabled() *bool {
	if u == nil {
		return nil
	}
	return u.Disabled
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetConfiguration() *PhoneProviderConfiguration {
	if u == nil {
		return nil
	}
	return u.Configuration
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UpdateBrandingPhoneProviderResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBrandingPhoneProviderResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateBrandingPhoneProviderResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateBrandingPhoneProviderResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBrandingPhoneProviderResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateBrandingPhoneProviderResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewOptionalDateTime(u.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpdateBrandingPhoneProviderResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateBrandingThemeResponseContent struct {
	Borders *BrandingThemeBorders `json:"borders" url:"borders"`
	Colors  *BrandingThemeColors  `json:"colors" url:"colors"`
	// Display Name
	DisplayName    string                       `json:"displayName" url:"displayName"`
	Fonts          *BrandingThemeFonts          `json:"fonts" url:"fonts"`
	PageBackground *BrandingThemePageBackground `json:"page_background" url:"page_background"`
	// Theme Id
	ThemeID string               `json:"themeId" url:"themeId"`
	Widget  *BrandingThemeWidget `json:"widget" url:"widget"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBrandingThemeResponseContent) GetBorders() *BrandingThemeBorders {
	if u == nil {
		return nil
	}
	return u.Borders
}

func (u *UpdateBrandingThemeResponseContent) GetColors() *BrandingThemeColors {
	if u == nil {
		return nil
	}
	return u.Colors
}

func (u *UpdateBrandingThemeResponseContent) GetDisplayName() string {
	if u == nil {
		return ""
	}
	return u.DisplayName
}

func (u *UpdateBrandingThemeResponseContent) GetFonts() *BrandingThemeFonts {
	if u == nil {
		return nil
	}
	return u.Fonts
}

func (u *UpdateBrandingThemeResponseContent) GetPageBackground() *BrandingThemePageBackground {
	if u == nil {
		return nil
	}
	return u.PageBackground
}

func (u *UpdateBrandingThemeResponseContent) GetThemeID() string {
	if u == nil {
		return ""
	}
	return u.ThemeID
}

func (u *UpdateBrandingThemeResponseContent) GetWidget() *BrandingThemeWidget {
	if u == nil {
		return nil
	}
	return u.Widget
}

func (u *UpdateBrandingThemeResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBrandingThemeResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBrandingThemeResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateBrandingThemeResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBrandingThemeResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateBreachedPasswordDetectionSettingsResponseContent struct {
	// Whether or not breached password detection is active.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Action to take when a breached password is detected during a login.
	//
	//	Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.
	Shields []BreachedPasswordDetectionShieldsEnum `json:"shields,omitempty" url:"shields,omitempty"`
	// When "admin_notification" is enabled, determines how often email notifications are sent.
	//
	//	Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.
	AdminNotificationFrequency []BreachedPasswordDetectionAdminNotificationFrequencyEnum `json:"admin_notification_frequency,omitempty" url:"admin_notification_frequency,omitempty"`
	Method                     *BreachedPasswordDetectionMethodEnum                      `json:"method,omitempty" url:"method,omitempty"`
	Stage                      *BreachedPasswordDetectionStage                           `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) GetShields() []BreachedPasswordDetectionShieldsEnum {
	if u == nil {
		return nil
	}
	return u.Shields
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) GetAdminNotificationFrequency() []BreachedPasswordDetectionAdminNotificationFrequencyEnum {
	if u == nil {
		return nil
	}
	return u.AdminNotificationFrequency
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) GetMethod() *BreachedPasswordDetectionMethodEnum {
	if u == nil {
		return nil
	}
	return u.Method
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) GetStage() *BreachedPasswordDetectionStage {
	if u == nil {
		return nil
	}
	return u.Stage
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBreachedPasswordDetectionSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateBreachedPasswordDetectionSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBreachedPasswordDetectionSettingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateBruteForceSettingsResponseContent struct {
	// Whether or not brute force attack protections are active.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Action to take when a brute force protection threshold is violated.
	//
	//	Possible values: <code>block</code>, <code>user_notification</code>.
	Shields []UpdateBruteForceSettingsResponseContentShieldsItem `json:"shields,omitempty" url:"shields,omitempty"`
	// List of trusted IP addresses that will not have attack protection enforced against them.
	Allowlist []string `json:"allowlist,omitempty" url:"allowlist,omitempty"`
	// Account Lockout: Determines whether or not IP address is used when counting failed attempts.
	//
	//	Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.
	Mode *UpdateBruteForceSettingsResponseContentMode `json:"mode,omitempty" url:"mode,omitempty"`
	// Maximum number of unsuccessful attempts.
	MaxAttempts *int `json:"max_attempts,omitempty" url:"max_attempts,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBruteForceSettingsResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateBruteForceSettingsResponseContent) GetShields() []UpdateBruteForceSettingsResponseContentShieldsItem {
	if u == nil {
		return nil
	}
	return u.Shields
}

func (u *UpdateBruteForceSettingsResponseContent) GetAllowlist() []string {
	if u == nil {
		return nil
	}
	return u.Allowlist
}

func (u *UpdateBruteForceSettingsResponseContent) GetMode() *UpdateBruteForceSettingsResponseContentMode {
	if u == nil {
		return nil
	}
	return u.Mode
}

func (u *UpdateBruteForceSettingsResponseContent) GetMaxAttempts() *int {
	if u == nil {
		return nil
	}
	return u.MaxAttempts
}

func (u *UpdateBruteForceSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBruteForceSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBruteForceSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateBruteForceSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBruteForceSettingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Account Lockout: Determines whether or not IP address is used when counting failed attempts.
//
//	Possible values: <code>count_per_identifier_and_ip</code>, <code>count_per_identifier</code>.
type UpdateBruteForceSettingsResponseContentMode string

const (
	UpdateBruteForceSettingsResponseContentModeCountPerIdentifierAndIP UpdateBruteForceSettingsResponseContentMode = "count_per_identifier_and_ip"
	UpdateBruteForceSettingsResponseContentModeCountPerIdentifier      UpdateBruteForceSettingsResponseContentMode = "count_per_identifier"
)

func NewUpdateBruteForceSettingsResponseContentModeFromString(s string) (UpdateBruteForceSettingsResponseContentMode, error) {
	switch s {
	case "count_per_identifier_and_ip":
		return UpdateBruteForceSettingsResponseContentModeCountPerIdentifierAndIP, nil
	case "count_per_identifier":
		return UpdateBruteForceSettingsResponseContentModeCountPerIdentifier, nil
	}
	var t UpdateBruteForceSettingsResponseContentMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateBruteForceSettingsResponseContentMode) Ptr() *UpdateBruteForceSettingsResponseContentMode {
	return &u
}

type UpdateBruteForceSettingsResponseContentShieldsItem string

const (
	UpdateBruteForceSettingsResponseContentShieldsItemBlock            UpdateBruteForceSettingsResponseContentShieldsItem = "block"
	UpdateBruteForceSettingsResponseContentShieldsItemUserNotification UpdateBruteForceSettingsResponseContentShieldsItem = "user_notification"
)

func NewUpdateBruteForceSettingsResponseContentShieldsItemFromString(s string) (UpdateBruteForceSettingsResponseContentShieldsItem, error) {
	switch s {
	case "block":
		return UpdateBruteForceSettingsResponseContentShieldsItemBlock, nil
	case "user_notification":
		return UpdateBruteForceSettingsResponseContentShieldsItemUserNotification, nil
	}
	var t UpdateBruteForceSettingsResponseContentShieldsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateBruteForceSettingsResponseContentShieldsItem) Ptr() *UpdateBruteForceSettingsResponseContentShieldsItem {
	return &u
}

type UpdateEmailProviderResponseContent struct {
	// Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, `smtp`, `azure_cs`, `ms365`, or `custom`.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether the provider is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Email address to use as "from" when no other address specified.
	DefaultFromAddress *string                   `json:"default_from_address,omitempty" url:"default_from_address,omitempty"`
	Credentials        *EmailProviderCredentials `json:"credentials,omitempty" url:"credentials,omitempty"`
	Settings           *EmailProviderSettings    `json:"settings,omitempty" url:"settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEmailProviderResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateEmailProviderResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateEmailProviderResponseContent) GetDefaultFromAddress() *string {
	if u == nil {
		return nil
	}
	return u.DefaultFromAddress
}

func (u *UpdateEmailProviderResponseContent) GetCredentials() *EmailProviderCredentials {
	if u == nil {
		return nil
	}
	return u.Credentials
}

func (u *UpdateEmailProviderResponseContent) GetSettings() *EmailProviderSettings {
	if u == nil {
		return nil
	}
	return u.Settings
}

func (u *UpdateEmailProviderResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEmailProviderResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEmailProviderResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEmailProviderResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEmailProviderResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateEnabledClientConnectionsRequestContent = []*UpdateEnabledClientConnectionsRequestContentItem

type UpdateEnabledClientConnectionsRequestContentItem struct {
	// The client_id of the client to be the subject to change status
	ClientID string `json:"client_id" url:"client_id"`
	// Whether the connection is enabled or not for this client_id
	Status bool `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEnabledClientConnectionsRequestContentItem) GetClientID() string {
	if u == nil {
		return ""
	}
	return u.ClientID
}

func (u *UpdateEnabledClientConnectionsRequestContentItem) GetStatus() bool {
	if u == nil {
		return false
	}
	return u.Status
}

func (u *UpdateEnabledClientConnectionsRequestContentItem) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEnabledClientConnectionsRequestContentItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEnabledClientConnectionsRequestContentItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEnabledClientConnectionsRequestContentItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEnabledClientConnectionsRequestContentItem) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateGuardianFactorDuoSettingsResponseContent struct {
	Ikey *string `json:"ikey,omitempty" url:"ikey,omitempty"`
	Skey *string `json:"skey,omitempty" url:"skey,omitempty"`
	Host *string `json:"host,omitempty" url:"host,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateGuardianFactorDuoSettingsResponseContent) GetIkey() *string {
	if u == nil {
		return nil
	}
	return u.Ikey
}

func (u *UpdateGuardianFactorDuoSettingsResponseContent) GetSkey() *string {
	if u == nil {
		return nil
	}
	return u.Skey
}

func (u *UpdateGuardianFactorDuoSettingsResponseContent) GetHost() *string {
	if u == nil {
		return nil
	}
	return u.Host
}

func (u *UpdateGuardianFactorDuoSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateGuardianFactorDuoSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateGuardianFactorDuoSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateGuardianFactorDuoSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateGuardianFactorDuoSettingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateGuardianFactorsProviderPushNotificationSnsResponseContent struct {
	AwsAccessKeyID                *string `json:"aws_access_key_id,omitempty" url:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey            *string `json:"aws_secret_access_key,omitempty" url:"aws_secret_access_key,omitempty"`
	AwsRegion                     *string `json:"aws_region,omitempty" url:"aws_region,omitempty"`
	SnsApnsPlatformApplicationArn *string `json:"sns_apns_platform_application_arn,omitempty" url:"sns_apns_platform_application_arn,omitempty"`
	SnsGcmPlatformApplicationArn  *string `json:"sns_gcm_platform_application_arn,omitempty" url:"sns_gcm_platform_application_arn,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) GetAwsAccessKeyID() *string {
	if u == nil {
		return nil
	}
	return u.AwsAccessKeyID
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) GetAwsSecretAccessKey() *string {
	if u == nil {
		return nil
	}
	return u.AwsSecretAccessKey
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) GetAwsRegion() *string {
	if u == nil {
		return nil
	}
	return u.AwsRegion
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) GetSnsApnsPlatformApplicationArn() *string {
	if u == nil {
		return nil
	}
	return u.SnsApnsPlatformApplicationArn
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) GetSnsGcmPlatformApplicationArn() *string {
	if u == nil {
		return nil
	}
	return u.SnsGcmPlatformApplicationArn
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateGuardianFactorsProviderPushNotificationSnsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateGuardianFactorsProviderPushNotificationSnsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateGuardianFactorsProviderPushNotificationSnsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Hashmap of key-value pairs where the value must be a string.
type UpdateHookSecretRequestContent = map[string]interface{}

type UpdateOrganizationConnectionResponseContent struct {
	// ID of the connection.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled *bool                              `json:"is_signup_enabled,omitempty" url:"is_signup_enabled,omitempty"`
	Connection      *OrganizationConnectionInformation `json:"connection,omitempty" url:"connection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateOrganizationConnectionResponseContent) GetConnectionID() *string {
	if u == nil {
		return nil
	}
	return u.ConnectionID
}

func (u *UpdateOrganizationConnectionResponseContent) GetAssignMembershipOnLogin() *bool {
	if u == nil {
		return nil
	}
	return u.AssignMembershipOnLogin
}

func (u *UpdateOrganizationConnectionResponseContent) GetShowAsButton() *bool {
	if u == nil {
		return nil
	}
	return u.ShowAsButton
}

func (u *UpdateOrganizationConnectionResponseContent) GetIsSignupEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.IsSignupEnabled
}

func (u *UpdateOrganizationConnectionResponseContent) GetConnection() *OrganizationConnectionInformation {
	if u == nil {
		return nil
	}
	return u.Connection
}

func (u *UpdateOrganizationConnectionResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrganizationConnectionResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrganizationConnectionResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrganizationConnectionResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationConnectionResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePhoneTemplateResponseContent struct {
	ID           string                            `json:"id" url:"id"`
	Channel      *string                           `json:"channel,omitempty" url:"channel,omitempty"`
	Customizable *bool                             `json:"customizable,omitempty" url:"customizable,omitempty"`
	Tenant       *string                           `json:"tenant,omitempty" url:"tenant,omitempty"`
	Content      *PhoneTemplateContent             `json:"content" url:"content"`
	Type         PhoneTemplateNotificationTypeEnum `json:"type" url:"type"`
	// Whether the template is enabled (false) or disabled (true).
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePhoneTemplateResponseContent) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdatePhoneTemplateResponseContent) GetChannel() *string {
	if u == nil {
		return nil
	}
	return u.Channel
}

func (u *UpdatePhoneTemplateResponseContent) GetCustomizable() *bool {
	if u == nil {
		return nil
	}
	return u.Customizable
}

func (u *UpdatePhoneTemplateResponseContent) GetTenant() *string {
	if u == nil {
		return nil
	}
	return u.Tenant
}

func (u *UpdatePhoneTemplateResponseContent) GetContent() *PhoneTemplateContent {
	if u == nil {
		return nil
	}
	return u.Content
}

func (u *UpdatePhoneTemplateResponseContent) GetType() PhoneTemplateNotificationTypeEnum {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UpdatePhoneTemplateResponseContent) GetDisabled() bool {
	if u == nil {
		return false
	}
	return u.Disabled
}

func (u *UpdatePhoneTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePhoneTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePhoneTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePhoneTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePhoneTemplateResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateSCIMConfigurationResponseContent struct {
	// The connection's identifier
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// The connection's identifier
	ConnectionName *string `json:"connection_name,omitempty" url:"connection_name,omitempty"`
	// The connection's strategy
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`
	// The tenant's name
	TenantName *string `json:"tenant_name,omitempty" url:"tenant_name,omitempty"`
	// User ID attribute for generating unique user ids
	UserIDAttribute *string `json:"user_id_attribute,omitempty" url:"user_id_attribute,omitempty"`
	// The mapping between auth0 and SCIM
	Mapping []*SCIMMappingItem `json:"mapping,omitempty" url:"mapping,omitempty"`
	// The Date Time Scim Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The Date Time Scim Configuration was last updated
	UpdatedOn *string `json:"updated_on,omitempty" url:"updated_on,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateSCIMConfigurationResponseContent) GetConnectionID() *string {
	if u == nil {
		return nil
	}
	return u.ConnectionID
}

func (u *UpdateSCIMConfigurationResponseContent) GetConnectionName() *string {
	if u == nil {
		return nil
	}
	return u.ConnectionName
}

func (u *UpdateSCIMConfigurationResponseContent) GetStrategy() *string {
	if u == nil {
		return nil
	}
	return u.Strategy
}

func (u *UpdateSCIMConfigurationResponseContent) GetTenantName() *string {
	if u == nil {
		return nil
	}
	return u.TenantName
}

func (u *UpdateSCIMConfigurationResponseContent) GetUserIDAttribute() *string {
	if u == nil {
		return nil
	}
	return u.UserIDAttribute
}

func (u *UpdateSCIMConfigurationResponseContent) GetMapping() []*SCIMMappingItem {
	if u == nil {
		return nil
	}
	return u.Mapping
}

func (u *UpdateSCIMConfigurationResponseContent) GetCreatedAt() *string {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateSCIMConfigurationResponseContent) GetUpdatedOn() *string {
	if u == nil {
		return nil
	}
	return u.UpdatedOn
}

func (u *UpdateSCIMConfigurationResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateSCIMConfigurationResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateSCIMConfigurationResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateSCIMConfigurationResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSCIMConfigurationResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateSuspiciousIPThrottlingSettingsResponseContent struct {
	// Whether or not suspicious IP throttling attack protections are active.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Action to take when a suspicious IP throttling threshold is violated.
	//
	//	Possible values: <code>block</code>, <code>admin_notification</code>.
	Shields   []SuspiciousIPThrottlingShieldsEnum `json:"shields,omitempty" url:"shields,omitempty"`
	Allowlist *SuspiciousIPThrottlingAllowlist    `json:"allowlist,omitempty" url:"allowlist,omitempty"`
	Stage     *SuspiciousIPThrottlingStage        `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) GetShields() []SuspiciousIPThrottlingShieldsEnum {
	if u == nil {
		return nil
	}
	return u.Shields
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) GetAllowlist() *SuspiciousIPThrottlingAllowlist {
	if u == nil {
		return nil
	}
	return u.Allowlist
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) GetStage() *SuspiciousIPThrottlingStage {
	if u == nil {
		return nil
	}
	return u.Stage
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateSuspiciousIPThrottlingSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateSuspiciousIPThrottlingSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSuspiciousIPThrottlingSettingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTenantSettingsResponseContent struct {
	ChangePassword  *TenantSettingsPasswordPage `json:"change_password,omitempty" url:"change_password,omitempty"`
	GuardianMfaPage *TenantSettingsGuardianPage `json:"guardian_mfa_page,omitempty" url:"guardian_mfa_page,omitempty"`
	// Default audience for API authorization.
	DefaultAudience *string `json:"default_audience,omitempty" url:"default_audience,omitempty"`
	// Name of connection used for password grants at the `/token`endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.
	DefaultDirectory  *string                   `json:"default_directory,omitempty" url:"default_directory,omitempty"`
	ErrorPage         *TenantSettingsErrorPage  `json:"error_page,omitempty" url:"error_page,omitempty"`
	DeviceFlow        *TenantSettingsDeviceFlow `json:"device_flow,omitempty" url:"device_flow,omitempty"`
	DefaultTokenQuota *DefaultTokenQuota        `json:"default_token_quota,omitempty" url:"default_token_quota,omitempty"`
	Flags             *TenantSettingsFlags      `json:"flags,omitempty" url:"flags,omitempty"`
	// Friendly name for this tenant.
	FriendlyName *string `json:"friendly_name,omitempty" url:"friendly_name,omitempty"`
	// URL of logo to be shown for this tenant (recommended size: 150x150)
	PictureURL *string `json:"picture_url,omitempty" url:"picture_url,omitempty"`
	// End-user support email address.
	SupportEmail *string `json:"support_email,omitempty" url:"support_email,omitempty"`
	// End-user support URL.
	SupportURL *string `json:"support_url,omitempty" url:"support_url,omitempty"`
	// URLs that are valid to redirect to after logout from Auth0.
	AllowedLogoutURLs []string `json:"allowed_logout_urls,omitempty" url:"allowed_logout_urls,omitempty"`
	// Number of hours a session will stay valid.
	SessionLifetime *float64 `json:"session_lifetime,omitempty" url:"session_lifetime,omitempty"`
	// Number of hours for which a session can be inactive before the user must log in again.
	IdleSessionLifetime *float64 `json:"idle_session_lifetime,omitempty" url:"idle_session_lifetime,omitempty"`
	// Number of hours an ephemeral (non-persistent) session will stay valid.
	EphemeralSessionLifetime *float64 `json:"ephemeral_session_lifetime,omitempty" url:"ephemeral_session_lifetime,omitempty"`
	// Number of hours for which an ephemeral (non-persistent) session can be inactive before the user must log in again.
	IdleEphemeralSessionLifetime *float64 `json:"idle_ephemeral_session_lifetime,omitempty" url:"idle_ephemeral_session_lifetime,omitempty"`
	// Selected sandbox version for the extensibility environment.
	SandboxVersion *string `json:"sandbox_version,omitempty" url:"sandbox_version,omitempty"`
	// Selected sandbox version for rules and hooks extensibility.
	LegacySandboxVersion *string `json:"legacy_sandbox_version,omitempty" url:"legacy_sandbox_version,omitempty"`
	// Available sandbox versions for the extensibility environment.
	SandboxVersionsAvailable []string `json:"sandbox_versions_available,omitempty" url:"sandbox_versions_available,omitempty"`
	// The default absolute redirection uri, must be https
	DefaultRedirectionURI *string `json:"default_redirection_uri,omitempty" url:"default_redirection_uri,omitempty"`
	// Supported locales for the user interface.
	EnabledLocales []SupportedLocales        `json:"enabled_locales,omitempty" url:"enabled_locales,omitempty"`
	SessionCookie  *SessionCookieSchema      `json:"session_cookie,omitempty" url:"session_cookie,omitempty"`
	Sessions       *TenantSettingsSessions   `json:"sessions,omitempty" url:"sessions,omitempty"`
	OidcLogout     *TenantOidcLogoutSettings `json:"oidc_logout,omitempty" url:"oidc_logout,omitempty"`
	// Whether to accept an organization name instead of an ID on auth endpoints
	AllowOrganizationNameInAuthenticationAPI *bool `json:"allow_organization_name_in_authentication_api,omitempty" url:"allow_organization_name_in_authentication_api,omitempty"`
	// Whether to enable flexible factors for MFA in the PostLogin action
	CustomizeMfaInPostloginAction *bool `json:"customize_mfa_in_postlogin_action,omitempty" url:"customize_mfa_in_postlogin_action,omitempty"`
	// Supported ACR values
	AcrValuesSupported []string            `json:"acr_values_supported,omitempty" url:"acr_values_supported,omitempty"`
	Mtls               *TenantSettingsMtls `json:"mtls,omitempty" url:"mtls,omitempty"`
	// Enables the use of Pushed Authorization Requests
	PushedAuthorizationRequestsSupported *bool `json:"pushed_authorization_requests_supported,omitempty" url:"pushed_authorization_requests_supported,omitempty"`
	// Supports iss parameter in authorization responses
	AuthorizationResponseIssParameterSupported *bool `json:"authorization_response_iss_parameter_supported,omitempty" url:"authorization_response_iss_parameter_supported,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTenantSettingsResponseContent) GetChangePassword() *TenantSettingsPasswordPage {
	if u == nil {
		return nil
	}
	return u.ChangePassword
}

func (u *UpdateTenantSettingsResponseContent) GetGuardianMfaPage() *TenantSettingsGuardianPage {
	if u == nil {
		return nil
	}
	return u.GuardianMfaPage
}

func (u *UpdateTenantSettingsResponseContent) GetDefaultAudience() *string {
	if u == nil {
		return nil
	}
	return u.DefaultAudience
}

func (u *UpdateTenantSettingsResponseContent) GetDefaultDirectory() *string {
	if u == nil {
		return nil
	}
	return u.DefaultDirectory
}

func (u *UpdateTenantSettingsResponseContent) GetErrorPage() *TenantSettingsErrorPage {
	if u == nil {
		return nil
	}
	return u.ErrorPage
}

func (u *UpdateTenantSettingsResponseContent) GetDeviceFlow() *TenantSettingsDeviceFlow {
	if u == nil {
		return nil
	}
	return u.DeviceFlow
}

func (u *UpdateTenantSettingsResponseContent) GetDefaultTokenQuota() *DefaultTokenQuota {
	if u == nil {
		return nil
	}
	return u.DefaultTokenQuota
}

func (u *UpdateTenantSettingsResponseContent) GetFlags() *TenantSettingsFlags {
	if u == nil {
		return nil
	}
	return u.Flags
}

func (u *UpdateTenantSettingsResponseContent) GetFriendlyName() *string {
	if u == nil {
		return nil
	}
	return u.FriendlyName
}

func (u *UpdateTenantSettingsResponseContent) GetPictureURL() *string {
	if u == nil {
		return nil
	}
	return u.PictureURL
}

func (u *UpdateTenantSettingsResponseContent) GetSupportEmail() *string {
	if u == nil {
		return nil
	}
	return u.SupportEmail
}

func (u *UpdateTenantSettingsResponseContent) GetSupportURL() *string {
	if u == nil {
		return nil
	}
	return u.SupportURL
}

func (u *UpdateTenantSettingsResponseContent) GetAllowedLogoutURLs() []string {
	if u == nil {
		return nil
	}
	return u.AllowedLogoutURLs
}

func (u *UpdateTenantSettingsResponseContent) GetSessionLifetime() *float64 {
	if u == nil {
		return nil
	}
	return u.SessionLifetime
}

func (u *UpdateTenantSettingsResponseContent) GetIdleSessionLifetime() *float64 {
	if u == nil {
		return nil
	}
	return u.IdleSessionLifetime
}

func (u *UpdateTenantSettingsResponseContent) GetEphemeralSessionLifetime() *float64 {
	if u == nil {
		return nil
	}
	return u.EphemeralSessionLifetime
}

func (u *UpdateTenantSettingsResponseContent) GetIdleEphemeralSessionLifetime() *float64 {
	if u == nil {
		return nil
	}
	return u.IdleEphemeralSessionLifetime
}

func (u *UpdateTenantSettingsResponseContent) GetSandboxVersion() *string {
	if u == nil {
		return nil
	}
	return u.SandboxVersion
}

func (u *UpdateTenantSettingsResponseContent) GetLegacySandboxVersion() *string {
	if u == nil {
		return nil
	}
	return u.LegacySandboxVersion
}

func (u *UpdateTenantSettingsResponseContent) GetSandboxVersionsAvailable() []string {
	if u == nil {
		return nil
	}
	return u.SandboxVersionsAvailable
}

func (u *UpdateTenantSettingsResponseContent) GetDefaultRedirectionURI() *string {
	if u == nil {
		return nil
	}
	return u.DefaultRedirectionURI
}

func (u *UpdateTenantSettingsResponseContent) GetEnabledLocales() []SupportedLocales {
	if u == nil {
		return nil
	}
	return u.EnabledLocales
}

func (u *UpdateTenantSettingsResponseContent) GetSessionCookie() *SessionCookieSchema {
	if u == nil {
		return nil
	}
	return u.SessionCookie
}

func (u *UpdateTenantSettingsResponseContent) GetSessions() *TenantSettingsSessions {
	if u == nil {
		return nil
	}
	return u.Sessions
}

func (u *UpdateTenantSettingsResponseContent) GetOidcLogout() *TenantOidcLogoutSettings {
	if u == nil {
		return nil
	}
	return u.OidcLogout
}

func (u *UpdateTenantSettingsResponseContent) GetAllowOrganizationNameInAuthenticationAPI() *bool {
	if u == nil {
		return nil
	}
	return u.AllowOrganizationNameInAuthenticationAPI
}

func (u *UpdateTenantSettingsResponseContent) GetCustomizeMfaInPostloginAction() *bool {
	if u == nil {
		return nil
	}
	return u.CustomizeMfaInPostloginAction
}

func (u *UpdateTenantSettingsResponseContent) GetAcrValuesSupported() []string {
	if u == nil {
		return nil
	}
	return u.AcrValuesSupported
}

func (u *UpdateTenantSettingsResponseContent) GetMtls() *TenantSettingsMtls {
	if u == nil {
		return nil
	}
	return u.Mtls
}

func (u *UpdateTenantSettingsResponseContent) GetPushedAuthorizationRequestsSupported() *bool {
	if u == nil {
		return nil
	}
	return u.PushedAuthorizationRequestsSupported
}

func (u *UpdateTenantSettingsResponseContent) GetAuthorizationResponseIssParameterSupported() *bool {
	if u == nil {
		return nil
	}
	return u.AuthorizationResponseIssParameterSupported
}

func (u *UpdateTenantSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTenantSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTenantSettingsResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTenantSettingsResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTenantSettingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTokenQuota struct {
	ClientCredentials *TokenQuotaClientCredentials `json:"client_credentials" url:"client_credentials"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTokenQuota) GetClientCredentials() *TokenQuotaClientCredentials {
	if u == nil {
		return nil
	}
	return u.ClientCredentials
}

func (u *UpdateTokenQuota) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTokenQuota) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTokenQuota
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTokenQuota(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTokenQuota) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateUniversalLoginTemplateRequestContent struct {
	String                                             string
	UpdateUniversalLoginTemplateRequestContentTemplate *UpdateUniversalLoginTemplateRequestContentTemplate

	typ string
}

func (u *UpdateUniversalLoginTemplateRequestContent) GetString() string {
	if u == nil {
		return ""
	}
	return u.String
}

func (u *UpdateUniversalLoginTemplateRequestContent) GetUpdateUniversalLoginTemplateRequestContentTemplate() *UpdateUniversalLoginTemplateRequestContentTemplate {
	if u == nil {
		return nil
	}
	return u.UpdateUniversalLoginTemplateRequestContentTemplate
}

func (u *UpdateUniversalLoginTemplateRequestContent) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typ = "String"
		u.String = valueString
		return nil
	}
	valueUpdateUniversalLoginTemplateRequestContentTemplate := new(UpdateUniversalLoginTemplateRequestContentTemplate)
	if err := json.Unmarshal(data, &valueUpdateUniversalLoginTemplateRequestContentTemplate); err == nil {
		u.typ = "UpdateUniversalLoginTemplateRequestContentTemplate"
		u.UpdateUniversalLoginTemplateRequestContentTemplate = valueUpdateUniversalLoginTemplateRequestContentTemplate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateUniversalLoginTemplateRequestContent) MarshalJSON() ([]byte, error) {
	if u.typ == "String" || u.String != "" {
		return json.Marshal(u.String)
	}
	if u.typ == "UpdateUniversalLoginTemplateRequestContentTemplate" || u.UpdateUniversalLoginTemplateRequestContentTemplate != nil {
		return json.Marshal(u.UpdateUniversalLoginTemplateRequestContentTemplate)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateUniversalLoginTemplateRequestContentVisitor interface {
	VisitString(string) error
	VisitUpdateUniversalLoginTemplateRequestContentTemplate(*UpdateUniversalLoginTemplateRequestContentTemplate) error
}

func (u *UpdateUniversalLoginTemplateRequestContent) Accept(visitor UpdateUniversalLoginTemplateRequestContentVisitor) error {
	if u.typ == "String" || u.String != "" {
		return visitor.VisitString(u.String)
	}
	if u.typ == "UpdateUniversalLoginTemplateRequestContentTemplate" || u.UpdateUniversalLoginTemplateRequestContentTemplate != nil {
		return visitor.VisitUpdateUniversalLoginTemplateRequestContentTemplate(u.UpdateUniversalLoginTemplateRequestContentTemplate)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateUniversalLoginTemplateRequestContentTemplate struct {
	Template string `json:"template" url:"template"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateUniversalLoginTemplateRequestContentTemplate) GetTemplate() string {
	if u == nil {
		return ""
	}
	return u.Template
}

func (u *UpdateUniversalLoginTemplateRequestContentTemplate) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUniversalLoginTemplateRequestContentTemplate) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUniversalLoginTemplateRequestContentTemplate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUniversalLoginTemplateRequestContentTemplate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUniversalLoginTemplateRequestContentTemplate) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// The successfully created authentication method.
type UpdateUserAuthenticationMethodResponseContent struct {
	// The ID of the newly created authentication method (automatically generated by the application)
	ID   *string                             `json:"id,omitempty" url:"id,omitempty"`
	Type CreatedAuthenticationMethodTypeEnum `json:"type" url:"type"`
	// A human-readable label to identify the authentication method.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Base32 encoded secret for TOTP generation
	TotpSecret *string `json:"totp_secret,omitempty" url:"totp_secret,omitempty"`
	// Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Applies to email authentication methods only. The email address used to send verification messages.
	Email                         *string                               `json:"email,omitempty" url:"email,omitempty"`
	AuthenticationMethods         []*UserAuthenticationMethodProperties `json:"authentication_methods,omitempty" url:"authentication_methods,omitempty"`
	PreferredAuthenticationMethod *PreferredAuthenticationMethodEnum    `json:"preferred_authentication_method,omitempty" url:"preferred_authentication_method,omitempty"`
	// Applies to webauthn authentication methods only. The id of the credential.
	KeyID *string `json:"key_id,omitempty" url:"key_id,omitempty"`
	// Applies to webauthn authentication methods only. The public key.
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`
	// Applies to webauthn authentication methods only. The relying party identifier.
	RelyingPartyIdentifier *string `json:"relying_party_identifier,omitempty" url:"relying_party_identifier,omitempty"`
	// Authentication method creation date
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetType() CreatedAuthenticationMethodTypeEnum {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetTotpSecret() *string {
	if u == nil {
		return nil
	}
	return u.TotpSecret
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetAuthenticationMethods() []*UserAuthenticationMethodProperties {
	if u == nil {
		return nil
	}
	return u.AuthenticationMethods
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetPreferredAuthenticationMethod() *PreferredAuthenticationMethodEnum {
	if u == nil {
		return nil
	}
	return u.PreferredAuthenticationMethod
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetKeyID() *string {
	if u == nil {
		return nil
	}
	return u.KeyID
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetPublicKey() *string {
	if u == nil {
		return nil
	}
	return u.PublicKey
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetRelyingPartyIdentifier() *string {
	if u == nil {
		return nil
	}
	return u.RelyingPartyIdentifier
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateUserAuthenticationMethodResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUserAuthenticationMethodResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateUserAuthenticationMethodResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateUserAuthenticationMethodResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUserAuthenticationMethodResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateUserAuthenticationMethodResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewOptionalDateTime(u.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpdateUserAuthenticationMethodResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateVerifiableCredentialTemplateResponseContent struct {
	// The id of the template.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the template.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The type of the template.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The dialect of the template.
	Dialect      *string                 `json:"dialect,omitempty" url:"dialect,omitempty"`
	Presentation *MdlPresentationRequest `json:"presentation,omitempty" url:"presentation,omitempty"`
	// The custom certificate authority.
	CustomCertificateAuthority *string `json:"custom_certificate_authority,omitempty" url:"custom_certificate_authority,omitempty"`
	// The well-known trusted issuers, comma separated.
	WellKnownTrustedIssuers *string `json:"well_known_trusted_issuers,omitempty" url:"well_known_trusted_issuers,omitempty"`
	// The date and time the template was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time the template was created.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetType() *string {
	if u == nil {
		return nil
	}
	return u.Type
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetDialect() *string {
	if u == nil {
		return nil
	}
	return u.Dialect
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetPresentation() *MdlPresentationRequest {
	if u == nil {
		return nil
	}
	return u.Presentation
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetCustomCertificateAuthority() *string {
	if u == nil {
		return nil
	}
	return u.CustomCertificateAuthority
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetWellKnownTrustedIssuers() *string {
	if u == nil {
		return nil
	}
	return u.WellKnownTrustedIssuers
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateVerifiableCredentialTemplateResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateVerifiableCredentialTemplateResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateVerifiableCredentialTemplateResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewOptionalDateTime(u.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(u.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UpdateVerifiableCredentialTemplateResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserAuthenticationMethod struct {
	// The ID of the authentication method (auto generated)
	ID   string                       `json:"id" url:"id"`
	Type AuthenticationMethodTypeEnum `json:"type" url:"type"`
	// The authentication method status
	Confirmed *bool `json:"confirmed,omitempty" url:"confirmed,omitempty"`
	// A human-readable label to identify the authentication method
	Name                          *string                               `json:"name,omitempty" url:"name,omitempty"`
	AuthenticationMethods         []*UserAuthenticationMethodProperties `json:"authentication_methods,omitempty" url:"authentication_methods,omitempty"`
	PreferredAuthenticationMethod *PreferredAuthenticationMethodEnum    `json:"preferred_authentication_method,omitempty" url:"preferred_authentication_method,omitempty"`
	// The ID of a linked authentication method. Linked authentication methods will be deleted together.
	LinkID *string `json:"link_id,omitempty" url:"link_id,omitempty"`
	// Applies to phone authentication methods only. The destination phone number used to send verification codes via text and voice.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Applies to email and email-verification authentication methods only. The email address used to send verification messages.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Applies to webauthn authentication methods only. The ID of the generated credential.
	KeyID *string `json:"key_id,omitempty" url:"key_id,omitempty"`
	// Applies to webauthn authentication methods only. The public key.
	PublicKey *string `json:"public_key,omitempty" url:"public_key,omitempty"`
	// Authenticator creation date
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Enrollment date
	EnrolledAt *time.Time `json:"enrolled_at,omitempty" url:"enrolled_at,omitempty"`
	// Last authentication
	LastAuthAt *time.Time `json:"last_auth_at,omitempty" url:"last_auth_at,omitempty"`
	// Applies to passkeys only. The kind of device the credential is stored on as defined by backup eligibility. "single_device" credentials cannot be backed up and synced to another device, "multi_device" credentials can be backed up if enabled by the end-user.
	CredentialDeviceType *string `json:"credential_device_type,omitempty" url:"credential_device_type,omitempty"`
	// Applies to passkeys only. Whether the credential was backed up.
	CredentialBackedUp *bool `json:"credential_backed_up,omitempty" url:"credential_backed_up,omitempty"`
	// Applies to passkeys only. The ID of the user identity linked with the authentication method.
	IdentityUserID *string `json:"identity_user_id,omitempty" url:"identity_user_id,omitempty"`
	// Applies to passkeys only. The user-agent of the browser used to create the passkey.
	UserAgent *string `json:"user_agent,omitempty" url:"user_agent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserAuthenticationMethod) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UserAuthenticationMethod) GetType() AuthenticationMethodTypeEnum {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UserAuthenticationMethod) GetConfirmed() *bool {
	if u == nil {
		return nil
	}
	return u.Confirmed
}

func (u *UserAuthenticationMethod) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UserAuthenticationMethod) GetAuthenticationMethods() []*UserAuthenticationMethodProperties {
	if u == nil {
		return nil
	}
	return u.AuthenticationMethods
}

func (u *UserAuthenticationMethod) GetPreferredAuthenticationMethod() *PreferredAuthenticationMethodEnum {
	if u == nil {
		return nil
	}
	return u.PreferredAuthenticationMethod
}

func (u *UserAuthenticationMethod) GetLinkID() *string {
	if u == nil {
		return nil
	}
	return u.LinkID
}

func (u *UserAuthenticationMethod) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UserAuthenticationMethod) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserAuthenticationMethod) GetKeyID() *string {
	if u == nil {
		return nil
	}
	return u.KeyID
}

func (u *UserAuthenticationMethod) GetPublicKey() *string {
	if u == nil {
		return nil
	}
	return u.PublicKey
}

func (u *UserAuthenticationMethod) GetCreatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.CreatedAt
}

func (u *UserAuthenticationMethod) GetEnrolledAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.EnrolledAt
}

func (u *UserAuthenticationMethod) GetLastAuthAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.LastAuthAt
}

func (u *UserAuthenticationMethod) GetCredentialDeviceType() *string {
	if u == nil {
		return nil
	}
	return u.CredentialDeviceType
}

func (u *UserAuthenticationMethod) GetCredentialBackedUp() *bool {
	if u == nil {
		return nil
	}
	return u.CredentialBackedUp
}

func (u *UserAuthenticationMethod) GetIdentityUserID() *string {
	if u == nil {
		return nil
	}
	return u.IdentityUserID
}

func (u *UserAuthenticationMethod) GetUserAgent() *string {
	if u == nil {
		return nil
	}
	return u.UserAgent
}

func (u *UserAuthenticationMethod) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserAuthenticationMethod) UnmarshalJSON(data []byte) error {
	type embed UserAuthenticationMethod
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		EnrolledAt *internal.DateTime `json:"enrolled_at,omitempty"`
		LastAuthAt *internal.DateTime `json:"last_auth_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserAuthenticationMethod(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.EnrolledAt = unmarshaler.EnrolledAt.TimePtr()
	u.LastAuthAt = unmarshaler.LastAuthAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserAuthenticationMethod) MarshalJSON() ([]byte, error) {
	type embed UserAuthenticationMethod
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		EnrolledAt *internal.DateTime `json:"enrolled_at,omitempty"`
		LastAuthAt *internal.DateTime `json:"last_auth_at,omitempty"`
	}{
		embed:      embed(*u),
		CreatedAt:  internal.NewDateTime(u.CreatedAt),
		EnrolledAt: internal.NewOptionalDateTime(u.EnrolledAt),
		LastAuthAt: internal.NewOptionalDateTime(u.LastAuthAt),
	}
	return json.Marshal(marshaler)
}

func (u *UserAuthenticationMethod) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserAuthenticationMethodProperties struct {
	Type *UserAuthenticationMethodPropertiesEnum `json:"type,omitempty" url:"type,omitempty"`
	ID   *string                                 `json:"id,omitempty" url:"id,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UserAuthenticationMethodProperties) GetType() *UserAuthenticationMethodPropertiesEnum {
	if u == nil {
		return nil
	}
	return u.Type
}

func (u *UserAuthenticationMethodProperties) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UserAuthenticationMethodProperties) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UserAuthenticationMethodProperties) UnmarshalJSON(data []byte) error {
	type embed UserAuthenticationMethodProperties
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserAuthenticationMethodProperties(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserAuthenticationMethodProperties) MarshalJSON() ([]byte, error) {
	type embed UserAuthenticationMethodProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UserAuthenticationMethodProperties) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserAuthenticationMethodPropertiesEnum string

const (
	UserAuthenticationMethodPropertiesEnumTotp  UserAuthenticationMethodPropertiesEnum = "totp"
	UserAuthenticationMethodPropertiesEnumPush  UserAuthenticationMethodPropertiesEnum = "push"
	UserAuthenticationMethodPropertiesEnumSms   UserAuthenticationMethodPropertiesEnum = "sms"
	UserAuthenticationMethodPropertiesEnumVoice UserAuthenticationMethodPropertiesEnum = "voice"
)

func NewUserAuthenticationMethodPropertiesEnumFromString(s string) (UserAuthenticationMethodPropertiesEnum, error) {
	switch s {
	case "totp":
		return UserAuthenticationMethodPropertiesEnumTotp, nil
	case "push":
		return UserAuthenticationMethodPropertiesEnumPush, nil
	case "sms":
		return UserAuthenticationMethodPropertiesEnumSms, nil
	case "voice":
		return UserAuthenticationMethodPropertiesEnumVoice, nil
	}
	var t UserAuthenticationMethodPropertiesEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserAuthenticationMethodPropertiesEnum) Ptr() *UserAuthenticationMethodPropertiesEnum {
	return &u
}

// Authentication method for this enrollment. Can be `authenticator`, `guardian`, `sms`, `webauthn-roaming`, or `webauthn-platform`.
type UserEnrollmentAuthMethodEnum string

const (
	UserEnrollmentAuthMethodEnumAuthenticator    UserEnrollmentAuthMethodEnum = "authenticator"
	UserEnrollmentAuthMethodEnumGuardian         UserEnrollmentAuthMethodEnum = "guardian"
	UserEnrollmentAuthMethodEnumSms              UserEnrollmentAuthMethodEnum = "sms"
	UserEnrollmentAuthMethodEnumWebauthnPlatform UserEnrollmentAuthMethodEnum = "webauthn-platform"
	UserEnrollmentAuthMethodEnumWebauthnRoaming  UserEnrollmentAuthMethodEnum = "webauthn-roaming"
)

func NewUserEnrollmentAuthMethodEnumFromString(s string) (UserEnrollmentAuthMethodEnum, error) {
	switch s {
	case "authenticator":
		return UserEnrollmentAuthMethodEnumAuthenticator, nil
	case "guardian":
		return UserEnrollmentAuthMethodEnumGuardian, nil
	case "sms":
		return UserEnrollmentAuthMethodEnumSms, nil
	case "webauthn-platform":
		return UserEnrollmentAuthMethodEnumWebauthnPlatform, nil
	case "webauthn-roaming":
		return UserEnrollmentAuthMethodEnumWebauthnRoaming, nil
	}
	var t UserEnrollmentAuthMethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserEnrollmentAuthMethodEnum) Ptr() *UserEnrollmentAuthMethodEnum {
	return &u
}

// Status of this enrollment. Can be `pending` or `confirmed`.
type UserEnrollmentStatusEnum string

const (
	UserEnrollmentStatusEnumPending   UserEnrollmentStatusEnum = "pending"
	UserEnrollmentStatusEnumConfirmed UserEnrollmentStatusEnum = "confirmed"
)

func NewUserEnrollmentStatusEnumFromString(s string) (UserEnrollmentStatusEnum, error) {
	switch s {
	case "pending":
		return UserEnrollmentStatusEnumPending, nil
	case "confirmed":
		return UserEnrollmentStatusEnumConfirmed, nil
	}
	var t UserEnrollmentStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserEnrollmentStatusEnum) Ptr() *UserEnrollmentStatusEnum {
	return &u
}

// user_id of the secondary user account being linked.
type UserIDEnum struct {
	String  string
	Integer int

	typ string
}

func (u *UserIDEnum) GetString() string {
	if u == nil {
		return ""
	}
	return u.String
}

func (u *UserIDEnum) GetInteger() int {
	if u == nil {
		return 0
	}
	return u.Integer
}

func (u *UserIDEnum) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typ = "String"
		u.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		u.typ = "Integer"
		u.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserIDEnum) MarshalJSON() ([]byte, error) {
	if u.typ == "String" || u.String != "" {
		return json.Marshal(u.String)
	}
	if u.typ == "Integer" || u.Integer != 0 {
		return json.Marshal(u.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UserIDEnumVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (u *UserIDEnum) Accept(visitor UserIDEnumVisitor) error {
	if u.typ == "String" || u.String != "" {
		return visitor.VisitString(u.String)
	}
	if u.typ == "Integer" || u.Integer != 0 {
		return visitor.VisitInteger(u.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UserIdentity struct {
	// Connection name of this identity.
	Connection string      `json:"connection" url:"connection"`
	UserID     *UserIDEnum `json:"user_id" url:"user_id"`
	// Type of identity provider.
	Provider    string           `json:"provider" url:"provider"`
	ProfileData *UserProfileData `json:"profileData,omitempty" url:"profileData,omitempty"`
	// Whether the identity provider is a social provider (true) or not (false).
	IsSocial *bool `json:"isSocial,omitempty" url:"isSocial,omitempty"`
	// IDP access token returned if scope `read:user_idp_tokens` is defined.
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// IDP access token secret returned only if `scope read:user_idp_tokens` is defined.
	AccessTokenSecret *string `json:"access_token_secret,omitempty" url:"access_token_secret,omitempty"`
	// IDP refresh token returned only if scope `read:user_idp_tokens` is defined.
	RefreshToken *string `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserIdentity) GetConnection() string {
	if u == nil {
		return ""
	}
	return u.Connection
}

func (u *UserIdentity) GetUserID() *UserIDEnum {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *UserIdentity) GetProvider() string {
	if u == nil {
		return ""
	}
	return u.Provider
}

func (u *UserIdentity) GetProfileData() *UserProfileData {
	if u == nil {
		return nil
	}
	return u.ProfileData
}

func (u *UserIdentity) GetIsSocial() *bool {
	if u == nil {
		return nil
	}
	return u.IsSocial
}

func (u *UserIdentity) GetAccessToken() *string {
	if u == nil {
		return nil
	}
	return u.AccessToken
}

func (u *UserIdentity) GetAccessTokenSecret() *string {
	if u == nil {
		return nil
	}
	return u.AccessTokenSecret
}

func (u *UserIdentity) GetRefreshToken() *string {
	if u == nil {
		return nil
	}
	return u.RefreshToken
}

func (u *UserIdentity) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserIdentity) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentity) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// The type of identity provider
type UserIdentityProviderEnum string

const (
	UserIdentityProviderEnumAd                  UserIdentityProviderEnum = "ad"
	UserIdentityProviderEnumAdfs                UserIdentityProviderEnum = "adfs"
	UserIdentityProviderEnumAmazon              UserIdentityProviderEnum = "amazon"
	UserIdentityProviderEnumApple               UserIdentityProviderEnum = "apple"
	UserIdentityProviderEnumDropbox             UserIdentityProviderEnum = "dropbox"
	UserIdentityProviderEnumBitbucket           UserIdentityProviderEnum = "bitbucket"
	UserIdentityProviderEnumAol                 UserIdentityProviderEnum = "aol"
	UserIdentityProviderEnumAuth0Oidc           UserIdentityProviderEnum = "auth0-oidc"
	UserIdentityProviderEnumAuth0               UserIdentityProviderEnum = "auth0"
	UserIdentityProviderEnumBaidu               UserIdentityProviderEnum = "baidu"
	UserIdentityProviderEnumBitly               UserIdentityProviderEnum = "bitly"
	UserIdentityProviderEnumBox                 UserIdentityProviderEnum = "box"
	UserIdentityProviderEnumCustom              UserIdentityProviderEnum = "custom"
	UserIdentityProviderEnumDaccount            UserIdentityProviderEnum = "daccount"
	UserIdentityProviderEnumDwolla              UserIdentityProviderEnum = "dwolla"
	UserIdentityProviderEnumEmail               UserIdentityProviderEnum = "email"
	UserIdentityProviderEnumEvernoteSandbox     UserIdentityProviderEnum = "evernote-sandbox"
	UserIdentityProviderEnumEvernote            UserIdentityProviderEnum = "evernote"
	UserIdentityProviderEnumExact               UserIdentityProviderEnum = "exact"
	UserIdentityProviderEnumFacebook            UserIdentityProviderEnum = "facebook"
	UserIdentityProviderEnumFitbit              UserIdentityProviderEnum = "fitbit"
	UserIdentityProviderEnumFlickr              UserIdentityProviderEnum = "flickr"
	UserIdentityProviderEnumGithub              UserIdentityProviderEnum = "github"
	UserIdentityProviderEnumGoogleApps          UserIdentityProviderEnum = "google-apps"
	UserIdentityProviderEnumGoogleOauth2        UserIdentityProviderEnum = "google-oauth2"
	UserIdentityProviderEnumInstagram           UserIdentityProviderEnum = "instagram"
	UserIdentityProviderEnumIP                  UserIdentityProviderEnum = "ip"
	UserIdentityProviderEnumLine                UserIdentityProviderEnum = "line"
	UserIdentityProviderEnumLinkedin            UserIdentityProviderEnum = "linkedin"
	UserIdentityProviderEnumMiicard             UserIdentityProviderEnum = "miicard"
	UserIdentityProviderEnumOauth1              UserIdentityProviderEnum = "oauth1"
	UserIdentityProviderEnumOauth2              UserIdentityProviderEnum = "oauth2"
	UserIdentityProviderEnumOffice365           UserIdentityProviderEnum = "office365"
	UserIdentityProviderEnumOidc                UserIdentityProviderEnum = "oidc"
	UserIdentityProviderEnumOkta                UserIdentityProviderEnum = "okta"
	UserIdentityProviderEnumPaypal              UserIdentityProviderEnum = "paypal"
	UserIdentityProviderEnumPaypalSandbox       UserIdentityProviderEnum = "paypal-sandbox"
	UserIdentityProviderEnumPingfederate        UserIdentityProviderEnum = "pingfederate"
	UserIdentityProviderEnumPlanningcenter      UserIdentityProviderEnum = "planningcenter"
	UserIdentityProviderEnumRenren              UserIdentityProviderEnum = "renren"
	UserIdentityProviderEnumSalesforceCommunity UserIdentityProviderEnum = "salesforce-community"
	UserIdentityProviderEnumSalesforceSandbox   UserIdentityProviderEnum = "salesforce-sandbox"
	UserIdentityProviderEnumSalesforce          UserIdentityProviderEnum = "salesforce"
	UserIdentityProviderEnumSamlp               UserIdentityProviderEnum = "samlp"
	UserIdentityProviderEnumSharepoint          UserIdentityProviderEnum = "sharepoint"
	UserIdentityProviderEnumShopify             UserIdentityProviderEnum = "shopify"
	UserIdentityProviderEnumShop                UserIdentityProviderEnum = "shop"
	UserIdentityProviderEnumSms                 UserIdentityProviderEnum = "sms"
	UserIdentityProviderEnumSoundcloud          UserIdentityProviderEnum = "soundcloud"
	UserIdentityProviderEnumThecitySandbox      UserIdentityProviderEnum = "thecity-sandbox"
	UserIdentityProviderEnumThecity             UserIdentityProviderEnum = "thecity"
	UserIdentityProviderEnumThirtysevensignals  UserIdentityProviderEnum = "thirtysevensignals"
	UserIdentityProviderEnumTwitter             UserIdentityProviderEnum = "twitter"
	UserIdentityProviderEnumUntappd             UserIdentityProviderEnum = "untappd"
	UserIdentityProviderEnumVkontakte           UserIdentityProviderEnum = "vkontakte"
	UserIdentityProviderEnumWaad                UserIdentityProviderEnum = "waad"
	UserIdentityProviderEnumWeibo               UserIdentityProviderEnum = "weibo"
	UserIdentityProviderEnumWindowslive         UserIdentityProviderEnum = "windowslive"
	UserIdentityProviderEnumWordpress           UserIdentityProviderEnum = "wordpress"
	UserIdentityProviderEnumYahoo               UserIdentityProviderEnum = "yahoo"
	UserIdentityProviderEnumYammer              UserIdentityProviderEnum = "yammer"
	UserIdentityProviderEnumYandex              UserIdentityProviderEnum = "yandex"
)

func NewUserIdentityProviderEnumFromString(s string) (UserIdentityProviderEnum, error) {
	switch s {
	case "ad":
		return UserIdentityProviderEnumAd, nil
	case "adfs":
		return UserIdentityProviderEnumAdfs, nil
	case "amazon":
		return UserIdentityProviderEnumAmazon, nil
	case "apple":
		return UserIdentityProviderEnumApple, nil
	case "dropbox":
		return UserIdentityProviderEnumDropbox, nil
	case "bitbucket":
		return UserIdentityProviderEnumBitbucket, nil
	case "aol":
		return UserIdentityProviderEnumAol, nil
	case "auth0-oidc":
		return UserIdentityProviderEnumAuth0Oidc, nil
	case "auth0":
		return UserIdentityProviderEnumAuth0, nil
	case "baidu":
		return UserIdentityProviderEnumBaidu, nil
	case "bitly":
		return UserIdentityProviderEnumBitly, nil
	case "box":
		return UserIdentityProviderEnumBox, nil
	case "custom":
		return UserIdentityProviderEnumCustom, nil
	case "daccount":
		return UserIdentityProviderEnumDaccount, nil
	case "dwolla":
		return UserIdentityProviderEnumDwolla, nil
	case "email":
		return UserIdentityProviderEnumEmail, nil
	case "evernote-sandbox":
		return UserIdentityProviderEnumEvernoteSandbox, nil
	case "evernote":
		return UserIdentityProviderEnumEvernote, nil
	case "exact":
		return UserIdentityProviderEnumExact, nil
	case "facebook":
		return UserIdentityProviderEnumFacebook, nil
	case "fitbit":
		return UserIdentityProviderEnumFitbit, nil
	case "flickr":
		return UserIdentityProviderEnumFlickr, nil
	case "github":
		return UserIdentityProviderEnumGithub, nil
	case "google-apps":
		return UserIdentityProviderEnumGoogleApps, nil
	case "google-oauth2":
		return UserIdentityProviderEnumGoogleOauth2, nil
	case "instagram":
		return UserIdentityProviderEnumInstagram, nil
	case "ip":
		return UserIdentityProviderEnumIP, nil
	case "line":
		return UserIdentityProviderEnumLine, nil
	case "linkedin":
		return UserIdentityProviderEnumLinkedin, nil
	case "miicard":
		return UserIdentityProviderEnumMiicard, nil
	case "oauth1":
		return UserIdentityProviderEnumOauth1, nil
	case "oauth2":
		return UserIdentityProviderEnumOauth2, nil
	case "office365":
		return UserIdentityProviderEnumOffice365, nil
	case "oidc":
		return UserIdentityProviderEnumOidc, nil
	case "okta":
		return UserIdentityProviderEnumOkta, nil
	case "paypal":
		return UserIdentityProviderEnumPaypal, nil
	case "paypal-sandbox":
		return UserIdentityProviderEnumPaypalSandbox, nil
	case "pingfederate":
		return UserIdentityProviderEnumPingfederate, nil
	case "planningcenter":
		return UserIdentityProviderEnumPlanningcenter, nil
	case "renren":
		return UserIdentityProviderEnumRenren, nil
	case "salesforce-community":
		return UserIdentityProviderEnumSalesforceCommunity, nil
	case "salesforce-sandbox":
		return UserIdentityProviderEnumSalesforceSandbox, nil
	case "salesforce":
		return UserIdentityProviderEnumSalesforce, nil
	case "samlp":
		return UserIdentityProviderEnumSamlp, nil
	case "sharepoint":
		return UserIdentityProviderEnumSharepoint, nil
	case "shopify":
		return UserIdentityProviderEnumShopify, nil
	case "shop":
		return UserIdentityProviderEnumShop, nil
	case "sms":
		return UserIdentityProviderEnumSms, nil
	case "soundcloud":
		return UserIdentityProviderEnumSoundcloud, nil
	case "thecity-sandbox":
		return UserIdentityProviderEnumThecitySandbox, nil
	case "thecity":
		return UserIdentityProviderEnumThecity, nil
	case "thirtysevensignals":
		return UserIdentityProviderEnumThirtysevensignals, nil
	case "twitter":
		return UserIdentityProviderEnumTwitter, nil
	case "untappd":
		return UserIdentityProviderEnumUntappd, nil
	case "vkontakte":
		return UserIdentityProviderEnumVkontakte, nil
	case "waad":
		return UserIdentityProviderEnumWaad, nil
	case "weibo":
		return UserIdentityProviderEnumWeibo, nil
	case "windowslive":
		return UserIdentityProviderEnumWindowslive, nil
	case "wordpress":
		return UserIdentityProviderEnumWordpress, nil
	case "yahoo":
		return UserIdentityProviderEnumYahoo, nil
	case "yammer":
		return UserIdentityProviderEnumYammer, nil
	case "yandex":
		return UserIdentityProviderEnumYandex, nil
	}
	var t UserIdentityProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserIdentityProviderEnum) Ptr() *UserIdentityProviderEnum {
	return &u
}

type UserListLogOffsetPaginatedResponseContent struct {
	Start  *float64 `json:"start,omitempty" url:"start,omitempty"`
	Limit  *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	Length *float64 `json:"length,omitempty" url:"length,omitempty"`
	Total  *float64 `json:"total,omitempty" url:"total,omitempty"`
	Logs   []*Log   `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserListLogOffsetPaginatedResponseContent) GetStart() *float64 {
	if u == nil {
		return nil
	}
	return u.Start
}

func (u *UserListLogOffsetPaginatedResponseContent) GetLimit() *float64 {
	if u == nil {
		return nil
	}
	return u.Limit
}

func (u *UserListLogOffsetPaginatedResponseContent) GetLength() *float64 {
	if u == nil {
		return nil
	}
	return u.Length
}

func (u *UserListLogOffsetPaginatedResponseContent) GetTotal() *float64 {
	if u == nil {
		return nil
	}
	return u.Total
}

func (u *UserListLogOffsetPaginatedResponseContent) GetLogs() []*Log {
	if u == nil {
		return nil
	}
	return u.Logs
}

func (u *UserListLogOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserListLogOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UserListLogOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserListLogOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserListLogOffsetPaginatedResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Data related to the user that does not affect the application's core functionality.
type UserMetadata = map[string]interface{}

type UserMultifactorProviderEnum string

const (
	UserMultifactorProviderEnumDuo                 UserMultifactorProviderEnum = "duo"
	UserMultifactorProviderEnumGoogleAuthenticator UserMultifactorProviderEnum = "google-authenticator"
)

func NewUserMultifactorProviderEnumFromString(s string) (UserMultifactorProviderEnum, error) {
	switch s {
	case "duo":
		return UserMultifactorProviderEnumDuo, nil
	case "google-authenticator":
		return UserMultifactorProviderEnumGoogleAuthenticator, nil
	}
	var t UserMultifactorProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserMultifactorProviderEnum) Ptr() *UserMultifactorProviderEnum {
	return &u
}

type UserPermissionSchema struct {
	// Resource server (API) identifier that this permission is for.
	ResourceServerIdentifier *string `json:"resource_server_identifier,omitempty" url:"resource_server_identifier,omitempty"`
	// Name of this permission.
	PermissionName *string `json:"permission_name,omitempty" url:"permission_name,omitempty"`
	// Resource server (API) name this permission is for.
	ResourceServerName *string `json:"resource_server_name,omitempty" url:"resource_server_name,omitempty"`
	// Description of this permission.
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserPermissionSchema) GetResourceServerIdentifier() *string {
	if u == nil {
		return nil
	}
	return u.ResourceServerIdentifier
}

func (u *UserPermissionSchema) GetPermissionName() *string {
	if u == nil {
		return nil
	}
	return u.PermissionName
}

func (u *UserPermissionSchema) GetResourceServerName() *string {
	if u == nil {
		return nil
	}
	return u.ResourceServerName
}

func (u *UserPermissionSchema) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UserPermissionSchema) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserPermissionSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPermissionSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPermissionSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPermissionSchema) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserProfileData struct {
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether this email address is verified (true) or unverified (false).
	EmailVerified *bool `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Username of this user.
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	// Given name/first name/forename of this user.
	GivenName *string `json:"given_name,omitempty" url:"given_name,omitempty"`
	// Phone number for this user.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Whether this phone number is verified (true) or unverified (false).
	PhoneVerified *bool `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	// Family name/last name/surname of this user.
	FamilyName *string `json:"family_name,omitempty" url:"family_name,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UserProfileData) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserProfileData) GetEmailVerified() *bool {
	if u == nil {
		return nil
	}
	return u.EmailVerified
}

func (u *UserProfileData) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UserProfileData) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *UserProfileData) GetGivenName() *string {
	if u == nil {
		return nil
	}
	return u.GivenName
}

func (u *UserProfileData) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UserProfileData) GetPhoneVerified() *bool {
	if u == nil {
		return nil
	}
	return u.PhoneVerified
}

func (u *UserProfileData) GetFamilyName() *string {
	if u == nil {
		return nil
	}
	return u.FamilyName
}

func (u *UserProfileData) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UserProfileData) UnmarshalJSON(data []byte) error {
	type embed UserProfileData
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserProfileData(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserProfileData) MarshalJSON() ([]byte, error) {
	type embed UserProfileData
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UserProfileData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersEnrollment struct {
	// ID of this enrollment.
	ID     *string                   `json:"id,omitempty" url:"id,omitempty"`
	Status *UserEnrollmentStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// Type of enrollment.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Name of enrollment (usually phone number).
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Device identifier (usually phone identifier) of this enrollment.
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// Phone number for this enrollment.
	PhoneNumber *string                       `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	AuthMethod  *UserEnrollmentAuthMethodEnum `json:"auth_method,omitempty" url:"auth_method,omitempty"`
	// Start date and time of this enrollment.
	EnrolledAt *time.Time `json:"enrolled_at,omitempty" url:"enrolled_at,omitempty"`
	// Last authentication date and time of this enrollment.
	LastAuth *time.Time `json:"last_auth,omitempty" url:"last_auth,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UsersEnrollment) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UsersEnrollment) GetStatus() *UserEnrollmentStatusEnum {
	if u == nil {
		return nil
	}
	return u.Status
}

func (u *UsersEnrollment) GetType() *string {
	if u == nil {
		return nil
	}
	return u.Type
}

func (u *UsersEnrollment) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UsersEnrollment) GetIdentifier() *string {
	if u == nil {
		return nil
	}
	return u.Identifier
}

func (u *UsersEnrollment) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UsersEnrollment) GetAuthMethod() *UserEnrollmentAuthMethodEnum {
	if u == nil {
		return nil
	}
	return u.AuthMethod
}

func (u *UsersEnrollment) GetEnrolledAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.EnrolledAt
}

func (u *UsersEnrollment) GetLastAuth() *time.Time {
	if u == nil {
		return nil
	}
	return u.LastAuth
}

func (u *UsersEnrollment) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UsersEnrollment) UnmarshalJSON(data []byte) error {
	type embed UsersEnrollment
	var unmarshaler = struct {
		embed
		EnrolledAt *internal.DateTime `json:"enrolled_at,omitempty"`
		LastAuth   *internal.DateTime `json:"last_auth,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UsersEnrollment(unmarshaler.embed)
	u.EnrolledAt = unmarshaler.EnrolledAt.TimePtr()
	u.LastAuth = unmarshaler.LastAuth.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersEnrollment) MarshalJSON() ([]byte, error) {
	type embed UsersEnrollment
	var marshaler = struct {
		embed
		EnrolledAt *internal.DateTime `json:"enrolled_at,omitempty"`
		LastAuth   *internal.DateTime `json:"last_auth,omitempty"`
	}{
		embed:      embed(*u),
		EnrolledAt: internal.NewOptionalDateTime(u.EnrolledAt),
		LastAuth:   internal.NewOptionalDateTime(u.LastAuth),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UsersEnrollment) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type VerifiableCredentialTemplateResponse struct {
	// The id of the template.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the template.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The type of the template.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The dialect of the template.
	Dialect      *string                 `json:"dialect,omitempty" url:"dialect,omitempty"`
	Presentation *MdlPresentationRequest `json:"presentation,omitempty" url:"presentation,omitempty"`
	// The custom certificate authority.
	CustomCertificateAuthority *string `json:"custom_certificate_authority,omitempty" url:"custom_certificate_authority,omitempty"`
	// The well-known trusted issuers, comma separated.
	WellKnownTrustedIssuers *string `json:"well_known_trusted_issuers,omitempty" url:"well_known_trusted_issuers,omitempty"`
	// The date and time the template was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The date and time the template was created.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (v *VerifiableCredentialTemplateResponse) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *VerifiableCredentialTemplateResponse) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *VerifiableCredentialTemplateResponse) GetType() *string {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *VerifiableCredentialTemplateResponse) GetDialect() *string {
	if v == nil {
		return nil
	}
	return v.Dialect
}

func (v *VerifiableCredentialTemplateResponse) GetPresentation() *MdlPresentationRequest {
	if v == nil {
		return nil
	}
	return v.Presentation
}

func (v *VerifiableCredentialTemplateResponse) GetCustomCertificateAuthority() *string {
	if v == nil {
		return nil
	}
	return v.CustomCertificateAuthority
}

func (v *VerifiableCredentialTemplateResponse) GetWellKnownTrustedIssuers() *string {
	if v == nil {
		return nil
	}
	return v.WellKnownTrustedIssuers
}

func (v *VerifiableCredentialTemplateResponse) GetCreatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.CreatedAt
}

func (v *VerifiableCredentialTemplateResponse) GetUpdatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.UpdatedAt
}

func (v *VerifiableCredentialTemplateResponse) GetExtraProperties() map[string]interface{} {
	return v.ExtraProperties
}

func (v *VerifiableCredentialTemplateResponse) UnmarshalJSON(data []byte) error {
	type embed VerifiableCredentialTemplateResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VerifiableCredentialTemplateResponse(unmarshaler.embed)
	v.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	v.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.ExtraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerifiableCredentialTemplateResponse) MarshalJSON() ([]byte, error) {
	type embed VerifiableCredentialTemplateResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*v),
		CreatedAt: internal.NewOptionalDateTime(v.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(v.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, v.ExtraProperties)
}

func (v *VerifiableCredentialTemplateResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Code generated by Fern. DO NOT EDIT.

package eventstreams

import (
	json "encoding/json"
	time "time"

	management "github.com/auth0/go-auth0/v2/management"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateEventStreamRedeliveryRequestContent struct {
	// An RFC-3339 date-time for redelivery start, inclusive. Does not allow sub-second precision.
	DateFrom *time.Time `json:"date_from,omitempty" url:"-"`
	// An RFC-3339 date-time for redelivery end, exclusive. Does not allow sub-second precision.
	DateTo *time.Time `json:"date_to,omitempty" url:"-"`
	// Filter by status
	Statuses []management.EventStreamDeliveryStatusEnum `json:"statuses,omitempty" url:"-"`
	// Filter by event type
	EventTypes []management.EventStreamEventTypeEnum `json:"event_types,omitempty" url:"-"`
}

func (c *CreateEventStreamRedeliveryRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEventStreamRedeliveryRequestContent
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateEventStreamRedeliveryRequestContent(body)
	return nil
}

func (c *CreateEventStreamRedeliveryRequestContent) MarshalJSON() ([]byte, error) {
	type embed CreateEventStreamRedeliveryRequestContent
	var marshaler = struct {
		embed
		DateFrom *internal.DateTime `json:"date_from,omitempty"`
		DateTo   *internal.DateTime `json:"date_to,omitempty"`
	}{
		embed:    embed(*c),
		DateFrom: internal.NewOptionalDateTime(c.DateFrom),
		DateTo:   internal.NewOptionalDateTime(c.DateTo),
	}
	return json.Marshal(marshaler)
}

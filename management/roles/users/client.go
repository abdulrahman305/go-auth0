// Code generated by Fern. DO NOT EDIT.

package users

import (
	context "context"
	management "github.com/auth0/go-auth0/v2/management"
	core "github.com/auth0/go-auth0/v2/management/core"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	option "github.com/auth0/go-auth0/v2/management/option"
	roles "github.com/auth0/go-auth0/v2/management/roles"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Retrieve list of users associated with a specific role. For Dashboard instructions, review <a href="https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-users-assigned-to-roles">View Users Assigned to Roles</a>.
//
// This endpoint supports two types of pagination:
// <ul>
// <li>Offset pagination</li>
// <li>Checkpoint pagination</li>
// </ul>
//
// Checkpoint pagination must be used if you need to retrieve more than 1000 organization members.
//
// <h2>Checkpoint Pagination</h2>
//
// To search by checkpoint, use the following parameters:
// <ul>
// <li><code>from</code>: Optional id from which to start selection.</li>
// <li><code>take</code>: The total amount of entries to retrieve when using the from parameter. Defaults to 50.</li>
// </ul>
//
// <b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.
func (c *Client) List(
	ctx context.Context,
	// ID of the role to retrieve a list of users associated with.
	id string,
	request *roles.ListRoleUsersRequestParameters,
	opts ...option.RequestOption,
) (*core.Page[*management.RoleUser], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://%7BTENANT%7D.auth0.com/api/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/roles/%v/users",
		id,
	)
	queryParams, err := internal.QueryValuesWithDefaults(
		request,
		map[string]any{
			"take": 50,
		},
	)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &management.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &management.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &management.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &management.NotFoundError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &management.TooManyRequestsError{
				APIError: apiError,
			}
		},
	}
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("from", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		}
	}
	readPageResponse := func(response *management.ListRoleUsersPaginatedResponseContent) *internal.PageResponse[*string, *management.RoleUser] {
		var zeroValue *string
		next := response.GetNext()
		results := response.GetUsers()
		return &internal.PageResponse[*string, *management.RoleUser]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.From)
}

// Assign one or more users to an existing user role. To learn more, review <a href="https://auth0.com/docs/manage-users/access-control/rbac">Role-Based Access Control</a>.
//
// <b>Note</b>: New roles cannot be created through this action.
func (c *Client) Assign(
	ctx context.Context,
	// ID of the role to assign users to.
	id string,
	request *roles.AssignRoleUsersRequestContent,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Assign(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type GetDailyStatsRequestParameters struct {
	// Optional first day of the date range (inclusive) in YYYYMMDD format.
	From *string `json:"-" url:"from,omitempty"`
	// Optional last day of the date range (inclusive) in YYYYMMDD format.
	To *string `json:"-" url:"to,omitempty"`
}

type DailyStats struct {
	// Date these events occurred in ISO 8601 format.
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// Number of logins on this date.
	Logins *int `json:"logins,omitempty" url:"logins,omitempty"`
	// Number of signups on this date.
	Signups *int `json:"signups,omitempty" url:"signups,omitempty"`
	// Number of breached-password detections on this date (subscription required).
	LeakedPasswords *int `json:"leaked_passwords,omitempty" url:"leaked_passwords,omitempty"`
	// Date and time this stats entry was last updated in ISO 8601 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Approximate date and time the first event occurred in ISO 8601 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (d *DailyStats) GetDate() *string {
	if d == nil {
		return nil
	}
	return d.Date
}

func (d *DailyStats) GetLogins() *int {
	if d == nil {
		return nil
	}
	return d.Logins
}

func (d *DailyStats) GetSignups() *int {
	if d == nil {
		return nil
	}
	return d.Signups
}

func (d *DailyStats) GetLeakedPasswords() *int {
	if d == nil {
		return nil
	}
	return d.LeakedPasswords
}

func (d *DailyStats) GetUpdatedAt() *string {
	if d == nil {
		return nil
	}
	return d.UpdatedAt
}

func (d *DailyStats) GetCreatedAt() *string {
	if d == nil {
		return nil
	}
	return d.CreatedAt
}

func (d *DailyStats) GetExtraProperties() map[string]interface{} {
	return d.ExtraProperties
}

func (d *DailyStats) UnmarshalJSON(data []byte) error {
	type embed DailyStats
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DailyStats(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.ExtraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DailyStats) MarshalJSON() ([]byte, error) {
	type embed DailyStats
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, d.ExtraProperties)
}

func (d *DailyStats) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Number of active users in the last 30 days.
type GetActiveUsersCountStatsResponseContent = float64

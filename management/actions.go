// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateActionRequestContent struct {
	// The name of an action.
	Name string `json:"name" url:"-"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"-"`
	// The source code of the action.
	Code *string `json:"code,omitempty" url:"-"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"-"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty" url:"-"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretRequest `json:"secrets,omitempty" url:"-"`
	// True if the action should be deployed after creation.
	Deploy *bool `json:"deploy,omitempty" url:"-"`
}

type DeleteActionRequestParameters struct {
	// Force action deletion detaching bindings
	Force *bool `json:"-" url:"force,omitempty"`
}

type ListActionsRequestParameters struct {
	// An actions extensibility point.
	TriggerID *ActionTriggerTypeEnum `json:"-" url:"triggerId,omitempty"`
	// The name of the action to retrieve.
	ActionName *string `json:"-" url:"actionName,omitempty"`
	// Optional filter to only retrieve actions that are deployed.
	Deployed *bool `json:"-" url:"deployed,omitempty"`
	// Use this field to request a specific page of the list results.
	Page *int `json:"-" url:"page,omitempty"`
	// The maximum number of results to be returned by the server in single response. 20 by default
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Optional. When true, return only installed actions. When false, return only custom actions. Returns all actions by default.
	Installed *bool `json:"-" url:"installed,omitempty"`
}

type TestActionRequestContent struct {
	Payload TestActionPayload `json:"payload,omitempty" url:"-"`
}

type CreateActionResponseContent struct {
	// The unique ID of the action.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of an action.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`
	// True if all of an Action's contents have been deployed.
	AllChangesDeployed *bool `json:"all_changes_deployed,omitempty" url:"all_changes_deployed,omitempty"`
	// The time when this action was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this action was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The source code of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets         []*ActionSecretResponse `json:"secrets,omitempty" url:"secrets,omitempty"`
	DeployedVersion *ActionDeployedVersion  `json:"deployed_version,omitempty" url:"deployed_version,omitempty"`
	// installed_integration_id is the fk reference to the InstalledIntegration entity.
	InstalledIntegrationID *string                `json:"installed_integration_id,omitempty" url:"installed_integration_id,omitempty"`
	Integration            *Integration           `json:"integration,omitempty" url:"integration,omitempty"`
	Status                 *ActionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The time when this action was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// True if the action should be deployed after creation.
	Deploy *bool `json:"deploy,omitempty" url:"deploy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateActionResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateActionResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateActionResponseContent) GetSupportedTriggers() []*ActionTrigger {
	if c == nil {
		return nil
	}
	return c.SupportedTriggers
}

func (c *CreateActionResponseContent) GetAllChangesDeployed() *bool {
	if c == nil {
		return nil
	}
	return c.AllChangesDeployed
}

func (c *CreateActionResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateActionResponseContent) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CreateActionResponseContent) GetCode() *string {
	if c == nil {
		return nil
	}
	return c.Code
}

func (c *CreateActionResponseContent) GetDependencies() []*ActionVersionDependency {
	if c == nil {
		return nil
	}
	return c.Dependencies
}

func (c *CreateActionResponseContent) GetRuntime() *string {
	if c == nil {
		return nil
	}
	return c.Runtime
}

func (c *CreateActionResponseContent) GetSecrets() []*ActionSecretResponse {
	if c == nil {
		return nil
	}
	return c.Secrets
}

func (c *CreateActionResponseContent) GetDeployedVersion() *ActionDeployedVersion {
	if c == nil {
		return nil
	}
	return c.DeployedVersion
}

func (c *CreateActionResponseContent) GetInstalledIntegrationID() *string {
	if c == nil {
		return nil
	}
	return c.InstalledIntegrationID
}

func (c *CreateActionResponseContent) GetIntegration() *Integration {
	if c == nil {
		return nil
	}
	return c.Integration
}

func (c *CreateActionResponseContent) GetStatus() *ActionBuildStatusEnum {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *CreateActionResponseContent) GetBuiltAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.BuiltAt
}

func (c *CreateActionResponseContent) GetDeploy() *bool {
	if c == nil {
		return nil
	}
	return c.Deploy
}

func (c *CreateActionResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateActionResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateActionResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateActionResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	c.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateActionResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateActionResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
		BuiltAt:   internal.NewOptionalDateTime(c.BuiltAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateActionResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeployActionResponseContent struct {
	// The unique id of an action version.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The id of the action to which this version belongs.
	ActionID *string `json:"action_id,omitempty" url:"action_id,omitempty"`
	// The source code of this specific version of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this specific version depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// Indicates if this speciic version is the currently one deployed.
	Deployed *bool `json:"deployed,omitempty" url:"deployed,omitempty"`
	// The Node runtime. For example: `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretResponse       `json:"secrets,omitempty" url:"secrets,omitempty"`
	Status  *ActionVersionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The index of this version in list of versions for the action.
	Number *float64 `json:"number,omitempty" url:"number,omitempty"`
	// Any errors that occurred while the version was being built.
	Errors []*ActionError `json:"errors,omitempty" url:"errors,omitempty"`
	Action *ActionBase    `json:"action,omitempty" url:"action,omitempty"`
	// The time when this version was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// The time when this version was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is being built.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeployActionResponseContent) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DeployActionResponseContent) GetActionID() *string {
	if d == nil {
		return nil
	}
	return d.ActionID
}

func (d *DeployActionResponseContent) GetCode() *string {
	if d == nil {
		return nil
	}
	return d.Code
}

func (d *DeployActionResponseContent) GetDependencies() []*ActionVersionDependency {
	if d == nil {
		return nil
	}
	return d.Dependencies
}

func (d *DeployActionResponseContent) GetDeployed() *bool {
	if d == nil {
		return nil
	}
	return d.Deployed
}

func (d *DeployActionResponseContent) GetRuntime() *string {
	if d == nil {
		return nil
	}
	return d.Runtime
}

func (d *DeployActionResponseContent) GetSecrets() []*ActionSecretResponse {
	if d == nil {
		return nil
	}
	return d.Secrets
}

func (d *DeployActionResponseContent) GetStatus() *ActionVersionBuildStatusEnum {
	if d == nil {
		return nil
	}
	return d.Status
}

func (d *DeployActionResponseContent) GetNumber() *float64 {
	if d == nil {
		return nil
	}
	return d.Number
}

func (d *DeployActionResponseContent) GetErrors() []*ActionError {
	if d == nil {
		return nil
	}
	return d.Errors
}

func (d *DeployActionResponseContent) GetAction() *ActionBase {
	if d == nil {
		return nil
	}
	return d.Action
}

func (d *DeployActionResponseContent) GetBuiltAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.BuiltAt
}

func (d *DeployActionResponseContent) GetCreatedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.CreatedAt
}

func (d *DeployActionResponseContent) GetUpdatedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.UpdatedAt
}

func (d *DeployActionResponseContent) GetSupportedTriggers() []*ActionTrigger {
	if d == nil {
		return nil
	}
	return d.SupportedTriggers
}

func (d *DeployActionResponseContent) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeployActionResponseContent) UnmarshalJSON(data []byte) error {
	type embed DeployActionResponseContent
	var unmarshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeployActionResponseContent(unmarshaler.embed)
	d.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	d.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	d.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeployActionResponseContent) MarshalJSON() ([]byte, error) {
	type embed DeployActionResponseContent
	var marshaler = struct {
		embed
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*d),
		BuiltAt:   internal.NewOptionalDateTime(d.BuiltAt),
		CreatedAt: internal.NewOptionalDateTime(d.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(d.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *DeployActionResponseContent) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetActionResponseContent struct {
	// The unique ID of the action.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of an action.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`
	// True if all of an Action's contents have been deployed.
	AllChangesDeployed *bool `json:"all_changes_deployed,omitempty" url:"all_changes_deployed,omitempty"`
	// The time when this action was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this action was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The source code of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets         []*ActionSecretResponse `json:"secrets,omitempty" url:"secrets,omitempty"`
	DeployedVersion *ActionDeployedVersion  `json:"deployed_version,omitempty" url:"deployed_version,omitempty"`
	// installed_integration_id is the fk reference to the InstalledIntegration entity.
	InstalledIntegrationID *string                `json:"installed_integration_id,omitempty" url:"installed_integration_id,omitempty"`
	Integration            *Integration           `json:"integration,omitempty" url:"integration,omitempty"`
	Status                 *ActionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The time when this action was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// True if the action should be deployed after creation.
	Deploy *bool `json:"deploy,omitempty" url:"deploy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActionResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetActionResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetActionResponseContent) GetSupportedTriggers() []*ActionTrigger {
	if g == nil {
		return nil
	}
	return g.SupportedTriggers
}

func (g *GetActionResponseContent) GetAllChangesDeployed() *bool {
	if g == nil {
		return nil
	}
	return g.AllChangesDeployed
}

func (g *GetActionResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetActionResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetActionResponseContent) GetCode() *string {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GetActionResponseContent) GetDependencies() []*ActionVersionDependency {
	if g == nil {
		return nil
	}
	return g.Dependencies
}

func (g *GetActionResponseContent) GetRuntime() *string {
	if g == nil {
		return nil
	}
	return g.Runtime
}

func (g *GetActionResponseContent) GetSecrets() []*ActionSecretResponse {
	if g == nil {
		return nil
	}
	return g.Secrets
}

func (g *GetActionResponseContent) GetDeployedVersion() *ActionDeployedVersion {
	if g == nil {
		return nil
	}
	return g.DeployedVersion
}

func (g *GetActionResponseContent) GetInstalledIntegrationID() *string {
	if g == nil {
		return nil
	}
	return g.InstalledIntegrationID
}

func (g *GetActionResponseContent) GetIntegration() *Integration {
	if g == nil {
		return nil
	}
	return g.Integration
}

func (g *GetActionResponseContent) GetStatus() *ActionBuildStatusEnum {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetActionResponseContent) GetBuiltAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.BuiltAt
}

func (g *GetActionResponseContent) GetDeploy() *bool {
	if g == nil {
		return nil
	}
	return g.Deploy
}

func (g *GetActionResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActionResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetActionResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetActionResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	g.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActionResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetActionResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
		BuiltAt:   internal.NewOptionalDateTime(g.BuiltAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetActionResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListActionsPaginatedResponseContent struct {
	// The total result count.
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	// Page index of the results being returned. First page is 0.
	Page *float64 `json:"page,omitempty" url:"page,omitempty"`
	// Number of results per page.
	PerPage *float64 `json:"per_page,omitempty" url:"per_page,omitempty"`
	// The list of actions.
	Actions []*Action `json:"actions,omitempty" url:"actions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListActionsPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListActionsPaginatedResponseContent) GetPage() *float64 {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListActionsPaginatedResponseContent) GetPerPage() *float64 {
	if l == nil {
		return nil
	}
	return l.PerPage
}

func (l *ListActionsPaginatedResponseContent) GetActions() []*Action {
	if l == nil {
		return nil
	}
	return l.Actions
}

func (l *ListActionsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListActionsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListActionsPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListActionsPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListActionsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The payload for the action.
type TestActionPayload = map[string]interface{}

type TestActionResponseContent struct {
	Payload *TestActionResultPayload `json:"payload,omitempty" url:"payload,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TestActionResponseContent) GetPayload() *TestActionResultPayload {
	if t == nil {
		return nil
	}
	return t.Payload
}

func (t *TestActionResponseContent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestActionResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler TestActionResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestActionResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestActionResponseContent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The resulting payload after an action was executed.
type TestActionResultPayload = map[string]interface{}

type UpdateActionResponseContent struct {
	// The unique ID of the action.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of an action.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"supported_triggers,omitempty"`
	// True if all of an Action's contents have been deployed.
	AllChangesDeployed *bool `json:"all_changes_deployed,omitempty" url:"all_changes_deployed,omitempty"`
	// The time when this action was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this action was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The source code of the action.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"dependencies,omitempty"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty" url:"runtime,omitempty"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets         []*ActionSecretResponse `json:"secrets,omitempty" url:"secrets,omitempty"`
	DeployedVersion *ActionDeployedVersion  `json:"deployed_version,omitempty" url:"deployed_version,omitempty"`
	// installed_integration_id is the fk reference to the InstalledIntegration entity.
	InstalledIntegrationID *string                `json:"installed_integration_id,omitempty" url:"installed_integration_id,omitempty"`
	Integration            *Integration           `json:"integration,omitempty" url:"integration,omitempty"`
	Status                 *ActionBuildStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The time when this action was built successfully.
	BuiltAt *time.Time `json:"built_at,omitempty" url:"built_at,omitempty"`
	// True if the action should be deployed after creation.
	Deploy *bool `json:"deploy,omitempty" url:"deploy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateActionResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateActionResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateActionResponseContent) GetSupportedTriggers() []*ActionTrigger {
	if u == nil {
		return nil
	}
	return u.SupportedTriggers
}

func (u *UpdateActionResponseContent) GetAllChangesDeployed() *bool {
	if u == nil {
		return nil
	}
	return u.AllChangesDeployed
}

func (u *UpdateActionResponseContent) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateActionResponseContent) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UpdateActionResponseContent) GetCode() *string {
	if u == nil {
		return nil
	}
	return u.Code
}

func (u *UpdateActionResponseContent) GetDependencies() []*ActionVersionDependency {
	if u == nil {
		return nil
	}
	return u.Dependencies
}

func (u *UpdateActionResponseContent) GetRuntime() *string {
	if u == nil {
		return nil
	}
	return u.Runtime
}

func (u *UpdateActionResponseContent) GetSecrets() []*ActionSecretResponse {
	if u == nil {
		return nil
	}
	return u.Secrets
}

func (u *UpdateActionResponseContent) GetDeployedVersion() *ActionDeployedVersion {
	if u == nil {
		return nil
	}
	return u.DeployedVersion
}

func (u *UpdateActionResponseContent) GetInstalledIntegrationID() *string {
	if u == nil {
		return nil
	}
	return u.InstalledIntegrationID
}

func (u *UpdateActionResponseContent) GetIntegration() *Integration {
	if u == nil {
		return nil
	}
	return u.Integration
}

func (u *UpdateActionResponseContent) GetStatus() *ActionBuildStatusEnum {
	if u == nil {
		return nil
	}
	return u.Status
}

func (u *UpdateActionResponseContent) GetBuiltAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.BuiltAt
}

func (u *UpdateActionResponseContent) GetDeploy() *bool {
	if u == nil {
		return nil
	}
	return u.Deploy
}

func (u *UpdateActionResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateActionResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateActionResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateActionResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	u.BuiltAt = unmarshaler.BuiltAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateActionResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateActionResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
		BuiltAt   *internal.DateTime `json:"built_at,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewOptionalDateTime(u.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(u.UpdatedAt),
		BuiltAt:   internal.NewOptionalDateTime(u.BuiltAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpdateActionResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateActionRequestContent struct {
	// The name of an action.
	Name *string `json:"name,omitempty" url:"-"`
	// The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.
	SupportedTriggers []*ActionTrigger `json:"supported_triggers,omitempty" url:"-"`
	// The source code of the action.
	Code *string `json:"code,omitempty" url:"-"`
	// The list of third party npm modules, and their versions, that this action depends on.
	Dependencies []*ActionVersionDependency `json:"dependencies,omitempty" url:"-"`
	// The Node runtime. For example: `node12`, defaults to `node12`
	Runtime *string `json:"runtime,omitempty" url:"-"`
	// The list of secrets that are included in an action or a version of an action.
	Secrets []*ActionSecretRequest `json:"secrets,omitempty" url:"-"`
}

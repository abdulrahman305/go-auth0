// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type DeleteUserBlocksByIdentifierRequestParameters struct {
	// Should be any of a username, phone number, or email.
	Identifier string `json:"-" url:"identifier"`
}

type ListUserBlocksRequestParameters struct {
	//	If true and Brute Force Protection is enabled and configured to block logins, will return a list of blocked IP addresses.
	//	If true and Brute Force Protection is disabled, will return an empty list.
	ConsiderBruteForceEnablement *bool `json:"-" url:"consider_brute_force_enablement,omitempty"`
}

type ListUserBlocksByIdentifierRequestParameters struct {
	// Should be any of a username, phone number, or email.
	Identifier string `json:"-" url:"identifier"`
	//	If true and Brute Force Protection is enabled and configured to block logins, will return a list of blocked IP addresses.
	//	If true and Brute Force Protection is disabled, will return an empty list.
	ConsiderBruteForceEnablement *bool `json:"-" url:"consider_brute_force_enablement,omitempty"`
}

type ListUserBlocksByIdentifierResponseContent struct {
	// Array of identifier + IP address pairs.  IP address is optional, and may be omitted in certain circumstances (such as Account Lockout mode).
	BlockedFor []*UserBlockIdentifier `json:"blocked_for,omitempty" url:"blocked_for,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserBlocksByIdentifierResponseContent) GetBlockedFor() []*UserBlockIdentifier {
	if l == nil {
		return nil
	}
	return l.BlockedFor
}

func (l *ListUserBlocksByIdentifierResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserBlocksByIdentifierResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserBlocksByIdentifierResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserBlocksByIdentifierResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserBlocksByIdentifierResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUserBlocksResponseContent struct {
	// Array of identifier + IP address pairs.  IP address is optional, and may be omitted in certain circumstances (such as Account Lockout mode).
	BlockedFor []*UserBlockIdentifier `json:"blocked_for,omitempty" url:"blocked_for,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserBlocksResponseContent) GetBlockedFor() []*UserBlockIdentifier {
	if l == nil {
		return nil
	}
	return l.BlockedFor
}

func (l *ListUserBlocksResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserBlocksResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserBlocksResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserBlocksResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserBlocksResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UserBlockIdentifier struct {
	// Identifier (should be any of an `email`, `username`, or `phone_number`)
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// IP Address
	IP *string `json:"ip,omitempty" url:"ip,omitempty"`
	// Connection identifier
	Connection *string `json:"connection,omitempty" url:"connection,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UserBlockIdentifier) GetIdentifier() *string {
	if u == nil {
		return nil
	}
	return u.Identifier
}

func (u *UserBlockIdentifier) GetIP() *string {
	if u == nil {
		return nil
	}
	return u.IP
}

func (u *UserBlockIdentifier) GetConnection() *string {
	if u == nil {
		return nil
	}
	return u.Connection
}

func (u *UserBlockIdentifier) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UserBlockIdentifier) UnmarshalJSON(data []byte) error {
	type embed UserBlockIdentifier
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserBlockIdentifier(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserBlockIdentifier) MarshalJSON() ([]byte, error) {
	type embed UserBlockIdentifier
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UserBlockIdentifier) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateOrganizationRequestContent struct {
	// The name of this organization.
	Name string `json:"name" url:"-"`
	// Friendly name of this organization.
	DisplayName *string               `json:"display_name,omitempty" url:"-"`
	Branding    *OrganizationBranding `json:"branding,omitempty" url:"-"`
	Metadata    *OrganizationMetadata `json:"metadata,omitempty" url:"-"`
	// Connections that will be enabled for this organization. See POST enabled_connections endpoint for the object format. (Max of 10 connections allowed)
	EnabledConnections []*ConnectionForOrganization `json:"enabled_connections,omitempty" url:"-"`
	TokenQuota         *CreateTokenQuota            `json:"token_quota,omitempty" url:"-"`
}

type ListOrganizationsRequestParameters struct {
	// Optional Id from which to start selection.
	From *string `json:"-" url:"from,omitempty"`
	// Number of results per page. Defaults to 50.
	Take *int `json:"-" url:"take,omitempty"`
	// Field to sort by. Use <code>field:order</code> where order is <code>1</code> for ascending and <code>-1</code> for descending. e.g. <code>created_at:1</code>. We currently support sorting by the following fields: <code>name</code>, <code>display_name</code> and <code>created_at</code>.
	Sort *string `json:"-" url:"sort,omitempty"`
}

// Connection to be added to the organization.
type ConnectionForOrganization struct {
	// ID of the connection.
	ConnectionID string `json:"connection_id" url:"connection_id"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organizationâ€™s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled *bool `json:"is_signup_enabled,omitempty" url:"is_signup_enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectionForOrganization) GetConnectionID() string {
	if c == nil {
		return ""
	}
	return c.ConnectionID
}

func (c *ConnectionForOrganization) GetAssignMembershipOnLogin() *bool {
	if c == nil {
		return nil
	}
	return c.AssignMembershipOnLogin
}

func (c *ConnectionForOrganization) GetShowAsButton() *bool {
	if c == nil {
		return nil
	}
	return c.ShowAsButton
}

func (c *ConnectionForOrganization) GetIsSignupEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.IsSignupEnabled
}

func (c *ConnectionForOrganization) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectionForOrganization) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectionForOrganization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectionForOrganization(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectionForOrganization) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrganizationResponseContent struct {
	// Organization identifier.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of this organization.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Friendly name of this organization.
	DisplayName        *string                          `json:"display_name,omitempty" url:"display_name,omitempty"`
	Branding           *OrganizationBranding            `json:"branding,omitempty" url:"branding,omitempty"`
	Metadata           *OrganizationMetadata            `json:"metadata,omitempty" url:"metadata,omitempty"`
	TokenQuota         *TokenQuota                      `json:"token_quota,omitempty" url:"token_quota,omitempty"`
	EnabledConnections []*OrganizationEnabledConnection `json:"enabled_connections,omitempty" url:"enabled_connections,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateOrganizationResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateOrganizationResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateOrganizationResponseContent) GetDisplayName() *string {
	if c == nil {
		return nil
	}
	return c.DisplayName
}

func (c *CreateOrganizationResponseContent) GetBranding() *OrganizationBranding {
	if c == nil {
		return nil
	}
	return c.Branding
}

func (c *CreateOrganizationResponseContent) GetMetadata() *OrganizationMetadata {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *CreateOrganizationResponseContent) GetTokenQuota() *TokenQuota {
	if c == nil {
		return nil
	}
	return c.TokenQuota
}

func (c *CreateOrganizationResponseContent) GetEnabledConnections() []*OrganizationEnabledConnection {
	if c == nil {
		return nil
	}
	return c.EnabledConnections
}

func (c *CreateOrganizationResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateOrganizationResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateOrganizationResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateOrganizationResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrganizationResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateOrganizationResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateOrganizationResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetOrganizationByNameResponseContent struct {
	// Organization identifier.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of this organization.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Friendly name of this organization.
	DisplayName *string               `json:"display_name,omitempty" url:"display_name,omitempty"`
	Branding    *OrganizationBranding `json:"branding,omitempty" url:"branding,omitempty"`
	Metadata    *OrganizationMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`
	TokenQuota  *TokenQuota           `json:"token_quota,omitempty" url:"token_quota,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetOrganizationByNameResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetOrganizationByNameResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetOrganizationByNameResponseContent) GetDisplayName() *string {
	if g == nil {
		return nil
	}
	return g.DisplayName
}

func (g *GetOrganizationByNameResponseContent) GetBranding() *OrganizationBranding {
	if g == nil {
		return nil
	}
	return g.Branding
}

func (g *GetOrganizationByNameResponseContent) GetMetadata() *OrganizationMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetOrganizationByNameResponseContent) GetTokenQuota() *TokenQuota {
	if g == nil {
		return nil
	}
	return g.TokenQuota
}

func (g *GetOrganizationByNameResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetOrganizationByNameResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetOrganizationByNameResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetOrganizationByNameResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationByNameResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetOrganizationByNameResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetOrganizationByNameResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrganizationResponseContent struct {
	// Organization identifier.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of this organization.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Friendly name of this organization.
	DisplayName *string               `json:"display_name,omitempty" url:"display_name,omitempty"`
	Branding    *OrganizationBranding `json:"branding,omitempty" url:"branding,omitempty"`
	Metadata    *OrganizationMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`
	TokenQuota  *TokenQuota           `json:"token_quota,omitempty" url:"token_quota,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetOrganizationResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetOrganizationResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetOrganizationResponseContent) GetDisplayName() *string {
	if g == nil {
		return nil
	}
	return g.DisplayName
}

func (g *GetOrganizationResponseContent) GetBranding() *OrganizationBranding {
	if g == nil {
		return nil
	}
	return g.Branding
}

func (g *GetOrganizationResponseContent) GetMetadata() *OrganizationMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetOrganizationResponseContent) GetTokenQuota() *TokenQuota {
	if g == nil {
		return nil
	}
	return g.TokenQuota
}

func (g *GetOrganizationResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetOrganizationResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetOrganizationResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetOrganizationResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetOrganizationResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetOrganizationResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListOrganizationsPaginatedResponseContent struct {
	Next          *string         `json:"next,omitempty" url:"next,omitempty"`
	Organizations []*Organization `json:"organizations,omitempty" url:"organizations,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationsPaginatedResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListOrganizationsPaginatedResponseContent) GetOrganizations() []*Organization {
	if l == nil {
		return nil
	}
	return l.Organizations
}

func (l *ListOrganizationsPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationsPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationsPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationsPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationsPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type OrganizationEnabledConnection struct {
	// ID of the connection.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assign_membership_on_login,omitempty" url:"assign_membership_on_login,omitempty"`
	// Determines whether a connection should be displayed on this organizationâ€™s login prompt. Only applicable for enterprise connections. Default: true.
	ShowAsButton *bool `json:"show_as_button,omitempty" url:"show_as_button,omitempty"`
	// Determines whether organization signup should be enabled for this organization connection. Only applicable for database connections. Default: false.
	IsSignupEnabled *bool                              `json:"is_signup_enabled,omitempty" url:"is_signup_enabled,omitempty"`
	Connection      *OrganizationConnectionInformation `json:"connection,omitempty" url:"connection,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (o *OrganizationEnabledConnection) GetConnectionID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *OrganizationEnabledConnection) GetAssignMembershipOnLogin() *bool {
	if o == nil {
		return nil
	}
	return o.AssignMembershipOnLogin
}

func (o *OrganizationEnabledConnection) GetShowAsButton() *bool {
	if o == nil {
		return nil
	}
	return o.ShowAsButton
}

func (o *OrganizationEnabledConnection) GetIsSignupEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsSignupEnabled
}

func (o *OrganizationEnabledConnection) GetConnection() *OrganizationConnectionInformation {
	if o == nil {
		return nil
	}
	return o.Connection
}

func (o *OrganizationEnabledConnection) GetExtraProperties() map[string]interface{} {
	return o.ExtraProperties
}

func (o *OrganizationEnabledConnection) UnmarshalJSON(data []byte) error {
	type embed OrganizationEnabledConnection
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OrganizationEnabledConnection(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.ExtraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationEnabledConnection) MarshalJSON() ([]byte, error) {
	type embed OrganizationEnabledConnection
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, o.ExtraProperties)
}

func (o *OrganizationEnabledConnection) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type UpdateOrganizationResponseContent struct {
	// Organization identifier.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of this organization.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Friendly name of this organization.
	DisplayName *string               `json:"display_name,omitempty" url:"display_name,omitempty"`
	Branding    *OrganizationBranding `json:"branding,omitempty" url:"branding,omitempty"`
	Metadata    *OrganizationMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`
	TokenQuota  *TokenQuota           `json:"token_quota,omitempty" url:"token_quota,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateOrganizationResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateOrganizationResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateOrganizationResponseContent) GetDisplayName() *string {
	if u == nil {
		return nil
	}
	return u.DisplayName
}

func (u *UpdateOrganizationResponseContent) GetBranding() *OrganizationBranding {
	if u == nil {
		return nil
	}
	return u.Branding
}

func (u *UpdateOrganizationResponseContent) GetMetadata() *OrganizationMetadata {
	if u == nil {
		return nil
	}
	return u.Metadata
}

func (u *UpdateOrganizationResponseContent) GetTokenQuota() *TokenQuota {
	if u == nil {
		return nil
	}
	return u.TokenQuota
}

func (u *UpdateOrganizationResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateOrganizationResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateOrganizationResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateOrganizationResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateOrganizationResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UpdateOrganizationResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateOrganizationRequestContent struct {
	// Friendly name of this organization.
	DisplayName *string `json:"display_name,omitempty" url:"-"`
	// The name of this organization.
	Name       *string               `json:"name,omitempty" url:"-"`
	Branding   *OrganizationBranding `json:"branding,omitempty" url:"-"`
	Metadata   *OrganizationMetadata `json:"metadata,omitempty" url:"-"`
	TokenQuota *UpdateTokenQuota     `json:"token_quota,omitempty" url:"-"`
}

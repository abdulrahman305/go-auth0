// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateCustomDomainRequestContent struct {
	// Domain name.
	Domain               string                              `json:"domain" url:"-"`
	Type                 CustomDomainProvisioningTypeEnum    `json:"type" url:"-"`
	VerificationMethod   *CustomDomainVerificationMethodEnum `json:"verification_method,omitempty" url:"-"`
	TLSPolicy            *CustomDomainTLSPolicyEnum          `json:"tls_policy,omitempty" url:"-"`
	CustomClientIPHeader *CustomDomainCustomClientIPHeader   `json:"custom_client_ip_header,omitempty" url:"-"`
}

type CreateCustomDomainResponseContent struct {
	// ID of the custom domain.
	CustomDomainID string `json:"custom_domain_id" url:"custom_domain_id"`
	// Domain name.
	Domain string `json:"domain" url:"domain"`
	// Whether this is a primary domain (true) or not (false).
	Primary      bool                         `json:"primary" url:"primary"`
	Status       CustomDomainStatusFilterEnum `json:"status" url:"status"`
	Type         CustomDomainTypeEnum         `json:"type" url:"type"`
	Verification *DomainVerification          `json:"verification" url:"verification"`
	// The HTTP header to fetch the client's IP address
	CustomClientIPHeader *string `json:"custom_client_ip_header,omitempty" url:"custom_client_ip_header,omitempty"`
	// The TLS version policy
	TLSPolicy *string `json:"tls_policy,omitempty" url:"tls_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateCustomDomainResponseContent) GetCustomDomainID() string {
	if c == nil {
		return ""
	}
	return c.CustomDomainID
}

func (c *CreateCustomDomainResponseContent) GetDomain() string {
	if c == nil {
		return ""
	}
	return c.Domain
}

func (c *CreateCustomDomainResponseContent) GetPrimary() bool {
	if c == nil {
		return false
	}
	return c.Primary
}

func (c *CreateCustomDomainResponseContent) GetStatus() CustomDomainStatusFilterEnum {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CreateCustomDomainResponseContent) GetType() CustomDomainTypeEnum {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreateCustomDomainResponseContent) GetVerification() *DomainVerification {
	if c == nil {
		return nil
	}
	return c.Verification
}

func (c *CreateCustomDomainResponseContent) GetCustomClientIPHeader() *string {
	if c == nil {
		return nil
	}
	return c.CustomClientIPHeader
}

func (c *CreateCustomDomainResponseContent) GetTLSPolicy() *string {
	if c == nil {
		return nil
	}
	return c.TLSPolicy
}

func (c *CreateCustomDomainResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCustomDomainResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCustomDomainResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCustomDomainResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCustomDomainResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomDomain struct {
	// ID of the custom domain.
	CustomDomainID string `json:"custom_domain_id" url:"custom_domain_id"`
	// Domain name.
	Domain string `json:"domain" url:"domain"`
	// Whether this is a primary domain (true) or not (false).
	Primary bool                         `json:"primary" url:"primary"`
	Status  CustomDomainStatusFilterEnum `json:"status" url:"status"`
	Type    CustomDomainTypeEnum         `json:"type" url:"type"`
	// Intermediate address.
	OriginDomainName *string             `json:"origin_domain_name,omitempty" url:"origin_domain_name,omitempty"`
	Verification     *DomainVerification `json:"verification,omitempty" url:"verification,omitempty"`
	// The HTTP header to fetch the client's IP address
	CustomClientIPHeader *string `json:"custom_client_ip_header,omitempty" url:"custom_client_ip_header,omitempty"`
	// The TLS version policy
	TLSPolicy *string `json:"tls_policy,omitempty" url:"tls_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomDomain) GetCustomDomainID() string {
	if c == nil {
		return ""
	}
	return c.CustomDomainID
}

func (c *CustomDomain) GetDomain() string {
	if c == nil {
		return ""
	}
	return c.Domain
}

func (c *CustomDomain) GetPrimary() bool {
	if c == nil {
		return false
	}
	return c.Primary
}

func (c *CustomDomain) GetStatus() CustomDomainStatusFilterEnum {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CustomDomain) GetType() CustomDomainTypeEnum {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CustomDomain) GetOriginDomainName() *string {
	if c == nil {
		return nil
	}
	return c.OriginDomainName
}

func (c *CustomDomain) GetVerification() *DomainVerification {
	if c == nil {
		return nil
	}
	return c.Verification
}

func (c *CustomDomain) GetCustomClientIPHeader() *string {
	if c == nil {
		return nil
	}
	return c.CustomClientIPHeader
}

func (c *CustomDomain) GetTLSPolicy() *string {
	if c == nil {
		return nil
	}
	return c.TLSPolicy
}

func (c *CustomDomain) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomDomain) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomDomain
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomDomain(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomDomain) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomDomainCustomClientIPHeader = *CustomDomainCustomClientIPHeaderEnum

// The HTTP header to fetch the client's IP address
type CustomDomainCustomClientIPHeaderEnum string

const (
	CustomDomainCustomClientIPHeaderEnumTrueClientIP   CustomDomainCustomClientIPHeaderEnum = "true-client-ip"
	CustomDomainCustomClientIPHeaderEnumCfConnectingIP CustomDomainCustomClientIPHeaderEnum = "cf-connecting-ip"
	CustomDomainCustomClientIPHeaderEnumXForwardedFor  CustomDomainCustomClientIPHeaderEnum = "x-forwarded-for"
	CustomDomainCustomClientIPHeaderEnumXAzureClientip CustomDomainCustomClientIPHeaderEnum = "x-azure-clientip"
	CustomDomainCustomClientIPHeaderEnumEmpty          CustomDomainCustomClientIPHeaderEnum = ""
)

func NewCustomDomainCustomClientIPHeaderEnumFromString(s string) (CustomDomainCustomClientIPHeaderEnum, error) {
	switch s {
	case "true-client-ip":
		return CustomDomainCustomClientIPHeaderEnumTrueClientIP, nil
	case "cf-connecting-ip":
		return CustomDomainCustomClientIPHeaderEnumCfConnectingIP, nil
	case "x-forwarded-for":
		return CustomDomainCustomClientIPHeaderEnumXForwardedFor, nil
	case "x-azure-clientip":
		return CustomDomainCustomClientIPHeaderEnumXAzureClientip, nil
	case "":
		return CustomDomainCustomClientIPHeaderEnumEmpty, nil
	}
	var t CustomDomainCustomClientIPHeaderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomDomainCustomClientIPHeaderEnum) Ptr() *CustomDomainCustomClientIPHeaderEnum {
	return &c
}

// Custom domain provisioning type. Must be `auth0_managed_certs` or `self_managed_certs`.
type CustomDomainProvisioningTypeEnum string

const (
	CustomDomainProvisioningTypeEnumAuth0ManagedCerts CustomDomainProvisioningTypeEnum = "auth0_managed_certs"
	CustomDomainProvisioningTypeEnumSelfManagedCerts  CustomDomainProvisioningTypeEnum = "self_managed_certs"
)

func NewCustomDomainProvisioningTypeEnumFromString(s string) (CustomDomainProvisioningTypeEnum, error) {
	switch s {
	case "auth0_managed_certs":
		return CustomDomainProvisioningTypeEnumAuth0ManagedCerts, nil
	case "self_managed_certs":
		return CustomDomainProvisioningTypeEnumSelfManagedCerts, nil
	}
	var t CustomDomainProvisioningTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomDomainProvisioningTypeEnum) Ptr() *CustomDomainProvisioningTypeEnum {
	return &c
}

// Custom domain configuration status. Can be `failed`, `pending_verification`, or `ready`.
type CustomDomainStatusFilterEnum string

const (
	CustomDomainStatusFilterEnumPendingVerification CustomDomainStatusFilterEnum = "pending_verification"
	CustomDomainStatusFilterEnumReady               CustomDomainStatusFilterEnum = "ready"
	CustomDomainStatusFilterEnumFailed              CustomDomainStatusFilterEnum = "failed"
)

func NewCustomDomainStatusFilterEnumFromString(s string) (CustomDomainStatusFilterEnum, error) {
	switch s {
	case "pending_verification":
		return CustomDomainStatusFilterEnumPendingVerification, nil
	case "ready":
		return CustomDomainStatusFilterEnumReady, nil
	case "failed":
		return CustomDomainStatusFilterEnumFailed, nil
	}
	var t CustomDomainStatusFilterEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomDomainStatusFilterEnum) Ptr() *CustomDomainStatusFilterEnum {
	return &c
}

// Custom domain TLS policy. Must be `recommended`, includes TLS 1.2.
type CustomDomainTLSPolicyEnum = string

// Custom domain provisioning type. Can be `auth0_managed_certs` or `self_managed_certs`.
type CustomDomainTypeEnum string

const (
	CustomDomainTypeEnumAuth0ManagedCerts CustomDomainTypeEnum = "auth0_managed_certs"
	CustomDomainTypeEnumSelfManagedCerts  CustomDomainTypeEnum = "self_managed_certs"
)

func NewCustomDomainTypeEnumFromString(s string) (CustomDomainTypeEnum, error) {
	switch s {
	case "auth0_managed_certs":
		return CustomDomainTypeEnumAuth0ManagedCerts, nil
	case "self_managed_certs":
		return CustomDomainTypeEnumSelfManagedCerts, nil
	}
	var t CustomDomainTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomDomainTypeEnum) Ptr() *CustomDomainTypeEnum {
	return &c
}

// Custom domain verification method. Must be `txt`.
type CustomDomainVerificationMethodEnum = string

// Domain verification settings.
type DomainVerification struct {
	// Domain verification methods.
	Methods []*DomainVerificationMethod `json:"methods,omitempty" url:"methods,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DomainVerification) GetMethods() []*DomainVerificationMethod {
	if d == nil {
		return nil
	}
	return d.Methods
}

func (d *DomainVerification) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DomainVerification) UnmarshalJSON(data []byte) error {
	type unmarshaler DomainVerification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DomainVerification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DomainVerification) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DomainVerificationMethod struct {
	Name DomainVerificationMethodNameEnum `json:"name" url:"name"`
	// Value used to verify the domain.
	Record string `json:"record" url:"record"`
	// The name of the txt record for verification
	Domain *string `json:"domain,omitempty" url:"domain,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DomainVerificationMethod) GetName() DomainVerificationMethodNameEnum {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DomainVerificationMethod) GetRecord() string {
	if d == nil {
		return ""
	}
	return d.Record
}

func (d *DomainVerificationMethod) GetDomain() *string {
	if d == nil {
		return nil
	}
	return d.Domain
}

func (d *DomainVerificationMethod) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DomainVerificationMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler DomainVerificationMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DomainVerificationMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DomainVerificationMethod) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Domain verification method.
type DomainVerificationMethodNameEnum string

const (
	DomainVerificationMethodNameEnumCname DomainVerificationMethodNameEnum = "cname"
	DomainVerificationMethodNameEnumTxt   DomainVerificationMethodNameEnum = "txt"
)

func NewDomainVerificationMethodNameEnumFromString(s string) (DomainVerificationMethodNameEnum, error) {
	switch s {
	case "cname":
		return DomainVerificationMethodNameEnumCname, nil
	case "txt":
		return DomainVerificationMethodNameEnumTxt, nil
	}
	var t DomainVerificationMethodNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DomainVerificationMethodNameEnum) Ptr() *DomainVerificationMethodNameEnum {
	return &d
}

type GetCustomDomainResponseContent struct {
	// ID of the custom domain.
	CustomDomainID string `json:"custom_domain_id" url:"custom_domain_id"`
	// Domain name.
	Domain string `json:"domain" url:"domain"`
	// Whether this is a primary domain (true) or not (false).
	Primary bool                         `json:"primary" url:"primary"`
	Status  CustomDomainStatusFilterEnum `json:"status" url:"status"`
	Type    CustomDomainTypeEnum         `json:"type" url:"type"`
	// Intermediate address.
	OriginDomainName *string             `json:"origin_domain_name,omitempty" url:"origin_domain_name,omitempty"`
	Verification     *DomainVerification `json:"verification,omitempty" url:"verification,omitempty"`
	// The HTTP header to fetch the client's IP address
	CustomClientIPHeader *string `json:"custom_client_ip_header,omitempty" url:"custom_client_ip_header,omitempty"`
	// The TLS version policy
	TLSPolicy *string `json:"tls_policy,omitempty" url:"tls_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetCustomDomainResponseContent) GetCustomDomainID() string {
	if g == nil {
		return ""
	}
	return g.CustomDomainID
}

func (g *GetCustomDomainResponseContent) GetDomain() string {
	if g == nil {
		return ""
	}
	return g.Domain
}

func (g *GetCustomDomainResponseContent) GetPrimary() bool {
	if g == nil {
		return false
	}
	return g.Primary
}

func (g *GetCustomDomainResponseContent) GetStatus() CustomDomainStatusFilterEnum {
	if g == nil {
		return ""
	}
	return g.Status
}

func (g *GetCustomDomainResponseContent) GetType() CustomDomainTypeEnum {
	if g == nil {
		return ""
	}
	return g.Type
}

func (g *GetCustomDomainResponseContent) GetOriginDomainName() *string {
	if g == nil {
		return nil
	}
	return g.OriginDomainName
}

func (g *GetCustomDomainResponseContent) GetVerification() *DomainVerification {
	if g == nil {
		return nil
	}
	return g.Verification
}

func (g *GetCustomDomainResponseContent) GetCustomClientIPHeader() *string {
	if g == nil {
		return nil
	}
	return g.CustomClientIPHeader
}

func (g *GetCustomDomainResponseContent) GetTLSPolicy() *string {
	if g == nil {
		return nil
	}
	return g.TLSPolicy
}

func (g *GetCustomDomainResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCustomDomainResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCustomDomainResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCustomDomainResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCustomDomainResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListCustomDomainsResponseContent = []*CustomDomain

type TestCustomDomainResponseContent struct {
	// Result of the operation.
	Success bool `json:"success" url:"success"`
	// Message describing the operation status.
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TestCustomDomainResponseContent) GetSuccess() bool {
	if t == nil {
		return false
	}
	return t.Success
}

func (t *TestCustomDomainResponseContent) GetMessage() *string {
	if t == nil {
		return nil
	}
	return t.Message
}

func (t *TestCustomDomainResponseContent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCustomDomainResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCustomDomainResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCustomDomainResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCustomDomainResponseContent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateCustomDomainResponseContent struct {
	// ID of the custom domain.
	CustomDomainID string `json:"custom_domain_id" url:"custom_domain_id"`
	// Domain name.
	Domain string `json:"domain" url:"domain"`
	// Whether this is a primary domain (true) or not (false).
	Primary      bool                         `json:"primary" url:"primary"`
	Status       CustomDomainStatusFilterEnum `json:"status" url:"status"`
	Type         CustomDomainTypeEnum         `json:"type" url:"type"`
	Verification *DomainVerification          `json:"verification" url:"verification"`
	// The HTTP header to fetch the client's IP address
	CustomClientIPHeader *string `json:"custom_client_ip_header,omitempty" url:"custom_client_ip_header,omitempty"`
	// The TLS version policy
	TLSPolicy *string `json:"tls_policy,omitempty" url:"tls_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateCustomDomainResponseContent) GetCustomDomainID() string {
	if u == nil {
		return ""
	}
	return u.CustomDomainID
}

func (u *UpdateCustomDomainResponseContent) GetDomain() string {
	if u == nil {
		return ""
	}
	return u.Domain
}

func (u *UpdateCustomDomainResponseContent) GetPrimary() bool {
	if u == nil {
		return false
	}
	return u.Primary
}

func (u *UpdateCustomDomainResponseContent) GetStatus() CustomDomainStatusFilterEnum {
	if u == nil {
		return ""
	}
	return u.Status
}

func (u *UpdateCustomDomainResponseContent) GetType() CustomDomainTypeEnum {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UpdateCustomDomainResponseContent) GetVerification() *DomainVerification {
	if u == nil {
		return nil
	}
	return u.Verification
}

func (u *UpdateCustomDomainResponseContent) GetCustomClientIPHeader() *string {
	if u == nil {
		return nil
	}
	return u.CustomClientIPHeader
}

func (u *UpdateCustomDomainResponseContent) GetTLSPolicy() *string {
	if u == nil {
		return nil
	}
	return u.TLSPolicy
}

func (u *UpdateCustomDomainResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCustomDomainResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCustomDomainResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCustomDomainResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCustomDomainResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type VerifyCustomDomainResponseContent struct {
	// ID of the custom domain.
	CustomDomainID string `json:"custom_domain_id" url:"custom_domain_id"`
	// Domain name.
	Domain string `json:"domain" url:"domain"`
	// Whether this is a primary domain (true) or not (false).
	Primary bool                         `json:"primary" url:"primary"`
	Status  CustomDomainStatusFilterEnum `json:"status" url:"status"`
	Type    CustomDomainTypeEnum         `json:"type" url:"type"`
	// CNAME API key header.
	CnameAPIKey *string `json:"cname_api_key,omitempty" url:"cname_api_key,omitempty"`
	// Intermediate address.
	OriginDomainName *string             `json:"origin_domain_name,omitempty" url:"origin_domain_name,omitempty"`
	Verification     *DomainVerification `json:"verification,omitempty" url:"verification,omitempty"`
	// The HTTP header to fetch the client's IP address
	CustomClientIPHeader *string `json:"custom_client_ip_header,omitempty" url:"custom_client_ip_header,omitempty"`
	// The TLS version policy
	TLSPolicy *string `json:"tls_policy,omitempty" url:"tls_policy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerifyCustomDomainResponseContent) GetCustomDomainID() string {
	if v == nil {
		return ""
	}
	return v.CustomDomainID
}

func (v *VerifyCustomDomainResponseContent) GetDomain() string {
	if v == nil {
		return ""
	}
	return v.Domain
}

func (v *VerifyCustomDomainResponseContent) GetPrimary() bool {
	if v == nil {
		return false
	}
	return v.Primary
}

func (v *VerifyCustomDomainResponseContent) GetStatus() CustomDomainStatusFilterEnum {
	if v == nil {
		return ""
	}
	return v.Status
}

func (v *VerifyCustomDomainResponseContent) GetType() CustomDomainTypeEnum {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *VerifyCustomDomainResponseContent) GetCnameAPIKey() *string {
	if v == nil {
		return nil
	}
	return v.CnameAPIKey
}

func (v *VerifyCustomDomainResponseContent) GetOriginDomainName() *string {
	if v == nil {
		return nil
	}
	return v.OriginDomainName
}

func (v *VerifyCustomDomainResponseContent) GetVerification() *DomainVerification {
	if v == nil {
		return nil
	}
	return v.Verification
}

func (v *VerifyCustomDomainResponseContent) GetCustomClientIPHeader() *string {
	if v == nil {
		return nil
	}
	return v.CustomClientIPHeader
}

func (v *VerifyCustomDomainResponseContent) GetTLSPolicy() *string {
	if v == nil {
		return nil
	}
	return v.TLSPolicy
}

func (v *VerifyCustomDomainResponseContent) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerifyCustomDomainResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler VerifyCustomDomainResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerifyCustomDomainResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerifyCustomDomainResponseContent) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type UpdateCustomDomainRequestContent struct {
	TLSPolicy            *CustomDomainTLSPolicyEnum        `json:"tls_policy,omitempty" url:"-"`
	CustomClientIPHeader *CustomDomainCustomClientIPHeader `json:"custom_client_ip_header,omitempty" url:"-"`
}

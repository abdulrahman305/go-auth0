// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateUserRequestContent struct {
	// The user's email.
	Email *string `json:"email,omitempty" url:"-"`
	// The user's phone number (following the E.164 recommendation).
	PhoneNumber  *string       `json:"phone_number,omitempty" url:"-"`
	UserMetadata *UserMetadata `json:"user_metadata,omitempty" url:"-"`
	// Whether this user was blocked by an administrator (true) or not (false).
	Blocked *bool `json:"blocked,omitempty" url:"-"`
	// Whether this email address is verified (true) or unverified (false). User will receive a verification email after creation if `email_verified` is false or not specified
	EmailVerified *bool `json:"email_verified,omitempty" url:"-"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool        `json:"phone_verified,omitempty" url:"-"`
	AppMetadata   *AppMetadata `json:"app_metadata,omitempty" url:"-"`
	// The user's given name(s).
	GivenName *string `json:"given_name,omitempty" url:"-"`
	// The user's family name(s).
	FamilyName *string `json:"family_name,omitempty" url:"-"`
	// The user's full name.
	Name *string `json:"name,omitempty" url:"-"`
	// The user's nickname.
	Nickname *string `json:"nickname,omitempty" url:"-"`
	// A URI pointing to the user's picture.
	Picture *string `json:"picture,omitempty" url:"-"`
	// The external user's id provided by the identity provider.
	UserID *string `json:"user_id,omitempty" url:"-"`
	// Name of the connection this user should be created in.
	Connection string `json:"connection" url:"-"`
	// Initial password for this user. Only valid for auth0 connection strategy.
	Password *string `json:"password,omitempty" url:"-"`
	// Whether the user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.
	VerifyEmail *bool `json:"verify_email,omitempty" url:"-"`
	// The user's username. Only valid if the connection requires a username.
	Username *string `json:"username,omitempty" url:"-"`
}

type GetUserRequestParameters struct {
	// Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
}

type ListUsersRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Field to sort by. Use <code>field:order</code> where order is <code>1</code> for ascending and <code>-1</code> for descending. e.g. <code>created_at:1</code>
	Sort *string `json:"-" url:"sort,omitempty"`
	// Connection filter. Only applies when using <code>search_engine=v1</code>. To filter by connection with <code>search_engine=v2|v3</code>, use <code>q=identities.connection:"connection_name"</code>
	Connection *string `json:"-" url:"connection,omitempty"`
	// Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
	// Query in <a target='_new' href ='http://www.lucenetutorial.com/lucene-query-syntax.html'>Lucene query string syntax</a>. Some query types cannot be used on metadata fields, for details see <a href='https://auth0.com/docs/users/search/v3/query-syntax#searchable-fields'>Searchable Fields</a>.
	Q *string `json:"-" url:"q,omitempty"`
	// The version of the search engine
	SearchEngine *SearchEngineVersionsEnum `json:"-" url:"search_engine,omitempty"`
	// If true (default), results are returned in a deterministic order. If false, results may be returned in a non-deterministic order, which can enhance performance for complex queries targeting a small number of users. Set to false only when consistent ordering and pagination is not required.
	PrimaryOrder *bool `json:"-" url:"primary_order,omitempty"`
}

type ListUsersByEmailRequestParameters struct {
	// Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false). Defaults to true.
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
	// Email address to search for (case-sensitive).
	Email string `json:"-" url:"email"`
}

type RevokeUserAccessRequestContent struct {
	// ID of the session to revoke.
	SessionID *string `json:"session_id,omitempty" url:"-"`
	// Whether to preserve the refresh tokens associated with the session.
	PreserveRefreshTokens *bool `json:"preserve_refresh_tokens,omitempty" url:"-"`
}

type CreateUserResponseContent struct {
	// ID of the user which can be used when interacting with other APIs.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether this email address is verified (true) or unverified (false).
	EmailVerified *bool `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	// Username of this user.
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	// Phone number for this user. Follows the <a href="https://en.wikipedia.org/wiki/E.164">E.164 recommendation</a>.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool           `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	CreatedAt     *UserDateSchema `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt     *UserDateSchema `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Array of user identity objects when accounts are linked.
	Identities   []*UserIdentitySchema  `json:"identities,omitempty" url:"identities,omitempty"`
	AppMetadata  *UserAppMetadataSchema `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadataSchema    `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// URL to picture, photo, or avatar of this user.
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Preferred nickname or alias of this user.
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// List of multi-factor authentication providers with which this user has enrolled.
	Multifactor []string `json:"multifactor,omitempty" url:"multifactor,omitempty"`
	// Last IP address from which this user logged in.
	LastIP    *string         `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	LastLogin *UserDateSchema `json:"last_login,omitempty" url:"last_login,omitempty"`
	// Total number of logins this user has performed.
	LoginsCount *int `json:"logins_count,omitempty" url:"logins_count,omitempty"`
	// Whether this user was blocked by an administrator (true) or is not (false).
	Blocked *bool `json:"blocked,omitempty" url:"blocked,omitempty"`
	// Given name/first name/forename of this user.
	GivenName *string `json:"given_name,omitempty" url:"given_name,omitempty"`
	// Family name/last name/surname of this user.
	FamilyName *string `json:"family_name,omitempty" url:"family_name,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateUserResponseContent) GetUserID() *string {
	if c == nil {
		return nil
	}
	return c.UserID
}

func (c *CreateUserResponseContent) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CreateUserResponseContent) GetEmailVerified() *bool {
	if c == nil {
		return nil
	}
	return c.EmailVerified
}

func (c *CreateUserResponseContent) GetUsername() *string {
	if c == nil {
		return nil
	}
	return c.Username
}

func (c *CreateUserResponseContent) GetPhoneNumber() *string {
	if c == nil {
		return nil
	}
	return c.PhoneNumber
}

func (c *CreateUserResponseContent) GetPhoneVerified() *bool {
	if c == nil {
		return nil
	}
	return c.PhoneVerified
}

func (c *CreateUserResponseContent) GetCreatedAt() *UserDateSchema {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateUserResponseContent) GetUpdatedAt() *UserDateSchema {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CreateUserResponseContent) GetIdentities() []*UserIdentitySchema {
	if c == nil {
		return nil
	}
	return c.Identities
}

func (c *CreateUserResponseContent) GetAppMetadata() *UserAppMetadataSchema {
	if c == nil {
		return nil
	}
	return c.AppMetadata
}

func (c *CreateUserResponseContent) GetUserMetadata() *UserMetadataSchema {
	if c == nil {
		return nil
	}
	return c.UserMetadata
}

func (c *CreateUserResponseContent) GetPicture() *string {
	if c == nil {
		return nil
	}
	return c.Picture
}

func (c *CreateUserResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateUserResponseContent) GetNickname() *string {
	if c == nil {
		return nil
	}
	return c.Nickname
}

func (c *CreateUserResponseContent) GetMultifactor() []string {
	if c == nil {
		return nil
	}
	return c.Multifactor
}

func (c *CreateUserResponseContent) GetLastIP() *string {
	if c == nil {
		return nil
	}
	return c.LastIP
}

func (c *CreateUserResponseContent) GetLastLogin() *UserDateSchema {
	if c == nil {
		return nil
	}
	return c.LastLogin
}

func (c *CreateUserResponseContent) GetLoginsCount() *int {
	if c == nil {
		return nil
	}
	return c.LoginsCount
}

func (c *CreateUserResponseContent) GetBlocked() *bool {
	if c == nil {
		return nil
	}
	return c.Blocked
}

func (c *CreateUserResponseContent) GetGivenName() *string {
	if c == nil {
		return nil
	}
	return c.GivenName
}

func (c *CreateUserResponseContent) GetFamilyName() *string {
	if c == nil {
		return nil
	}
	return c.FamilyName
}

func (c *CreateUserResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateUserResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateUserResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateUserResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateUserResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateUserResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetUserResponseContent struct {
	// ID of the user which can be used when interacting with other APIs.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether this email address is verified (true) or unverified (false).
	EmailVerified *bool `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	// Username of this user.
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	// Phone number for this user. Follows the <a href="https://en.wikipedia.org/wiki/E.164">E.164 recommendation</a>.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool           `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	CreatedAt     *UserDateSchema `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt     *UserDateSchema `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Array of user identity objects when accounts are linked.
	Identities   []*UserIdentitySchema  `json:"identities,omitempty" url:"identities,omitempty"`
	AppMetadata  *UserAppMetadataSchema `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadataSchema    `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// URL to picture, photo, or avatar of this user.
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Preferred nickname or alias of this user.
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// List of multi-factor authentication providers with which this user has enrolled.
	Multifactor []string `json:"multifactor,omitempty" url:"multifactor,omitempty"`
	// Last IP address from which this user logged in.
	LastIP    *string         `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	LastLogin *UserDateSchema `json:"last_login,omitempty" url:"last_login,omitempty"`
	// Total number of logins this user has performed.
	LoginsCount *int `json:"logins_count,omitempty" url:"logins_count,omitempty"`
	// Whether this user was blocked by an administrator (true) or is not (false).
	Blocked *bool `json:"blocked,omitempty" url:"blocked,omitempty"`
	// Given name/first name/forename of this user.
	GivenName *string `json:"given_name,omitempty" url:"given_name,omitempty"`
	// Family name/last name/surname of this user.
	FamilyName *string `json:"family_name,omitempty" url:"family_name,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetUserResponseContent) GetUserID() *string {
	if g == nil {
		return nil
	}
	return g.UserID
}

func (g *GetUserResponseContent) GetEmail() *string {
	if g == nil {
		return nil
	}
	return g.Email
}

func (g *GetUserResponseContent) GetEmailVerified() *bool {
	if g == nil {
		return nil
	}
	return g.EmailVerified
}

func (g *GetUserResponseContent) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

func (g *GetUserResponseContent) GetPhoneNumber() *string {
	if g == nil {
		return nil
	}
	return g.PhoneNumber
}

func (g *GetUserResponseContent) GetPhoneVerified() *bool {
	if g == nil {
		return nil
	}
	return g.PhoneVerified
}

func (g *GetUserResponseContent) GetCreatedAt() *UserDateSchema {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetUserResponseContent) GetUpdatedAt() *UserDateSchema {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetUserResponseContent) GetIdentities() []*UserIdentitySchema {
	if g == nil {
		return nil
	}
	return g.Identities
}

func (g *GetUserResponseContent) GetAppMetadata() *UserAppMetadataSchema {
	if g == nil {
		return nil
	}
	return g.AppMetadata
}

func (g *GetUserResponseContent) GetUserMetadata() *UserMetadataSchema {
	if g == nil {
		return nil
	}
	return g.UserMetadata
}

func (g *GetUserResponseContent) GetPicture() *string {
	if g == nil {
		return nil
	}
	return g.Picture
}

func (g *GetUserResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetUserResponseContent) GetNickname() *string {
	if g == nil {
		return nil
	}
	return g.Nickname
}

func (g *GetUserResponseContent) GetMultifactor() []string {
	if g == nil {
		return nil
	}
	return g.Multifactor
}

func (g *GetUserResponseContent) GetLastIP() *string {
	if g == nil {
		return nil
	}
	return g.LastIP
}

func (g *GetUserResponseContent) GetLastLogin() *UserDateSchema {
	if g == nil {
		return nil
	}
	return g.LastLogin
}

func (g *GetUserResponseContent) GetLoginsCount() *int {
	if g == nil {
		return nil
	}
	return g.LoginsCount
}

func (g *GetUserResponseContent) GetBlocked() *bool {
	if g == nil {
		return nil
	}
	return g.Blocked
}

func (g *GetUserResponseContent) GetGivenName() *string {
	if g == nil {
		return nil
	}
	return g.GivenName
}

func (g *GetUserResponseContent) GetFamilyName() *string {
	if g == nil {
		return nil
	}
	return g.FamilyName
}

func (g *GetUserResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetUserResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetUserResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetUserResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetUserResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetUserResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListUsersOffsetPaginatedResponseContent struct {
	Start  *float64              `json:"start,omitempty" url:"start,omitempty"`
	Limit  *float64              `json:"limit,omitempty" url:"limit,omitempty"`
	Length *float64              `json:"length,omitempty" url:"length,omitempty"`
	Total  *float64              `json:"total,omitempty" url:"total,omitempty"`
	Users  []*UserResponseSchema `json:"users,omitempty" url:"users,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUsersOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListUsersOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUsersOffsetPaginatedResponseContent) GetLength() *float64 {
	if l == nil {
		return nil
	}
	return l.Length
}

func (l *ListUsersOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListUsersOffsetPaginatedResponseContent) GetUsers() []*UserResponseSchema {
	if l == nil {
		return nil
	}
	return l.Users
}

func (l *ListUsersOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type RegenerateUsersRecoveryCodeResponseContent struct {
	// New account recovery code.
	RecoveryCode *string `json:"recovery_code,omitempty" url:"recovery_code,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (r *RegenerateUsersRecoveryCodeResponseContent) GetRecoveryCode() *string {
	if r == nil {
		return nil
	}
	return r.RecoveryCode
}

func (r *RegenerateUsersRecoveryCodeResponseContent) GetExtraProperties() map[string]interface{} {
	return r.ExtraProperties
}

func (r *RegenerateUsersRecoveryCodeResponseContent) UnmarshalJSON(data []byte) error {
	type embed RegenerateUsersRecoveryCodeResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RegenerateUsersRecoveryCodeResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.ExtraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegenerateUsersRecoveryCodeResponseContent) MarshalJSON() ([]byte, error) {
	type embed RegenerateUsersRecoveryCodeResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, r.ExtraProperties)
}

func (r *RegenerateUsersRecoveryCodeResponseContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SearchEngineVersionsEnum string

const (
	SearchEngineVersionsEnumV1 SearchEngineVersionsEnum = "v1"
	SearchEngineVersionsEnumV2 SearchEngineVersionsEnum = "v2"
	SearchEngineVersionsEnumV3 SearchEngineVersionsEnum = "v3"
)

func NewSearchEngineVersionsEnumFromString(s string) (SearchEngineVersionsEnum, error) {
	switch s {
	case "v1":
		return SearchEngineVersionsEnumV1, nil
	case "v2":
		return SearchEngineVersionsEnumV2, nil
	case "v3":
		return SearchEngineVersionsEnumV3, nil
	}
	var t SearchEngineVersionsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchEngineVersionsEnum) Ptr() *SearchEngineVersionsEnum {
	return &s
}

type UpdateUserResponseContent struct {
	// ID of the user which can be used when interacting with other APIs.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether this email address is verified (true) or unverified (false).
	EmailVerified *bool `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	// Username of this user.
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	// Phone number for this user. Follows the <a href="https://en.wikipedia.org/wiki/E.164">E.164 recommendation</a>.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool           `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	CreatedAt     *UserDateSchema `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt     *UserDateSchema `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Array of user identity objects when accounts are linked.
	Identities   []*UserIdentitySchema  `json:"identities,omitempty" url:"identities,omitempty"`
	AppMetadata  *UserAppMetadataSchema `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadataSchema    `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// URL to picture, photo, or avatar of this user.
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Preferred nickname or alias of this user.
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// List of multi-factor authentication providers with which this user has enrolled.
	Multifactor []string `json:"multifactor,omitempty" url:"multifactor,omitempty"`
	// Last IP address from which this user logged in.
	LastIP    *string         `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	LastLogin *UserDateSchema `json:"last_login,omitempty" url:"last_login,omitempty"`
	// Total number of logins this user has performed.
	LoginsCount *int `json:"logins_count,omitempty" url:"logins_count,omitempty"`
	// Whether this user was blocked by an administrator (true) or is not (false).
	Blocked *bool `json:"blocked,omitempty" url:"blocked,omitempty"`
	// Given name/first name/forename of this user.
	GivenName *string `json:"given_name,omitempty" url:"given_name,omitempty"`
	// Family name/last name/surname of this user.
	FamilyName *string `json:"family_name,omitempty" url:"family_name,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateUserResponseContent) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *UpdateUserResponseContent) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateUserResponseContent) GetEmailVerified() *bool {
	if u == nil {
		return nil
	}
	return u.EmailVerified
}

func (u *UpdateUserResponseContent) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *UpdateUserResponseContent) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UpdateUserResponseContent) GetPhoneVerified() *bool {
	if u == nil {
		return nil
	}
	return u.PhoneVerified
}

func (u *UpdateUserResponseContent) GetCreatedAt() *UserDateSchema {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UpdateUserResponseContent) GetUpdatedAt() *UserDateSchema {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UpdateUserResponseContent) GetIdentities() []*UserIdentitySchema {
	if u == nil {
		return nil
	}
	return u.Identities
}

func (u *UpdateUserResponseContent) GetAppMetadata() *UserAppMetadataSchema {
	if u == nil {
		return nil
	}
	return u.AppMetadata
}

func (u *UpdateUserResponseContent) GetUserMetadata() *UserMetadataSchema {
	if u == nil {
		return nil
	}
	return u.UserMetadata
}

func (u *UpdateUserResponseContent) GetPicture() *string {
	if u == nil {
		return nil
	}
	return u.Picture
}

func (u *UpdateUserResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateUserResponseContent) GetNickname() *string {
	if u == nil {
		return nil
	}
	return u.Nickname
}

func (u *UpdateUserResponseContent) GetMultifactor() []string {
	if u == nil {
		return nil
	}
	return u.Multifactor
}

func (u *UpdateUserResponseContent) GetLastIP() *string {
	if u == nil {
		return nil
	}
	return u.LastIP
}

func (u *UpdateUserResponseContent) GetLastLogin() *UserDateSchema {
	if u == nil {
		return nil
	}
	return u.LastLogin
}

func (u *UpdateUserResponseContent) GetLoginsCount() *int {
	if u == nil {
		return nil
	}
	return u.LoginsCount
}

func (u *UpdateUserResponseContent) GetBlocked() *bool {
	if u == nil {
		return nil
	}
	return u.Blocked
}

func (u *UpdateUserResponseContent) GetGivenName() *string {
	if u == nil {
		return nil
	}
	return u.GivenName
}

func (u *UpdateUserResponseContent) GetFamilyName() *string {
	if u == nil {
		return nil
	}
	return u.FamilyName
}

func (u *UpdateUserResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateUserResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateUserResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateUserResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUserResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateUserResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UpdateUserResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// User metadata to which this user has read-only access.
type UserAppMetadataSchema = map[string]interface{}

type UserDateSchema struct {
	// Date and time when this user was created (ISO_8601 format).
	String string
	// Date and time when this user was created (ISO_8601 format).
	StringUnknownMap map[string]interface{}

	typ string
}

func (u *UserDateSchema) GetString() string {
	if u == nil {
		return ""
	}
	return u.String
}

func (u *UserDateSchema) GetStringUnknownMap() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.StringUnknownMap
}

func (u *UserDateSchema) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typ = "String"
		u.String = valueString
		return nil
	}
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		u.typ = "StringUnknownMap"
		u.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserDateSchema) MarshalJSON() ([]byte, error) {
	if u.typ == "String" || u.String != "" {
		return json.Marshal(u.String)
	}
	if u.typ == "StringUnknownMap" || u.StringUnknownMap != nil {
		return json.Marshal(u.StringUnknownMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UserDateSchemaVisitor interface {
	VisitString(string) error
	VisitStringUnknownMap(map[string]interface{}) error
}

func (u *UserDateSchema) Accept(visitor UserDateSchemaVisitor) error {
	if u.typ == "String" || u.String != "" {
		return visitor.VisitString(u.String)
	}
	if u.typ == "StringUnknownMap" || u.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(u.StringUnknownMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UserIdentitySchema struct {
	// Name of the connection containing this identity.
	Connection *string `json:"connection,omitempty" url:"connection,omitempty"`
	// Unique identifier of the user user for this identity.
	UserID   *string                   `json:"user_id,omitempty" url:"user_id,omitempty"`
	Provider *UserIdentityProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`
	// Whether this identity is from a social provider (true) or not (false).
	IsSocial *bool `json:"isSocial,omitempty" url:"isSocial,omitempty"`
	// IDP access token returned only if scope read:user_idp_tokens is defined.
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// IDP access token secret returned only if scope read:user_idp_tokens is defined.
	AccessTokenSecret *string `json:"access_token_secret,omitempty" url:"access_token_secret,omitempty"`
	// IDP refresh token returned only if scope read:user_idp_tokens is defined.
	RefreshToken *string          `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`
	ProfileData  *UserProfileData `json:"profileData,omitempty" url:"profileData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserIdentitySchema) GetConnection() *string {
	if u == nil {
		return nil
	}
	return u.Connection
}

func (u *UserIdentitySchema) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *UserIdentitySchema) GetProvider() *UserIdentityProviderEnum {
	if u == nil {
		return nil
	}
	return u.Provider
}

func (u *UserIdentitySchema) GetIsSocial() *bool {
	if u == nil {
		return nil
	}
	return u.IsSocial
}

func (u *UserIdentitySchema) GetAccessToken() *string {
	if u == nil {
		return nil
	}
	return u.AccessToken
}

func (u *UserIdentitySchema) GetAccessTokenSecret() *string {
	if u == nil {
		return nil
	}
	return u.AccessTokenSecret
}

func (u *UserIdentitySchema) GetRefreshToken() *string {
	if u == nil {
		return nil
	}
	return u.RefreshToken
}

func (u *UserIdentitySchema) GetProfileData() *UserProfileData {
	if u == nil {
		return nil
	}
	return u.ProfileData
}

func (u *UserIdentitySchema) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserIdentitySchema) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitySchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitySchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitySchema) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// User metadata to which this user has read/write access.
type UserMetadataSchema = map[string]interface{}

type UserResponseSchema struct {
	// ID of the user which can be used when interacting with other APIs.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether this email address is verified (true) or unverified (false).
	EmailVerified *bool `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	// Username of this user.
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	// Phone number for this user. Follows the <a href="https://en.wikipedia.org/wiki/E.164">E.164 recommendation</a>.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool           `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	CreatedAt     *UserDateSchema `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt     *UserDateSchema `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Array of user identity objects when accounts are linked.
	Identities   []*UserIdentitySchema  `json:"identities,omitempty" url:"identities,omitempty"`
	AppMetadata  *UserAppMetadataSchema `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata *UserMetadataSchema    `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	// URL to picture, photo, or avatar of this user.
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Preferred nickname or alias of this user.
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// List of multi-factor authentication providers with which this user has enrolled.
	Multifactor []string `json:"multifactor,omitempty" url:"multifactor,omitempty"`
	// Last IP address from which this user logged in.
	LastIP    *string         `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	LastLogin *UserDateSchema `json:"last_login,omitempty" url:"last_login,omitempty"`
	// Total number of logins this user has performed.
	LoginsCount *int `json:"logins_count,omitempty" url:"logins_count,omitempty"`
	// Whether this user was blocked by an administrator (true) or is not (false).
	Blocked *bool `json:"blocked,omitempty" url:"blocked,omitempty"`
	// Given name/first name/forename of this user.
	GivenName *string `json:"given_name,omitempty" url:"given_name,omitempty"`
	// Family name/last name/surname of this user.
	FamilyName *string `json:"family_name,omitempty" url:"family_name,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UserResponseSchema) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *UserResponseSchema) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserResponseSchema) GetEmailVerified() *bool {
	if u == nil {
		return nil
	}
	return u.EmailVerified
}

func (u *UserResponseSchema) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *UserResponseSchema) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UserResponseSchema) GetPhoneVerified() *bool {
	if u == nil {
		return nil
	}
	return u.PhoneVerified
}

func (u *UserResponseSchema) GetCreatedAt() *UserDateSchema {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *UserResponseSchema) GetUpdatedAt() *UserDateSchema {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UserResponseSchema) GetIdentities() []*UserIdentitySchema {
	if u == nil {
		return nil
	}
	return u.Identities
}

func (u *UserResponseSchema) GetAppMetadata() *UserAppMetadataSchema {
	if u == nil {
		return nil
	}
	return u.AppMetadata
}

func (u *UserResponseSchema) GetUserMetadata() *UserMetadataSchema {
	if u == nil {
		return nil
	}
	return u.UserMetadata
}

func (u *UserResponseSchema) GetPicture() *string {
	if u == nil {
		return nil
	}
	return u.Picture
}

func (u *UserResponseSchema) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UserResponseSchema) GetNickname() *string {
	if u == nil {
		return nil
	}
	return u.Nickname
}

func (u *UserResponseSchema) GetMultifactor() []string {
	if u == nil {
		return nil
	}
	return u.Multifactor
}

func (u *UserResponseSchema) GetLastIP() *string {
	if u == nil {
		return nil
	}
	return u.LastIP
}

func (u *UserResponseSchema) GetLastLogin() *UserDateSchema {
	if u == nil {
		return nil
	}
	return u.LastLogin
}

func (u *UserResponseSchema) GetLoginsCount() *int {
	if u == nil {
		return nil
	}
	return u.LoginsCount
}

func (u *UserResponseSchema) GetBlocked() *bool {
	if u == nil {
		return nil
	}
	return u.Blocked
}

func (u *UserResponseSchema) GetGivenName() *string {
	if u == nil {
		return nil
	}
	return u.GivenName
}

func (u *UserResponseSchema) GetFamilyName() *string {
	if u == nil {
		return nil
	}
	return u.FamilyName
}

func (u *UserResponseSchema) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UserResponseSchema) UnmarshalJSON(data []byte) error {
	type embed UserResponseSchema
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserResponseSchema(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserResponseSchema) MarshalJSON() ([]byte, error) {
	type embed UserResponseSchema
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UserResponseSchema) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateUserRequestContent struct {
	// Whether this user was blocked by an administrator (true) or not (false).
	Blocked *bool `json:"blocked,omitempty" url:"-"`
	// Whether this email address is verified (true) or unverified (false). If set to false the user will not receive a verification email unless `verify_email` is set to true.
	EmailVerified *bool `json:"email_verified,omitempty" url:"-"`
	// Email address of this user.
	Email *string `json:"email,omitempty" url:"-"`
	// The user's phone number (following the E.164 recommendation).
	PhoneNumber *string `json:"phone_number,omitempty" url:"-"`
	// Whether this phone number has been verified (true) or not (false).
	PhoneVerified *bool         `json:"phone_verified,omitempty" url:"-"`
	UserMetadata  *UserMetadata `json:"user_metadata,omitempty" url:"-"`
	AppMetadata   *AppMetadata  `json:"app_metadata,omitempty" url:"-"`
	// Given name/first name/forename of this user.
	GivenName *string `json:"given_name,omitempty" url:"-"`
	// Family name/last name/surname of this user.
	FamilyName *string `json:"family_name,omitempty" url:"-"`
	// Name of this user.
	Name *string `json:"name,omitempty" url:"-"`
	// Preferred nickname or alias of this user.
	Nickname *string `json:"nickname,omitempty" url:"-"`
	// URL to picture, photo, or avatar of this user.
	Picture *string `json:"picture,omitempty" url:"-"`
	// Whether this user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.
	VerifyEmail *bool `json:"verify_email,omitempty" url:"-"`
	// Whether this user will receive a text after changing the phone number (true) or no text (false). Only valid when changing phone number for SMS connections.
	VerifyPhoneNumber *bool `json:"verify_phone_number,omitempty" url:"-"`
	// New password for this user. Only valid for database connections.
	Password *string `json:"password,omitempty" url:"-"`
	// Name of the connection to target for this user update.
	Connection *string `json:"connection,omitempty" url:"-"`
	// Auth0 client ID. Only valid when updating email address.
	ClientID *string `json:"client_id,omitempty" url:"-"`
	// The user's username. Only valid if the connection requires a username.
	Username *string `json:"username,omitempty" url:"-"`
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateResourceServerRequestContent struct {
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name *string `json:"name,omitempty" url:"-"`
	// Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.
	Identifier string `json:"identifier" url:"-"`
	// List of permissions (scopes) that this API uses.
	Scopes     []*ResourceServerScope `json:"scopes,omitempty" url:"-"`
	SigningAlg *SigningAlgorithmEnum  `json:"signing_alg,omitempty" url:"-"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret *string `json:"signing_secret,omitempty" url:"-"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess *bool `json:"allow_offline_access,omitempty" url:"-"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime *int                                  `json:"token_lifetime,omitempty" url:"-"`
	TokenDialect  *ResourceServerTokenDialectSchemaEnum `json:"token_dialect,omitempty" url:"-"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients *bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty" url:"-"`
	// Whether to enforce authorization policies (true) or to ignore them (false).
	EnforcePolicies      *bool                            `json:"enforce_policies,omitempty" url:"-"`
	TokenEncryption      *ResourceServerTokenEncryption   `json:"token_encryption,omitempty" url:"-"`
	ConsentPolicy        *ResourceServerConsentPolicyEnum `json:"consent_policy,omitempty" url:"-"`
	AuthorizationDetails []interface{}                    `json:"authorization_details,omitempty" url:"-"`
	ProofOfPossession    *ResourceServerProofOfPossession `json:"proof_of_possession,omitempty" url:"-"`
}

type GetResourceServerRequestParameters struct {
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
}

type ListResourceServerRequestParameters struct {
	// An optional filter on the resource server identifier. Must be URL encoded and may be specified multiple times (max 10).<br /><b>e.g.</b> <i>../resource-servers?identifiers=id1&identifiers=id2</i>
	Identifiers []*string `json:"-" url:"identifiers,omitempty"`
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
}

type CreateResourceServerResponseContent struct {
	// ID of the API (resource server).
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this is an Auth0 system API (true) or a custom API (false).
	IsSystem *bool `json:"is_system,omitempty" url:"is_system,omitempty"`
	// Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// List of permissions (scopes) that this API uses.
	Scopes     []*ResourceServerScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	SigningAlg *SigningAlgorithmEnum  `json:"signing_alg,omitempty" url:"signing_alg,omitempty"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret *string `json:"signing_secret,omitempty" url:"signing_secret,omitempty"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess *bool `json:"allow_offline_access,omitempty" url:"allow_offline_access,omitempty"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients *bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty" url:"skip_consent_for_verifiable_first_party_clients,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime *int `json:"token_lifetime,omitempty" url:"token_lifetime,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value.
	TokenLifetimeForWeb *int `json:"token_lifetime_for_web,omitempty" url:"token_lifetime_for_web,omitempty"`
	// Whether authorization polices are enforced (true) or unenforced (false).
	EnforcePolicies      *bool                                   `json:"enforce_policies,omitempty" url:"enforce_policies,omitempty"`
	TokenDialect         *ResourceServerTokenDialectResponseEnum `json:"token_dialect,omitempty" url:"token_dialect,omitempty"`
	TokenEncryption      *ResourceServerTokenEncryption          `json:"token_encryption,omitempty" url:"token_encryption,omitempty"`
	ConsentPolicy        *ResourceServerConsentPolicyEnum        `json:"consent_policy,omitempty" url:"consent_policy,omitempty"`
	AuthorizationDetails []interface{}                           `json:"authorization_details,omitempty" url:"authorization_details,omitempty"`
	ProofOfPossession    *ResourceServerProofOfPossession        `json:"proof_of_possession,omitempty" url:"proof_of_possession,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateResourceServerResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateResourceServerResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateResourceServerResponseContent) GetIsSystem() *bool {
	if c == nil {
		return nil
	}
	return c.IsSystem
}

func (c *CreateResourceServerResponseContent) GetIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.Identifier
}

func (c *CreateResourceServerResponseContent) GetScopes() []*ResourceServerScope {
	if c == nil {
		return nil
	}
	return c.Scopes
}

func (c *CreateResourceServerResponseContent) GetSigningAlg() *SigningAlgorithmEnum {
	if c == nil {
		return nil
	}
	return c.SigningAlg
}

func (c *CreateResourceServerResponseContent) GetSigningSecret() *string {
	if c == nil {
		return nil
	}
	return c.SigningSecret
}

func (c *CreateResourceServerResponseContent) GetAllowOfflineAccess() *bool {
	if c == nil {
		return nil
	}
	return c.AllowOfflineAccess
}

func (c *CreateResourceServerResponseContent) GetSkipConsentForVerifiableFirstPartyClients() *bool {
	if c == nil {
		return nil
	}
	return c.SkipConsentForVerifiableFirstPartyClients
}

func (c *CreateResourceServerResponseContent) GetTokenLifetime() *int {
	if c == nil {
		return nil
	}
	return c.TokenLifetime
}

func (c *CreateResourceServerResponseContent) GetTokenLifetimeForWeb() *int {
	if c == nil {
		return nil
	}
	return c.TokenLifetimeForWeb
}

func (c *CreateResourceServerResponseContent) GetEnforcePolicies() *bool {
	if c == nil {
		return nil
	}
	return c.EnforcePolicies
}

func (c *CreateResourceServerResponseContent) GetTokenDialect() *ResourceServerTokenDialectResponseEnum {
	if c == nil {
		return nil
	}
	return c.TokenDialect
}

func (c *CreateResourceServerResponseContent) GetTokenEncryption() *ResourceServerTokenEncryption {
	if c == nil {
		return nil
	}
	return c.TokenEncryption
}

func (c *CreateResourceServerResponseContent) GetConsentPolicy() *ResourceServerConsentPolicyEnum {
	if c == nil {
		return nil
	}
	return c.ConsentPolicy
}

func (c *CreateResourceServerResponseContent) GetAuthorizationDetails() []interface{} {
	if c == nil {
		return nil
	}
	return c.AuthorizationDetails
}

func (c *CreateResourceServerResponseContent) GetProofOfPossession() *ResourceServerProofOfPossession {
	if c == nil {
		return nil
	}
	return c.ProofOfPossession
}

func (c *CreateResourceServerResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateResourceServerResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateResourceServerResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateResourceServerResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateResourceServerResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetResourceServerResponseContent struct {
	// ID of the API (resource server).
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this is an Auth0 system API (true) or a custom API (false).
	IsSystem *bool `json:"is_system,omitempty" url:"is_system,omitempty"`
	// Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// List of permissions (scopes) that this API uses.
	Scopes     []*ResourceServerScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	SigningAlg *SigningAlgorithmEnum  `json:"signing_alg,omitempty" url:"signing_alg,omitempty"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret *string `json:"signing_secret,omitempty" url:"signing_secret,omitempty"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess *bool `json:"allow_offline_access,omitempty" url:"allow_offline_access,omitempty"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients *bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty" url:"skip_consent_for_verifiable_first_party_clients,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime *int `json:"token_lifetime,omitempty" url:"token_lifetime,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value.
	TokenLifetimeForWeb *int `json:"token_lifetime_for_web,omitempty" url:"token_lifetime_for_web,omitempty"`
	// Whether authorization polices are enforced (true) or unenforced (false).
	EnforcePolicies      *bool                                   `json:"enforce_policies,omitempty" url:"enforce_policies,omitempty"`
	TokenDialect         *ResourceServerTokenDialectResponseEnum `json:"token_dialect,omitempty" url:"token_dialect,omitempty"`
	TokenEncryption      *ResourceServerTokenEncryption          `json:"token_encryption,omitempty" url:"token_encryption,omitempty"`
	ConsentPolicy        *ResourceServerConsentPolicyEnum        `json:"consent_policy,omitempty" url:"consent_policy,omitempty"`
	AuthorizationDetails []interface{}                           `json:"authorization_details,omitempty" url:"authorization_details,omitempty"`
	ProofOfPossession    *ResourceServerProofOfPossession        `json:"proof_of_possession,omitempty" url:"proof_of_possession,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetResourceServerResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetResourceServerResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetResourceServerResponseContent) GetIsSystem() *bool {
	if g == nil {
		return nil
	}
	return g.IsSystem
}

func (g *GetResourceServerResponseContent) GetIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.Identifier
}

func (g *GetResourceServerResponseContent) GetScopes() []*ResourceServerScope {
	if g == nil {
		return nil
	}
	return g.Scopes
}

func (g *GetResourceServerResponseContent) GetSigningAlg() *SigningAlgorithmEnum {
	if g == nil {
		return nil
	}
	return g.SigningAlg
}

func (g *GetResourceServerResponseContent) GetSigningSecret() *string {
	if g == nil {
		return nil
	}
	return g.SigningSecret
}

func (g *GetResourceServerResponseContent) GetAllowOfflineAccess() *bool {
	if g == nil {
		return nil
	}
	return g.AllowOfflineAccess
}

func (g *GetResourceServerResponseContent) GetSkipConsentForVerifiableFirstPartyClients() *bool {
	if g == nil {
		return nil
	}
	return g.SkipConsentForVerifiableFirstPartyClients
}

func (g *GetResourceServerResponseContent) GetTokenLifetime() *int {
	if g == nil {
		return nil
	}
	return g.TokenLifetime
}

func (g *GetResourceServerResponseContent) GetTokenLifetimeForWeb() *int {
	if g == nil {
		return nil
	}
	return g.TokenLifetimeForWeb
}

func (g *GetResourceServerResponseContent) GetEnforcePolicies() *bool {
	if g == nil {
		return nil
	}
	return g.EnforcePolicies
}

func (g *GetResourceServerResponseContent) GetTokenDialect() *ResourceServerTokenDialectResponseEnum {
	if g == nil {
		return nil
	}
	return g.TokenDialect
}

func (g *GetResourceServerResponseContent) GetTokenEncryption() *ResourceServerTokenEncryption {
	if g == nil {
		return nil
	}
	return g.TokenEncryption
}

func (g *GetResourceServerResponseContent) GetConsentPolicy() *ResourceServerConsentPolicyEnum {
	if g == nil {
		return nil
	}
	return g.ConsentPolicy
}

func (g *GetResourceServerResponseContent) GetAuthorizationDetails() []interface{} {
	if g == nil {
		return nil
	}
	return g.AuthorizationDetails
}

func (g *GetResourceServerResponseContent) GetProofOfPossession() *ResourceServerProofOfPossession {
	if g == nil {
		return nil
	}
	return g.ProofOfPossession
}

func (g *GetResourceServerResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetResourceServerResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetResourceServerResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetResourceServerResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetResourceServerResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListResourceServerOffsetPaginatedResponseContent struct {
	Start           *float64          `json:"start,omitempty" url:"start,omitempty"`
	Limit           *float64          `json:"limit,omitempty" url:"limit,omitempty"`
	Total           *float64          `json:"total,omitempty" url:"total,omitempty"`
	ResourceServers []*ResourceServer `json:"resource_servers,omitempty" url:"resource_servers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListResourceServerOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListResourceServerOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListResourceServerOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListResourceServerOffsetPaginatedResponseContent) GetResourceServers() []*ResourceServer {
	if l == nil {
		return nil
	}
	return l.ResourceServers
}

func (l *ListResourceServerOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListResourceServerOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListResourceServerOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListResourceServerOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListResourceServerOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ResourceServer struct {
	// ID of the API (resource server).
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this is an Auth0 system API (true) or a custom API (false).
	IsSystem *bool `json:"is_system,omitempty" url:"is_system,omitempty"`
	// Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// List of permissions (scopes) that this API uses.
	Scopes     []*ResourceServerScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	SigningAlg *SigningAlgorithmEnum  `json:"signing_alg,omitempty" url:"signing_alg,omitempty"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret *string `json:"signing_secret,omitempty" url:"signing_secret,omitempty"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess *bool `json:"allow_offline_access,omitempty" url:"allow_offline_access,omitempty"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients *bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty" url:"skip_consent_for_verifiable_first_party_clients,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime *int `json:"token_lifetime,omitempty" url:"token_lifetime,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value.
	TokenLifetimeForWeb *int `json:"token_lifetime_for_web,omitempty" url:"token_lifetime_for_web,omitempty"`
	// Whether authorization polices are enforced (true) or unenforced (false).
	EnforcePolicies      *bool                                   `json:"enforce_policies,omitempty" url:"enforce_policies,omitempty"`
	TokenDialect         *ResourceServerTokenDialectResponseEnum `json:"token_dialect,omitempty" url:"token_dialect,omitempty"`
	TokenEncryption      *ResourceServerTokenEncryption          `json:"token_encryption,omitempty" url:"token_encryption,omitempty"`
	ConsentPolicy        *ResourceServerConsentPolicyEnum        `json:"consent_policy,omitempty" url:"consent_policy,omitempty"`
	AuthorizationDetails []interface{}                           `json:"authorization_details,omitempty" url:"authorization_details,omitempty"`
	ProofOfPossession    *ResourceServerProofOfPossession        `json:"proof_of_possession,omitempty" url:"proof_of_possession,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceServer) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *ResourceServer) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *ResourceServer) GetIsSystem() *bool {
	if r == nil {
		return nil
	}
	return r.IsSystem
}

func (r *ResourceServer) GetIdentifier() *string {
	if r == nil {
		return nil
	}
	return r.Identifier
}

func (r *ResourceServer) GetScopes() []*ResourceServerScope {
	if r == nil {
		return nil
	}
	return r.Scopes
}

func (r *ResourceServer) GetSigningAlg() *SigningAlgorithmEnum {
	if r == nil {
		return nil
	}
	return r.SigningAlg
}

func (r *ResourceServer) GetSigningSecret() *string {
	if r == nil {
		return nil
	}
	return r.SigningSecret
}

func (r *ResourceServer) GetAllowOfflineAccess() *bool {
	if r == nil {
		return nil
	}
	return r.AllowOfflineAccess
}

func (r *ResourceServer) GetSkipConsentForVerifiableFirstPartyClients() *bool {
	if r == nil {
		return nil
	}
	return r.SkipConsentForVerifiableFirstPartyClients
}

func (r *ResourceServer) GetTokenLifetime() *int {
	if r == nil {
		return nil
	}
	return r.TokenLifetime
}

func (r *ResourceServer) GetTokenLifetimeForWeb() *int {
	if r == nil {
		return nil
	}
	return r.TokenLifetimeForWeb
}

func (r *ResourceServer) GetEnforcePolicies() *bool {
	if r == nil {
		return nil
	}
	return r.EnforcePolicies
}

func (r *ResourceServer) GetTokenDialect() *ResourceServerTokenDialectResponseEnum {
	if r == nil {
		return nil
	}
	return r.TokenDialect
}

func (r *ResourceServer) GetTokenEncryption() *ResourceServerTokenEncryption {
	if r == nil {
		return nil
	}
	return r.TokenEncryption
}

func (r *ResourceServer) GetConsentPolicy() *ResourceServerConsentPolicyEnum {
	if r == nil {
		return nil
	}
	return r.ConsentPolicy
}

func (r *ResourceServer) GetAuthorizationDetails() []interface{} {
	if r == nil {
		return nil
	}
	return r.AuthorizationDetails
}

func (r *ResourceServer) GetProofOfPossession() *ResourceServerProofOfPossession {
	if r == nil {
		return nil
	}
	return r.ProofOfPossession
}

func (r *ResourceServer) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceServer) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceServer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceServer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceServer) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResourceServerConsentPolicyEnum = *string

// Proof-of-Possession configuration for access tokens
type ResourceServerProofOfPossession struct {
	Mechanism ResourceServerProofOfPossessionMechanismEnum `json:"mechanism" url:"mechanism"`
	// Whether the use of Proof-of-Possession is required for the resource server
	Required bool `json:"required" url:"required"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceServerProofOfPossession) GetMechanism() ResourceServerProofOfPossessionMechanismEnum {
	if r == nil {
		return ""
	}
	return r.Mechanism
}

func (r *ResourceServerProofOfPossession) GetRequired() bool {
	if r == nil {
		return false
	}
	return r.Required
}

func (r *ResourceServerProofOfPossession) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceServerProofOfPossession) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceServerProofOfPossession
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceServerProofOfPossession(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceServerProofOfPossession) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Intended mechanism for Proof-of-Possession
type ResourceServerProofOfPossessionMechanismEnum string

const (
	ResourceServerProofOfPossessionMechanismEnumMtls ResourceServerProofOfPossessionMechanismEnum = "mtls"
	ResourceServerProofOfPossessionMechanismEnumDpop ResourceServerProofOfPossessionMechanismEnum = "dpop"
)

func NewResourceServerProofOfPossessionMechanismEnumFromString(s string) (ResourceServerProofOfPossessionMechanismEnum, error) {
	switch s {
	case "mtls":
		return ResourceServerProofOfPossessionMechanismEnumMtls, nil
	case "dpop":
		return ResourceServerProofOfPossessionMechanismEnumDpop, nil
	}
	var t ResourceServerProofOfPossessionMechanismEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResourceServerProofOfPossessionMechanismEnum) Ptr() *ResourceServerProofOfPossessionMechanismEnum {
	return &r
}

type ResourceServerScope struct {
	// Value of this scope.
	Value string `json:"value" url:"value"`
	// User-friendly description of this scope.
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceServerScope) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *ResourceServerScope) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *ResourceServerScope) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceServerScope) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceServerScope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceServerScope(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceServerScope) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Dialect of access tokens that should be issued. `access_token` is a JWT containing standard Auth0 claims; `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` and `rfc9068_profile_authz` additionally include RBAC permissions claims.
type ResourceServerTokenDialectResponseEnum string

const (
	ResourceServerTokenDialectResponseEnumAccessToken         ResourceServerTokenDialectResponseEnum = "access_token"
	ResourceServerTokenDialectResponseEnumAccessTokenAuthz    ResourceServerTokenDialectResponseEnum = "access_token_authz"
	ResourceServerTokenDialectResponseEnumRfc9068Profile      ResourceServerTokenDialectResponseEnum = "rfc9068_profile"
	ResourceServerTokenDialectResponseEnumRfc9068ProfileAuthz ResourceServerTokenDialectResponseEnum = "rfc9068_profile_authz"
)

func NewResourceServerTokenDialectResponseEnumFromString(s string) (ResourceServerTokenDialectResponseEnum, error) {
	switch s {
	case "access_token":
		return ResourceServerTokenDialectResponseEnumAccessToken, nil
	case "access_token_authz":
		return ResourceServerTokenDialectResponseEnumAccessTokenAuthz, nil
	case "rfc9068_profile":
		return ResourceServerTokenDialectResponseEnumRfc9068Profile, nil
	case "rfc9068_profile_authz":
		return ResourceServerTokenDialectResponseEnumRfc9068ProfileAuthz, nil
	}
	var t ResourceServerTokenDialectResponseEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResourceServerTokenDialectResponseEnum) Ptr() *ResourceServerTokenDialectResponseEnum {
	return &r
}

// Dialect of issued access token. `access_token` is a JWT containing standard Auth0 claims; `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` and `rfc9068_profile_authz` additionally include RBAC permissions claims.
type ResourceServerTokenDialectSchemaEnum string

const (
	ResourceServerTokenDialectSchemaEnumAccessToken         ResourceServerTokenDialectSchemaEnum = "access_token"
	ResourceServerTokenDialectSchemaEnumAccessTokenAuthz    ResourceServerTokenDialectSchemaEnum = "access_token_authz"
	ResourceServerTokenDialectSchemaEnumRfc9068Profile      ResourceServerTokenDialectSchemaEnum = "rfc9068_profile"
	ResourceServerTokenDialectSchemaEnumRfc9068ProfileAuthz ResourceServerTokenDialectSchemaEnum = "rfc9068_profile_authz"
)

func NewResourceServerTokenDialectSchemaEnumFromString(s string) (ResourceServerTokenDialectSchemaEnum, error) {
	switch s {
	case "access_token":
		return ResourceServerTokenDialectSchemaEnumAccessToken, nil
	case "access_token_authz":
		return ResourceServerTokenDialectSchemaEnumAccessTokenAuthz, nil
	case "rfc9068_profile":
		return ResourceServerTokenDialectSchemaEnumRfc9068Profile, nil
	case "rfc9068_profile_authz":
		return ResourceServerTokenDialectSchemaEnumRfc9068ProfileAuthz, nil
	}
	var t ResourceServerTokenDialectSchemaEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResourceServerTokenDialectSchemaEnum) Ptr() *ResourceServerTokenDialectSchemaEnum {
	return &r
}

type ResourceServerTokenEncryption struct {
	Format        ResourceServerTokenEncryptionFormatEnum `json:"format" url:"format"`
	EncryptionKey *ResourceServerTokenEncryptionKey       `json:"encryption_key" url:"encryption_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceServerTokenEncryption) GetEncryptionKey() *ResourceServerTokenEncryptionKey {
	if r == nil {
		return nil
	}
	return r.EncryptionKey
}

func (r *ResourceServerTokenEncryption) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceServerTokenEncryption) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceServerTokenEncryption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceServerTokenEncryption(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceServerTokenEncryption) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Algorithm used to encrypt the token.
type ResourceServerTokenEncryptionAlgorithmEnum string

const (
	ResourceServerTokenEncryptionAlgorithmEnumRsaOaep256 ResourceServerTokenEncryptionAlgorithmEnum = "RSA-OAEP-256"
	ResourceServerTokenEncryptionAlgorithmEnumRsaOaep384 ResourceServerTokenEncryptionAlgorithmEnum = "RSA-OAEP-384"
	ResourceServerTokenEncryptionAlgorithmEnumRsaOaep512 ResourceServerTokenEncryptionAlgorithmEnum = "RSA-OAEP-512"
)

func NewResourceServerTokenEncryptionAlgorithmEnumFromString(s string) (ResourceServerTokenEncryptionAlgorithmEnum, error) {
	switch s {
	case "RSA-OAEP-256":
		return ResourceServerTokenEncryptionAlgorithmEnumRsaOaep256, nil
	case "RSA-OAEP-384":
		return ResourceServerTokenEncryptionAlgorithmEnumRsaOaep384, nil
	case "RSA-OAEP-512":
		return ResourceServerTokenEncryptionAlgorithmEnumRsaOaep512, nil
	}
	var t ResourceServerTokenEncryptionAlgorithmEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResourceServerTokenEncryptionAlgorithmEnum) Ptr() *ResourceServerTokenEncryptionAlgorithmEnum {
	return &r
}

// Format of the encrypted JWT payload.
type ResourceServerTokenEncryptionFormatEnum = string

type ResourceServerTokenEncryptionKey struct {
	// Name of the encryption key.
	Name *string                                    `json:"name,omitempty" url:"name,omitempty"`
	Alg  ResourceServerTokenEncryptionAlgorithmEnum `json:"alg" url:"alg"`
	// Key ID.
	Kid *string `json:"kid,omitempty" url:"kid,omitempty"`
	// PEM-formatted public key. Must be JSON escaped.
	Pem string `json:"pem" url:"pem"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceServerTokenEncryptionKey) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *ResourceServerTokenEncryptionKey) GetAlg() ResourceServerTokenEncryptionAlgorithmEnum {
	if r == nil {
		return ""
	}
	return r.Alg
}

func (r *ResourceServerTokenEncryptionKey) GetKid() *string {
	if r == nil {
		return nil
	}
	return r.Kid
}

func (r *ResourceServerTokenEncryptionKey) GetPem() string {
	if r == nil {
		return ""
	}
	return r.Pem
}

func (r *ResourceServerTokenEncryptionKey) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceServerTokenEncryptionKey) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceServerTokenEncryptionKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceServerTokenEncryptionKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceServerTokenEncryptionKey) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateResourceServerResponseContent struct {
	// ID of the API (resource server).
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether this is an Auth0 system API (true) or a custom API (false).
	IsSystem *bool `json:"is_system,omitempty" url:"is_system,omitempty"`
	// Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.
	Identifier *string `json:"identifier,omitempty" url:"identifier,omitempty"`
	// List of permissions (scopes) that this API uses.
	Scopes     []*ResourceServerScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	SigningAlg *SigningAlgorithmEnum  `json:"signing_alg,omitempty" url:"signing_alg,omitempty"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret *string `json:"signing_secret,omitempty" url:"signing_secret,omitempty"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess *bool `json:"allow_offline_access,omitempty" url:"allow_offline_access,omitempty"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients *bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty" url:"skip_consent_for_verifiable_first_party_clients,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime *int `json:"token_lifetime,omitempty" url:"token_lifetime,omitempty"`
	// Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value.
	TokenLifetimeForWeb *int `json:"token_lifetime_for_web,omitempty" url:"token_lifetime_for_web,omitempty"`
	// Whether authorization polices are enforced (true) or unenforced (false).
	EnforcePolicies      *bool                                   `json:"enforce_policies,omitempty" url:"enforce_policies,omitempty"`
	TokenDialect         *ResourceServerTokenDialectResponseEnum `json:"token_dialect,omitempty" url:"token_dialect,omitempty"`
	TokenEncryption      *ResourceServerTokenEncryption          `json:"token_encryption,omitempty" url:"token_encryption,omitempty"`
	ConsentPolicy        *ResourceServerConsentPolicyEnum        `json:"consent_policy,omitempty" url:"consent_policy,omitempty"`
	AuthorizationDetails []interface{}                           `json:"authorization_details,omitempty" url:"authorization_details,omitempty"`
	ProofOfPossession    *ResourceServerProofOfPossession        `json:"proof_of_possession,omitempty" url:"proof_of_possession,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateResourceServerResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateResourceServerResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateResourceServerResponseContent) GetIsSystem() *bool {
	if u == nil {
		return nil
	}
	return u.IsSystem
}

func (u *UpdateResourceServerResponseContent) GetIdentifier() *string {
	if u == nil {
		return nil
	}
	return u.Identifier
}

func (u *UpdateResourceServerResponseContent) GetScopes() []*ResourceServerScope {
	if u == nil {
		return nil
	}
	return u.Scopes
}

func (u *UpdateResourceServerResponseContent) GetSigningAlg() *SigningAlgorithmEnum {
	if u == nil {
		return nil
	}
	return u.SigningAlg
}

func (u *UpdateResourceServerResponseContent) GetSigningSecret() *string {
	if u == nil {
		return nil
	}
	return u.SigningSecret
}

func (u *UpdateResourceServerResponseContent) GetAllowOfflineAccess() *bool {
	if u == nil {
		return nil
	}
	return u.AllowOfflineAccess
}

func (u *UpdateResourceServerResponseContent) GetSkipConsentForVerifiableFirstPartyClients() *bool {
	if u == nil {
		return nil
	}
	return u.SkipConsentForVerifiableFirstPartyClients
}

func (u *UpdateResourceServerResponseContent) GetTokenLifetime() *int {
	if u == nil {
		return nil
	}
	return u.TokenLifetime
}

func (u *UpdateResourceServerResponseContent) GetTokenLifetimeForWeb() *int {
	if u == nil {
		return nil
	}
	return u.TokenLifetimeForWeb
}

func (u *UpdateResourceServerResponseContent) GetEnforcePolicies() *bool {
	if u == nil {
		return nil
	}
	return u.EnforcePolicies
}

func (u *UpdateResourceServerResponseContent) GetTokenDialect() *ResourceServerTokenDialectResponseEnum {
	if u == nil {
		return nil
	}
	return u.TokenDialect
}

func (u *UpdateResourceServerResponseContent) GetTokenEncryption() *ResourceServerTokenEncryption {
	if u == nil {
		return nil
	}
	return u.TokenEncryption
}

func (u *UpdateResourceServerResponseContent) GetConsentPolicy() *ResourceServerConsentPolicyEnum {
	if u == nil {
		return nil
	}
	return u.ConsentPolicy
}

func (u *UpdateResourceServerResponseContent) GetAuthorizationDetails() []interface{} {
	if u == nil {
		return nil
	}
	return u.AuthorizationDetails
}

func (u *UpdateResourceServerResponseContent) GetProofOfPossession() *ResourceServerProofOfPossession {
	if u == nil {
		return nil
	}
	return u.ProofOfPossession
}

func (u *UpdateResourceServerResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateResourceServerResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateResourceServerResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateResourceServerResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateResourceServerResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateResourceServerRequestContent struct {
	// Friendly name for this resource server. Can not contain `<` or `>` characters.
	Name *string `json:"name,omitempty" url:"-"`
	// List of permissions (scopes) that this API uses.
	Scopes     []*ResourceServerScope `json:"scopes,omitempty" url:"-"`
	SigningAlg *SigningAlgorithmEnum  `json:"signing_alg,omitempty" url:"-"`
	// Secret used to sign tokens when using symmetric algorithms (HS256).
	SigningSecret *string `json:"signing_secret,omitempty" url:"-"`
	// Whether to skip user consent for applications flagged as first party (true) or not (false).
	SkipConsentForVerifiableFirstPartyClients *bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty" url:"-"`
	// Whether refresh tokens can be issued for this API (true) or not (false).
	AllowOfflineAccess *bool `json:"allow_offline_access,omitempty" url:"-"`
	// Expiration value (in seconds) for access tokens issued for this API from the token endpoint.
	TokenLifetime *int                                  `json:"token_lifetime,omitempty" url:"-"`
	TokenDialect  *ResourceServerTokenDialectSchemaEnum `json:"token_dialect,omitempty" url:"-"`
	// Whether authorization policies are enforced (true) or not enforced (false).
	EnforcePolicies      *bool                            `json:"enforce_policies,omitempty" url:"-"`
	TokenEncryption      *ResourceServerTokenEncryption   `json:"token_encryption,omitempty" url:"-"`
	ConsentPolicy        *ResourceServerConsentPolicyEnum `json:"consent_policy,omitempty" url:"-"`
	AuthorizationDetails []interface{}                    `json:"authorization_details,omitempty" url:"-"`
	ProofOfPossession    *ResourceServerProofOfPossession `json:"proof_of_possession,omitempty" url:"-"`
}

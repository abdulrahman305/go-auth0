// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	big "math/big"
)

var (
	getNetworkAclsResponseContentFieldId          = big.NewInt(1 << 0)
	getNetworkAclsResponseContentFieldDescription = big.NewInt(1 << 1)
	getNetworkAclsResponseContentFieldActive      = big.NewInt(1 << 2)
	getNetworkAclsResponseContentFieldPriority    = big.NewInt(1 << 3)
	getNetworkAclsResponseContentFieldRule        = big.NewInt(1 << 4)
	getNetworkAclsResponseContentFieldCreatedAt   = big.NewInt(1 << 5)
	getNetworkAclsResponseContentFieldUpdatedAt   = big.NewInt(1 << 6)
)

type GetNetworkAclsResponseContent struct {
	Id          *string         `json:"id,omitempty" url:"id,omitempty"`
	Description *string         `json:"description,omitempty" url:"description,omitempty"`
	Active      *bool           `json:"active,omitempty" url:"active,omitempty"`
	Priority    *float64        `json:"priority,omitempty" url:"priority,omitempty"`
	Rule        *NetworkAclRule `json:"rule,omitempty" url:"rule,omitempty"`
	// The timestamp when the Network ACL Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the Network ACL Configuration was last updated
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetNetworkAclsResponseContent) GetId() string {
	if g == nil || g.Id == nil {
		return ""
	}
	return *g.Id
}

func (g *GetNetworkAclsResponseContent) GetDescription() string {
	if g == nil || g.Description == nil {
		return ""
	}
	return *g.Description
}

func (g *GetNetworkAclsResponseContent) GetActive() bool {
	if g == nil || g.Active == nil {
		return false
	}
	return *g.Active
}

func (g *GetNetworkAclsResponseContent) GetPriority() float64 {
	if g == nil || g.Priority == nil {
		return 0
	}
	return *g.Priority
}

func (g *GetNetworkAclsResponseContent) GetRule() NetworkAclRule {
	if g == nil || g.Rule == nil {
		return NetworkAclRule{}
	}
	return *g.Rule
}

func (g *GetNetworkAclsResponseContent) GetCreatedAt() string {
	if g == nil || g.CreatedAt == nil {
		return ""
	}
	return *g.CreatedAt
}

func (g *GetNetworkAclsResponseContent) GetUpdatedAt() string {
	if g == nil || g.UpdatedAt == nil {
		return ""
	}
	return *g.UpdatedAt
}

func (g *GetNetworkAclsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetNetworkAclsResponseContent) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetId(id *string) {
	g.Id = id
	g.require(getNetworkAclsResponseContentFieldId)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetDescription(description *string) {
	g.Description = description
	g.require(getNetworkAclsResponseContentFieldDescription)
}

// SetActive sets the Active field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetActive(active *bool) {
	g.Active = active
	g.require(getNetworkAclsResponseContentFieldActive)
}

// SetPriority sets the Priority field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetPriority(priority *float64) {
	g.Priority = priority
	g.require(getNetworkAclsResponseContentFieldPriority)
}

// SetRule sets the Rule field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetRule(rule *NetworkAclRule) {
	g.Rule = rule
	g.require(getNetworkAclsResponseContentFieldRule)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetCreatedAt(createdAt *string) {
	g.CreatedAt = createdAt
	g.require(getNetworkAclsResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetNetworkAclsResponseContent) SetUpdatedAt(updatedAt *string) {
	g.UpdatedAt = updatedAt
	g.require(getNetworkAclsResponseContentFieldUpdatedAt)
}

func (g *GetNetworkAclsResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetNetworkAclsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetNetworkAclsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetNetworkAclsResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetNetworkAclsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, g.ExtraProperties)
}

func (g *GetNetworkAclsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	listNetworkAclsOffsetPaginatedResponseContentFieldNetworkAcls = big.NewInt(1 << 0)
	listNetworkAclsOffsetPaginatedResponseContentFieldStart       = big.NewInt(1 << 1)
	listNetworkAclsOffsetPaginatedResponseContentFieldLimit       = big.NewInt(1 << 2)
	listNetworkAclsOffsetPaginatedResponseContentFieldTotal       = big.NewInt(1 << 3)
)

type ListNetworkAclsOffsetPaginatedResponseContent struct {
	NetworkAcls []*NetworkAclsResponseContent `json:"network_acls,omitempty" url:"network_acls,omitempty"`
	Start       *float64                      `json:"start,omitempty" url:"start,omitempty"`
	Limit       *float64                      `json:"limit,omitempty" url:"limit,omitempty"`
	Total       *float64                      `json:"total,omitempty" url:"total,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) GetNetworkAcls() []*NetworkAclsResponseContent {
	if l == nil || l.NetworkAcls == nil {
		return nil
	}
	return l.NetworkAcls
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) GetStart() float64 {
	if l == nil || l.Start == nil {
		return 0
	}
	return *l.Start
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) GetLimit() float64 {
	if l == nil || l.Limit == nil {
		return 0
	}
	return *l.Limit
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) GetTotal() float64 {
	if l == nil || l.Total == nil {
		return 0
	}
	return *l.Total
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetNetworkAcls sets the NetworkAcls field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListNetworkAclsOffsetPaginatedResponseContent) SetNetworkAcls(networkAcls []*NetworkAclsResponseContent) {
	l.NetworkAcls = networkAcls
	l.require(listNetworkAclsOffsetPaginatedResponseContentFieldNetworkAcls)
}

// SetStart sets the Start field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListNetworkAclsOffsetPaginatedResponseContent) SetStart(start *float64) {
	l.Start = start
	l.require(listNetworkAclsOffsetPaginatedResponseContentFieldStart)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListNetworkAclsOffsetPaginatedResponseContent) SetLimit(limit *float64) {
	l.Limit = limit
	l.require(listNetworkAclsOffsetPaginatedResponseContentFieldLimit)
}

// SetTotal sets the Total field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListNetworkAclsOffsetPaginatedResponseContent) SetTotal(total *float64) {
	l.Total = total
	l.require(listNetworkAclsOffsetPaginatedResponseContentFieldTotal)
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListNetworkAclsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListNetworkAclsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) MarshalJSON() ([]byte, error) {
	type embed ListNetworkAclsOffsetPaginatedResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListNetworkAclsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	networkAclActionFieldBlock       = big.NewInt(1 << 0)
	networkAclActionFieldAllow       = big.NewInt(1 << 1)
	networkAclActionFieldLog         = big.NewInt(1 << 2)
	networkAclActionFieldRedirect    = big.NewInt(1 << 3)
	networkAclActionFieldRedirectUri = big.NewInt(1 << 4)
)

type NetworkAclAction struct {
	Block    *NetworkAclActionBlockEnum    `json:"block,omitempty" url:"block,omitempty"`
	Allow    *NetworkAclActionAllowEnum    `json:"allow,omitempty" url:"allow,omitempty"`
	Log      *NetworkAclActionLogEnum      `json:"log,omitempty" url:"log,omitempty"`
	Redirect *NetworkAclActionRedirectEnum `json:"redirect,omitempty" url:"redirect,omitempty"`
	// The URI to which the match or not_match requests will be routed
	RedirectUri *string `json:"redirect_uri,omitempty" url:"redirect_uri,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NetworkAclAction) GetBlock() NetworkAclActionBlockEnum {
	if n == nil || n.Block == nil {
		return false
	}
	return *n.Block
}

func (n *NetworkAclAction) GetAllow() NetworkAclActionAllowEnum {
	if n == nil || n.Allow == nil {
		return false
	}
	return *n.Allow
}

func (n *NetworkAclAction) GetLog() NetworkAclActionLogEnum {
	if n == nil || n.Log == nil {
		return false
	}
	return *n.Log
}

func (n *NetworkAclAction) GetRedirect() NetworkAclActionRedirectEnum {
	if n == nil || n.Redirect == nil {
		return false
	}
	return *n.Redirect
}

func (n *NetworkAclAction) GetRedirectUri() string {
	if n == nil || n.RedirectUri == nil {
		return ""
	}
	return *n.RedirectUri
}

func (n *NetworkAclAction) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkAclAction) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetBlock sets the Block field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclAction) SetBlock(block *NetworkAclActionBlockEnum) {
	n.Block = block
	n.require(networkAclActionFieldBlock)
}

// SetAllow sets the Allow field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclAction) SetAllow(allow *NetworkAclActionAllowEnum) {
	n.Allow = allow
	n.require(networkAclActionFieldAllow)
}

// SetLog sets the Log field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclAction) SetLog(log *NetworkAclActionLogEnum) {
	n.Log = log
	n.require(networkAclActionFieldLog)
}

// SetRedirect sets the Redirect field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclAction) SetRedirect(redirect *NetworkAclActionRedirectEnum) {
	n.Redirect = redirect
	n.require(networkAclActionFieldRedirect)
}

// SetRedirectUri sets the RedirectUri field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclAction) SetRedirectUri(redirectUri *string) {
	n.RedirectUri = redirectUri
	n.require(networkAclActionFieldRedirectUri)
}

func (n *NetworkAclAction) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworkAclAction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworkAclAction(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkAclAction) MarshalJSON() ([]byte, error) {
	type embed NetworkAclAction
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NetworkAclAction) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Indicates the rule will allow requests that either match or not_match specific criteria
type NetworkAclActionAllowEnum = bool

// Indicates the rule will block requests that either match or not_match specific criteria
type NetworkAclActionBlockEnum = bool

// Indicates the rule will log requests that either match or not_match specific criteria
type NetworkAclActionLogEnum = bool

// Indicates the rule will redirect requests that either match or not_match specific criteria
type NetworkAclActionRedirectEnum = bool

var (
	networkAclMatchFieldAsns                = big.NewInt(1 << 0)
	networkAclMatchFieldGeoCountryCodes     = big.NewInt(1 << 1)
	networkAclMatchFieldGeoSubdivisionCodes = big.NewInt(1 << 2)
	networkAclMatchFieldIpv4Cidrs           = big.NewInt(1 << 3)
	networkAclMatchFieldIpv6Cidrs           = big.NewInt(1 << 4)
	networkAclMatchFieldJa3Fingerprints     = big.NewInt(1 << 5)
	networkAclMatchFieldJa4Fingerprints     = big.NewInt(1 << 6)
	networkAclMatchFieldUserAgents          = big.NewInt(1 << 7)
)

type NetworkAclMatch struct {
	Asns                []int                     `json:"asns,omitempty" url:"asns,omitempty"`
	GeoCountryCodes     []string                  `json:"geo_country_codes,omitempty" url:"geo_country_codes,omitempty"`
	GeoSubdivisionCodes []string                  `json:"geo_subdivision_codes,omitempty" url:"geo_subdivision_codes,omitempty"`
	Ipv4Cidrs           []NetworkAclMatchIpv4Cidr `json:"ipv4_cidrs,omitempty" url:"ipv4_cidrs,omitempty"`
	Ipv6Cidrs           []NetworkAclMatchIpv6Cidr `json:"ipv6_cidrs,omitempty" url:"ipv6_cidrs,omitempty"`
	Ja3Fingerprints     []string                  `json:"ja3_fingerprints,omitempty" url:"ja3_fingerprints,omitempty"`
	Ja4Fingerprints     []string                  `json:"ja4_fingerprints,omitempty" url:"ja4_fingerprints,omitempty"`
	UserAgents          []string                  `json:"user_agents,omitempty" url:"user_agents,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NetworkAclMatch) GetAsns() []int {
	if n == nil || n.Asns == nil {
		return nil
	}
	return n.Asns
}

func (n *NetworkAclMatch) GetGeoCountryCodes() []string {
	if n == nil || n.GeoCountryCodes == nil {
		return nil
	}
	return n.GeoCountryCodes
}

func (n *NetworkAclMatch) GetGeoSubdivisionCodes() []string {
	if n == nil || n.GeoSubdivisionCodes == nil {
		return nil
	}
	return n.GeoSubdivisionCodes
}

func (n *NetworkAclMatch) GetIpv4Cidrs() []NetworkAclMatchIpv4Cidr {
	if n == nil || n.Ipv4Cidrs == nil {
		return nil
	}
	return n.Ipv4Cidrs
}

func (n *NetworkAclMatch) GetIpv6Cidrs() []NetworkAclMatchIpv6Cidr {
	if n == nil || n.Ipv6Cidrs == nil {
		return nil
	}
	return n.Ipv6Cidrs
}

func (n *NetworkAclMatch) GetJa3Fingerprints() []string {
	if n == nil || n.Ja3Fingerprints == nil {
		return nil
	}
	return n.Ja3Fingerprints
}

func (n *NetworkAclMatch) GetJa4Fingerprints() []string {
	if n == nil || n.Ja4Fingerprints == nil {
		return nil
	}
	return n.Ja4Fingerprints
}

func (n *NetworkAclMatch) GetUserAgents() []string {
	if n == nil || n.UserAgents == nil {
		return nil
	}
	return n.UserAgents
}

func (n *NetworkAclMatch) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkAclMatch) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetAsns sets the Asns field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetAsns(asns []int) {
	n.Asns = asns
	n.require(networkAclMatchFieldAsns)
}

// SetGeoCountryCodes sets the GeoCountryCodes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetGeoCountryCodes(geoCountryCodes []string) {
	n.GeoCountryCodes = geoCountryCodes
	n.require(networkAclMatchFieldGeoCountryCodes)
}

// SetGeoSubdivisionCodes sets the GeoSubdivisionCodes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetGeoSubdivisionCodes(geoSubdivisionCodes []string) {
	n.GeoSubdivisionCodes = geoSubdivisionCodes
	n.require(networkAclMatchFieldGeoSubdivisionCodes)
}

// SetIpv4Cidrs sets the Ipv4Cidrs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetIpv4Cidrs(ipv4Cidrs []NetworkAclMatchIpv4Cidr) {
	n.Ipv4Cidrs = ipv4Cidrs
	n.require(networkAclMatchFieldIpv4Cidrs)
}

// SetIpv6Cidrs sets the Ipv6Cidrs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetIpv6Cidrs(ipv6Cidrs []NetworkAclMatchIpv6Cidr) {
	n.Ipv6Cidrs = ipv6Cidrs
	n.require(networkAclMatchFieldIpv6Cidrs)
}

// SetJa3Fingerprints sets the Ja3Fingerprints field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetJa3Fingerprints(ja3Fingerprints []string) {
	n.Ja3Fingerprints = ja3Fingerprints
	n.require(networkAclMatchFieldJa3Fingerprints)
}

// SetJa4Fingerprints sets the Ja4Fingerprints field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetJa4Fingerprints(ja4Fingerprints []string) {
	n.Ja4Fingerprints = ja4Fingerprints
	n.require(networkAclMatchFieldJa4Fingerprints)
}

// SetUserAgents sets the UserAgents field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclMatch) SetUserAgents(userAgents []string) {
	n.UserAgents = userAgents
	n.require(networkAclMatchFieldUserAgents)
}

func (n *NetworkAclMatch) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworkAclMatch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworkAclMatch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkAclMatch) MarshalJSON() ([]byte, error) {
	type embed NetworkAclMatch
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NetworkAclMatch) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NetworkAclMatchIpv4Cidr = string

type NetworkAclMatchIpv6Cidr = string

var (
	networkAclRuleFieldAction   = big.NewInt(1 << 0)
	networkAclRuleFieldMatch    = big.NewInt(1 << 1)
	networkAclRuleFieldNotMatch = big.NewInt(1 << 2)
	networkAclRuleFieldScope    = big.NewInt(1 << 3)
)

type NetworkAclRule struct {
	Action   *NetworkAclAction       `json:"action" url:"action"`
	Match    *NetworkAclMatch        `json:"match,omitempty" url:"match,omitempty"`
	NotMatch *NetworkAclMatch        `json:"not_match,omitempty" url:"not_match,omitempty"`
	Scope    NetworkAclRuleScopeEnum `json:"scope" url:"scope"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NetworkAclRule) GetAction() *NetworkAclAction {
	if n == nil {
		return nil
	}
	return n.Action
}

func (n *NetworkAclRule) GetMatch() NetworkAclMatch {
	if n == nil || n.Match == nil {
		return NetworkAclMatch{}
	}
	return *n.Match
}

func (n *NetworkAclRule) GetNotMatch() NetworkAclMatch {
	if n == nil || n.NotMatch == nil {
		return NetworkAclMatch{}
	}
	return *n.NotMatch
}

func (n *NetworkAclRule) GetScope() NetworkAclRuleScopeEnum {
	if n == nil {
		return ""
	}
	return n.Scope
}

func (n *NetworkAclRule) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkAclRule) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetAction sets the Action field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclRule) SetAction(action *NetworkAclAction) {
	n.Action = action
	n.require(networkAclRuleFieldAction)
}

// SetMatch sets the Match field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclRule) SetMatch(match *NetworkAclMatch) {
	n.Match = match
	n.require(networkAclRuleFieldMatch)
}

// SetNotMatch sets the NotMatch field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclRule) SetNotMatch(notMatch *NetworkAclMatch) {
	n.NotMatch = notMatch
	n.require(networkAclRuleFieldNotMatch)
}

// SetScope sets the Scope field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclRule) SetScope(scope NetworkAclRuleScopeEnum) {
	n.Scope = scope
	n.require(networkAclRuleFieldScope)
}

func (n *NetworkAclRule) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworkAclRule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworkAclRule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkAclRule) MarshalJSON() ([]byte, error) {
	type embed NetworkAclRule
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NetworkAclRule) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Identifies the origin of the request as the Management API (management), Authentication API (authentication), or either (tenant)
type NetworkAclRuleScopeEnum string

const (
	NetworkAclRuleScopeEnumManagement     NetworkAclRuleScopeEnum = "management"
	NetworkAclRuleScopeEnumAuthentication NetworkAclRuleScopeEnum = "authentication"
	NetworkAclRuleScopeEnumTenant         NetworkAclRuleScopeEnum = "tenant"
)

func NewNetworkAclRuleScopeEnumFromString(s string) (NetworkAclRuleScopeEnum, error) {
	switch s {
	case "management":
		return NetworkAclRuleScopeEnumManagement, nil
	case "authentication":
		return NetworkAclRuleScopeEnumAuthentication, nil
	case "tenant":
		return NetworkAclRuleScopeEnumTenant, nil
	}
	var t NetworkAclRuleScopeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NetworkAclRuleScopeEnum) Ptr() *NetworkAclRuleScopeEnum {
	return &n
}

var (
	networkAclsResponseContentFieldId          = big.NewInt(1 << 0)
	networkAclsResponseContentFieldDescription = big.NewInt(1 << 1)
	networkAclsResponseContentFieldActive      = big.NewInt(1 << 2)
	networkAclsResponseContentFieldPriority    = big.NewInt(1 << 3)
	networkAclsResponseContentFieldRule        = big.NewInt(1 << 4)
	networkAclsResponseContentFieldCreatedAt   = big.NewInt(1 << 5)
	networkAclsResponseContentFieldUpdatedAt   = big.NewInt(1 << 6)
)

type NetworkAclsResponseContent struct {
	Id          *string         `json:"id,omitempty" url:"id,omitempty"`
	Description *string         `json:"description,omitempty" url:"description,omitempty"`
	Active      *bool           `json:"active,omitempty" url:"active,omitempty"`
	Priority    *float64        `json:"priority,omitempty" url:"priority,omitempty"`
	Rule        *NetworkAclRule `json:"rule,omitempty" url:"rule,omitempty"`
	// The timestamp when the Network ACL Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the Network ACL Configuration was last updated
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (n *NetworkAclsResponseContent) GetId() string {
	if n == nil || n.Id == nil {
		return ""
	}
	return *n.Id
}

func (n *NetworkAclsResponseContent) GetDescription() string {
	if n == nil || n.Description == nil {
		return ""
	}
	return *n.Description
}

func (n *NetworkAclsResponseContent) GetActive() bool {
	if n == nil || n.Active == nil {
		return false
	}
	return *n.Active
}

func (n *NetworkAclsResponseContent) GetPriority() float64 {
	if n == nil || n.Priority == nil {
		return 0
	}
	return *n.Priority
}

func (n *NetworkAclsResponseContent) GetRule() NetworkAclRule {
	if n == nil || n.Rule == nil {
		return NetworkAclRule{}
	}
	return *n.Rule
}

func (n *NetworkAclsResponseContent) GetCreatedAt() string {
	if n == nil || n.CreatedAt == nil {
		return ""
	}
	return *n.CreatedAt
}

func (n *NetworkAclsResponseContent) GetUpdatedAt() string {
	if n == nil || n.UpdatedAt == nil {
		return ""
	}
	return *n.UpdatedAt
}

func (n *NetworkAclsResponseContent) GetExtraProperties() map[string]interface{} {
	return n.ExtraProperties
}

func (n *NetworkAclsResponseContent) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetId(id *string) {
	n.Id = id
	n.require(networkAclsResponseContentFieldId)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetDescription(description *string) {
	n.Description = description
	n.require(networkAclsResponseContentFieldDescription)
}

// SetActive sets the Active field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetActive(active *bool) {
	n.Active = active
	n.require(networkAclsResponseContentFieldActive)
}

// SetPriority sets the Priority field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetPriority(priority *float64) {
	n.Priority = priority
	n.require(networkAclsResponseContentFieldPriority)
}

// SetRule sets the Rule field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetRule(rule *NetworkAclRule) {
	n.Rule = rule
	n.require(networkAclsResponseContentFieldRule)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetCreatedAt(createdAt *string) {
	n.CreatedAt = createdAt
	n.require(networkAclsResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NetworkAclsResponseContent) SetUpdatedAt(updatedAt *string) {
	n.UpdatedAt = updatedAt
	n.require(networkAclsResponseContentFieldUpdatedAt)
}

func (n *NetworkAclsResponseContent) UnmarshalJSON(data []byte) error {
	type embed NetworkAclsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NetworkAclsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.ExtraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworkAclsResponseContent) MarshalJSON() ([]byte, error) {
	type embed NetworkAclsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, n.ExtraProperties)
}

func (n *NetworkAclsResponseContent) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	setNetworkAclsResponseContentFieldId          = big.NewInt(1 << 0)
	setNetworkAclsResponseContentFieldDescription = big.NewInt(1 << 1)
	setNetworkAclsResponseContentFieldActive      = big.NewInt(1 << 2)
	setNetworkAclsResponseContentFieldPriority    = big.NewInt(1 << 3)
	setNetworkAclsResponseContentFieldRule        = big.NewInt(1 << 4)
	setNetworkAclsResponseContentFieldCreatedAt   = big.NewInt(1 << 5)
	setNetworkAclsResponseContentFieldUpdatedAt   = big.NewInt(1 << 6)
)

type SetNetworkAclsResponseContent struct {
	Id          *string         `json:"id,omitempty" url:"id,omitempty"`
	Description *string         `json:"description,omitempty" url:"description,omitempty"`
	Active      *bool           `json:"active,omitempty" url:"active,omitempty"`
	Priority    *float64        `json:"priority,omitempty" url:"priority,omitempty"`
	Rule        *NetworkAclRule `json:"rule,omitempty" url:"rule,omitempty"`
	// The timestamp when the Network ACL Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the Network ACL Configuration was last updated
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (s *SetNetworkAclsResponseContent) GetId() string {
	if s == nil || s.Id == nil {
		return ""
	}
	return *s.Id
}

func (s *SetNetworkAclsResponseContent) GetDescription() string {
	if s == nil || s.Description == nil {
		return ""
	}
	return *s.Description
}

func (s *SetNetworkAclsResponseContent) GetActive() bool {
	if s == nil || s.Active == nil {
		return false
	}
	return *s.Active
}

func (s *SetNetworkAclsResponseContent) GetPriority() float64 {
	if s == nil || s.Priority == nil {
		return 0
	}
	return *s.Priority
}

func (s *SetNetworkAclsResponseContent) GetRule() NetworkAclRule {
	if s == nil || s.Rule == nil {
		return NetworkAclRule{}
	}
	return *s.Rule
}

func (s *SetNetworkAclsResponseContent) GetCreatedAt() string {
	if s == nil || s.CreatedAt == nil {
		return ""
	}
	return *s.CreatedAt
}

func (s *SetNetworkAclsResponseContent) GetUpdatedAt() string {
	if s == nil || s.UpdatedAt == nil {
		return ""
	}
	return *s.UpdatedAt
}

func (s *SetNetworkAclsResponseContent) GetExtraProperties() map[string]interface{} {
	return s.ExtraProperties
}

func (s *SetNetworkAclsResponseContent) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetId(id *string) {
	s.Id = id
	s.require(setNetworkAclsResponseContentFieldId)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetDescription(description *string) {
	s.Description = description
	s.require(setNetworkAclsResponseContentFieldDescription)
}

// SetActive sets the Active field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetActive(active *bool) {
	s.Active = active
	s.require(setNetworkAclsResponseContentFieldActive)
}

// SetPriority sets the Priority field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetPriority(priority *float64) {
	s.Priority = priority
	s.require(setNetworkAclsResponseContentFieldPriority)
}

// SetRule sets the Rule field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetRule(rule *NetworkAclRule) {
	s.Rule = rule
	s.require(setNetworkAclsResponseContentFieldRule)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetCreatedAt(createdAt *string) {
	s.CreatedAt = createdAt
	s.require(setNetworkAclsResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SetNetworkAclsResponseContent) SetUpdatedAt(updatedAt *string) {
	s.UpdatedAt = updatedAt
	s.require(setNetworkAclsResponseContentFieldUpdatedAt)
}

func (s *SetNetworkAclsResponseContent) UnmarshalJSON(data []byte) error {
	type embed SetNetworkAclsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SetNetworkAclsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.ExtraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetNetworkAclsResponseContent) MarshalJSON() ([]byte, error) {
	type embed SetNetworkAclsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, s.ExtraProperties)
}

func (s *SetNetworkAclsResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	updateNetworkAclResponseContentFieldId          = big.NewInt(1 << 0)
	updateNetworkAclResponseContentFieldDescription = big.NewInt(1 << 1)
	updateNetworkAclResponseContentFieldActive      = big.NewInt(1 << 2)
	updateNetworkAclResponseContentFieldPriority    = big.NewInt(1 << 3)
	updateNetworkAclResponseContentFieldRule        = big.NewInt(1 << 4)
	updateNetworkAclResponseContentFieldCreatedAt   = big.NewInt(1 << 5)
	updateNetworkAclResponseContentFieldUpdatedAt   = big.NewInt(1 << 6)
)

type UpdateNetworkAclResponseContent struct {
	Id          *string         `json:"id,omitempty" url:"id,omitempty"`
	Description *string         `json:"description,omitempty" url:"description,omitempty"`
	Active      *bool           `json:"active,omitempty" url:"active,omitempty"`
	Priority    *float64        `json:"priority,omitempty" url:"priority,omitempty"`
	Rule        *NetworkAclRule `json:"rule,omitempty" url:"rule,omitempty"`
	// The timestamp when the Network ACL Configuration was created
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the Network ACL Configuration was last updated
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateNetworkAclResponseContent) GetId() string {
	if u == nil || u.Id == nil {
		return ""
	}
	return *u.Id
}

func (u *UpdateNetworkAclResponseContent) GetDescription() string {
	if u == nil || u.Description == nil {
		return ""
	}
	return *u.Description
}

func (u *UpdateNetworkAclResponseContent) GetActive() bool {
	if u == nil || u.Active == nil {
		return false
	}
	return *u.Active
}

func (u *UpdateNetworkAclResponseContent) GetPriority() float64 {
	if u == nil || u.Priority == nil {
		return 0
	}
	return *u.Priority
}

func (u *UpdateNetworkAclResponseContent) GetRule() NetworkAclRule {
	if u == nil || u.Rule == nil {
		return NetworkAclRule{}
	}
	return *u.Rule
}

func (u *UpdateNetworkAclResponseContent) GetCreatedAt() string {
	if u == nil || u.CreatedAt == nil {
		return ""
	}
	return *u.CreatedAt
}

func (u *UpdateNetworkAclResponseContent) GetUpdatedAt() string {
	if u == nil || u.UpdatedAt == nil {
		return ""
	}
	return *u.UpdatedAt
}

func (u *UpdateNetworkAclResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateNetworkAclResponseContent) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetId(id *string) {
	u.Id = id
	u.require(updateNetworkAclResponseContentFieldId)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetDescription(description *string) {
	u.Description = description
	u.require(updateNetworkAclResponseContentFieldDescription)
}

// SetActive sets the Active field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetActive(active *bool) {
	u.Active = active
	u.require(updateNetworkAclResponseContentFieldActive)
}

// SetPriority sets the Priority field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetPriority(priority *float64) {
	u.Priority = priority
	u.require(updateNetworkAclResponseContentFieldPriority)
}

// SetRule sets the Rule field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetRule(rule *NetworkAclRule) {
	u.Rule = rule
	u.require(updateNetworkAclResponseContentFieldRule)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetCreatedAt(createdAt *string) {
	u.CreatedAt = createdAt
	u.require(updateNetworkAclResponseContentFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateNetworkAclResponseContent) SetUpdatedAt(updatedAt *string) {
	u.UpdatedAt = updatedAt
	u.require(updateNetworkAclResponseContentFieldUpdatedAt)
}

func (u *UpdateNetworkAclResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateNetworkAclResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateNetworkAclResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateNetworkAclResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateNetworkAclResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, u.ExtraProperties)
}

func (u *UpdateNetworkAclResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

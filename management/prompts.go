// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type GetSettingsResponseContent struct {
	UniversalLoginExperience *UniversalLoginExperienceEnum `json:"universal_login_experience,omitempty" url:"universal_login_experience,omitempty"`
	// Whether identifier first is enabled or not
	IdentifierFirst *bool `json:"identifier_first,omitempty" url:"identifier_first,omitempty"`
	// Use WebAuthn with Device Biometrics as the first authentication factor
	WebauthnPlatformFirstFactor *bool `json:"webauthn_platform_first_factor,omitempty" url:"webauthn_platform_first_factor,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetSettingsResponseContent) GetUniversalLoginExperience() *UniversalLoginExperienceEnum {
	if g == nil {
		return nil
	}
	return g.UniversalLoginExperience
}

func (g *GetSettingsResponseContent) GetIdentifierFirst() *bool {
	if g == nil {
		return nil
	}
	return g.IdentifierFirst
}

func (g *GetSettingsResponseContent) GetWebauthnPlatformFirstFactor() *bool {
	if g == nil {
		return nil
	}
	return g.WebauthnPlatformFirstFactor
}

func (g *GetSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetSettingsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetSettingsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSettingsResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetSettingsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetSettingsResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Which login experience to use. Can be `new` or `classic`.
type UniversalLoginExperienceEnum string

const (
	UniversalLoginExperienceEnumNew     UniversalLoginExperienceEnum = "new"
	UniversalLoginExperienceEnumClassic UniversalLoginExperienceEnum = "classic"
)

func NewUniversalLoginExperienceEnumFromString(s string) (UniversalLoginExperienceEnum, error) {
	switch s {
	case "new":
		return UniversalLoginExperienceEnumNew, nil
	case "classic":
		return UniversalLoginExperienceEnumClassic, nil
	}
	var t UniversalLoginExperienceEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UniversalLoginExperienceEnum) Ptr() *UniversalLoginExperienceEnum {
	return &u
}

type UpdateSettingsResponseContent struct {
	UniversalLoginExperience *UniversalLoginExperienceEnum `json:"universal_login_experience,omitempty" url:"universal_login_experience,omitempty"`
	// Whether identifier first is enabled or not
	IdentifierFirst *bool `json:"identifier_first,omitempty" url:"identifier_first,omitempty"`
	// Use WebAuthn with Device Biometrics as the first authentication factor
	WebauthnPlatformFirstFactor *bool `json:"webauthn_platform_first_factor,omitempty" url:"webauthn_platform_first_factor,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (u *UpdateSettingsResponseContent) GetUniversalLoginExperience() *UniversalLoginExperienceEnum {
	if u == nil {
		return nil
	}
	return u.UniversalLoginExperience
}

func (u *UpdateSettingsResponseContent) GetIdentifierFirst() *bool {
	if u == nil {
		return nil
	}
	return u.IdentifierFirst
}

func (u *UpdateSettingsResponseContent) GetWebauthnPlatformFirstFactor() *bool {
	if u == nil {
		return nil
	}
	return u.WebauthnPlatformFirstFactor
}

func (u *UpdateSettingsResponseContent) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *UpdateSettingsResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateSettingsResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateSettingsResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSettingsResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateSettingsResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, u.ExtraProperties)
}

func (u *UpdateSettingsResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateSettingsRequestContent struct {
	UniversalLoginExperience *UniversalLoginExperienceEnum `json:"universal_login_experience,omitempty" url:"-"`
	// Whether identifier first is enabled or not
	IdentifierFirst *bool `json:"identifier_first,omitempty" url:"-"`
	// Use WebAuthn with Device Biometrics as the first authentication factor
	WebauthnPlatformFirstFactor *bool `json:"webauthn_platform_first_factor,omitempty" url:"-"`
}

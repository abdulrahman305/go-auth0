// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
	time "time"
)

type CreateTokenExchangeProfileRequestContent struct {
	// Friendly name of this profile.
	Name string `json:"name" url:"-"`
	// Subject token type for this profile. When receiving a token exchange request on the Authentication API, the corresponding token exchange profile with a matching subject_token_type will be executed. This must be a URI.
	SubjectTokenType string `json:"subject_token_type" url:"-"`
	// The ID of the Custom Token Exchange action to execute for this profile, in order to validate the subject_token. The action must use the custom-token-exchange trigger.
	ActionID string                       `json:"action_id" url:"-"`
	Type     TokenExchangeProfileTypeEnum `json:"type,omitempty" url:"-"`
}

type TokenExchangeProfilesListRequest struct {
	// Optional Id from which to start selection.
	From *string `json:"-" url:"from,omitempty"`
	// Number of results per page. Defaults to 50.
	Take *int `json:"-" url:"take,omitempty"`
}

type CreateTokenExchangeProfileResponseContent struct {
	// The unique ID of the token exchange profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name of this profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Subject token type for this profile. When receiving a token exchange request on the Authentication API, the corresponding token exchange profile with a matching subject_token_type will be executed. This must be a URI.
	SubjectTokenType *string `json:"subject_token_type,omitempty" url:"subject_token_type,omitempty"`
	// The ID of the Custom Token Exchange action to execute for this profile, in order to validate the subject_token. The action must use the custom-token-exchange trigger.
	ActionID *string                       `json:"action_id,omitempty" url:"action_id,omitempty"`
	Type     *TokenExchangeProfileTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// The time when this profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this profile was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (c *CreateTokenExchangeProfileResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateTokenExchangeProfileResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateTokenExchangeProfileResponseContent) GetSubjectTokenType() *string {
	if c == nil {
		return nil
	}
	return c.SubjectTokenType
}

func (c *CreateTokenExchangeProfileResponseContent) GetActionID() *string {
	if c == nil {
		return nil
	}
	return c.ActionID
}

func (c *CreateTokenExchangeProfileResponseContent) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CreateTokenExchangeProfileResponseContent) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CreateTokenExchangeProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return c.ExtraProperties
}

func (c *CreateTokenExchangeProfileResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateTokenExchangeProfileResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateTokenExchangeProfileResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.ExtraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTokenExchangeProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateTokenExchangeProfileResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, c.ExtraProperties)
}

func (c *CreateTokenExchangeProfileResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetTokenExchangeProfileResponseContent struct {
	// The unique ID of the token exchange profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name of this profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Subject token type for this profile. When receiving a token exchange request on the Authentication API, the corresponding token exchange profile with a matching subject_token_type will be executed. This must be a URI.
	SubjectTokenType *string `json:"subject_token_type,omitempty" url:"subject_token_type,omitempty"`
	// The ID of the Custom Token Exchange action to execute for this profile, in order to validate the subject_token. The action must use the custom-token-exchange trigger.
	ActionID *string                       `json:"action_id,omitempty" url:"action_id,omitempty"`
	Type     *TokenExchangeProfileTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// The time when this profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this profile was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetTokenExchangeProfileResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetTokenExchangeProfileResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetTokenExchangeProfileResponseContent) GetSubjectTokenType() *string {
	if g == nil {
		return nil
	}
	return g.SubjectTokenType
}

func (g *GetTokenExchangeProfileResponseContent) GetActionID() *string {
	if g == nil {
		return nil
	}
	return g.ActionID
}

func (g *GetTokenExchangeProfileResponseContent) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GetTokenExchangeProfileResponseContent) GetUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetTokenExchangeProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetTokenExchangeProfileResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetTokenExchangeProfileResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetTokenExchangeProfileResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTokenExchangeProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetTokenExchangeProfileResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewOptionalDateTime(g.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(g.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetTokenExchangeProfileResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListTokenExchangeProfileResponseContent struct {
	// Opaque identifier for use with the <i>from</i> query parameter for the next page of results.<br/>This identifier is valid for 24 hours.
	Next                  *string                                `json:"next,omitempty" url:"next,omitempty"`
	TokenExchangeProfiles []*TokenExchangeProfileResponseContent `json:"token_exchange_profiles,omitempty" url:"token_exchange_profiles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListTokenExchangeProfileResponseContent) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *ListTokenExchangeProfileResponseContent) GetTokenExchangeProfiles() []*TokenExchangeProfileResponseContent {
	if l == nil {
		return nil
	}
	return l.TokenExchangeProfiles
}

func (l *ListTokenExchangeProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTokenExchangeProfileResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTokenExchangeProfileResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTokenExchangeProfileResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTokenExchangeProfileResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type TokenExchangeProfileResponseContent struct {
	// The unique ID of the token exchange profile.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Friendly name of this profile.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Subject token type for this profile. When receiving a token exchange request on the Authentication API, the corresponding token exchange profile with a matching subject_token_type will be executed. This must be a URI.
	SubjectTokenType *string `json:"subject_token_type,omitempty" url:"subject_token_type,omitempty"`
	// The ID of the Custom Token Exchange action to execute for this profile, in order to validate the subject_token. The action must use the custom-token-exchange trigger.
	ActionID *string                       `json:"action_id,omitempty" url:"action_id,omitempty"`
	Type     *TokenExchangeProfileTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// The time when this profile was created.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when this profile was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (t *TokenExchangeProfileResponseContent) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TokenExchangeProfileResponseContent) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TokenExchangeProfileResponseContent) GetSubjectTokenType() *string {
	if t == nil {
		return nil
	}
	return t.SubjectTokenType
}

func (t *TokenExchangeProfileResponseContent) GetActionID() *string {
	if t == nil {
		return nil
	}
	return t.ActionID
}

func (t *TokenExchangeProfileResponseContent) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TokenExchangeProfileResponseContent) GetUpdatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *TokenExchangeProfileResponseContent) GetExtraProperties() map[string]interface{} {
	return t.ExtraProperties
}

func (t *TokenExchangeProfileResponseContent) UnmarshalJSON(data []byte) error {
	type embed TokenExchangeProfileResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenExchangeProfileResponseContent(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.ExtraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenExchangeProfileResponseContent) MarshalJSON() ([]byte, error) {
	type embed TokenExchangeProfileResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewOptionalDateTime(t.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(t.UpdatedAt),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, t.ExtraProperties)
}

func (t *TokenExchangeProfileResponseContent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type of the profile, which controls how the profile will be executed when receiving a token exchange request.
type TokenExchangeProfileTypeEnum = string

type UpdateTokenExchangeProfileRequestContent struct {
	// Friendly name of this profile.
	Name *string `json:"name,omitempty" url:"-"`
	// Subject token type for this profile. When receiving a token exchange request on the Authentication API, the corresponding token exchange profile with a matching subject_token_type will be executed. This must be a URI.
	SubjectTokenType *string `json:"subject_token_type,omitempty" url:"-"`
}

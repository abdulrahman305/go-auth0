// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateFormRequestContent struct {
	Name         string            `json:"name" url:"-"`
	Messages     *FormMessages     `json:"messages,omitempty" url:"-"`
	Languages    *FormLanguages    `json:"languages,omitempty" url:"-"`
	Translations *FormTranslations `json:"translations,omitempty" url:"-"`
	Nodes        *FormNodeList     `json:"nodes,omitempty" url:"-"`
	Start        *FormStartNode    `json:"start,omitempty" url:"-"`
	Ending       *FormEndingNode   `json:"ending,omitempty" url:"-"`
	Style        *FormStyle        `json:"style,omitempty" url:"-"`
}

type GetFormRequestParameters struct {
	// Query parameter to hydrate the response with additional data
	Hydrate []*FormsRequestParametersHydrateEnum `json:"-" url:"hydrate,omitempty"`
}

type ListFormsRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page. Defaults to 50.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Query parameter to hydrate the response with additional data
	Hydrate []*FormsRequestParametersHydrateEnum `json:"-" url:"hydrate,omitempty"`
}

type CreateFormResponseContent struct {
	ID           string            `json:"id" url:"id"`
	Name         string            `json:"name" url:"name"`
	Messages     *FormMessages     `json:"messages,omitempty" url:"messages,omitempty"`
	Languages    *FormLanguages    `json:"languages,omitempty" url:"languages,omitempty"`
	Translations *FormTranslations `json:"translations,omitempty" url:"translations,omitempty"`
	Nodes        *FormNodeList     `json:"nodes,omitempty" url:"nodes,omitempty"`
	Start        *FormStartNode    `json:"start,omitempty" url:"start,omitempty"`
	Ending       *FormEndingNode   `json:"ending,omitempty" url:"ending,omitempty"`
	Style        *FormStyle        `json:"style,omitempty" url:"style,omitempty"`
	CreatedAt    time.Time         `json:"created_at" url:"created_at"`
	UpdatedAt    time.Time         `json:"updated_at" url:"updated_at"`
	EmbeddedAt   *string           `json:"embedded_at,omitempty" url:"embedded_at,omitempty"`
	SubmittedAt  *string           `json:"submitted_at,omitempty" url:"submitted_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateFormResponseContent) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreateFormResponseContent) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateFormResponseContent) GetMessages() *FormMessages {
	if c == nil {
		return nil
	}
	return c.Messages
}

func (c *CreateFormResponseContent) GetLanguages() *FormLanguages {
	if c == nil {
		return nil
	}
	return c.Languages
}

func (c *CreateFormResponseContent) GetTranslations() *FormTranslations {
	if c == nil {
		return nil
	}
	return c.Translations
}

func (c *CreateFormResponseContent) GetNodes() *FormNodeList {
	if c == nil {
		return nil
	}
	return c.Nodes
}

func (c *CreateFormResponseContent) GetStart() *FormStartNode {
	if c == nil {
		return nil
	}
	return c.Start
}

func (c *CreateFormResponseContent) GetEnding() *FormEndingNode {
	if c == nil {
		return nil
	}
	return c.Ending
}

func (c *CreateFormResponseContent) GetStyle() *FormStyle {
	if c == nil {
		return nil
	}
	return c.Style
}

func (c *CreateFormResponseContent) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreateFormResponseContent) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreateFormResponseContent) GetEmbeddedAt() *string {
	if c == nil {
		return nil
	}
	return c.EmbeddedAt
}

func (c *CreateFormResponseContent) GetSubmittedAt() *string {
	if c == nil {
		return nil
	}
	return c.SubmittedAt
}

func (c *CreateFormResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateFormResponseContent) UnmarshalJSON(data []byte) error {
	type embed CreateFormResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateFormResponseContent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFormResponseContent) MarshalJSON() ([]byte, error) {
	type embed CreateFormResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateFormResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type FormBlock struct {
	FormBlockDivider        *FormBlockDivider
	FormBlockHTML           *FormBlockHTML
	FormBlockImage          *FormBlockImage
	FormBlockJumpButton     *FormBlockJumpButton
	FormBlockResendButton   *FormBlockResendButton
	FormBlockNextButton     *FormBlockNextButton
	FormBlockPreviousButton *FormBlockPreviousButton
	FormBlockRichText       *FormBlockRichText

	typ string
}

func (f *FormBlock) GetFormBlockDivider() *FormBlockDivider {
	if f == nil {
		return nil
	}
	return f.FormBlockDivider
}

func (f *FormBlock) GetFormBlockHTML() *FormBlockHTML {
	if f == nil {
		return nil
	}
	return f.FormBlockHTML
}

func (f *FormBlock) GetFormBlockImage() *FormBlockImage {
	if f == nil {
		return nil
	}
	return f.FormBlockImage
}

func (f *FormBlock) GetFormBlockJumpButton() *FormBlockJumpButton {
	if f == nil {
		return nil
	}
	return f.FormBlockJumpButton
}

func (f *FormBlock) GetFormBlockResendButton() *FormBlockResendButton {
	if f == nil {
		return nil
	}
	return f.FormBlockResendButton
}

func (f *FormBlock) GetFormBlockNextButton() *FormBlockNextButton {
	if f == nil {
		return nil
	}
	return f.FormBlockNextButton
}

func (f *FormBlock) GetFormBlockPreviousButton() *FormBlockPreviousButton {
	if f == nil {
		return nil
	}
	return f.FormBlockPreviousButton
}

func (f *FormBlock) GetFormBlockRichText() *FormBlockRichText {
	if f == nil {
		return nil
	}
	return f.FormBlockRichText
}

func (f *FormBlock) UnmarshalJSON(data []byte) error {
	valueFormBlockDivider := new(FormBlockDivider)
	if err := json.Unmarshal(data, &valueFormBlockDivider); err == nil {
		f.typ = "FormBlockDivider"
		f.FormBlockDivider = valueFormBlockDivider
		return nil
	}
	valueFormBlockHTML := new(FormBlockHTML)
	if err := json.Unmarshal(data, &valueFormBlockHTML); err == nil {
		f.typ = "FormBlockHTML"
		f.FormBlockHTML = valueFormBlockHTML
		return nil
	}
	valueFormBlockImage := new(FormBlockImage)
	if err := json.Unmarshal(data, &valueFormBlockImage); err == nil {
		f.typ = "FormBlockImage"
		f.FormBlockImage = valueFormBlockImage
		return nil
	}
	valueFormBlockJumpButton := new(FormBlockJumpButton)
	if err := json.Unmarshal(data, &valueFormBlockJumpButton); err == nil {
		f.typ = "FormBlockJumpButton"
		f.FormBlockJumpButton = valueFormBlockJumpButton
		return nil
	}
	valueFormBlockResendButton := new(FormBlockResendButton)
	if err := json.Unmarshal(data, &valueFormBlockResendButton); err == nil {
		f.typ = "FormBlockResendButton"
		f.FormBlockResendButton = valueFormBlockResendButton
		return nil
	}
	valueFormBlockNextButton := new(FormBlockNextButton)
	if err := json.Unmarshal(data, &valueFormBlockNextButton); err == nil {
		f.typ = "FormBlockNextButton"
		f.FormBlockNextButton = valueFormBlockNextButton
		return nil
	}
	valueFormBlockPreviousButton := new(FormBlockPreviousButton)
	if err := json.Unmarshal(data, &valueFormBlockPreviousButton); err == nil {
		f.typ = "FormBlockPreviousButton"
		f.FormBlockPreviousButton = valueFormBlockPreviousButton
		return nil
	}
	valueFormBlockRichText := new(FormBlockRichText)
	if err := json.Unmarshal(data, &valueFormBlockRichText); err == nil {
		f.typ = "FormBlockRichText"
		f.FormBlockRichText = valueFormBlockRichText
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormBlock) MarshalJSON() ([]byte, error) {
	if f.typ == "FormBlockDivider" || f.FormBlockDivider != nil {
		return json.Marshal(f.FormBlockDivider)
	}
	if f.typ == "FormBlockHTML" || f.FormBlockHTML != nil {
		return json.Marshal(f.FormBlockHTML)
	}
	if f.typ == "FormBlockImage" || f.FormBlockImage != nil {
		return json.Marshal(f.FormBlockImage)
	}
	if f.typ == "FormBlockJumpButton" || f.FormBlockJumpButton != nil {
		return json.Marshal(f.FormBlockJumpButton)
	}
	if f.typ == "FormBlockResendButton" || f.FormBlockResendButton != nil {
		return json.Marshal(f.FormBlockResendButton)
	}
	if f.typ == "FormBlockNextButton" || f.FormBlockNextButton != nil {
		return json.Marshal(f.FormBlockNextButton)
	}
	if f.typ == "FormBlockPreviousButton" || f.FormBlockPreviousButton != nil {
		return json.Marshal(f.FormBlockPreviousButton)
	}
	if f.typ == "FormBlockRichText" || f.FormBlockRichText != nil {
		return json.Marshal(f.FormBlockRichText)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormBlockVisitor interface {
	VisitFormBlockDivider(*FormBlockDivider) error
	VisitFormBlockHTML(*FormBlockHTML) error
	VisitFormBlockImage(*FormBlockImage) error
	VisitFormBlockJumpButton(*FormBlockJumpButton) error
	VisitFormBlockResendButton(*FormBlockResendButton) error
	VisitFormBlockNextButton(*FormBlockNextButton) error
	VisitFormBlockPreviousButton(*FormBlockPreviousButton) error
	VisitFormBlockRichText(*FormBlockRichText) error
}

func (f *FormBlock) Accept(visitor FormBlockVisitor) error {
	if f.typ == "FormBlockDivider" || f.FormBlockDivider != nil {
		return visitor.VisitFormBlockDivider(f.FormBlockDivider)
	}
	if f.typ == "FormBlockHTML" || f.FormBlockHTML != nil {
		return visitor.VisitFormBlockHTML(f.FormBlockHTML)
	}
	if f.typ == "FormBlockImage" || f.FormBlockImage != nil {
		return visitor.VisitFormBlockImage(f.FormBlockImage)
	}
	if f.typ == "FormBlockJumpButton" || f.FormBlockJumpButton != nil {
		return visitor.VisitFormBlockJumpButton(f.FormBlockJumpButton)
	}
	if f.typ == "FormBlockResendButton" || f.FormBlockResendButton != nil {
		return visitor.VisitFormBlockResendButton(f.FormBlockResendButton)
	}
	if f.typ == "FormBlockNextButton" || f.FormBlockNextButton != nil {
		return visitor.VisitFormBlockNextButton(f.FormBlockNextButton)
	}
	if f.typ == "FormBlockPreviousButton" || f.FormBlockPreviousButton != nil {
		return visitor.VisitFormBlockPreviousButton(f.FormBlockPreviousButton)
	}
	if f.typ == "FormBlockRichText" || f.FormBlockRichText != nil {
		return visitor.VisitFormBlockRichText(f.FormBlockRichText)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormBlockDivider struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeDividerConst       `json:"type" url:"type"`
	Config   *FormBlockDividerConfig         `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockDivider) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockDivider) GetConfig() *FormBlockDividerConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockDivider) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockDivider) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockDivider
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockDivider(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockDivider) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockDividerConfig struct {
	Text *string `json:"text,omitempty" url:"text,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockDividerConfig) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FormBlockDividerConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockDividerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockDividerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockDividerConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockDividerConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockHTML struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeHTMLConst          `json:"type" url:"type"`
	Config   *FormBlockHTMLConfig            `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockHTML) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockHTML) GetConfig() *FormBlockHTMLConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockHTML) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockHTML) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockHTML
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockHTML(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockHTML) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockHTMLConfig struct {
	Content *string `json:"content,omitempty" url:"content,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockHTMLConfig) GetContent() *string {
	if f == nil {
		return nil
	}
	return f.Content
}

func (f *FormBlockHTMLConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockHTMLConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockHTMLConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockHTMLConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockHTMLConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockImage struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeImageConst         `json:"type" url:"type"`
	Config   *FormBlockImageConfig           `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockImage) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockImage) GetConfig() *FormBlockImageConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockImage) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockImage) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockImage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockImage) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockImageConfig struct {
	Src      string                            `json:"src" url:"src"`
	Position *FormBlockImageConfigPositionEnum `json:"position,omitempty" url:"position,omitempty"`
	Height   *float64                          `json:"height,omitempty" url:"height,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockImageConfig) GetSrc() string {
	if f == nil {
		return ""
	}
	return f.Src
}

func (f *FormBlockImageConfig) GetPosition() *FormBlockImageConfigPositionEnum {
	if f == nil {
		return nil
	}
	return f.Position
}

func (f *FormBlockImageConfig) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FormBlockImageConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockImageConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockImageConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockImageConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockImageConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockImageConfigPositionEnum string

const (
	FormBlockImageConfigPositionEnumLeft   FormBlockImageConfigPositionEnum = "LEFT"
	FormBlockImageConfigPositionEnumCenter FormBlockImageConfigPositionEnum = "CENTER"
	FormBlockImageConfigPositionEnumRight  FormBlockImageConfigPositionEnum = "RIGHT"
)

func NewFormBlockImageConfigPositionEnumFromString(s string) (FormBlockImageConfigPositionEnum, error) {
	switch s {
	case "LEFT":
		return FormBlockImageConfigPositionEnumLeft, nil
	case "CENTER":
		return FormBlockImageConfigPositionEnumCenter, nil
	case "RIGHT":
		return FormBlockImageConfigPositionEnumRight, nil
	}
	var t FormBlockImageConfigPositionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormBlockImageConfigPositionEnum) Ptr() *FormBlockImageConfigPositionEnum {
	return &f
}

type FormBlockJumpButton struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeJumpButtonConst    `json:"type" url:"type"`
	Config   *FormBlockJumpButtonConfig      `json:"config" url:"config"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockJumpButton) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockJumpButton) GetConfig() *FormBlockJumpButtonConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockJumpButton) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockJumpButton) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockJumpButton
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockJumpButton(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockJumpButton) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockJumpButtonConfig struct {
	Text     string                          `json:"text" url:"text"`
	NextNode *FormNodePointer                `json:"next_node" url:"next_node"`
	Style    *FormBlockJumpButtonConfigStyle `json:"style,omitempty" url:"style,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockJumpButtonConfig) GetText() string {
	if f == nil {
		return ""
	}
	return f.Text
}

func (f *FormBlockJumpButtonConfig) GetNextNode() *FormNodePointer {
	if f == nil {
		return nil
	}
	return f.NextNode
}

func (f *FormBlockJumpButtonConfig) GetStyle() *FormBlockJumpButtonConfigStyle {
	if f == nil {
		return nil
	}
	return f.Style
}

func (f *FormBlockJumpButtonConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockJumpButtonConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockJumpButtonConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockJumpButtonConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockJumpButtonConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockJumpButtonConfigStyle struct {
	BackgroundColor *string `json:"background_color,omitempty" url:"background_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockJumpButtonConfigStyle) GetBackgroundColor() *string {
	if f == nil {
		return nil
	}
	return f.BackgroundColor
}

func (f *FormBlockJumpButtonConfigStyle) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockJumpButtonConfigStyle) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockJumpButtonConfigStyle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockJumpButtonConfigStyle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockJumpButtonConfigStyle) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockNextButton struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeNextButtonConst    `json:"type" url:"type"`
	Config   *FormBlockNextButtonConfig      `json:"config" url:"config"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockNextButton) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockNextButton) GetConfig() *FormBlockNextButtonConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockNextButton) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockNextButton) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockNextButton
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockNextButton(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockNextButton) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockNextButtonConfig struct {
	Text string `json:"text" url:"text"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockNextButtonConfig) GetText() string {
	if f == nil {
		return ""
	}
	return f.Text
}

func (f *FormBlockNextButtonConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockNextButtonConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockNextButtonConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockNextButtonConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockNextButtonConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockPreviousButton struct {
	ID       string                           `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst  `json:"category" url:"category"`
	Type     FormBlockTypePreviousButtonConst `json:"type" url:"type"`
	Config   *FormBlockPreviousButtonConfig   `json:"config" url:"config"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockPreviousButton) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockPreviousButton) GetConfig() *FormBlockPreviousButtonConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockPreviousButton) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockPreviousButton) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockPreviousButton
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockPreviousButton(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockPreviousButton) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockPreviousButtonConfig struct {
	Text string `json:"text" url:"text"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockPreviousButtonConfig) GetText() string {
	if f == nil {
		return ""
	}
	return f.Text
}

func (f *FormBlockPreviousButtonConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockPreviousButtonConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockPreviousButtonConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockPreviousButtonConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockPreviousButtonConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockResendButton struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeResendButtonConst  `json:"type" url:"type"`
	Config   *FormBlockResendButtonConfig    `json:"config" url:"config"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockResendButton) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockResendButton) GetConfig() *FormBlockResendButtonConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockResendButton) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockResendButton) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockResendButton
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockResendButton(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockResendButton) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockResendButtonConfig struct {
	ActiveText    string                                        `json:"active_text" url:"active_text"`
	ButtonText    string                                        `json:"button_text" url:"button_text"`
	WaitingText   string                                        `json:"waiting_text" url:"waiting_text"`
	TextAlignment *FormBlockResendButtonConfigTextAlignmentEnum `json:"text_alignment,omitempty" url:"text_alignment,omitempty"`
	FlowID        string                                        `json:"flow_id" url:"flow_id"`
	MaxAttempts   *float64                                      `json:"max_attempts,omitempty" url:"max_attempts,omitempty"`
	WaitingTime   *float64                                      `json:"waiting_time,omitempty" url:"waiting_time,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockResendButtonConfig) GetActiveText() string {
	if f == nil {
		return ""
	}
	return f.ActiveText
}

func (f *FormBlockResendButtonConfig) GetButtonText() string {
	if f == nil {
		return ""
	}
	return f.ButtonText
}

func (f *FormBlockResendButtonConfig) GetWaitingText() string {
	if f == nil {
		return ""
	}
	return f.WaitingText
}

func (f *FormBlockResendButtonConfig) GetTextAlignment() *FormBlockResendButtonConfigTextAlignmentEnum {
	if f == nil {
		return nil
	}
	return f.TextAlignment
}

func (f *FormBlockResendButtonConfig) GetFlowID() string {
	if f == nil {
		return ""
	}
	return f.FlowID
}

func (f *FormBlockResendButtonConfig) GetMaxAttempts() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxAttempts
}

func (f *FormBlockResendButtonConfig) GetWaitingTime() *float64 {
	if f == nil {
		return nil
	}
	return f.WaitingTime
}

func (f *FormBlockResendButtonConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockResendButtonConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockResendButtonConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockResendButtonConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockResendButtonConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockResendButtonConfigTextAlignmentEnum string

const (
	FormBlockResendButtonConfigTextAlignmentEnumLeft   FormBlockResendButtonConfigTextAlignmentEnum = "LEFT"
	FormBlockResendButtonConfigTextAlignmentEnumCenter FormBlockResendButtonConfigTextAlignmentEnum = "CENTER"
	FormBlockResendButtonConfigTextAlignmentEnumRight  FormBlockResendButtonConfigTextAlignmentEnum = "RIGHT"
)

func NewFormBlockResendButtonConfigTextAlignmentEnumFromString(s string) (FormBlockResendButtonConfigTextAlignmentEnum, error) {
	switch s {
	case "LEFT":
		return FormBlockResendButtonConfigTextAlignmentEnumLeft, nil
	case "CENTER":
		return FormBlockResendButtonConfigTextAlignmentEnumCenter, nil
	case "RIGHT":
		return FormBlockResendButtonConfigTextAlignmentEnumRight, nil
	}
	var t FormBlockResendButtonConfigTextAlignmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormBlockResendButtonConfigTextAlignmentEnum) Ptr() *FormBlockResendButtonConfigTextAlignmentEnum {
	return &f
}

type FormBlockRichText struct {
	ID       string                          `json:"id" url:"id"`
	Category FormComponentCategoryBlockConst `json:"category" url:"category"`
	Type     FormBlockTypeRichTextConst      `json:"type" url:"type"`
	Config   *FormBlockRichTextConfig        `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockRichText) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormBlockRichText) GetConfig() *FormBlockRichTextConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormBlockRichText) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockRichText) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockRichText
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockRichText(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockRichText) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockRichTextConfig struct {
	Content *string `json:"content,omitempty" url:"content,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormBlockRichTextConfig) GetContent() *string {
	if f == nil {
		return nil
	}
	return f.Content
}

func (f *FormBlockRichTextConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormBlockRichTextConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormBlockRichTextConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormBlockRichTextConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormBlockRichTextConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormBlockTypeDividerConst = string

type FormBlockTypeHTMLConst = string

type FormBlockTypeImageConst = string

type FormBlockTypeJumpButtonConst = string

type FormBlockTypeNextButtonConst = string

type FormBlockTypePreviousButtonConst = string

type FormBlockTypeResendButtonConst = string

type FormBlockTypeRichTextConst = string

type FormComponent struct {
	FormBlock  *FormBlock
	FormWidget *FormWidget
	FormField  *FormField

	typ string
}

func (f *FormComponent) GetFormBlock() *FormBlock {
	if f == nil {
		return nil
	}
	return f.FormBlock
}

func (f *FormComponent) GetFormWidget() *FormWidget {
	if f == nil {
		return nil
	}
	return f.FormWidget
}

func (f *FormComponent) GetFormField() *FormField {
	if f == nil {
		return nil
	}
	return f.FormField
}

func (f *FormComponent) UnmarshalJSON(data []byte) error {
	valueFormBlock := new(FormBlock)
	if err := json.Unmarshal(data, &valueFormBlock); err == nil {
		f.typ = "FormBlock"
		f.FormBlock = valueFormBlock
		return nil
	}
	valueFormWidget := new(FormWidget)
	if err := json.Unmarshal(data, &valueFormWidget); err == nil {
		f.typ = "FormWidget"
		f.FormWidget = valueFormWidget
		return nil
	}
	valueFormField := new(FormField)
	if err := json.Unmarshal(data, &valueFormField); err == nil {
		f.typ = "FormField"
		f.FormField = valueFormField
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormComponent) MarshalJSON() ([]byte, error) {
	if f.typ == "FormBlock" || f.FormBlock != nil {
		return json.Marshal(f.FormBlock)
	}
	if f.typ == "FormWidget" || f.FormWidget != nil {
		return json.Marshal(f.FormWidget)
	}
	if f.typ == "FormField" || f.FormField != nil {
		return json.Marshal(f.FormField)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormComponentVisitor interface {
	VisitFormBlock(*FormBlock) error
	VisitFormWidget(*FormWidget) error
	VisitFormField(*FormField) error
}

func (f *FormComponent) Accept(visitor FormComponentVisitor) error {
	if f.typ == "FormBlock" || f.FormBlock != nil {
		return visitor.VisitFormBlock(f.FormBlock)
	}
	if f.typ == "FormWidget" || f.FormWidget != nil {
		return visitor.VisitFormWidget(f.FormWidget)
	}
	if f.typ == "FormField" || f.FormField != nil {
		return visitor.VisitFormField(f.FormField)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormComponentCategoryBlockConst = string

type FormComponentCategoryFieldConst = string

type FormComponentCategoryWidgetConst = string

type FormEndingNode struct {
	Redirection *FormEndingNodeRedirection         `json:"redirection,omitempty" url:"redirection,omitempty"`
	AfterSubmit *FormEndingNodeAfterSubmit         `json:"after_submit,omitempty" url:"after_submit,omitempty"`
	Coordinates *FormNodeCoordinates               `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	ResumeFlow  *FormEndingNodeResumeFlowTrueConst `json:"resume_flow,omitempty" url:"resume_flow,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormEndingNode) GetRedirection() *FormEndingNodeRedirection {
	if f == nil {
		return nil
	}
	return f.Redirection
}

func (f *FormEndingNode) GetAfterSubmit() *FormEndingNodeAfterSubmit {
	if f == nil {
		return nil
	}
	return f.AfterSubmit
}

func (f *FormEndingNode) GetCoordinates() *FormNodeCoordinates {
	if f == nil {
		return nil
	}
	return f.Coordinates
}

func (f *FormEndingNode) GetResumeFlow() *FormEndingNodeResumeFlowTrueConst {
	if f == nil {
		return nil
	}
	return f.ResumeFlow
}

func (f *FormEndingNode) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormEndingNode) UnmarshalJSON(data []byte) error {
	type unmarshaler FormEndingNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormEndingNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormEndingNode) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormEndingNodeAfterSubmit struct {
	FlowID *string `json:"flow_id,omitempty" url:"flow_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormEndingNodeAfterSubmit) GetFlowID() *string {
	if f == nil {
		return nil
	}
	return f.FlowID
}

func (f *FormEndingNodeAfterSubmit) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormEndingNodeAfterSubmit) UnmarshalJSON(data []byte) error {
	type unmarshaler FormEndingNodeAfterSubmit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormEndingNodeAfterSubmit(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormEndingNodeAfterSubmit) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormEndingNodeID = string

type FormEndingNodeNullable = *FormEndingNode

type FormEndingNodeRedirection struct {
	Delay  *int   `json:"delay,omitempty" url:"delay,omitempty"`
	Target string `json:"target" url:"target"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormEndingNodeRedirection) GetDelay() *int {
	if f == nil {
		return nil
	}
	return f.Delay
}

func (f *FormEndingNodeRedirection) GetTarget() string {
	if f == nil {
		return ""
	}
	return f.Target
}

func (f *FormEndingNodeRedirection) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormEndingNodeRedirection) UnmarshalJSON(data []byte) error {
	type unmarshaler FormEndingNodeRedirection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormEndingNodeRedirection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormEndingNodeRedirection) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormEndingNodeResumeFlowTrueConst = bool

type FormField struct {
	FormFieldBoolean  *FormFieldBoolean
	FormFieldCards    *FormFieldCards
	FormFieldChoice   *FormFieldChoice
	FormFieldCustom   *FormFieldCustom
	FormFieldDate     *FormFieldDate
	FormFieldDropdown *FormFieldDropdown
	FormFieldEmail    *FormFieldEmail
	FormFieldFile     *FormFieldFile
	FormFieldLegal    *FormFieldLegal
	FormFieldNumber   *FormFieldNumber
	FormFieldPassword *FormFieldPassword
	FormFieldPayment  *FormFieldPayment
	FormFieldSocial   *FormFieldSocial
	FormFieldTel      *FormFieldTel
	FormFieldText     *FormFieldText
	FormFieldURL      *FormFieldURL

	typ string
}

func (f *FormField) GetFormFieldBoolean() *FormFieldBoolean {
	if f == nil {
		return nil
	}
	return f.FormFieldBoolean
}

func (f *FormField) GetFormFieldCards() *FormFieldCards {
	if f == nil {
		return nil
	}
	return f.FormFieldCards
}

func (f *FormField) GetFormFieldChoice() *FormFieldChoice {
	if f == nil {
		return nil
	}
	return f.FormFieldChoice
}

func (f *FormField) GetFormFieldCustom() *FormFieldCustom {
	if f == nil {
		return nil
	}
	return f.FormFieldCustom
}

func (f *FormField) GetFormFieldDate() *FormFieldDate {
	if f == nil {
		return nil
	}
	return f.FormFieldDate
}

func (f *FormField) GetFormFieldDropdown() *FormFieldDropdown {
	if f == nil {
		return nil
	}
	return f.FormFieldDropdown
}

func (f *FormField) GetFormFieldEmail() *FormFieldEmail {
	if f == nil {
		return nil
	}
	return f.FormFieldEmail
}

func (f *FormField) GetFormFieldFile() *FormFieldFile {
	if f == nil {
		return nil
	}
	return f.FormFieldFile
}

func (f *FormField) GetFormFieldLegal() *FormFieldLegal {
	if f == nil {
		return nil
	}
	return f.FormFieldLegal
}

func (f *FormField) GetFormFieldNumber() *FormFieldNumber {
	if f == nil {
		return nil
	}
	return f.FormFieldNumber
}

func (f *FormField) GetFormFieldPassword() *FormFieldPassword {
	if f == nil {
		return nil
	}
	return f.FormFieldPassword
}

func (f *FormField) GetFormFieldPayment() *FormFieldPayment {
	if f == nil {
		return nil
	}
	return f.FormFieldPayment
}

func (f *FormField) GetFormFieldSocial() *FormFieldSocial {
	if f == nil {
		return nil
	}
	return f.FormFieldSocial
}

func (f *FormField) GetFormFieldTel() *FormFieldTel {
	if f == nil {
		return nil
	}
	return f.FormFieldTel
}

func (f *FormField) GetFormFieldText() *FormFieldText {
	if f == nil {
		return nil
	}
	return f.FormFieldText
}

func (f *FormField) GetFormFieldURL() *FormFieldURL {
	if f == nil {
		return nil
	}
	return f.FormFieldURL
}

func (f *FormField) UnmarshalJSON(data []byte) error {
	valueFormFieldBoolean := new(FormFieldBoolean)
	if err := json.Unmarshal(data, &valueFormFieldBoolean); err == nil {
		f.typ = "FormFieldBoolean"
		f.FormFieldBoolean = valueFormFieldBoolean
		return nil
	}
	valueFormFieldCards := new(FormFieldCards)
	if err := json.Unmarshal(data, &valueFormFieldCards); err == nil {
		f.typ = "FormFieldCards"
		f.FormFieldCards = valueFormFieldCards
		return nil
	}
	valueFormFieldChoice := new(FormFieldChoice)
	if err := json.Unmarshal(data, &valueFormFieldChoice); err == nil {
		f.typ = "FormFieldChoice"
		f.FormFieldChoice = valueFormFieldChoice
		return nil
	}
	valueFormFieldCustom := new(FormFieldCustom)
	if err := json.Unmarshal(data, &valueFormFieldCustom); err == nil {
		f.typ = "FormFieldCustom"
		f.FormFieldCustom = valueFormFieldCustom
		return nil
	}
	valueFormFieldDate := new(FormFieldDate)
	if err := json.Unmarshal(data, &valueFormFieldDate); err == nil {
		f.typ = "FormFieldDate"
		f.FormFieldDate = valueFormFieldDate
		return nil
	}
	valueFormFieldDropdown := new(FormFieldDropdown)
	if err := json.Unmarshal(data, &valueFormFieldDropdown); err == nil {
		f.typ = "FormFieldDropdown"
		f.FormFieldDropdown = valueFormFieldDropdown
		return nil
	}
	valueFormFieldEmail := new(FormFieldEmail)
	if err := json.Unmarshal(data, &valueFormFieldEmail); err == nil {
		f.typ = "FormFieldEmail"
		f.FormFieldEmail = valueFormFieldEmail
		return nil
	}
	valueFormFieldFile := new(FormFieldFile)
	if err := json.Unmarshal(data, &valueFormFieldFile); err == nil {
		f.typ = "FormFieldFile"
		f.FormFieldFile = valueFormFieldFile
		return nil
	}
	valueFormFieldLegal := new(FormFieldLegal)
	if err := json.Unmarshal(data, &valueFormFieldLegal); err == nil {
		f.typ = "FormFieldLegal"
		f.FormFieldLegal = valueFormFieldLegal
		return nil
	}
	valueFormFieldNumber := new(FormFieldNumber)
	if err := json.Unmarshal(data, &valueFormFieldNumber); err == nil {
		f.typ = "FormFieldNumber"
		f.FormFieldNumber = valueFormFieldNumber
		return nil
	}
	valueFormFieldPassword := new(FormFieldPassword)
	if err := json.Unmarshal(data, &valueFormFieldPassword); err == nil {
		f.typ = "FormFieldPassword"
		f.FormFieldPassword = valueFormFieldPassword
		return nil
	}
	valueFormFieldPayment := new(FormFieldPayment)
	if err := json.Unmarshal(data, &valueFormFieldPayment); err == nil {
		f.typ = "FormFieldPayment"
		f.FormFieldPayment = valueFormFieldPayment
		return nil
	}
	valueFormFieldSocial := new(FormFieldSocial)
	if err := json.Unmarshal(data, &valueFormFieldSocial); err == nil {
		f.typ = "FormFieldSocial"
		f.FormFieldSocial = valueFormFieldSocial
		return nil
	}
	valueFormFieldTel := new(FormFieldTel)
	if err := json.Unmarshal(data, &valueFormFieldTel); err == nil {
		f.typ = "FormFieldTel"
		f.FormFieldTel = valueFormFieldTel
		return nil
	}
	valueFormFieldText := new(FormFieldText)
	if err := json.Unmarshal(data, &valueFormFieldText); err == nil {
		f.typ = "FormFieldText"
		f.FormFieldText = valueFormFieldText
		return nil
	}
	valueFormFieldURL := new(FormFieldURL)
	if err := json.Unmarshal(data, &valueFormFieldURL); err == nil {
		f.typ = "FormFieldURL"
		f.FormFieldURL = valueFormFieldURL
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormField) MarshalJSON() ([]byte, error) {
	if f.typ == "FormFieldBoolean" || f.FormFieldBoolean != nil {
		return json.Marshal(f.FormFieldBoolean)
	}
	if f.typ == "FormFieldCards" || f.FormFieldCards != nil {
		return json.Marshal(f.FormFieldCards)
	}
	if f.typ == "FormFieldChoice" || f.FormFieldChoice != nil {
		return json.Marshal(f.FormFieldChoice)
	}
	if f.typ == "FormFieldCustom" || f.FormFieldCustom != nil {
		return json.Marshal(f.FormFieldCustom)
	}
	if f.typ == "FormFieldDate" || f.FormFieldDate != nil {
		return json.Marshal(f.FormFieldDate)
	}
	if f.typ == "FormFieldDropdown" || f.FormFieldDropdown != nil {
		return json.Marshal(f.FormFieldDropdown)
	}
	if f.typ == "FormFieldEmail" || f.FormFieldEmail != nil {
		return json.Marshal(f.FormFieldEmail)
	}
	if f.typ == "FormFieldFile" || f.FormFieldFile != nil {
		return json.Marshal(f.FormFieldFile)
	}
	if f.typ == "FormFieldLegal" || f.FormFieldLegal != nil {
		return json.Marshal(f.FormFieldLegal)
	}
	if f.typ == "FormFieldNumber" || f.FormFieldNumber != nil {
		return json.Marshal(f.FormFieldNumber)
	}
	if f.typ == "FormFieldPassword" || f.FormFieldPassword != nil {
		return json.Marshal(f.FormFieldPassword)
	}
	if f.typ == "FormFieldPayment" || f.FormFieldPayment != nil {
		return json.Marshal(f.FormFieldPayment)
	}
	if f.typ == "FormFieldSocial" || f.FormFieldSocial != nil {
		return json.Marshal(f.FormFieldSocial)
	}
	if f.typ == "FormFieldTel" || f.FormFieldTel != nil {
		return json.Marshal(f.FormFieldTel)
	}
	if f.typ == "FormFieldText" || f.FormFieldText != nil {
		return json.Marshal(f.FormFieldText)
	}
	if f.typ == "FormFieldURL" || f.FormFieldURL != nil {
		return json.Marshal(f.FormFieldURL)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormFieldVisitor interface {
	VisitFormFieldBoolean(*FormFieldBoolean) error
	VisitFormFieldCards(*FormFieldCards) error
	VisitFormFieldChoice(*FormFieldChoice) error
	VisitFormFieldCustom(*FormFieldCustom) error
	VisitFormFieldDate(*FormFieldDate) error
	VisitFormFieldDropdown(*FormFieldDropdown) error
	VisitFormFieldEmail(*FormFieldEmail) error
	VisitFormFieldFile(*FormFieldFile) error
	VisitFormFieldLegal(*FormFieldLegal) error
	VisitFormFieldNumber(*FormFieldNumber) error
	VisitFormFieldPassword(*FormFieldPassword) error
	VisitFormFieldPayment(*FormFieldPayment) error
	VisitFormFieldSocial(*FormFieldSocial) error
	VisitFormFieldTel(*FormFieldTel) error
	VisitFormFieldText(*FormFieldText) error
	VisitFormFieldURL(*FormFieldURL) error
}

func (f *FormField) Accept(visitor FormFieldVisitor) error {
	if f.typ == "FormFieldBoolean" || f.FormFieldBoolean != nil {
		return visitor.VisitFormFieldBoolean(f.FormFieldBoolean)
	}
	if f.typ == "FormFieldCards" || f.FormFieldCards != nil {
		return visitor.VisitFormFieldCards(f.FormFieldCards)
	}
	if f.typ == "FormFieldChoice" || f.FormFieldChoice != nil {
		return visitor.VisitFormFieldChoice(f.FormFieldChoice)
	}
	if f.typ == "FormFieldCustom" || f.FormFieldCustom != nil {
		return visitor.VisitFormFieldCustom(f.FormFieldCustom)
	}
	if f.typ == "FormFieldDate" || f.FormFieldDate != nil {
		return visitor.VisitFormFieldDate(f.FormFieldDate)
	}
	if f.typ == "FormFieldDropdown" || f.FormFieldDropdown != nil {
		return visitor.VisitFormFieldDropdown(f.FormFieldDropdown)
	}
	if f.typ == "FormFieldEmail" || f.FormFieldEmail != nil {
		return visitor.VisitFormFieldEmail(f.FormFieldEmail)
	}
	if f.typ == "FormFieldFile" || f.FormFieldFile != nil {
		return visitor.VisitFormFieldFile(f.FormFieldFile)
	}
	if f.typ == "FormFieldLegal" || f.FormFieldLegal != nil {
		return visitor.VisitFormFieldLegal(f.FormFieldLegal)
	}
	if f.typ == "FormFieldNumber" || f.FormFieldNumber != nil {
		return visitor.VisitFormFieldNumber(f.FormFieldNumber)
	}
	if f.typ == "FormFieldPassword" || f.FormFieldPassword != nil {
		return visitor.VisitFormFieldPassword(f.FormFieldPassword)
	}
	if f.typ == "FormFieldPayment" || f.FormFieldPayment != nil {
		return visitor.VisitFormFieldPayment(f.FormFieldPayment)
	}
	if f.typ == "FormFieldSocial" || f.FormFieldSocial != nil {
		return visitor.VisitFormFieldSocial(f.FormFieldSocial)
	}
	if f.typ == "FormFieldTel" || f.FormFieldTel != nil {
		return visitor.VisitFormFieldTel(f.FormFieldTel)
	}
	if f.typ == "FormFieldText" || f.FormFieldText != nil {
		return visitor.VisitFormFieldText(f.FormFieldText)
	}
	if f.typ == "FormFieldURL" || f.FormFieldURL != nil {
		return visitor.VisitFormFieldURL(f.FormFieldURL)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormFieldBoolean struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeBooleanConst       `json:"type" url:"type"`
	Config    *FormFieldBooleanConfig         `json:"config" url:"config"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldBoolean) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldBoolean) GetConfig() *FormFieldBooleanConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldBoolean) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldBoolean) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldBoolean) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldBoolean) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldBoolean) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldBoolean) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldBoolean
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldBoolean(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldBoolean) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldBooleanConfig struct {
	DefaultValue *bool                          `json:"default_value,omitempty" url:"default_value,omitempty"`
	Options      *FormFieldBooleanConfigOptions `json:"options,omitempty" url:"options,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldBooleanConfig) GetDefaultValue() *bool {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldBooleanConfig) GetOptions() *FormFieldBooleanConfigOptions {
	if f == nil {
		return nil
	}
	return f.Options
}

func (f *FormFieldBooleanConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldBooleanConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldBooleanConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldBooleanConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldBooleanConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldBooleanConfigOptions struct {
	True  *string `json:"true,omitempty" url:"true,omitempty"`
	False *string `json:"false,omitempty" url:"false,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldBooleanConfigOptions) GetTrue() *string {
	if f == nil {
		return nil
	}
	return f.True
}

func (f *FormFieldBooleanConfigOptions) GetFalse() *string {
	if f == nil {
		return nil
	}
	return f.False
}

func (f *FormFieldBooleanConfigOptions) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldBooleanConfigOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldBooleanConfigOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldBooleanConfigOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldBooleanConfigOptions) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldCards struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeCardsConst         `json:"type" url:"type"`
	Config    *FormFieldCardsConfig           `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldCards) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldCards) GetConfig() *FormFieldCardsConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldCards) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldCards) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldCards) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldCards) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldCards) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldCards) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldCards
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldCards(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldCards) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldCardsConfig struct {
	HideLabels *bool                         `json:"hide_labels,omitempty" url:"hide_labels,omitempty"`
	Multiple   *bool                         `json:"multiple,omitempty" url:"multiple,omitempty"`
	Options    []*FormFieldCardsConfigOption `json:"options,omitempty" url:"options,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldCardsConfig) GetHideLabels() *bool {
	if f == nil {
		return nil
	}
	return f.HideLabels
}

func (f *FormFieldCardsConfig) GetMultiple() *bool {
	if f == nil {
		return nil
	}
	return f.Multiple
}

func (f *FormFieldCardsConfig) GetOptions() []*FormFieldCardsConfigOption {
	if f == nil {
		return nil
	}
	return f.Options
}

func (f *FormFieldCardsConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldCardsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldCardsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldCardsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldCardsConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldCardsConfigOption struct {
	Value    string `json:"value" url:"value"`
	Label    string `json:"label" url:"label"`
	ImageURL string `json:"image_url" url:"image_url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldCardsConfigOption) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FormFieldCardsConfigOption) GetLabel() string {
	if f == nil {
		return ""
	}
	return f.Label
}

func (f *FormFieldCardsConfigOption) GetImageURL() string {
	if f == nil {
		return ""
	}
	return f.ImageURL
}

func (f *FormFieldCardsConfigOption) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldCardsConfigOption) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldCardsConfigOption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldCardsConfigOption(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldCardsConfigOption) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldChoice struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeChoiceConst        `json:"type" url:"type"`
	Config    *FormFieldChoiceConfig          `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldChoice) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldChoice) GetConfig() *FormFieldChoiceConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldChoice) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldChoice) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldChoice) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldChoice) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldChoice) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldChoice) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldChoice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldChoice(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldChoice) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldChoiceConfig struct {
	Multiple   *bool                            `json:"multiple,omitempty" url:"multiple,omitempty"`
	Options    []*FormFieldChoiceConfigOption   `json:"options,omitempty" url:"options,omitempty"`
	AllowOther *FormFieldChoiceConfigAllowOther `json:"allow_other,omitempty" url:"allow_other,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldChoiceConfig) GetMultiple() *bool {
	if f == nil {
		return nil
	}
	return f.Multiple
}

func (f *FormFieldChoiceConfig) GetOptions() []*FormFieldChoiceConfigOption {
	if f == nil {
		return nil
	}
	return f.Options
}

func (f *FormFieldChoiceConfig) GetAllowOther() *FormFieldChoiceConfigAllowOther {
	if f == nil {
		return nil
	}
	return f.AllowOther
}

func (f *FormFieldChoiceConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldChoiceConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldChoiceConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldChoiceConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldChoiceConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldChoiceConfigAllowOther struct {
	Enabled     *FormFieldChoiceConfigAllowOtherEnabledTrueEnum `json:"enabled,omitempty" url:"enabled,omitempty"`
	Label       *string                                         `json:"label,omitempty" url:"label,omitempty"`
	Placeholder *string                                         `json:"placeholder,omitempty" url:"placeholder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldChoiceConfigAllowOther) GetEnabled() *FormFieldChoiceConfigAllowOtherEnabledTrueEnum {
	if f == nil {
		return nil
	}
	return f.Enabled
}

func (f *FormFieldChoiceConfigAllowOther) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldChoiceConfigAllowOther) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldChoiceConfigAllowOther) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldChoiceConfigAllowOther) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldChoiceConfigAllowOther
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldChoiceConfigAllowOther(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldChoiceConfigAllowOther) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldChoiceConfigAllowOtherEnabledTrueEnum = bool

type FormFieldChoiceConfigOption struct {
	Value string `json:"value" url:"value"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldChoiceConfigOption) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FormFieldChoiceConfigOption) GetLabel() string {
	if f == nil {
		return ""
	}
	return f.Label
}

func (f *FormFieldChoiceConfigOption) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldChoiceConfigOption) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldChoiceConfigOption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldChoiceConfigOption(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldChoiceConfigOption) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldCustom struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeCustomConst        `json:"type" url:"type"`
	Config    *FormFieldCustomConfig          `json:"config" url:"config"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldCustom) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldCustom) GetConfig() *FormFieldCustomConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldCustom) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldCustom) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldCustom) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldCustom) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldCustom) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldCustom) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldCustom
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldCustom(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldCustom) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldCustomConfig struct {
	Schema FormFieldCustomConfigSchema  `json:"schema" url:"schema"`
	Code   string                       `json:"code" url:"code"`
	CSS    *string                      `json:"css,omitempty" url:"css,omitempty"`
	Params *FormFieldCustomConfigParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldCustomConfig) GetSchema() FormFieldCustomConfigSchema {
	if f == nil {
		return nil
	}
	return f.Schema
}

func (f *FormFieldCustomConfig) GetCode() string {
	if f == nil {
		return ""
	}
	return f.Code
}

func (f *FormFieldCustomConfig) GetCSS() *string {
	if f == nil {
		return nil
	}
	return f.CSS
}

func (f *FormFieldCustomConfig) GetParams() *FormFieldCustomConfigParams {
	if f == nil {
		return nil
	}
	return f.Params
}

func (f *FormFieldCustomConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldCustomConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldCustomConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldCustomConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldCustomConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldCustomConfigParams = map[string]interface{}

type FormFieldCustomConfigSchema = map[string]interface{}

type FormFieldDate struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeDateConst          `json:"type" url:"type"`
	Config    *FormFieldDateConfig            `json:"config" url:"config"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldDate) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldDate) GetConfig() *FormFieldDateConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldDate) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldDate) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldDate) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldDate) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldDate) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldDate) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldDate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldDate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldDate) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldDateConfig struct {
	Format       *FormFieldDateConfigFormatEnum `json:"format,omitempty" url:"format,omitempty"`
	DefaultValue *string                        `json:"default_value,omitempty" url:"default_value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldDateConfig) GetFormat() *FormFieldDateConfigFormatEnum {
	if f == nil {
		return nil
	}
	return f.Format
}

func (f *FormFieldDateConfig) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldDateConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldDateConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldDateConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldDateConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldDateConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldDateConfigFormatEnum string

const (
	FormFieldDateConfigFormatEnumDate FormFieldDateConfigFormatEnum = "DATE"
	FormFieldDateConfigFormatEnumTime FormFieldDateConfigFormatEnum = "TIME"
)

func NewFormFieldDateConfigFormatEnumFromString(s string) (FormFieldDateConfigFormatEnum, error) {
	switch s {
	case "DATE":
		return FormFieldDateConfigFormatEnumDate, nil
	case "TIME":
		return FormFieldDateConfigFormatEnumTime, nil
	}
	var t FormFieldDateConfigFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormFieldDateConfigFormatEnum) Ptr() *FormFieldDateConfigFormatEnum {
	return &f
}

type FormFieldDropdown struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeDropdownConst      `json:"type" url:"type"`
	Config    *FormFieldDropdownConfig        `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldDropdown) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldDropdown) GetConfig() *FormFieldDropdownConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldDropdown) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldDropdown) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldDropdown) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldDropdown) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldDropdown) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldDropdown) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldDropdown
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldDropdown(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldDropdown) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldDropdownConfig struct {
	Multiple    *bool                            `json:"multiple,omitempty" url:"multiple,omitempty"`
	Options     []*FormFieldDropdownConfigOption `json:"options,omitempty" url:"options,omitempty"`
	Placeholder *string                          `json:"placeholder,omitempty" url:"placeholder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldDropdownConfig) GetMultiple() *bool {
	if f == nil {
		return nil
	}
	return f.Multiple
}

func (f *FormFieldDropdownConfig) GetOptions() []*FormFieldDropdownConfigOption {
	if f == nil {
		return nil
	}
	return f.Options
}

func (f *FormFieldDropdownConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldDropdownConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldDropdownConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldDropdownConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldDropdownConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldDropdownConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldDropdownConfigOption struct {
	Value string `json:"value" url:"value"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldDropdownConfigOption) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FormFieldDropdownConfigOption) GetLabel() string {
	if f == nil {
		return ""
	}
	return f.Label
}

func (f *FormFieldDropdownConfigOption) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldDropdownConfigOption) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldDropdownConfigOption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldDropdownConfigOption(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldDropdownConfigOption) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldEmail struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeEmailConst         `json:"type" url:"type"`
	Config    *FormFieldEmailConfig           `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldEmail) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldEmail) GetConfig() *FormFieldEmailConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldEmail) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldEmail) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldEmail) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldEmail) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldEmail) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldEmail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldEmail) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldEmailConfig struct {
	DefaultValue *string `json:"default_value,omitempty" url:"default_value,omitempty"`
	Placeholder  *string `json:"placeholder,omitempty" url:"placeholder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldEmailConfig) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldEmailConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldEmailConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldEmailConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldEmailConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldEmailConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldEmailConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldFile struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeFileConst          `json:"type" url:"type"`
	Config    *FormFieldFileConfig            `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldFile) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldFile) GetConfig() *FormFieldFileConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldFile) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldFile) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldFile) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldFile) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldFile) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldFile) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldFile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldFile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldFile) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldFileConfig struct {
	Multiple   *bool                             `json:"multiple,omitempty" url:"multiple,omitempty"`
	Storage    *FormFieldFileConfigStorage       `json:"storage,omitempty" url:"storage,omitempty"`
	Categories []FormFieldFileConfigCategoryEnum `json:"categories,omitempty" url:"categories,omitempty"`
	Extensions []string                          `json:"extensions,omitempty" url:"extensions,omitempty"`
	MaxSize    *int                              `json:"maxSize,omitempty" url:"maxSize,omitempty"`
	MaxFiles   *int                              `json:"maxFiles,omitempty" url:"maxFiles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldFileConfig) GetMultiple() *bool {
	if f == nil {
		return nil
	}
	return f.Multiple
}

func (f *FormFieldFileConfig) GetStorage() *FormFieldFileConfigStorage {
	if f == nil {
		return nil
	}
	return f.Storage
}

func (f *FormFieldFileConfig) GetCategories() []FormFieldFileConfigCategoryEnum {
	if f == nil {
		return nil
	}
	return f.Categories
}

func (f *FormFieldFileConfig) GetExtensions() []string {
	if f == nil {
		return nil
	}
	return f.Extensions
}

func (f *FormFieldFileConfig) GetMaxSize() *int {
	if f == nil {
		return nil
	}
	return f.MaxSize
}

func (f *FormFieldFileConfig) GetMaxFiles() *int {
	if f == nil {
		return nil
	}
	return f.MaxFiles
}

func (f *FormFieldFileConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldFileConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldFileConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldFileConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldFileConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldFileConfigCategoryEnum string

const (
	FormFieldFileConfigCategoryEnumAudio    FormFieldFileConfigCategoryEnum = "AUDIO"
	FormFieldFileConfigCategoryEnumVideo    FormFieldFileConfigCategoryEnum = "VIDEO"
	FormFieldFileConfigCategoryEnumImage    FormFieldFileConfigCategoryEnum = "IMAGE"
	FormFieldFileConfigCategoryEnumDocument FormFieldFileConfigCategoryEnum = "DOCUMENT"
	FormFieldFileConfigCategoryEnumArchive  FormFieldFileConfigCategoryEnum = "ARCHIVE"
)

func NewFormFieldFileConfigCategoryEnumFromString(s string) (FormFieldFileConfigCategoryEnum, error) {
	switch s {
	case "AUDIO":
		return FormFieldFileConfigCategoryEnumAudio, nil
	case "VIDEO":
		return FormFieldFileConfigCategoryEnumVideo, nil
	case "IMAGE":
		return FormFieldFileConfigCategoryEnumImage, nil
	case "DOCUMENT":
		return FormFieldFileConfigCategoryEnumDocument, nil
	case "ARCHIVE":
		return FormFieldFileConfigCategoryEnumArchive, nil
	}
	var t FormFieldFileConfigCategoryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormFieldFileConfigCategoryEnum) Ptr() *FormFieldFileConfigCategoryEnum {
	return &f
}

type FormFieldFileConfigStorage struct {
	Type FormFieldFileConfigStorageTypeEnum `json:"type" url:"type"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FormFieldFileConfigStorage) GetType() FormFieldFileConfigStorageTypeEnum {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FormFieldFileConfigStorage) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FormFieldFileConfigStorage) UnmarshalJSON(data []byte) error {
	type embed FormFieldFileConfigStorage
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FormFieldFileConfigStorage(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldFileConfigStorage) MarshalJSON() ([]byte, error) {
	type embed FormFieldFileConfigStorage
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, f.ExtraProperties)
}

func (f *FormFieldFileConfigStorage) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldFileConfigStorageTypeEnum string

const (
	FormFieldFileConfigStorageTypeEnumManaged FormFieldFileConfigStorageTypeEnum = "MANAGED"
	FormFieldFileConfigStorageTypeEnumCustom  FormFieldFileConfigStorageTypeEnum = "CUSTOM"
)

func NewFormFieldFileConfigStorageTypeEnumFromString(s string) (FormFieldFileConfigStorageTypeEnum, error) {
	switch s {
	case "MANAGED":
		return FormFieldFileConfigStorageTypeEnumManaged, nil
	case "CUSTOM":
		return FormFieldFileConfigStorageTypeEnumCustom, nil
	}
	var t FormFieldFileConfigStorageTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormFieldFileConfigStorageTypeEnum) Ptr() *FormFieldFileConfigStorageTypeEnum {
	return &f
}

type FormFieldLegal struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeLegalConst         `json:"type" url:"type"`
	Config    *FormFieldLegalConfig           `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldLegal) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldLegal) GetConfig() *FormFieldLegalConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldLegal) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldLegal) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldLegal) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldLegal) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldLegal) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldLegal) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldLegal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldLegal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldLegal) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldLegalConfig struct {
	Text *string `json:"text,omitempty" url:"text,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldLegalConfig) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FormFieldLegalConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldLegalConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldLegalConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldLegalConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldLegalConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldNumber struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeNumberConst        `json:"type" url:"type"`
	Config    *FormFieldNumberConfig          `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldNumber) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldNumber) GetConfig() *FormFieldNumberConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldNumber) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldNumber) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldNumber) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldNumber) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldNumber) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldNumber(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldNumber) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldNumberConfig struct {
	DefaultValue *float64 `json:"default_value,omitempty" url:"default_value,omitempty"`
	Placeholder  *string  `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	MinValue     *float64 `json:"min_value,omitempty" url:"min_value,omitempty"`
	MaxValue     *float64 `json:"max_value,omitempty" url:"max_value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldNumberConfig) GetDefaultValue() *float64 {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldNumberConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldNumberConfig) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FormFieldNumberConfig) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FormFieldNumberConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldNumberConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldNumberConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldNumberConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldNumberConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPassword struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypePasswordConst      `json:"type" url:"type"`
	Config    *FormFieldPasswordConfig        `json:"config" url:"config"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPassword) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldPassword) GetConfig() *FormFieldPasswordConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldPassword) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldPassword) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldPassword) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldPassword) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldPassword) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPassword) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPassword
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPassword(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPassword) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPasswordConfig struct {
	Hash          *FormFieldPasswordConfigHashEnum `json:"hash,omitempty" url:"hash,omitempty"`
	Placeholder   *string                          `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	MinLength     *int                             `json:"min_length,omitempty" url:"min_length,omitempty"`
	MaxLength     *int                             `json:"max_length,omitempty" url:"max_length,omitempty"`
	Complexity    *bool                            `json:"complexity,omitempty" url:"complexity,omitempty"`
	Nist          *bool                            `json:"nist,omitempty" url:"nist,omitempty"`
	StrengthMeter *bool                            `json:"strength_meter,omitempty" url:"strength_meter,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPasswordConfig) GetHash() *FormFieldPasswordConfigHashEnum {
	if f == nil {
		return nil
	}
	return f.Hash
}

func (f *FormFieldPasswordConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldPasswordConfig) GetMinLength() *int {
	if f == nil {
		return nil
	}
	return f.MinLength
}

func (f *FormFieldPasswordConfig) GetMaxLength() *int {
	if f == nil {
		return nil
	}
	return f.MaxLength
}

func (f *FormFieldPasswordConfig) GetComplexity() *bool {
	if f == nil {
		return nil
	}
	return f.Complexity
}

func (f *FormFieldPasswordConfig) GetNist() *bool {
	if f == nil {
		return nil
	}
	return f.Nist
}

func (f *FormFieldPasswordConfig) GetStrengthMeter() *bool {
	if f == nil {
		return nil
	}
	return f.StrengthMeter
}

func (f *FormFieldPasswordConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPasswordConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPasswordConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPasswordConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPasswordConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPasswordConfigHashEnum string

const (
	FormFieldPasswordConfigHashEnumNone   FormFieldPasswordConfigHashEnum = "NONE"
	FormFieldPasswordConfigHashEnumMd5    FormFieldPasswordConfigHashEnum = "MD5"
	FormFieldPasswordConfigHashEnumSha1   FormFieldPasswordConfigHashEnum = "SHA1"
	FormFieldPasswordConfigHashEnumSha256 FormFieldPasswordConfigHashEnum = "SHA256"
	FormFieldPasswordConfigHashEnumSha512 FormFieldPasswordConfigHashEnum = "SHA512"
)

func NewFormFieldPasswordConfigHashEnumFromString(s string) (FormFieldPasswordConfigHashEnum, error) {
	switch s {
	case "NONE":
		return FormFieldPasswordConfigHashEnumNone, nil
	case "MD5":
		return FormFieldPasswordConfigHashEnumMd5, nil
	case "SHA1":
		return FormFieldPasswordConfigHashEnumSha1, nil
	case "SHA256":
		return FormFieldPasswordConfigHashEnumSha256, nil
	case "SHA512":
		return FormFieldPasswordConfigHashEnumSha512, nil
	}
	var t FormFieldPasswordConfigHashEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormFieldPasswordConfigHashEnum) Ptr() *FormFieldPasswordConfigHashEnum {
	return &f
}

type FormFieldPayment struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypePaymentConst       `json:"type" url:"type"`
	Config    *FormFieldPaymentConfig         `json:"config" url:"config"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPayment) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldPayment) GetConfig() *FormFieldPaymentConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldPayment) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldPayment) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldPayment) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldPayment) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldPayment) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPayment) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPayment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPayment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPayment) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfig struct {
	Provider    *FormFieldPaymentConfigProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`
	Charge      *FormFieldPaymentConfigCharge       `json:"charge" url:"charge"`
	Credentials *FormFieldPaymentConfigCredentials  `json:"credentials" url:"credentials"`
	Customer    *FormFieldPaymentConfigCustomer     `json:"customer,omitempty" url:"customer,omitempty"`
	Fields      *FormFieldPaymentConfigFields       `json:"fields,omitempty" url:"fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPaymentConfig) GetCharge() *FormFieldPaymentConfigCharge {
	if f == nil {
		return nil
	}
	return f.Charge
}

func (f *FormFieldPaymentConfig) GetCredentials() *FormFieldPaymentConfigCredentials {
	if f == nil {
		return nil
	}
	return f.Credentials
}

func (f *FormFieldPaymentConfig) GetCustomer() *FormFieldPaymentConfigCustomer {
	if f == nil {
		return nil
	}
	return f.Customer
}

func (f *FormFieldPaymentConfig) GetFields() *FormFieldPaymentConfigFields {
	if f == nil {
		return nil
	}
	return f.Fields
}

func (f *FormFieldPaymentConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPaymentConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPaymentConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPaymentConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigCharge struct {
	FormFieldPaymentConfigChargeOneOff       *FormFieldPaymentConfigChargeOneOff
	FormFieldPaymentConfigChargeSubscription *FormFieldPaymentConfigChargeSubscription

	typ string
}

func (f *FormFieldPaymentConfigCharge) GetFormFieldPaymentConfigChargeOneOff() *FormFieldPaymentConfigChargeOneOff {
	if f == nil {
		return nil
	}
	return f.FormFieldPaymentConfigChargeOneOff
}

func (f *FormFieldPaymentConfigCharge) GetFormFieldPaymentConfigChargeSubscription() *FormFieldPaymentConfigChargeSubscription {
	if f == nil {
		return nil
	}
	return f.FormFieldPaymentConfigChargeSubscription
}

func (f *FormFieldPaymentConfigCharge) UnmarshalJSON(data []byte) error {
	valueFormFieldPaymentConfigChargeOneOff := new(FormFieldPaymentConfigChargeOneOff)
	if err := json.Unmarshal(data, &valueFormFieldPaymentConfigChargeOneOff); err == nil {
		f.typ = "FormFieldPaymentConfigChargeOneOff"
		f.FormFieldPaymentConfigChargeOneOff = valueFormFieldPaymentConfigChargeOneOff
		return nil
	}
	valueFormFieldPaymentConfigChargeSubscription := new(FormFieldPaymentConfigChargeSubscription)
	if err := json.Unmarshal(data, &valueFormFieldPaymentConfigChargeSubscription); err == nil {
		f.typ = "FormFieldPaymentConfigChargeSubscription"
		f.FormFieldPaymentConfigChargeSubscription = valueFormFieldPaymentConfigChargeSubscription
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormFieldPaymentConfigCharge) MarshalJSON() ([]byte, error) {
	if f.typ == "FormFieldPaymentConfigChargeOneOff" || f.FormFieldPaymentConfigChargeOneOff != nil {
		return json.Marshal(f.FormFieldPaymentConfigChargeOneOff)
	}
	if f.typ == "FormFieldPaymentConfigChargeSubscription" || f.FormFieldPaymentConfigChargeSubscription != nil {
		return json.Marshal(f.FormFieldPaymentConfigChargeSubscription)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormFieldPaymentConfigChargeVisitor interface {
	VisitFormFieldPaymentConfigChargeOneOff(*FormFieldPaymentConfigChargeOneOff) error
	VisitFormFieldPaymentConfigChargeSubscription(*FormFieldPaymentConfigChargeSubscription) error
}

func (f *FormFieldPaymentConfigCharge) Accept(visitor FormFieldPaymentConfigChargeVisitor) error {
	if f.typ == "FormFieldPaymentConfigChargeOneOff" || f.FormFieldPaymentConfigChargeOneOff != nil {
		return visitor.VisitFormFieldPaymentConfigChargeOneOff(f.FormFieldPaymentConfigChargeOneOff)
	}
	if f.typ == "FormFieldPaymentConfigChargeSubscription" || f.FormFieldPaymentConfigChargeSubscription != nil {
		return visitor.VisitFormFieldPaymentConfigChargeSubscription(f.FormFieldPaymentConfigChargeSubscription)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormFieldPaymentConfigChargeOneOff struct {
	Type   FormFieldPaymentConfigChargeTypeOneOffConst `json:"type" url:"type"`
	OneOff *FormFieldPaymentConfigChargeOneOffOneOff   `json:"one_off" url:"one_off"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPaymentConfigChargeOneOff) GetOneOff() *FormFieldPaymentConfigChargeOneOffOneOff {
	if f == nil {
		return nil
	}
	return f.OneOff
}

func (f *FormFieldPaymentConfigChargeOneOff) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPaymentConfigChargeOneOff) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPaymentConfigChargeOneOff
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPaymentConfigChargeOneOff(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfigChargeOneOff) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigChargeOneOffCurrencyEnum string

const (
	FormFieldPaymentConfigChargeOneOffCurrencyEnumAud FormFieldPaymentConfigChargeOneOffCurrencyEnum = "AUD"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumCad FormFieldPaymentConfigChargeOneOffCurrencyEnum = "CAD"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumChf FormFieldPaymentConfigChargeOneOffCurrencyEnum = "CHF"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumEur FormFieldPaymentConfigChargeOneOffCurrencyEnum = "EUR"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumGbp FormFieldPaymentConfigChargeOneOffCurrencyEnum = "GBP"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumInr FormFieldPaymentConfigChargeOneOffCurrencyEnum = "INR"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumMxn FormFieldPaymentConfigChargeOneOffCurrencyEnum = "MXN"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumSek FormFieldPaymentConfigChargeOneOffCurrencyEnum = "SEK"
	FormFieldPaymentConfigChargeOneOffCurrencyEnumUsd FormFieldPaymentConfigChargeOneOffCurrencyEnum = "USD"
)

func NewFormFieldPaymentConfigChargeOneOffCurrencyEnumFromString(s string) (FormFieldPaymentConfigChargeOneOffCurrencyEnum, error) {
	switch s {
	case "AUD":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumAud, nil
	case "CAD":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumCad, nil
	case "CHF":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumChf, nil
	case "EUR":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumEur, nil
	case "GBP":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumGbp, nil
	case "INR":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumInr, nil
	case "MXN":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumMxn, nil
	case "SEK":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumSek, nil
	case "USD":
		return FormFieldPaymentConfigChargeOneOffCurrencyEnumUsd, nil
	}
	var t FormFieldPaymentConfigChargeOneOffCurrencyEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormFieldPaymentConfigChargeOneOffCurrencyEnum) Ptr() *FormFieldPaymentConfigChargeOneOffCurrencyEnum {
	return &f
}

type FormFieldPaymentConfigChargeOneOffOneOff struct {
	Amount   *FormFieldPaymentConfigChargeOneOffOneOffAmount `json:"amount" url:"amount"`
	Currency FormFieldPaymentConfigChargeOneOffCurrencyEnum  `json:"currency" url:"currency"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (f *FormFieldPaymentConfigChargeOneOffOneOff) GetAmount() *FormFieldPaymentConfigChargeOneOffOneOffAmount {
	if f == nil {
		return nil
	}
	return f.Amount
}

func (f *FormFieldPaymentConfigChargeOneOffOneOff) GetCurrency() FormFieldPaymentConfigChargeOneOffCurrencyEnum {
	if f == nil {
		return ""
	}
	return f.Currency
}

func (f *FormFieldPaymentConfigChargeOneOffOneOff) GetExtraProperties() map[string]interface{} {
	return f.ExtraProperties
}

func (f *FormFieldPaymentConfigChargeOneOffOneOff) UnmarshalJSON(data []byte) error {
	type embed FormFieldPaymentConfigChargeOneOffOneOff
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FormFieldPaymentConfigChargeOneOffOneOff(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.ExtraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfigChargeOneOffOneOff) MarshalJSON() ([]byte, error) {
	type embed FormFieldPaymentConfigChargeOneOffOneOff
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, f.ExtraProperties)
}

func (f *FormFieldPaymentConfigChargeOneOffOneOff) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigChargeOneOffOneOffAmount struct {
	String string
	Double float64

	typ string
}

func (f *FormFieldPaymentConfigChargeOneOffOneOffAmount) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FormFieldPaymentConfigChargeOneOffOneOffAmount) GetDouble() float64 {
	if f == nil {
		return 0
	}
	return f.Double
}

func (f *FormFieldPaymentConfigChargeOneOffOneOffAmount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		f.typ = "Double"
		f.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormFieldPaymentConfigChargeOneOffOneOffAmount) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return json.Marshal(f.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormFieldPaymentConfigChargeOneOffOneOffAmountVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (f *FormFieldPaymentConfigChargeOneOffOneOffAmount) Accept(visitor FormFieldPaymentConfigChargeOneOffOneOffAmountVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Double" || f.Double != 0 {
		return visitor.VisitDouble(f.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormFieldPaymentConfigChargeSubscription struct {
	Type         FormFieldPaymentConfigChargeTypeSubscriptionConst `json:"type" url:"type"`
	Subscription FormFieldPaymentConfigSubscription                `json:"subscription" url:"subscription"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPaymentConfigChargeSubscription) GetSubscription() FormFieldPaymentConfigSubscription {
	if f == nil {
		return nil
	}
	return f.Subscription
}

func (f *FormFieldPaymentConfigChargeSubscription) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPaymentConfigChargeSubscription) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPaymentConfigChargeSubscription
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPaymentConfigChargeSubscription(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfigChargeSubscription) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigChargeTypeOneOffConst = string

type FormFieldPaymentConfigChargeTypeSubscriptionConst = string

type FormFieldPaymentConfigCredentials struct {
	PublicKey  string `json:"public_key" url:"public_key"`
	PrivateKey string `json:"private_key" url:"private_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPaymentConfigCredentials) GetPublicKey() string {
	if f == nil {
		return ""
	}
	return f.PublicKey
}

func (f *FormFieldPaymentConfigCredentials) GetPrivateKey() string {
	if f == nil {
		return ""
	}
	return f.PrivateKey
}

func (f *FormFieldPaymentConfigCredentials) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPaymentConfigCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPaymentConfigCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPaymentConfigCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfigCredentials) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigCustomer = map[string]interface{}

type FormFieldPaymentConfigFieldProperties struct {
	Label       *string `json:"label,omitempty" url:"label,omitempty"`
	Placeholder *string `json:"placeholder,omitempty" url:"placeholder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPaymentConfigFieldProperties) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldPaymentConfigFieldProperties) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldPaymentConfigFieldProperties) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPaymentConfigFieldProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPaymentConfigFieldProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPaymentConfigFieldProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfigFieldProperties) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigFields struct {
	CardNumber     *FormFieldPaymentConfigFieldProperties `json:"card_number,omitempty" url:"card_number,omitempty"`
	ExpirationDate *FormFieldPaymentConfigFieldProperties `json:"expiration_date,omitempty" url:"expiration_date,omitempty"`
	SecurityCode   *FormFieldPaymentConfigFieldProperties `json:"security_code,omitempty" url:"security_code,omitempty"`
	Trustmarks     *bool                                  `json:"trustmarks,omitempty" url:"trustmarks,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldPaymentConfigFields) GetCardNumber() *FormFieldPaymentConfigFieldProperties {
	if f == nil {
		return nil
	}
	return f.CardNumber
}

func (f *FormFieldPaymentConfigFields) GetExpirationDate() *FormFieldPaymentConfigFieldProperties {
	if f == nil {
		return nil
	}
	return f.ExpirationDate
}

func (f *FormFieldPaymentConfigFields) GetSecurityCode() *FormFieldPaymentConfigFieldProperties {
	if f == nil {
		return nil
	}
	return f.SecurityCode
}

func (f *FormFieldPaymentConfigFields) GetTrustmarks() *bool {
	if f == nil {
		return nil
	}
	return f.Trustmarks
}

func (f *FormFieldPaymentConfigFields) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldPaymentConfigFields) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldPaymentConfigFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldPaymentConfigFields(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldPaymentConfigFields) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldPaymentConfigProviderEnum = string

type FormFieldPaymentConfigSubscription = map[string]interface{}

type FormFieldSocial struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeSocialConst        `json:"type" url:"type"`
	Config    *FormFieldSocialConfig          `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldSocial) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldSocial) GetConfig() *FormFieldSocialConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldSocial) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldSocial) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldSocial) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldSocial) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldSocial) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldSocial) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldSocial
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldSocial(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldSocial) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldSocialConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldSocialConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldSocialConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldSocialConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldSocialConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldSocialConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldTel struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeTelConst           `json:"type" url:"type"`
	Config    *FormFieldTelConfig             `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldTel) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldTel) GetConfig() *FormFieldTelConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldTel) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldTel) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldTel) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldTel) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldTel) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldTel) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldTel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldTel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldTel) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldTelConfig struct {
	DefaultValue  *string                    `json:"default_value,omitempty" url:"default_value,omitempty"`
	Placeholder   *string                    `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	MinLength     *int                       `json:"min_length,omitempty" url:"min_length,omitempty"`
	MaxLength     *int                       `json:"max_length,omitempty" url:"max_length,omitempty"`
	CountryPicker *bool                      `json:"country_picker,omitempty" url:"country_picker,omitempty"`
	Strings       *FormFieldTelConfigStrings `json:"strings,omitempty" url:"strings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldTelConfig) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldTelConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldTelConfig) GetMinLength() *int {
	if f == nil {
		return nil
	}
	return f.MinLength
}

func (f *FormFieldTelConfig) GetMaxLength() *int {
	if f == nil {
		return nil
	}
	return f.MaxLength
}

func (f *FormFieldTelConfig) GetCountryPicker() *bool {
	if f == nil {
		return nil
	}
	return f.CountryPicker
}

func (f *FormFieldTelConfig) GetStrings() *FormFieldTelConfigStrings {
	if f == nil {
		return nil
	}
	return f.Strings
}

func (f *FormFieldTelConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldTelConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldTelConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldTelConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldTelConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldTelConfigStrings struct {
	FilterPlaceholder *string `json:"filter_placeholder,omitempty" url:"filter_placeholder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldTelConfigStrings) GetFilterPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.FilterPlaceholder
}

func (f *FormFieldTelConfigStrings) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldTelConfigStrings) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldTelConfigStrings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldTelConfigStrings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldTelConfigStrings) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldText struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeTextConst          `json:"type" url:"type"`
	Config    *FormFieldTextConfig            `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldText) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldText) GetConfig() *FormFieldTextConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldText) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldText) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldText) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldText) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldText) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldText) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldText
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldText(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldText) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldTextConfig struct {
	Multiline    *bool   `json:"multiline,omitempty" url:"multiline,omitempty"`
	DefaultValue *string `json:"default_value,omitempty" url:"default_value,omitempty"`
	Placeholder  *string `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	MinLength    *int    `json:"min_length,omitempty" url:"min_length,omitempty"`
	MaxLength    *int    `json:"max_length,omitempty" url:"max_length,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldTextConfig) GetMultiline() *bool {
	if f == nil {
		return nil
	}
	return f.Multiline
}

func (f *FormFieldTextConfig) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldTextConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldTextConfig) GetMinLength() *int {
	if f == nil {
		return nil
	}
	return f.MinLength
}

func (f *FormFieldTextConfig) GetMaxLength() *int {
	if f == nil {
		return nil
	}
	return f.MaxLength
}

func (f *FormFieldTextConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldTextConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldTextConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldTextConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldTextConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldTypeBooleanConst = string

type FormFieldTypeCardsConst = string

type FormFieldTypeChoiceConst = string

type FormFieldTypeCustomConst = string

type FormFieldTypeDateConst = string

type FormFieldTypeDropdownConst = string

type FormFieldTypeEmailConst = string

type FormFieldTypeFileConst = string

type FormFieldTypeLegalConst = string

type FormFieldTypeNumberConst = string

type FormFieldTypePasswordConst = string

type FormFieldTypePaymentConst = string

type FormFieldTypeSocialConst = string

type FormFieldTypeTelConst = string

type FormFieldTypeTextConst = string

type FormFieldTypeURLConst = string

type FormFieldURL struct {
	ID        string                          `json:"id" url:"id"`
	Category  FormComponentCategoryFieldConst `json:"category" url:"category"`
	Type      FormFieldTypeURLConst           `json:"type" url:"type"`
	Config    *FormFieldURLConfig             `json:"config,omitempty" url:"config,omitempty"`
	Label     *string                         `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                         `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                           `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                           `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldURL) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFieldURL) GetConfig() *FormFieldURLConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFieldURL) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormFieldURL) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormFieldURL) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormFieldURL) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormFieldURL) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldURL) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldURL
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldURL(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldURL) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFieldURLConfig struct {
	DefaultValue *string `json:"default_value,omitempty" url:"default_value,omitempty"`
	Placeholder  *string `json:"placeholder,omitempty" url:"placeholder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFieldURLConfig) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FormFieldURLConfig) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FormFieldURLConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFieldURLConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFieldURLConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFieldURLConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFieldURLConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFlow struct {
	ID          string                `json:"id" url:"id"`
	Type        FormNodeTypeFlowConst `json:"type" url:"type"`
	Coordinates *FormNodeCoordinates  `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	Alias       *string               `json:"alias,omitempty" url:"alias,omitempty"`
	Config      *FormFlowConfig       `json:"config" url:"config"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFlow) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormFlow) GetCoordinates() *FormNodeCoordinates {
	if f == nil {
		return nil
	}
	return f.Coordinates
}

func (f *FormFlow) GetAlias() *string {
	if f == nil {
		return nil
	}
	return f.Alias
}

func (f *FormFlow) GetConfig() *FormFlowConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormFlow) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFlow) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFlow
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFlow(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFlow) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormFlowConfig struct {
	FlowID   string           `json:"flow_id" url:"flow_id"`
	NextNode *FormNodePointer `json:"next_node,omitempty" url:"next_node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormFlowConfig) GetFlowID() string {
	if f == nil {
		return ""
	}
	return f.FlowID
}

func (f *FormFlowConfig) GetNextNode() *FormNodePointer {
	if f == nil {
		return nil
	}
	return f.NextNode
}

func (f *FormFlowConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormFlowConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormFlowConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormFlowConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormFlowConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormHiddenField struct {
	Key   string  `json:"key" url:"key"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormHiddenField) GetKey() string {
	if f == nil {
		return ""
	}
	return f.Key
}

func (f *FormHiddenField) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FormHiddenField) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormHiddenField) UnmarshalJSON(data []byte) error {
	type unmarshaler FormHiddenField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormHiddenField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormHiddenField) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormLanguages struct {
	Primary *string `json:"primary,omitempty" url:"primary,omitempty"`
	Default *string `json:"default,omitempty" url:"default,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormLanguages) GetPrimary() *string {
	if f == nil {
		return nil
	}
	return f.Primary
}

func (f *FormLanguages) GetDefault() *string {
	if f == nil {
		return nil
	}
	return f.Default
}

func (f *FormLanguages) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormLanguages) UnmarshalJSON(data []byte) error {
	type unmarshaler FormLanguages
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormLanguages(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormLanguages) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormLanguagesNullable = *FormLanguages

type FormMessages struct {
	Errors *FormMessagesError  `json:"errors,omitempty" url:"errors,omitempty"`
	Custom *FormMessagesCustom `json:"custom,omitempty" url:"custom,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormMessages) GetErrors() *FormMessagesError {
	if f == nil {
		return nil
	}
	return f.Errors
}

func (f *FormMessages) GetCustom() *FormMessagesCustom {
	if f == nil {
		return nil
	}
	return f.Custom
}

func (f *FormMessages) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormMessages) UnmarshalJSON(data []byte) error {
	type unmarshaler FormMessages
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormMessages(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormMessages) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormMessagesCustom = map[string]interface{}

type FormMessagesError = map[string]interface{}

type FormMessagesNullable = *FormMessages

type FormNode struct {
	FormFlow   *FormFlow
	FormRouter *FormRouter
	FormStep   *FormStep

	typ string
}

func (f *FormNode) GetFormFlow() *FormFlow {
	if f == nil {
		return nil
	}
	return f.FormFlow
}

func (f *FormNode) GetFormRouter() *FormRouter {
	if f == nil {
		return nil
	}
	return f.FormRouter
}

func (f *FormNode) GetFormStep() *FormStep {
	if f == nil {
		return nil
	}
	return f.FormStep
}

func (f *FormNode) UnmarshalJSON(data []byte) error {
	valueFormFlow := new(FormFlow)
	if err := json.Unmarshal(data, &valueFormFlow); err == nil {
		f.typ = "FormFlow"
		f.FormFlow = valueFormFlow
		return nil
	}
	valueFormRouter := new(FormRouter)
	if err := json.Unmarshal(data, &valueFormRouter); err == nil {
		f.typ = "FormRouter"
		f.FormRouter = valueFormRouter
		return nil
	}
	valueFormStep := new(FormStep)
	if err := json.Unmarshal(data, &valueFormStep); err == nil {
		f.typ = "FormStep"
		f.FormStep = valueFormStep
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormNode) MarshalJSON() ([]byte, error) {
	if f.typ == "FormFlow" || f.FormFlow != nil {
		return json.Marshal(f.FormFlow)
	}
	if f.typ == "FormRouter" || f.FormRouter != nil {
		return json.Marshal(f.FormRouter)
	}
	if f.typ == "FormStep" || f.FormStep != nil {
		return json.Marshal(f.FormStep)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormNodeVisitor interface {
	VisitFormFlow(*FormFlow) error
	VisitFormRouter(*FormRouter) error
	VisitFormStep(*FormStep) error
}

func (f *FormNode) Accept(visitor FormNodeVisitor) error {
	if f.typ == "FormFlow" || f.FormFlow != nil {
		return visitor.VisitFormFlow(f.FormFlow)
	}
	if f.typ == "FormRouter" || f.FormRouter != nil {
		return visitor.VisitFormRouter(f.FormRouter)
	}
	if f.typ == "FormStep" || f.FormStep != nil {
		return visitor.VisitFormStep(f.FormStep)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormNodeCoordinates struct {
	X int `json:"x" url:"x"`
	Y int `json:"y" url:"y"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormNodeCoordinates) GetX() int {
	if f == nil {
		return 0
	}
	return f.X
}

func (f *FormNodeCoordinates) GetY() int {
	if f == nil {
		return 0
	}
	return f.Y
}

func (f *FormNodeCoordinates) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormNodeCoordinates) UnmarshalJSON(data []byte) error {
	type unmarshaler FormNodeCoordinates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormNodeCoordinates(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormNodeCoordinates) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormNodeList = []*FormNode

type FormNodeListNullable = *FormNodeList

type FormNodePointer struct {
	String           string
	FormEndingNodeID FormEndingNodeID

	typ string
}

func NewFormNodePointerWithFormEndingNodeID() *FormNodePointer {
	return &FormNodePointer{typ: "FormEndingNodeID", FormEndingNodeID: "$ending"}
}

func (f *FormNodePointer) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FormNodePointer) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	var valueFormEndingNodeID FormEndingNodeID
	if err := json.Unmarshal(data, &valueFormEndingNodeID); err == nil {
		f.typ = "FormEndingNodeID"
		f.FormEndingNodeID = valueFormEndingNodeID
		if f.FormEndingNodeID != "$ending" {
			return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "$ending", valueFormEndingNodeID)
		}
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormNodePointer) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "FormEndingNodeID" || f.FormEndingNodeID != "" {
		return json.Marshal("$ending")
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormNodePointerVisitor interface {
	VisitString(string) error
	VisitFormEndingNodeID(FormEndingNodeID) error
}

func (f *FormNodePointer) Accept(visitor FormNodePointerVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "FormEndingNodeID" || f.FormEndingNodeID != "" {
		return visitor.VisitFormEndingNodeID(f.FormEndingNodeID)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormNodeTypeFlowConst = string

type FormNodeTypeRouterConst = string

type FormNodeTypeStepConst = string

type FormRouter struct {
	ID          string                  `json:"id" url:"id"`
	Type        FormNodeTypeRouterConst `json:"type" url:"type"`
	Coordinates *FormNodeCoordinates    `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	Alias       *string                 `json:"alias,omitempty" url:"alias,omitempty"`
	Config      *FormRouterConfig       `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormRouter) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormRouter) GetCoordinates() *FormNodeCoordinates {
	if f == nil {
		return nil
	}
	return f.Coordinates
}

func (f *FormRouter) GetAlias() *string {
	if f == nil {
		return nil
	}
	return f.Alias
}

func (f *FormRouter) GetConfig() *FormRouterConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormRouter) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormRouter) UnmarshalJSON(data []byte) error {
	type unmarshaler FormRouter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormRouter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormRouter) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormRouterConfig struct {
	Rules    []*FormRouterRule `json:"rules,omitempty" url:"rules,omitempty"`
	Fallback *FormNodePointer  `json:"fallback,omitempty" url:"fallback,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormRouterConfig) GetRules() []*FormRouterRule {
	if f == nil {
		return nil
	}
	return f.Rules
}

func (f *FormRouterConfig) GetFallback() *FormNodePointer {
	if f == nil {
		return nil
	}
	return f.Fallback
}

func (f *FormRouterConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormRouterConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormRouterConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormRouterConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormRouterConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormRouterRule struct {
	ID       string           `json:"id" url:"id"`
	Alias    *string          `json:"alias,omitempty" url:"alias,omitempty"`
	NextNode *FormNodePointer `json:"next_node,omitempty" url:"next_node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormRouterRule) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormRouterRule) GetAlias() *string {
	if f == nil {
		return nil
	}
	return f.Alias
}

func (f *FormRouterRule) GetNextNode() *FormNodePointer {
	if f == nil {
		return nil
	}
	return f.NextNode
}

func (f *FormRouterRule) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormRouterRule) UnmarshalJSON(data []byte) error {
	type unmarshaler FormRouterRule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormRouterRule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormRouterRule) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormStartNode struct {
	HiddenFields []*FormHiddenField   `json:"hidden_fields,omitempty" url:"hidden_fields,omitempty"`
	NextNode     *FormNodePointer     `json:"next_node,omitempty" url:"next_node,omitempty"`
	Coordinates  *FormNodeCoordinates `json:"coordinates,omitempty" url:"coordinates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormStartNode) GetHiddenFields() []*FormHiddenField {
	if f == nil {
		return nil
	}
	return f.HiddenFields
}

func (f *FormStartNode) GetNextNode() *FormNodePointer {
	if f == nil {
		return nil
	}
	return f.NextNode
}

func (f *FormStartNode) GetCoordinates() *FormNodeCoordinates {
	if f == nil {
		return nil
	}
	return f.Coordinates
}

func (f *FormStartNode) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormStartNode) UnmarshalJSON(data []byte) error {
	type unmarshaler FormStartNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormStartNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormStartNode) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormStartNodeNullable = *FormStartNode

type FormStep struct {
	ID          string                `json:"id" url:"id"`
	Type        FormNodeTypeStepConst `json:"type" url:"type"`
	Coordinates *FormNodeCoordinates  `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	Alias       *string               `json:"alias,omitempty" url:"alias,omitempty"`
	Config      *FormStepConfig       `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormStep) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormStep) GetCoordinates() *FormNodeCoordinates {
	if f == nil {
		return nil
	}
	return f.Coordinates
}

func (f *FormStep) GetAlias() *string {
	if f == nil {
		return nil
	}
	return f.Alias
}

func (f *FormStep) GetConfig() *FormStepConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormStep) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormStep) UnmarshalJSON(data []byte) error {
	type unmarshaler FormStep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormStep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormStep) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormStepComponentList = []*FormComponent

type FormStepConfig struct {
	Components *FormStepComponentList `json:"components,omitempty" url:"components,omitempty"`
	NextNode   *FormNodePointer       `json:"next_node,omitempty" url:"next_node,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormStepConfig) GetComponents() *FormStepComponentList {
	if f == nil {
		return nil
	}
	return f.Components
}

func (f *FormStepConfig) GetNextNode() *FormNodePointer {
	if f == nil {
		return nil
	}
	return f.NextNode
}

func (f *FormStepConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormStepConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormStepConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormStepConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormStepConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormStyle struct {
	CSS *string `json:"css,omitempty" url:"css,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormStyle) GetCSS() *string {
	if f == nil {
		return nil
	}
	return f.CSS
}

func (f *FormStyle) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormStyle) UnmarshalJSON(data []byte) error {
	type unmarshaler FormStyle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormStyle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormStyle) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormStyleNullable = *FormStyle

type FormSummary struct {
	ID          string    `json:"id" url:"id"`
	Name        string    `json:"name" url:"name"`
	CreatedAt   time.Time `json:"created_at" url:"created_at"`
	UpdatedAt   time.Time `json:"updated_at" url:"updated_at"`
	EmbeddedAt  *string   `json:"embedded_at,omitempty" url:"embedded_at,omitempty"`
	SubmittedAt *string   `json:"submitted_at,omitempty" url:"submitted_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormSummary) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormSummary) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FormSummary) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FormSummary) GetUpdatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.UpdatedAt
}

func (f *FormSummary) GetEmbeddedAt() *string {
	if f == nil {
		return nil
	}
	return f.EmbeddedAt
}

func (f *FormSummary) GetSubmittedAt() *string {
	if f == nil {
		return nil
	}
	return f.SubmittedAt
}

func (f *FormSummary) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormSummary) UnmarshalJSON(data []byte) error {
	type embed FormSummary
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FormSummary(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormSummary) MarshalJSON() ([]byte, error) {
	type embed FormSummary
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
		UpdatedAt: internal.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FormSummary) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormTranslations = map[string]interface{}

type FormTranslationsNullable = *FormTranslations

type FormWidget struct {
	FormWidgetAuth0VerifiableCredentials *FormWidgetAuth0VerifiableCredentials
	FormWidgetGMapsAddress               *FormWidgetGMapsAddress
	FormWidgetRecaptcha                  *FormWidgetRecaptcha

	typ string
}

func (f *FormWidget) GetFormWidgetAuth0VerifiableCredentials() *FormWidgetAuth0VerifiableCredentials {
	if f == nil {
		return nil
	}
	return f.FormWidgetAuth0VerifiableCredentials
}

func (f *FormWidget) GetFormWidgetGMapsAddress() *FormWidgetGMapsAddress {
	if f == nil {
		return nil
	}
	return f.FormWidgetGMapsAddress
}

func (f *FormWidget) GetFormWidgetRecaptcha() *FormWidgetRecaptcha {
	if f == nil {
		return nil
	}
	return f.FormWidgetRecaptcha
}

func (f *FormWidget) UnmarshalJSON(data []byte) error {
	valueFormWidgetAuth0VerifiableCredentials := new(FormWidgetAuth0VerifiableCredentials)
	if err := json.Unmarshal(data, &valueFormWidgetAuth0VerifiableCredentials); err == nil {
		f.typ = "FormWidgetAuth0VerifiableCredentials"
		f.FormWidgetAuth0VerifiableCredentials = valueFormWidgetAuth0VerifiableCredentials
		return nil
	}
	valueFormWidgetGMapsAddress := new(FormWidgetGMapsAddress)
	if err := json.Unmarshal(data, &valueFormWidgetGMapsAddress); err == nil {
		f.typ = "FormWidgetGMapsAddress"
		f.FormWidgetGMapsAddress = valueFormWidgetGMapsAddress
		return nil
	}
	valueFormWidgetRecaptcha := new(FormWidgetRecaptcha)
	if err := json.Unmarshal(data, &valueFormWidgetRecaptcha); err == nil {
		f.typ = "FormWidgetRecaptcha"
		f.FormWidgetRecaptcha = valueFormWidgetRecaptcha
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FormWidget) MarshalJSON() ([]byte, error) {
	if f.typ == "FormWidgetAuth0VerifiableCredentials" || f.FormWidgetAuth0VerifiableCredentials != nil {
		return json.Marshal(f.FormWidgetAuth0VerifiableCredentials)
	}
	if f.typ == "FormWidgetGMapsAddress" || f.FormWidgetGMapsAddress != nil {
		return json.Marshal(f.FormWidgetGMapsAddress)
	}
	if f.typ == "FormWidgetRecaptcha" || f.FormWidgetRecaptcha != nil {
		return json.Marshal(f.FormWidgetRecaptcha)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormWidgetVisitor interface {
	VisitFormWidgetAuth0VerifiableCredentials(*FormWidgetAuth0VerifiableCredentials) error
	VisitFormWidgetGMapsAddress(*FormWidgetGMapsAddress) error
	VisitFormWidgetRecaptcha(*FormWidgetRecaptcha) error
}

func (f *FormWidget) Accept(visitor FormWidgetVisitor) error {
	if f.typ == "FormWidgetAuth0VerifiableCredentials" || f.FormWidgetAuth0VerifiableCredentials != nil {
		return visitor.VisitFormWidgetAuth0VerifiableCredentials(f.FormWidgetAuth0VerifiableCredentials)
	}
	if f.typ == "FormWidgetGMapsAddress" || f.FormWidgetGMapsAddress != nil {
		return visitor.VisitFormWidgetGMapsAddress(f.FormWidgetGMapsAddress)
	}
	if f.typ == "FormWidgetRecaptcha" || f.FormWidgetRecaptcha != nil {
		return visitor.VisitFormWidgetRecaptcha(f.FormWidgetRecaptcha)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FormWidgetAuth0VerifiableCredentials struct {
	ID        string                                        `json:"id" url:"id"`
	Category  FormComponentCategoryWidgetConst              `json:"category" url:"category"`
	Type      FormWidgetTypeAuth0VerifiableCredentialsConst `json:"type" url:"type"`
	Config    *FormWidgetAuth0VerifiableCredentialsConfig   `json:"config" url:"config"`
	Label     *string                                       `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                                       `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                                         `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                                         `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormWidgetAuth0VerifiableCredentials) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormWidgetAuth0VerifiableCredentials) GetConfig() *FormWidgetAuth0VerifiableCredentialsConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormWidgetAuth0VerifiableCredentials) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormWidgetAuth0VerifiableCredentials) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormWidgetAuth0VerifiableCredentials) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormWidgetAuth0VerifiableCredentials) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormWidgetAuth0VerifiableCredentials) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormWidgetAuth0VerifiableCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler FormWidgetAuth0VerifiableCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormWidgetAuth0VerifiableCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormWidgetAuth0VerifiableCredentials) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormWidgetAuth0VerifiableCredentialsConfig struct {
	URL            string   `json:"url" url:"url"`
	Size           *float64 `json:"size,omitempty" url:"size,omitempty"`
	AlternateText  string   `json:"alternate_text" url:"alternate_text"`
	AccessToken    string   `json:"access_token" url:"access_token"`
	VerificationID string   `json:"verification_id" url:"verification_id"`
	MaxWait        *float64 `json:"max_wait,omitempty" url:"max_wait,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetSize() *float64 {
	if f == nil {
		return nil
	}
	return f.Size
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetAlternateText() string {
	if f == nil {
		return ""
	}
	return f.AlternateText
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetAccessToken() string {
	if f == nil {
		return ""
	}
	return f.AccessToken
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetVerificationID() string {
	if f == nil {
		return ""
	}
	return f.VerificationID
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetMaxWait() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxWait
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormWidgetAuth0VerifiableCredentialsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormWidgetAuth0VerifiableCredentialsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormWidgetAuth0VerifiableCredentialsConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormWidgetGMapsAddress struct {
	ID        string                           `json:"id" url:"id"`
	Category  FormComponentCategoryWidgetConst `json:"category" url:"category"`
	Type      FormWidgetTypeGMapsAddressConst  `json:"type" url:"type"`
	Config    *FormWidgetGMapsAddressConfig    `json:"config" url:"config"`
	Label     *string                          `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                          `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                            `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                            `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormWidgetGMapsAddress) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormWidgetGMapsAddress) GetConfig() *FormWidgetGMapsAddressConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormWidgetGMapsAddress) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormWidgetGMapsAddress) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormWidgetGMapsAddress) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormWidgetGMapsAddress) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormWidgetGMapsAddress) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormWidgetGMapsAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler FormWidgetGMapsAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormWidgetGMapsAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormWidgetGMapsAddress) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormWidgetGMapsAddressConfig struct {
	APIKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormWidgetGMapsAddressConfig) GetAPIKey() string {
	if f == nil {
		return ""
	}
	return f.APIKey
}

func (f *FormWidgetGMapsAddressConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormWidgetGMapsAddressConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormWidgetGMapsAddressConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormWidgetGMapsAddressConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormWidgetGMapsAddressConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormWidgetRecaptcha struct {
	ID        string                           `json:"id" url:"id"`
	Category  FormComponentCategoryWidgetConst `json:"category" url:"category"`
	Type      FormWidgetTypeRecaptchaConst     `json:"type" url:"type"`
	Config    *FormWidgetRecaptchaConfig       `json:"config" url:"config"`
	Label     *string                          `json:"label,omitempty" url:"label,omitempty"`
	Hint      *string                          `json:"hint,omitempty" url:"hint,omitempty"`
	Required  *bool                            `json:"required,omitempty" url:"required,omitempty"`
	Sensitive *bool                            `json:"sensitive,omitempty" url:"sensitive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormWidgetRecaptcha) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FormWidgetRecaptcha) GetConfig() *FormWidgetRecaptchaConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *FormWidgetRecaptcha) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FormWidgetRecaptcha) GetHint() *string {
	if f == nil {
		return nil
	}
	return f.Hint
}

func (f *FormWidgetRecaptcha) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FormWidgetRecaptcha) GetSensitive() *bool {
	if f == nil {
		return nil
	}
	return f.Sensitive
}

func (f *FormWidgetRecaptcha) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormWidgetRecaptcha) UnmarshalJSON(data []byte) error {
	type unmarshaler FormWidgetRecaptcha
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormWidgetRecaptcha(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormWidgetRecaptcha) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormWidgetRecaptchaConfig struct {
	SiteKey   string `json:"site_key" url:"site_key"`
	SecretKey string `json:"secret_key" url:"secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FormWidgetRecaptchaConfig) GetSiteKey() string {
	if f == nil {
		return ""
	}
	return f.SiteKey
}

func (f *FormWidgetRecaptchaConfig) GetSecretKey() string {
	if f == nil {
		return ""
	}
	return f.SecretKey
}

func (f *FormWidgetRecaptchaConfig) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FormWidgetRecaptchaConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler FormWidgetRecaptchaConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FormWidgetRecaptchaConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FormWidgetRecaptchaConfig) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FormWidgetTypeAuth0VerifiableCredentialsConst = string

type FormWidgetTypeGMapsAddressConst = string

type FormWidgetTypeRecaptchaConst = string

type FormsRequestParametersHydrateEnum string

const (
	FormsRequestParametersHydrateEnumFlowCount FormsRequestParametersHydrateEnum = "flow_count"
	FormsRequestParametersHydrateEnumLinks     FormsRequestParametersHydrateEnum = "links"
)

func NewFormsRequestParametersHydrateEnumFromString(s string) (FormsRequestParametersHydrateEnum, error) {
	switch s {
	case "flow_count":
		return FormsRequestParametersHydrateEnumFlowCount, nil
	case "links":
		return FormsRequestParametersHydrateEnumLinks, nil
	}
	var t FormsRequestParametersHydrateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FormsRequestParametersHydrateEnum) Ptr() *FormsRequestParametersHydrateEnum {
	return &f
}

type GetFormResponseContent struct {
	ID           string            `json:"id" url:"id"`
	Name         string            `json:"name" url:"name"`
	Messages     *FormMessages     `json:"messages,omitempty" url:"messages,omitempty"`
	Languages    *FormLanguages    `json:"languages,omitempty" url:"languages,omitempty"`
	Translations *FormTranslations `json:"translations,omitempty" url:"translations,omitempty"`
	Nodes        *FormNodeList     `json:"nodes,omitempty" url:"nodes,omitempty"`
	Start        *FormStartNode    `json:"start,omitempty" url:"start,omitempty"`
	Ending       *FormEndingNode   `json:"ending,omitempty" url:"ending,omitempty"`
	Style        *FormStyle        `json:"style,omitempty" url:"style,omitempty"`
	CreatedAt    time.Time         `json:"created_at" url:"created_at"`
	UpdatedAt    time.Time         `json:"updated_at" url:"updated_at"`
	EmbeddedAt   *string           `json:"embedded_at,omitempty" url:"embedded_at,omitempty"`
	SubmittedAt  *string           `json:"submitted_at,omitempty" url:"submitted_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetFormResponseContent) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetFormResponseContent) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetFormResponseContent) GetMessages() *FormMessages {
	if g == nil {
		return nil
	}
	return g.Messages
}

func (g *GetFormResponseContent) GetLanguages() *FormLanguages {
	if g == nil {
		return nil
	}
	return g.Languages
}

func (g *GetFormResponseContent) GetTranslations() *FormTranslations {
	if g == nil {
		return nil
	}
	return g.Translations
}

func (g *GetFormResponseContent) GetNodes() *FormNodeList {
	if g == nil {
		return nil
	}
	return g.Nodes
}

func (g *GetFormResponseContent) GetStart() *FormStartNode {
	if g == nil {
		return nil
	}
	return g.Start
}

func (g *GetFormResponseContent) GetEnding() *FormEndingNode {
	if g == nil {
		return nil
	}
	return g.Ending
}

func (g *GetFormResponseContent) GetStyle() *FormStyle {
	if g == nil {
		return nil
	}
	return g.Style
}

func (g *GetFormResponseContent) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GetFormResponseContent) GetUpdatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.UpdatedAt
}

func (g *GetFormResponseContent) GetEmbeddedAt() *string {
	if g == nil {
		return nil
	}
	return g.EmbeddedAt
}

func (g *GetFormResponseContent) GetSubmittedAt() *string {
	if g == nil {
		return nil
	}
	return g.SubmittedAt
}

func (g *GetFormResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFormResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetFormResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetFormResponseContent(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFormResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetFormResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewDateTime(g.CreatedAt),
		UpdatedAt: internal.NewDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GetFormResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListFormsOffsetPaginatedResponseContent struct {
	Start *float64       `json:"start,omitempty" url:"start,omitempty"`
	Limit *float64       `json:"limit,omitempty" url:"limit,omitempty"`
	Total *float64       `json:"total,omitempty" url:"total,omitempty"`
	Forms []*FormSummary `json:"forms,omitempty" url:"forms,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListFormsOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListFormsOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListFormsOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListFormsOffsetPaginatedResponseContent) GetForms() []*FormSummary {
	if l == nil {
		return nil
	}
	return l.Forms
}

func (l *ListFormsOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFormsOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFormsOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFormsOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFormsOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateFormResponseContent struct {
	ID           string            `json:"id" url:"id"`
	Name         string            `json:"name" url:"name"`
	Messages     *FormMessages     `json:"messages,omitempty" url:"messages,omitempty"`
	Languages    *FormLanguages    `json:"languages,omitempty" url:"languages,omitempty"`
	Translations *FormTranslations `json:"translations,omitempty" url:"translations,omitempty"`
	Nodes        *FormNodeList     `json:"nodes,omitempty" url:"nodes,omitempty"`
	Start        *FormStartNode    `json:"start,omitempty" url:"start,omitempty"`
	Ending       *FormEndingNode   `json:"ending,omitempty" url:"ending,omitempty"`
	Style        *FormStyle        `json:"style,omitempty" url:"style,omitempty"`
	CreatedAt    time.Time         `json:"created_at" url:"created_at"`
	UpdatedAt    time.Time         `json:"updated_at" url:"updated_at"`
	EmbeddedAt   *string           `json:"embedded_at,omitempty" url:"embedded_at,omitempty"`
	SubmittedAt  *string           `json:"submitted_at,omitempty" url:"submitted_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateFormResponseContent) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateFormResponseContent) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateFormResponseContent) GetMessages() *FormMessages {
	if u == nil {
		return nil
	}
	return u.Messages
}

func (u *UpdateFormResponseContent) GetLanguages() *FormLanguages {
	if u == nil {
		return nil
	}
	return u.Languages
}

func (u *UpdateFormResponseContent) GetTranslations() *FormTranslations {
	if u == nil {
		return nil
	}
	return u.Translations
}

func (u *UpdateFormResponseContent) GetNodes() *FormNodeList {
	if u == nil {
		return nil
	}
	return u.Nodes
}

func (u *UpdateFormResponseContent) GetStart() *FormStartNode {
	if u == nil {
		return nil
	}
	return u.Start
}

func (u *UpdateFormResponseContent) GetEnding() *FormEndingNode {
	if u == nil {
		return nil
	}
	return u.Ending
}

func (u *UpdateFormResponseContent) GetStyle() *FormStyle {
	if u == nil {
		return nil
	}
	return u.Style
}

func (u *UpdateFormResponseContent) GetCreatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.CreatedAt
}

func (u *UpdateFormResponseContent) GetUpdatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.UpdatedAt
}

func (u *UpdateFormResponseContent) GetEmbeddedAt() *string {
	if u == nil {
		return nil
	}
	return u.EmbeddedAt
}

func (u *UpdateFormResponseContent) GetSubmittedAt() *string {
	if u == nil {
		return nil
	}
	return u.SubmittedAt
}

func (u *UpdateFormResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateFormResponseContent) UnmarshalJSON(data []byte) error {
	type embed UpdateFormResponseContent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpdateFormResponseContent(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFormResponseContent) MarshalJSON() ([]byte, error) {
	type embed UpdateFormResponseContent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewDateTime(u.CreatedAt),
		UpdatedAt: internal.NewDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpdateFormResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateFormRequestContent struct {
	Name         *string                   `json:"name,omitempty" url:"-"`
	Messages     *FormMessagesNullable     `json:"messages,omitempty" url:"-"`
	Languages    *FormLanguagesNullable    `json:"languages,omitempty" url:"-"`
	Translations *FormTranslationsNullable `json:"translations,omitempty" url:"-"`
	Nodes        *FormNodeListNullable     `json:"nodes,omitempty" url:"-"`
	Start        *FormStartNodeNullable    `json:"start,omitempty" url:"-"`
	Ending       *FormEndingNodeNullable   `json:"ending,omitempty" url:"-"`
	Style        *FormStyleNullable        `json:"style,omitempty" url:"-"`
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateRuleRequestContent struct {
	// Name of this rule.
	Name string `json:"name" url:"-"`
	// Code to be executed when this rule runs.
	Script string `json:"script" url:"-"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float64 `json:"order,omitempty" url:"-"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"-"`
}

type GetRuleRequestParameters struct {
	// Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
}

type ListRulesRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page.
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Optional filter on whether a rule is enabled (true) or disabled (false).
	Enabled *bool `json:"-" url:"enabled,omitempty"`
	// Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (true) or excluded (false).
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
}

type CreateRuleResponseContent struct {
	// Name of this rule.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// ID of this rule.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this rule runs.
	Script *string `json:"script,omitempty" url:"script,omitempty"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float64 `json:"order,omitempty" url:"order,omitempty"`
	// Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.
	Stage *string `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateRuleResponseContent) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateRuleResponseContent) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CreateRuleResponseContent) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CreateRuleResponseContent) GetScript() *string {
	if c == nil {
		return nil
	}
	return c.Script
}

func (c *CreateRuleResponseContent) GetOrder() *float64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *CreateRuleResponseContent) GetStage() *string {
	if c == nil {
		return nil
	}
	return c.Stage
}

func (c *CreateRuleResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateRuleResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateRuleResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateRuleResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateRuleResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetRuleResponseContent struct {
	// Name of this rule.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// ID of this rule.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this rule runs.
	Script *string `json:"script,omitempty" url:"script,omitempty"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float64 `json:"order,omitempty" url:"order,omitempty"`
	// Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.
	Stage *string `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetRuleResponseContent) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GetRuleResponseContent) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetRuleResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetRuleResponseContent) GetScript() *string {
	if g == nil {
		return nil
	}
	return g.Script
}

func (g *GetRuleResponseContent) GetOrder() *float64 {
	if g == nil {
		return nil
	}
	return g.Order
}

func (g *GetRuleResponseContent) GetStage() *string {
	if g == nil {
		return nil
	}
	return g.Stage
}

func (g *GetRuleResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetRuleResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetRuleResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetRuleResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetRuleResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListRulesOffsetPaginatedResponseContent struct {
	Start *float64 `json:"start,omitempty" url:"start,omitempty"`
	Limit *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	Rules []*Rule  `json:"rules,omitempty" url:"rules,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRulesOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListRulesOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListRulesOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListRulesOffsetPaginatedResponseContent) GetRules() []*Rule {
	if l == nil {
		return nil
	}
	return l.Rules
}

func (l *ListRulesOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRulesOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRulesOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRulesOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRulesOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Rule struct {
	// Name of this rule.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// ID of this rule.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this rule runs.
	Script *string `json:"script,omitempty" url:"script,omitempty"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float64 `json:"order,omitempty" url:"order,omitempty"`
	// Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.
	Stage *string `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Rule) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *Rule) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *Rule) GetEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.Enabled
}

func (r *Rule) GetScript() *string {
	if r == nil {
		return nil
	}
	return r.Script
}

func (r *Rule) GetOrder() *float64 {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *Rule) GetStage() *string {
	if r == nil {
		return nil
	}
	return r.Stage
}

func (r *Rule) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Rule) UnmarshalJSON(data []byte) error {
	type unmarshaler Rule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Rule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Rule) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateRuleResponseContent struct {
	// Name of this rule.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// ID of this rule.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Code to be executed when this rule runs.
	Script *string `json:"script,omitempty" url:"script,omitempty"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float64 `json:"order,omitempty" url:"order,omitempty"`
	// Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.
	Stage *string `json:"stage,omitempty" url:"stage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateRuleResponseContent) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateRuleResponseContent) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpdateRuleResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateRuleResponseContent) GetScript() *string {
	if u == nil {
		return nil
	}
	return u.Script
}

func (u *UpdateRuleResponseContent) GetOrder() *float64 {
	if u == nil {
		return nil
	}
	return u.Order
}

func (u *UpdateRuleResponseContent) GetStage() *string {
	if u == nil {
		return nil
	}
	return u.Stage
}

func (u *UpdateRuleResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateRuleResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateRuleResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateRuleResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateRuleResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateRuleRequestContent struct {
	// Code to be executed when this rule runs.
	Script *string `json:"script,omitempty" url:"-"`
	// Name of this rule.
	Name *string `json:"name,omitempty" url:"-"`
	// Order that this rule should execute in relative to other rules. Lower-valued rules execute first.
	Order *float64 `json:"order,omitempty" url:"-"`
	// Whether the rule is enabled (true), or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"-"`
}

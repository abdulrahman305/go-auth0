// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type ListLogsRequestParameters struct {
	// Page index of the results to return. First page is 0.
	Page *int `json:"-" url:"page,omitempty"`
	// Number of results per page. Paging is disabled if parameter not sent. Default: <code>50</code>. Max value: <code>100</code>
	PerPage *int `json:"-" url:"per_page,omitempty"`
	// Field to use for sorting appended with <code>:1</code>  for ascending and <code>:-1</code> for descending. e.g. <code>date:-1</code>
	Sort *string `json:"-" url:"sort,omitempty"`
	// Comma-separated list of fields to include or exclude (based on value provided for <code>include_fields</code>) in the result. Leave empty to retrieve all fields.
	Fields *string `json:"-" url:"fields,omitempty"`
	// Whether specified fields are to be included (<code>true</code>) or excluded (<code>false</code>)
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
	// Return results as an array when false (default). Return results inside an object that also contains a total result count when true.
	IncludeTotals *bool `json:"-" url:"include_totals,omitempty"`
	// Query in <a target='_new' href ='http://www.lucenetutorial.com/lucene-query-syntax.html'>Lucene query string syntax</a>.
	Q *string `json:"-" url:"q,omitempty"`
}

type GetLogResponseContent struct {
	Date *LogDate `json:"date,omitempty" url:"date,omitempty"`
	// Type of event.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Description of this event.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Name of the connection the event relates to.
	Connection *string `json:"connection,omitempty" url:"connection,omitempty"`
	// ID of the connection the event relates to.
	ConnectionID *string `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	// ID of the client (application).
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// Name of the client (application).
	ClientName *string `json:"client_name,omitempty" url:"client_name,omitempty"`
	// IP address of the log event source.
	IP *string `json:"ip,omitempty" url:"ip,omitempty"`
	// Hostname the event applies to.
	Hostname *string `json:"hostname,omitempty" url:"hostname,omitempty"`
	// ID of the user involved in the event.
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Name of the user involved in the event.
	UserName *string `json:"user_name,omitempty" url:"user_name,omitempty"`
	// API audience the event applies to.
	Audience *string `json:"audience,omitempty" url:"audience,omitempty"`
	// Scope permissions applied to the event.
	Scope *string `json:"scope,omitempty" url:"scope,omitempty"`
	// Name of the strategy involved in the event.
	Strategy *string `json:"strategy,omitempty" url:"strategy,omitempty"`
	// Type of strategy involved in the event.
	StrategyType *string `json:"strategy_type,omitempty" url:"strategy_type,omitempty"`
	// Unique ID of the event.
	LogID *string `json:"log_id,omitempty" url:"log_id,omitempty"`
	// Whether the client was a mobile device (true) or desktop/laptop/server (false).
	IsMobile *bool       `json:"isMobile,omitempty" url:"isMobile,omitempty"`
	Details  *LogDetails `json:"details,omitempty" url:"details,omitempty"`
	// User agent string from the client device that caused the event.
	UserAgent       *string             `json:"user_agent,omitempty" url:"user_agent,omitempty"`
	SecurityContext *LogSecurityContext `json:"security_context,omitempty" url:"security_context,omitempty"`
	LocationInfo    *LogLocationInfo    `json:"location_info,omitempty" url:"location_info,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	rawJSON json.RawMessage
}

func (g *GetLogResponseContent) GetDate() *LogDate {
	if g == nil {
		return nil
	}
	return g.Date
}

func (g *GetLogResponseContent) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetLogResponseContent) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *GetLogResponseContent) GetConnection() *string {
	if g == nil {
		return nil
	}
	return g.Connection
}

func (g *GetLogResponseContent) GetConnectionID() *string {
	if g == nil {
		return nil
	}
	return g.ConnectionID
}

func (g *GetLogResponseContent) GetClientID() *string {
	if g == nil {
		return nil
	}
	return g.ClientID
}

func (g *GetLogResponseContent) GetClientName() *string {
	if g == nil {
		return nil
	}
	return g.ClientName
}

func (g *GetLogResponseContent) GetIP() *string {
	if g == nil {
		return nil
	}
	return g.IP
}

func (g *GetLogResponseContent) GetHostname() *string {
	if g == nil {
		return nil
	}
	return g.Hostname
}

func (g *GetLogResponseContent) GetUserID() *string {
	if g == nil {
		return nil
	}
	return g.UserID
}

func (g *GetLogResponseContent) GetUserName() *string {
	if g == nil {
		return nil
	}
	return g.UserName
}

func (g *GetLogResponseContent) GetAudience() *string {
	if g == nil {
		return nil
	}
	return g.Audience
}

func (g *GetLogResponseContent) GetScope() *string {
	if g == nil {
		return nil
	}
	return g.Scope
}

func (g *GetLogResponseContent) GetStrategy() *string {
	if g == nil {
		return nil
	}
	return g.Strategy
}

func (g *GetLogResponseContent) GetStrategyType() *string {
	if g == nil {
		return nil
	}
	return g.StrategyType
}

func (g *GetLogResponseContent) GetLogID() *string {
	if g == nil {
		return nil
	}
	return g.LogID
}

func (g *GetLogResponseContent) GetIsMobile() *bool {
	if g == nil {
		return nil
	}
	return g.IsMobile
}

func (g *GetLogResponseContent) GetDetails() *LogDetails {
	if g == nil {
		return nil
	}
	return g.Details
}

func (g *GetLogResponseContent) GetUserAgent() *string {
	if g == nil {
		return nil
	}
	return g.UserAgent
}

func (g *GetLogResponseContent) GetSecurityContext() *LogSecurityContext {
	if g == nil {
		return nil
	}
	return g.SecurityContext
}

func (g *GetLogResponseContent) GetLocationInfo() *LogLocationInfo {
	if g == nil {
		return nil
	}
	return g.LocationInfo
}

func (g *GetLogResponseContent) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GetLogResponseContent) UnmarshalJSON(data []byte) error {
	type embed GetLogResponseContent
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetLogResponseContent(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetLogResponseContent) MarshalJSON() ([]byte, error) {
	type embed GetLogResponseContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return internal.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GetLogResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListLogOffsetPaginatedResponseContent struct {
	Start  *float64 `json:"start,omitempty" url:"start,omitempty"`
	Limit  *float64 `json:"limit,omitempty" url:"limit,omitempty"`
	Length *float64 `json:"length,omitempty" url:"length,omitempty"`
	Total  *float64 `json:"total,omitempty" url:"total,omitempty"`
	Logs   []*Log   `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListLogOffsetPaginatedResponseContent) GetStart() *float64 {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListLogOffsetPaginatedResponseContent) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListLogOffsetPaginatedResponseContent) GetLength() *float64 {
	if l == nil {
		return nil
	}
	return l.Length
}

func (l *ListLogOffsetPaginatedResponseContent) GetTotal() *float64 {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *ListLogOffsetPaginatedResponseContent) GetLogs() []*Log {
	if l == nil {
		return nil
	}
	return l.Logs
}

func (l *ListLogOffsetPaginatedResponseContent) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListLogOffsetPaginatedResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ListLogOffsetPaginatedResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListLogOffsetPaginatedResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListLogOffsetPaginatedResponseContent) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Code generated by Fern. DO NOT EDIT.

package management

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/auth0/go-auth0/v2/management/internal"
)

type CreateEmailTemplateRequestContent struct {
	Template EmailTemplateNameEnum `json:"template" url:"-"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"-"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"-"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"-"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"-"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"-"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"-"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"-"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"-"`
}

type SetEmailTemplateRequestContent struct {
	Template EmailTemplateNameEnum `json:"template" url:"-"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"-"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"-"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"-"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"-"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"-"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"-"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"-"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"-"`
}

type CreateEmailTemplateResponseContent struct {
	Template EmailTemplateNameEnum `json:"template" url:"template"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"resultUrl,omitempty"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"syntax,omitempty"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"urlLifetimeInSeconds,omitempty"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"includeEmailInRedirect,omitempty"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateEmailTemplateResponseContent) GetTemplate() EmailTemplateNameEnum {
	if c == nil {
		return ""
	}
	return c.Template
}

func (c *CreateEmailTemplateResponseContent) GetBody() *string {
	if c == nil {
		return nil
	}
	return c.Body
}

func (c *CreateEmailTemplateResponseContent) GetFrom() *string {
	if c == nil {
		return nil
	}
	return c.From
}

func (c *CreateEmailTemplateResponseContent) GetResultURL() *string {
	if c == nil {
		return nil
	}
	return c.ResultURL
}

func (c *CreateEmailTemplateResponseContent) GetSubject() *string {
	if c == nil {
		return nil
	}
	return c.Subject
}

func (c *CreateEmailTemplateResponseContent) GetSyntax() *string {
	if c == nil {
		return nil
	}
	return c.Syntax
}

func (c *CreateEmailTemplateResponseContent) GetURLLifetimeInSeconds() *float64 {
	if c == nil {
		return nil
	}
	return c.URLLifetimeInSeconds
}

func (c *CreateEmailTemplateResponseContent) GetIncludeEmailInRedirect() *bool {
	if c == nil {
		return nil
	}
	return c.IncludeEmailInRedirect
}

func (c *CreateEmailTemplateResponseContent) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CreateEmailTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEmailTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEmailTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateEmailTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEmailTemplateResponseContent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `reset_email_by_code`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `async_approval`, `change_password` (legacy), or `password_reset` (legacy).
type EmailTemplateNameEnum string

const (
	EmailTemplateNameEnumVerifyEmail       EmailTemplateNameEnum = "verify_email"
	EmailTemplateNameEnumVerifyEmailByCode EmailTemplateNameEnum = "verify_email_by_code"
	EmailTemplateNameEnumResetEmail        EmailTemplateNameEnum = "reset_email"
	EmailTemplateNameEnumResetEmailByCode  EmailTemplateNameEnum = "reset_email_by_code"
	EmailTemplateNameEnumWelcomeEmail      EmailTemplateNameEnum = "welcome_email"
	EmailTemplateNameEnumBlockedAccount    EmailTemplateNameEnum = "blocked_account"
	EmailTemplateNameEnumStolenCredentials EmailTemplateNameEnum = "stolen_credentials"
	EmailTemplateNameEnumEnrollmentEmail   EmailTemplateNameEnum = "enrollment_email"
	EmailTemplateNameEnumMfaOobCode        EmailTemplateNameEnum = "mfa_oob_code"
	EmailTemplateNameEnumUserInvitation    EmailTemplateNameEnum = "user_invitation"
	EmailTemplateNameEnumChangePassword    EmailTemplateNameEnum = "change_password"
	EmailTemplateNameEnumPasswordReset     EmailTemplateNameEnum = "password_reset"
	EmailTemplateNameEnumAsyncApproval     EmailTemplateNameEnum = "async_approval"
)

func NewEmailTemplateNameEnumFromString(s string) (EmailTemplateNameEnum, error) {
	switch s {
	case "verify_email":
		return EmailTemplateNameEnumVerifyEmail, nil
	case "verify_email_by_code":
		return EmailTemplateNameEnumVerifyEmailByCode, nil
	case "reset_email":
		return EmailTemplateNameEnumResetEmail, nil
	case "reset_email_by_code":
		return EmailTemplateNameEnumResetEmailByCode, nil
	case "welcome_email":
		return EmailTemplateNameEnumWelcomeEmail, nil
	case "blocked_account":
		return EmailTemplateNameEnumBlockedAccount, nil
	case "stolen_credentials":
		return EmailTemplateNameEnumStolenCredentials, nil
	case "enrollment_email":
		return EmailTemplateNameEnumEnrollmentEmail, nil
	case "mfa_oob_code":
		return EmailTemplateNameEnumMfaOobCode, nil
	case "user_invitation":
		return EmailTemplateNameEnumUserInvitation, nil
	case "change_password":
		return EmailTemplateNameEnumChangePassword, nil
	case "password_reset":
		return EmailTemplateNameEnumPasswordReset, nil
	case "async_approval":
		return EmailTemplateNameEnumAsyncApproval, nil
	}
	var t EmailTemplateNameEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmailTemplateNameEnum) Ptr() *EmailTemplateNameEnum {
	return &e
}

type GetEmailTemplateResponseContent struct {
	Template *EmailTemplateNameEnum `json:"template,omitempty" url:"template,omitempty"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"resultUrl,omitempty"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"syntax,omitempty"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"urlLifetimeInSeconds,omitempty"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"includeEmailInRedirect,omitempty"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEmailTemplateResponseContent) GetTemplate() *EmailTemplateNameEnum {
	if g == nil {
		return nil
	}
	return g.Template
}

func (g *GetEmailTemplateResponseContent) GetBody() *string {
	if g == nil {
		return nil
	}
	return g.Body
}

func (g *GetEmailTemplateResponseContent) GetFrom() *string {
	if g == nil {
		return nil
	}
	return g.From
}

func (g *GetEmailTemplateResponseContent) GetResultURL() *string {
	if g == nil {
		return nil
	}
	return g.ResultURL
}

func (g *GetEmailTemplateResponseContent) GetSubject() *string {
	if g == nil {
		return nil
	}
	return g.Subject
}

func (g *GetEmailTemplateResponseContent) GetSyntax() *string {
	if g == nil {
		return nil
	}
	return g.Syntax
}

func (g *GetEmailTemplateResponseContent) GetURLLifetimeInSeconds() *float64 {
	if g == nil {
		return nil
	}
	return g.URLLifetimeInSeconds
}

func (g *GetEmailTemplateResponseContent) GetIncludeEmailInRedirect() *bool {
	if g == nil {
		return nil
	}
	return g.IncludeEmailInRedirect
}

func (g *GetEmailTemplateResponseContent) GetEnabled() *bool {
	if g == nil {
		return nil
	}
	return g.Enabled
}

func (g *GetEmailTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEmailTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEmailTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEmailTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEmailTemplateResponseContent) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type SetEmailTemplateResponseContent struct {
	Template EmailTemplateNameEnum `json:"template" url:"template"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"resultUrl,omitempty"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"syntax,omitempty"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"urlLifetimeInSeconds,omitempty"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"includeEmailInRedirect,omitempty"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetEmailTemplateResponseContent) GetTemplate() EmailTemplateNameEnum {
	if s == nil {
		return ""
	}
	return s.Template
}

func (s *SetEmailTemplateResponseContent) GetBody() *string {
	if s == nil {
		return nil
	}
	return s.Body
}

func (s *SetEmailTemplateResponseContent) GetFrom() *string {
	if s == nil {
		return nil
	}
	return s.From
}

func (s *SetEmailTemplateResponseContent) GetResultURL() *string {
	if s == nil {
		return nil
	}
	return s.ResultURL
}

func (s *SetEmailTemplateResponseContent) GetSubject() *string {
	if s == nil {
		return nil
	}
	return s.Subject
}

func (s *SetEmailTemplateResponseContent) GetSyntax() *string {
	if s == nil {
		return nil
	}
	return s.Syntax
}

func (s *SetEmailTemplateResponseContent) GetURLLifetimeInSeconds() *float64 {
	if s == nil {
		return nil
	}
	return s.URLLifetimeInSeconds
}

func (s *SetEmailTemplateResponseContent) GetIncludeEmailInRedirect() *bool {
	if s == nil {
		return nil
	}
	return s.IncludeEmailInRedirect
}

func (s *SetEmailTemplateResponseContent) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *SetEmailTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetEmailTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SetEmailTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetEmailTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetEmailTemplateResponseContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateEmailTemplateResponseContent struct {
	Template *EmailTemplateNameEnum `json:"template,omitempty" url:"template,omitempty"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"from,omitempty"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"resultUrl,omitempty"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"syntax,omitempty"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"urlLifetimeInSeconds,omitempty"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"includeEmailInRedirect,omitempty"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEmailTemplateResponseContent) GetTemplate() *EmailTemplateNameEnum {
	if u == nil {
		return nil
	}
	return u.Template
}

func (u *UpdateEmailTemplateResponseContent) GetBody() *string {
	if u == nil {
		return nil
	}
	return u.Body
}

func (u *UpdateEmailTemplateResponseContent) GetFrom() *string {
	if u == nil {
		return nil
	}
	return u.From
}

func (u *UpdateEmailTemplateResponseContent) GetResultURL() *string {
	if u == nil {
		return nil
	}
	return u.ResultURL
}

func (u *UpdateEmailTemplateResponseContent) GetSubject() *string {
	if u == nil {
		return nil
	}
	return u.Subject
}

func (u *UpdateEmailTemplateResponseContent) GetSyntax() *string {
	if u == nil {
		return nil
	}
	return u.Syntax
}

func (u *UpdateEmailTemplateResponseContent) GetURLLifetimeInSeconds() *float64 {
	if u == nil {
		return nil
	}
	return u.URLLifetimeInSeconds
}

func (u *UpdateEmailTemplateResponseContent) GetIncludeEmailInRedirect() *bool {
	if u == nil {
		return nil
	}
	return u.IncludeEmailInRedirect
}

func (u *UpdateEmailTemplateResponseContent) GetEnabled() *bool {
	if u == nil {
		return nil
	}
	return u.Enabled
}

func (u *UpdateEmailTemplateResponseContent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEmailTemplateResponseContent) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEmailTemplateResponseContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEmailTemplateResponseContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEmailTemplateResponseContent) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateEmailTemplateRequestContent struct {
	Template *EmailTemplateNameEnum `json:"template,omitempty" url:"-"`
	// Body of the email template.
	Body *string `json:"body,omitempty" url:"-"`
	// Senders `from` email address.
	From *string `json:"from,omitempty" url:"-"`
	// URL to redirect the user to after a successful action.
	ResultURL *string `json:"resultUrl,omitempty" url:"-"`
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" url:"-"`
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" url:"-"`
	// Lifetime in seconds that the link within the email will be valid for.
	URLLifetimeInSeconds *float64 `json:"urlLifetimeInSeconds,omitempty" url:"-"`
	// Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true.
	IncludeEmailInRedirect *bool `json:"includeEmailInRedirect,omitempty" url:"-"`
	// Whether the template is enabled (true) or disabled (false).
	Enabled *bool `json:"enabled,omitempty" url:"-"`
}
